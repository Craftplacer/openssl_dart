// coverage:ignore-file

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int imaxabs(
    int __n,
  ) {
    return _imaxabs(
      __n,
    );
  }

  late final _imaxabsPtr =
      _lookup<ffi.NativeFunction<intmax_t Function(intmax_t)>>('imaxabs');
  late final _imaxabs = _imaxabsPtr.asFunction<int Function(int)>();

  imaxdiv_t imaxdiv(
    int __numer,
    int __denom,
  ) {
    return _imaxdiv(
      __numer,
      __denom,
    );
  }

  late final _imaxdivPtr =
      _lookup<ffi.NativeFunction<imaxdiv_t Function(intmax_t, intmax_t)>>(
          'imaxdiv');
  late final _imaxdiv = _imaxdivPtr.asFunction<imaxdiv_t Function(int, int)>();

  int strtoimax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoimax');
  late final _strtoimax = _strtoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoumax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoumax');
  late final _strtoumax = _strtoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int wcstoimax(
    ffi.Pointer<__gwchar_t> __nptr,
    ffi.Pointer<ffi.Pointer<__gwchar_t>> __endptr,
    int __base,
  ) {
    return _wcstoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<__gwchar_t>,
              ffi.Pointer<ffi.Pointer<__gwchar_t>>, ffi.Int)>>('wcstoimax');
  late final _wcstoimax = _wcstoimaxPtr.asFunction<
      int Function(ffi.Pointer<__gwchar_t>,
          ffi.Pointer<ffi.Pointer<__gwchar_t>>, int)>();

  int wcstoumax(
    ffi.Pointer<__gwchar_t> __nptr,
    ffi.Pointer<ffi.Pointer<__gwchar_t>> __endptr,
    int __base,
  ) {
    return _wcstoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<__gwchar_t>,
              ffi.Pointer<ffi.Pointer<__gwchar_t>>, ffi.Int)>>('wcstoumax');
  late final _wcstoumax = _wcstoumaxPtr.asFunction<
      int Function(ffi.Pointer<__gwchar_t>,
          ffi.Pointer<ffi.Pointer<__gwchar_t>>, int)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin =
      _lookup<ffi.Pointer<FILE>>('stdin');

  ffi.Pointer<FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout =
      _lookup<ffi.Pointer<FILE>>('stdout');

  ffi.Pointer<FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr =
      _lookup<ffi.Pointer<FILE>>('stderr');

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  int remove(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r = _tmpnam_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked =
      _fflush_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Int> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void setbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vprintf(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vprintf');
  late final _vprintf =
      _vprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    int __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('vdprintf');
  late final _vdprintf =
      _vdprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'vscanf');
  late final _vscanf =
      _vscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    int __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fgetc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int getc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int fgetc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked =
      _fgetc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked =
      _fputc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim = ___getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Int> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked = _fread_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked = _fwrite_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked =
      _clearerr_unlockedPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked =
      _feof_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked =
      _ferror_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked =
      _fileno_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow =
      ___uflowPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow =
      ___overflowPtr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max =
      ___ctype_get_mb_cur_maxPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r = _random_rPtr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r =
      _srandom_rPtr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r = _initstate_rPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r = _setstate_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r = _drand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r = _erand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r =
      _srand48_rPtr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r = _seed48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<int Function()>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf(
      __buf,
      __size,
    );
  }

  late final _arc4random_bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>>('reallocarray');
  late final _reallocarray = _reallocarrayPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int,
              ffi.Int)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Int)>>(
      'aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit = _on_exitPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit(
    int __status,
  ) {
    return _exit(
      __status,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int __status,
  ) {
    return __Exit(
      __status,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv = _clearenvPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstempsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              __compar_fn_t)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              __compar_fn_t)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Double, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.Int> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, ffi.Int)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctombPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.Int> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Int> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  int time(
    ffi.Pointer<time_t> __timer,
  ) {
    return _time(
      __timer,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  double difftime(
    int __time1,
    int __time0,
  ) {
    return _difftime(
      __time1,
      __time0,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  int mktime(
    ffi.Pointer<tm> __tp,
  ) {
    return _mktime(
      __tp,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
  ) {
    return _strftime(
      __s,
      __maxsize,
      __format,
      __tp,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>)>();

  int strftime_l(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
    locale_t __loc,
  ) {
    return _strftime_l(
      __s,
      __maxsize,
      __format,
      __tp,
      __loc,
    );
  }

  late final _strftime_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>, locale_t)>>('strftime_l');
  late final _strftime_l = _strftime_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>, locale_t)>();

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _gmtime(
      __timer,
    );
  }

  late final _gmtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'gmtime');
  late final _gmtime =
      _gmtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _localtime(
      __timer,
    );
  }

  late final _localtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'localtime');
  late final _localtime =
      _localtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _gmtime_r(
      __timer,
      __tp,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _localtime_r(
      __timer,
      __tp,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<tm> __tp,
  ) {
    return _asctime(
      __tp,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> ctime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _ctime(
      __timer,
    );
  }

  late final _ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>>('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<tm> __tp,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _asctime_r(
      __tp,
      __buf,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _ctime_r(
      __timer,
      __buf,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> ___tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('__tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get __tzname => ___tzname.value;

  set __tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      ___tzname.value = value;

  late final ffi.Pointer<ffi.Int> ___daylight = _lookup<ffi.Int>('__daylight');

  int get __daylight => ___daylight.value;

  set __daylight(int value) => ___daylight.value = value;

  late final ffi.Pointer<ffi.Long> ___timezone =
      _lookup<ffi.Long>('__timezone');

  int get __timezone => ___timezone.value;

  set __timezone(int value) => ___timezone.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  late final ffi.Pointer<ffi.Long> _timezone = _lookup<ffi.Long>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  int timegm(
    ffi.Pointer<tm> __tp,
  ) {
    return _timegm(
      __tp,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timelocal(
    ffi.Pointer<tm> __tp,
  ) {
    return _timelocal(
      __tp,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int dysize(
    int __year,
  ) {
    return _dysize(
      __year,
    );
  }

  late final _dysizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dysize');
  late final _dysize = _dysizePtr.asFunction<int Function(int)>();

  int nanosleep(
    ffi.Pointer<timespec> __requested_time,
    ffi.Pointer<timespec> __remaining,
  ) {
    return _nanosleep(
      __requested_time,
      __remaining,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_getres');
  late final _clock_getres =
      _clock_getresPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_gettime');
  late final _clock_gettime =
      _clock_gettimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_settime');
  late final _clock_settime =
      _clock_settimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_nanosleep(
    int __clock_id,
    int __flags,
    ffi.Pointer<timespec> __req,
    ffi.Pointer<timespec> __rem,
  ) {
    return _clock_nanosleep(
      __clock_id,
      __flags,
      __req,
      __rem,
    );
  }

  late final _clock_nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Int, ffi.Pointer<timespec>,
              ffi.Pointer<timespec>)>>('clock_nanosleep');
  late final _clock_nanosleep = _clock_nanosleepPtr.asFunction<
      int Function(int, int, ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getcpuclockid(
    int __pid,
    ffi.Pointer<clockid_t> __clock_id,
  ) {
    return _clock_getcpuclockid(
      __pid,
      __clock_id,
    );
  }

  late final _clock_getcpuclockidPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Pointer<clockid_t>)>>(
      'clock_getcpuclockid');
  late final _clock_getcpuclockid = _clock_getcpuclockidPtr
      .asFunction<int Function(int, ffi.Pointer<clockid_t>)>();

  int timer_create(
    int __clock_id,
    ffi.Pointer<sigevent> __evp,
    ffi.Pointer<timer_t> __timerid,
  ) {
    return _timer_create(
      __clock_id,
      __evp,
      __timerid,
    );
  }

  late final _timer_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<sigevent>,
              ffi.Pointer<timer_t>)>>('timer_create');
  late final _timer_create = _timer_createPtr.asFunction<
      int Function(int, ffi.Pointer<sigevent>, ffi.Pointer<timer_t>)>();

  int timer_delete(
    timer_t __timerid,
  ) {
    return _timer_delete(
      __timerid,
    );
  }

  late final _timer_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>('timer_delete');
  late final _timer_delete =
      _timer_deletePtr.asFunction<int Function(timer_t)>();

  int timer_settime(
    timer_t __timerid,
    int __flags,
    ffi.Pointer<itimerspec> __value,
    ffi.Pointer<itimerspec> __ovalue,
  ) {
    return _timer_settime(
      __timerid,
      __flags,
      __value,
      __ovalue,
    );
  }

  late final _timer_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Int, ffi.Pointer<itimerspec>,
              ffi.Pointer<itimerspec>)>>('timer_settime');
  late final _timer_settime = _timer_settimePtr.asFunction<
      int Function(
          timer_t, int, ffi.Pointer<itimerspec>, ffi.Pointer<itimerspec>)>();

  int timer_gettime(
    timer_t __timerid,
    ffi.Pointer<itimerspec> __value,
  ) {
    return _timer_gettime(
      __timerid,
      __value,
    );
  }

  late final _timer_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Pointer<itimerspec>)>>('timer_gettime');
  late final _timer_gettime = _timer_gettimePtr
      .asFunction<int Function(timer_t, ffi.Pointer<itimerspec>)>();

  int timer_getoverrun(
    timer_t __timerid,
  ) {
    return _timer_getoverrun(
      __timerid,
    );
  }

  late final _timer_getoverrunPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>(
          'timer_getoverrun');
  late final _timer_getoverrun =
      _timer_getoverrunPtr.asFunction<int Function(timer_t)>();

  int timespec_get(
    ffi.Pointer<timespec> __ts,
    int __base,
  ) {
    return _timespec_get(
      __ts,
      __base,
    );
  }

  late final _timespec_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>>(
      'timespec_get');
  late final _timespec_get =
      _timespec_getPtr.asFunction<int Function(ffi.Pointer<timespec>, int)>();

  int OPENSSL_sk_num(
    ffi.Pointer<OPENSSL_STACK> arg0,
  ) {
    return _OPENSSL_sk_num(
      arg0,
    );
  }

  late final _OPENSSL_sk_numPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OPENSSL_STACK>)>>(
          'OPENSSL_sk_num');
  late final _OPENSSL_sk_num =
      _OPENSSL_sk_numPtr.asFunction<int Function(ffi.Pointer<OPENSSL_STACK>)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_value(
    ffi.Pointer<OPENSSL_STACK> arg0,
    int arg1,
  ) {
    return _OPENSSL_sk_value(
      arg0,
      arg1,
    );
  }

  late final _OPENSSL_sk_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OPENSSL_STACK>, ffi.Int)>>('OPENSSL_sk_value');
  late final _OPENSSL_sk_value = _OPENSSL_sk_valuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>, int)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_set(
    ffi.Pointer<OPENSSL_STACK> st,
    int i,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_sk_set(
      st,
      i,
      data,
    );
  }

  late final _OPENSSL_sk_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_set');
  late final _OPENSSL_sk_set = _OPENSSL_sk_setPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<OPENSSL_STACK>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_new(
    OPENSSL_sk_compfunc cmp,
  ) {
    return _OPENSSL_sk_new(
      cmp,
    );
  }

  late final _OPENSSL_sk_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OPENSSL_STACK> Function(
              OPENSSL_sk_compfunc)>>('OPENSSL_sk_new');
  late final _OPENSSL_sk_new = _OPENSSL_sk_newPtr.asFunction<
      ffi.Pointer<OPENSSL_STACK> Function(OPENSSL_sk_compfunc)>();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_new_null() {
    return _OPENSSL_sk_new_null();
  }

  late final _OPENSSL_sk_new_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OPENSSL_STACK> Function()>>(
          'OPENSSL_sk_new_null');
  late final _OPENSSL_sk_new_null = _OPENSSL_sk_new_nullPtr.asFunction<
      ffi.Pointer<OPENSSL_STACK> Function()>();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_new_reserve(
    OPENSSL_sk_compfunc c,
    int n,
  ) {
    return _OPENSSL_sk_new_reserve(
      c,
      n,
    );
  }

  late final _OPENSSL_sk_new_reservePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OPENSSL_STACK> Function(
              OPENSSL_sk_compfunc, ffi.Int)>>('OPENSSL_sk_new_reserve');
  late final _OPENSSL_sk_new_reserve = _OPENSSL_sk_new_reservePtr.asFunction<
      ffi.Pointer<OPENSSL_STACK> Function(OPENSSL_sk_compfunc, int)>();

  int OPENSSL_sk_reserve(
    ffi.Pointer<OPENSSL_STACK> st,
    int n,
  ) {
    return _OPENSSL_sk_reserve(
      st,
      n,
    );
  }

  late final _OPENSSL_sk_reservePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<OPENSSL_STACK>, ffi.Int)>>('OPENSSL_sk_reserve');
  late final _OPENSSL_sk_reserve = _OPENSSL_sk_reservePtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, int)>();

  void OPENSSL_sk_free(
    ffi.Pointer<OPENSSL_STACK> arg0,
  ) {
    return _OPENSSL_sk_free(
      arg0,
    );
  }

  late final _OPENSSL_sk_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OPENSSL_STACK>)>>(
      'OPENSSL_sk_free');
  late final _OPENSSL_sk_free = _OPENSSL_sk_freePtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_STACK>)>();

  void OPENSSL_sk_pop_free(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        func,
  ) {
    return _OPENSSL_sk_pop_free(
      st,
      func,
    );
  }

  late final _OPENSSL_sk_pop_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('OPENSSL_sk_pop_free');
  late final _OPENSSL_sk_pop_free = _OPENSSL_sk_pop_freePtr.asFunction<
      void Function(
          ffi.Pointer<OPENSSL_STACK>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_deep_copy(
    ffi.Pointer<OPENSSL_STACK> arg0,
    OPENSSL_sk_copyfunc c,
    OPENSSL_sk_freefunc f,
  ) {
    return _OPENSSL_sk_deep_copy(
      arg0,
      c,
      f,
    );
  }

  late final _OPENSSL_sk_deep_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OPENSSL_STACK> Function(
              ffi.Pointer<OPENSSL_STACK>,
              OPENSSL_sk_copyfunc,
              OPENSSL_sk_freefunc)>>('OPENSSL_sk_deep_copy');
  late final _OPENSSL_sk_deep_copy = _OPENSSL_sk_deep_copyPtr.asFunction<
      ffi.Pointer<OPENSSL_STACK> Function(ffi.Pointer<OPENSSL_STACK>,
          OPENSSL_sk_copyfunc, OPENSSL_sk_freefunc)>();

  int OPENSSL_sk_insert(
    ffi.Pointer<OPENSSL_STACK> sk,
    ffi.Pointer<ffi.Void> data,
    int where,
  ) {
    return _OPENSSL_sk_insert(
      sk,
      data,
      where,
    );
  }

  late final _OPENSSL_sk_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('OPENSSL_sk_insert');
  late final _OPENSSL_sk_insert = _OPENSSL_sk_insertPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_delete(
    ffi.Pointer<OPENSSL_STACK> st,
    int loc,
  ) {
    return _OPENSSL_sk_delete(
      st,
      loc,
    );
  }

  late final _OPENSSL_sk_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OPENSSL_STACK>, ffi.Int)>>('OPENSSL_sk_delete');
  late final _OPENSSL_sk_delete = _OPENSSL_sk_deletePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>, int)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_delete_ptr(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.Void> p,
  ) {
    return _OPENSSL_sk_delete_ptr(
      st,
      p,
    );
  }

  late final _OPENSSL_sk_delete_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_delete_ptr');
  late final _OPENSSL_sk_delete_ptr = _OPENSSL_sk_delete_ptrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)>();

  int OPENSSL_sk_find(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_sk_find(
      st,
      data,
    );
  }

  late final _OPENSSL_sk_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_find');
  late final _OPENSSL_sk_find = _OPENSSL_sk_findPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)>();

  int OPENSSL_sk_find_ex(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_sk_find_ex(
      st,
      data,
    );
  }

  late final _OPENSSL_sk_find_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_find_ex');
  late final _OPENSSL_sk_find_ex = _OPENSSL_sk_find_exPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)>();

  int OPENSSL_sk_push(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_sk_push(
      st,
      data,
    );
  }

  late final _OPENSSL_sk_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_push');
  late final _OPENSSL_sk_push = _OPENSSL_sk_pushPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)>();

  int OPENSSL_sk_unshift(
    ffi.Pointer<OPENSSL_STACK> st,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_sk_unshift(
      st,
      data,
    );
  }

  late final _OPENSSL_sk_unshiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_STACK>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_sk_unshift');
  late final _OPENSSL_sk_unshift = _OPENSSL_sk_unshiftPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_shift(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_shift(
      st,
    );
  }

  late final _OPENSSL_sk_shiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OPENSSL_STACK>)>>('OPENSSL_sk_shift');
  late final _OPENSSL_sk_shift = _OPENSSL_sk_shiftPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>)>();

  ffi.Pointer<ffi.Void> OPENSSL_sk_pop(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_pop(
      st,
    );
  }

  late final _OPENSSL_sk_popPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<OPENSSL_STACK>)>>('OPENSSL_sk_pop');
  late final _OPENSSL_sk_pop = _OPENSSL_sk_popPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_STACK>)>();

  void OPENSSL_sk_zero(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_zero(
      st,
    );
  }

  late final _OPENSSL_sk_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OPENSSL_STACK>)>>(
      'OPENSSL_sk_zero');
  late final _OPENSSL_sk_zero = _OPENSSL_sk_zeroPtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_STACK>)>();

  OPENSSL_sk_compfunc OPENSSL_sk_set_cmp_func(
    ffi.Pointer<OPENSSL_STACK> sk,
    OPENSSL_sk_compfunc cmp,
  ) {
    return _OPENSSL_sk_set_cmp_func(
      sk,
      cmp,
    );
  }

  late final _OPENSSL_sk_set_cmp_funcPtr = _lookup<
      ffi.NativeFunction<
          OPENSSL_sk_compfunc Function(ffi.Pointer<OPENSSL_STACK>,
              OPENSSL_sk_compfunc)>>('OPENSSL_sk_set_cmp_func');
  late final _OPENSSL_sk_set_cmp_func = _OPENSSL_sk_set_cmp_funcPtr.asFunction<
      OPENSSL_sk_compfunc Function(
          ffi.Pointer<OPENSSL_STACK>, OPENSSL_sk_compfunc)>();

  ffi.Pointer<OPENSSL_STACK> OPENSSL_sk_dup(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_dup(
      st,
    );
  }

  late final _OPENSSL_sk_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OPENSSL_STACK> Function(
              ffi.Pointer<OPENSSL_STACK>)>>('OPENSSL_sk_dup');
  late final _OPENSSL_sk_dup = _OPENSSL_sk_dupPtr.asFunction<
      ffi.Pointer<OPENSSL_STACK> Function(ffi.Pointer<OPENSSL_STACK>)>();

  void OPENSSL_sk_sort(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_sort(
      st,
    );
  }

  late final _OPENSSL_sk_sortPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OPENSSL_STACK>)>>(
      'OPENSSL_sk_sort');
  late final _OPENSSL_sk_sort = _OPENSSL_sk_sortPtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_STACK>)>();

  int OPENSSL_sk_is_sorted(
    ffi.Pointer<OPENSSL_STACK> st,
  ) {
    return _OPENSSL_sk_is_sorted(
      st,
    );
  }

  late final _OPENSSL_sk_is_sortedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OPENSSL_STACK>)>>(
          'OPENSSL_sk_is_sorted');
  late final _OPENSSL_sk_is_sorted = _OPENSSL_sk_is_sortedPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_STACK>)>();

  int ERR_load_CRYPTO_strings() {
    return _ERR_load_CRYPTO_strings();
  }

  late final _ERR_load_CRYPTO_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ERR_load_CRYPTO_strings');
  late final _ERR_load_CRYPTO_strings =
      _ERR_load_CRYPTO_stringsPtr.asFunction<int Function()>();

  ffi.Pointer<CRYPTO_RWLOCK> CRYPTO_THREAD_lock_new() {
    return _CRYPTO_THREAD_lock_new();
  }

  late final _CRYPTO_THREAD_lock_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CRYPTO_RWLOCK> Function()>>(
          'CRYPTO_THREAD_lock_new');
  late final _CRYPTO_THREAD_lock_new = _CRYPTO_THREAD_lock_newPtr.asFunction<
      ffi.Pointer<CRYPTO_RWLOCK> Function()>();

  int CRYPTO_THREAD_read_lock(
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_THREAD_read_lock(
      lock,
    );
  }

  late final _CRYPTO_THREAD_read_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CRYPTO_RWLOCK>)>>(
          'CRYPTO_THREAD_read_lock');
  late final _CRYPTO_THREAD_read_lock = _CRYPTO_THREAD_read_lockPtr.asFunction<
      int Function(ffi.Pointer<CRYPTO_RWLOCK>)>();

  int CRYPTO_THREAD_write_lock(
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_THREAD_write_lock(
      lock,
    );
  }

  late final _CRYPTO_THREAD_write_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CRYPTO_RWLOCK>)>>(
          'CRYPTO_THREAD_write_lock');
  late final _CRYPTO_THREAD_write_lock = _CRYPTO_THREAD_write_lockPtr
      .asFunction<int Function(ffi.Pointer<CRYPTO_RWLOCK>)>();

  int CRYPTO_THREAD_unlock(
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_THREAD_unlock(
      lock,
    );
  }

  late final _CRYPTO_THREAD_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CRYPTO_RWLOCK>)>>(
          'CRYPTO_THREAD_unlock');
  late final _CRYPTO_THREAD_unlock = _CRYPTO_THREAD_unlockPtr.asFunction<
      int Function(ffi.Pointer<CRYPTO_RWLOCK>)>();

  void CRYPTO_THREAD_lock_free(
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_THREAD_lock_free(
      lock,
    );
  }

  late final _CRYPTO_THREAD_lock_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CRYPTO_RWLOCK>)>>(
      'CRYPTO_THREAD_lock_free');
  late final _CRYPTO_THREAD_lock_free = _CRYPTO_THREAD_lock_freePtr.asFunction<
      void Function(ffi.Pointer<CRYPTO_RWLOCK>)>();

  int CRYPTO_atomic_add(
    ffi.Pointer<ffi.Int> val,
    int amount,
    ffi.Pointer<ffi.Int> ret,
    ffi.Pointer<CRYPTO_RWLOCK> lock,
  ) {
    return _CRYPTO_atomic_add(
      val,
      amount,
      ret,
      lock,
    );
  }

  late final _CRYPTO_atomic_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<CRYPTO_RWLOCK>)>>('CRYPTO_atomic_add');
  late final _CRYPTO_atomic_add = _CRYPTO_atomic_addPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<CRYPTO_RWLOCK>)>();

  int CRYPTO_mem_ctrl(
    int mode,
  ) {
    return _CRYPTO_mem_ctrl(
      mode,
    );
  }

  late final _CRYPTO_mem_ctrlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('CRYPTO_mem_ctrl');
  late final _CRYPTO_mem_ctrl =
      _CRYPTO_mem_ctrlPtr.asFunction<int Function(int)>();

  int OPENSSL_strlcpy(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int siz,
  ) {
    return _OPENSSL_strlcpy(
      dst,
      src,
      siz,
    );
  }

  late final _OPENSSL_strlcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('OPENSSL_strlcpy');
  late final _OPENSSL_strlcpy = _OPENSSL_strlcpyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int OPENSSL_strlcat(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int siz,
  ) {
    return _OPENSSL_strlcat(
      dst,
      src,
      siz,
    );
  }

  late final _OPENSSL_strlcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('OPENSSL_strlcat');
  late final _OPENSSL_strlcat = _OPENSSL_strlcatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int OPENSSL_strnlen(
    ffi.Pointer<ffi.Char> str,
    int maxlen,
  ) {
    return _OPENSSL_strnlen(
      str,
      maxlen,
    );
  }

  late final _OPENSSL_strnlenPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'OPENSSL_strnlen');
  late final _OPENSSL_strnlen = _OPENSSL_strnlenPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> OPENSSL_buf2hexstr(
    ffi.Pointer<ffi.UnsignedChar> buffer,
    int len,
  ) {
    return _OPENSSL_buf2hexstr(
      buffer,
      len,
    );
  }

  late final _OPENSSL_buf2hexstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Long)>>('OPENSSL_buf2hexstr');
  late final _OPENSSL_buf2hexstr = _OPENSSL_buf2hexstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ffi.UnsignedChar> OPENSSL_hexstr2buf(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Long> len,
  ) {
    return _OPENSSL_hexstr2buf(
      str,
      len,
    );
  }

  late final _OPENSSL_hexstr2bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>>('OPENSSL_hexstr2buf');
  late final _OPENSSL_hexstr2buf = _OPENSSL_hexstr2bufPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Long>)>();

  int OPENSSL_hexchar2int(
    int c,
  ) {
    return _OPENSSL_hexchar2int(
      c,
    );
  }

  late final _OPENSSL_hexchar2intPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedChar)>>(
          'OPENSSL_hexchar2int');
  late final _OPENSSL_hexchar2int =
      _OPENSSL_hexchar2intPtr.asFunction<int Function(int)>();

  int OpenSSL_version_num() {
    return _OpenSSL_version_num();
  }

  late final _OpenSSL_version_numPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'OpenSSL_version_num');
  late final _OpenSSL_version_num =
      _OpenSSL_version_numPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> OpenSSL_version(
    int type,
  ) {
    return _OpenSSL_version(
      type,
    );
  }

  late final _OpenSSL_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'OpenSSL_version');
  late final _OpenSSL_version =
      _OpenSSL_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int OPENSSL_issetugid() {
    return _OPENSSL_issetugid();
  }

  late final _OPENSSL_issetugidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('OPENSSL_issetugid');
  late final _OPENSSL_issetugid =
      _OPENSSL_issetugidPtr.asFunction<int Function()>();

  int CRYPTO_get_ex_new_index(
    int class_index,
    int argl,
    ffi.Pointer<ffi.Void> argp,
    ffi.Pointer<CRYPTO_EX_new> new_func,
    ffi.Pointer<CRYPTO_EX_dup> dup_func,
    ffi.Pointer<CRYPTO_EX_free> free_func,
  ) {
    return _CRYPTO_get_ex_new_index(
      class_index,
      argl,
      argp,
      new_func,
      dup_func,
      free_func,
    );
  }

  late final _CRYPTO_get_ex_new_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Long,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<CRYPTO_EX_new>,
              ffi.Pointer<CRYPTO_EX_dup>,
              ffi.Pointer<CRYPTO_EX_free>)>>('CRYPTO_get_ex_new_index');
  late final _CRYPTO_get_ex_new_index = _CRYPTO_get_ex_new_indexPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<CRYPTO_EX_new>,
          ffi.Pointer<CRYPTO_EX_dup>, ffi.Pointer<CRYPTO_EX_free>)>();

  int CRYPTO_free_ex_index(
    int class_index,
    int idx,
  ) {
    return _CRYPTO_free_ex_index(
      class_index,
      idx,
    );
  }

  late final _CRYPTO_free_ex_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'CRYPTO_free_ex_index');
  late final _CRYPTO_free_ex_index =
      _CRYPTO_free_ex_indexPtr.asFunction<int Function(int, int)>();

  int CRYPTO_new_ex_data(
    int class_index,
    ffi.Pointer<ffi.Void> obj,
    ffi.Pointer<CRYPTO_EX_DATA> ad,
  ) {
    return _CRYPTO_new_ex_data(
      class_index,
      obj,
      ad,
    );
  }

  late final _CRYPTO_new_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CRYPTO_EX_DATA>)>>('CRYPTO_new_ex_data');
  late final _CRYPTO_new_ex_data = _CRYPTO_new_ex_dataPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<CRYPTO_EX_DATA>)>();

  int CRYPTO_dup_ex_data(
    int class_index,
    ffi.Pointer<CRYPTO_EX_DATA> to,
    ffi.Pointer<CRYPTO_EX_DATA> from,
  ) {
    return _CRYPTO_dup_ex_data(
      class_index,
      to,
      from,
    );
  }

  late final _CRYPTO_dup_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<CRYPTO_EX_DATA>,
              ffi.Pointer<CRYPTO_EX_DATA>)>>('CRYPTO_dup_ex_data');
  late final _CRYPTO_dup_ex_data = _CRYPTO_dup_ex_dataPtr.asFunction<
      int Function(
          int, ffi.Pointer<CRYPTO_EX_DATA>, ffi.Pointer<CRYPTO_EX_DATA>)>();

  void CRYPTO_free_ex_data(
    int class_index,
    ffi.Pointer<ffi.Void> obj,
    ffi.Pointer<CRYPTO_EX_DATA> ad,
  ) {
    return _CRYPTO_free_ex_data(
      class_index,
      obj,
      ad,
    );
  }

  late final _CRYPTO_free_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CRYPTO_EX_DATA>)>>('CRYPTO_free_ex_data');
  late final _CRYPTO_free_ex_data = _CRYPTO_free_ex_dataPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<CRYPTO_EX_DATA>)>();

  int CRYPTO_set_ex_data(
    ffi.Pointer<CRYPTO_EX_DATA> ad,
    int idx,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _CRYPTO_set_ex_data(
      ad,
      idx,
      val,
    );
  }

  late final _CRYPTO_set_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CRYPTO_EX_DATA>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('CRYPTO_set_ex_data');
  late final _CRYPTO_set_ex_data = _CRYPTO_set_ex_dataPtr.asFunction<
      int Function(ffi.Pointer<CRYPTO_EX_DATA>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CRYPTO_get_ex_data(
    ffi.Pointer<CRYPTO_EX_DATA> ad,
    int idx,
  ) {
    return _CRYPTO_get_ex_data(
      ad,
      idx,
    );
  }

  late final _CRYPTO_get_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<CRYPTO_EX_DATA>, ffi.Int)>>('CRYPTO_get_ex_data');
  late final _CRYPTO_get_ex_data = _CRYPTO_get_ex_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<CRYPTO_EX_DATA>, int)>();

  int CRYPTO_set_mem_functions(
    ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>> m,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int,
                    ffi.Pointer<ffi.Char>, ffi.Int)>>
        r,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        f,
  ) {
    return _CRYPTO_set_mem_functions(
      m,
      r,
      f,
    );
  }

  late final _CRYPTO_set_mem_functionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                          ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Int)>>)>>('CRYPTO_set_mem_functions');
  late final _CRYPTO_set_mem_functions =
      _CRYPTO_set_mem_functionsPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                          ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>)>();

  int CRYPTO_set_mem_debug(
    int flag,
  ) {
    return _CRYPTO_set_mem_debug(
      flag,
    );
  }

  late final _CRYPTO_set_mem_debugPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'CRYPTO_set_mem_debug');
  late final _CRYPTO_set_mem_debug =
      _CRYPTO_set_mem_debugPtr.asFunction<int Function(int)>();

  void CRYPTO_get_mem_functions(
    ffi.Pointer<
            ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>>
        m,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                        ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>>
        r,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Char>, ffi.Int)>>>
        f,
  ) {
    return _CRYPTO_get_mem_functions(
      m,
      r,
      f,
    );
  }

  late final _CRYPTO_get_mem_functionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>,
                              ffi.Pointer<ffi.Char>,
                              ffi.Int)>>>)>>('CRYPTO_get_mem_functions');
  late final _CRYPTO_get_mem_functions =
      _CRYPTO_get_mem_functionsPtr.asFunction<
          void Function(
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
                              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>,
                              ffi.Pointer<ffi.Char>, ffi.Int)>>>)>();

  ffi.Pointer<ffi.Void> CRYPTO_malloc(
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_malloc(
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_malloc');
  late final _CRYPTO_malloc = _CRYPTO_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> CRYPTO_zalloc(
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_zalloc(
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_zallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_zalloc');
  late final _CRYPTO_zalloc = _CRYPTO_zallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> CRYPTO_memdup(
    ffi.Pointer<ffi.Void> str,
    int siz,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_memdup(
      str,
      siz,
      file,
      line,
    );
  }

  late final _CRYPTO_memdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_memdup');
  late final _CRYPTO_memdup = _CRYPTO_memdupPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> CRYPTO_strdup(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_strdup(
      str,
      file,
      line,
    );
  }

  late final _CRYPTO_strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_strdup');
  late final _CRYPTO_strdup = _CRYPTO_strdupPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> CRYPTO_strndup(
    ffi.Pointer<ffi.Char> str,
    int s,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_strndup(
      str,
      s,
      file,
      line,
    );
  }

  late final _CRYPTO_strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_strndup');
  late final _CRYPTO_strndup = _CRYPTO_strndupPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  void CRYPTO_free(
    ffi.Pointer<ffi.Void> ptr,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_free(
      ptr,
      file,
      line,
    );
  }

  late final _CRYPTO_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('CRYPTO_free');
  late final _CRYPTO_free = _CRYPTO_freePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  void CRYPTO_clear_free(
    ffi.Pointer<ffi.Void> ptr,
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_clear_free(
      ptr,
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_clear_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_clear_free');
  late final _CRYPTO_clear_free = _CRYPTO_clear_freePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> CRYPTO_realloc(
    ffi.Pointer<ffi.Void> addr,
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_realloc(
      addr,
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_realloc');
  late final _CRYPTO_realloc = _CRYPTO_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> CRYPTO_clear_realloc(
    ffi.Pointer<ffi.Void> addr,
    int old_num,
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_clear_realloc(
      addr,
      old_num,
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_clear_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('CRYPTO_clear_realloc');
  late final _CRYPTO_clear_realloc = _CRYPTO_clear_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Char>, int)>();

  int CRYPTO_secure_malloc_init(
    int sz,
    int minsize,
  ) {
    return _CRYPTO_secure_malloc_init(
      sz,
      minsize,
    );
  }

  late final _CRYPTO_secure_malloc_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'CRYPTO_secure_malloc_init');
  late final _CRYPTO_secure_malloc_init =
      _CRYPTO_secure_malloc_initPtr.asFunction<int Function(int, int)>();

  int CRYPTO_secure_malloc_done() {
    return _CRYPTO_secure_malloc_done();
  }

  late final _CRYPTO_secure_malloc_donePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'CRYPTO_secure_malloc_done');
  late final _CRYPTO_secure_malloc_done =
      _CRYPTO_secure_malloc_donePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> CRYPTO_secure_malloc(
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_secure_malloc(
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_secure_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('CRYPTO_secure_malloc');
  late final _CRYPTO_secure_malloc = _CRYPTO_secure_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> CRYPTO_secure_zalloc(
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_secure_zalloc(
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_secure_zallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('CRYPTO_secure_zalloc');
  late final _CRYPTO_secure_zalloc = _CRYPTO_secure_zallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<ffi.Char>, int)>();

  void CRYPTO_secure_free(
    ffi.Pointer<ffi.Void> ptr,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_secure_free(
      ptr,
      file,
      line,
    );
  }

  late final _CRYPTO_secure_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('CRYPTO_secure_free');
  late final _CRYPTO_secure_free = _CRYPTO_secure_freePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  void CRYPTO_secure_clear_free(
    ffi.Pointer<ffi.Void> ptr,
    int num,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _CRYPTO_secure_clear_free(
      ptr,
      num,
      file,
      line,
    );
  }

  late final _CRYPTO_secure_clear_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('CRYPTO_secure_clear_free');
  late final _CRYPTO_secure_clear_free =
      _CRYPTO_secure_clear_freePtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  int CRYPTO_secure_allocated(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CRYPTO_secure_allocated(
      ptr,
    );
  }

  late final _CRYPTO_secure_allocatedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'CRYPTO_secure_allocated');
  late final _CRYPTO_secure_allocated = _CRYPTO_secure_allocatedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>)>();

  int CRYPTO_secure_malloc_initialized() {
    return _CRYPTO_secure_malloc_initialized();
  }

  late final _CRYPTO_secure_malloc_initializedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'CRYPTO_secure_malloc_initialized');
  late final _CRYPTO_secure_malloc_initialized =
      _CRYPTO_secure_malloc_initializedPtr.asFunction<int Function()>();

  int CRYPTO_secure_actual_size(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CRYPTO_secure_actual_size(
      ptr,
    );
  }

  late final _CRYPTO_secure_actual_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'CRYPTO_secure_actual_size');
  late final _CRYPTO_secure_actual_size = _CRYPTO_secure_actual_sizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int CRYPTO_secure_used() {
    return _CRYPTO_secure_used();
  }

  late final _CRYPTO_secure_usedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('CRYPTO_secure_used');
  late final _CRYPTO_secure_used =
      _CRYPTO_secure_usedPtr.asFunction<int Function()>();

  void OPENSSL_cleanse(
    ffi.Pointer<ffi.Void> ptr,
    int len,
  ) {
    return _OPENSSL_cleanse(
      ptr,
      len,
    );
  }

  late final _OPENSSL_cleansePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('OPENSSL_cleanse');
  late final _OPENSSL_cleanse = _OPENSSL_cleansePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int)>();

  void OPENSSL_die(
    ffi.Pointer<ffi.Char> assertion,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _OPENSSL_die(
      assertion,
      file,
      line,
    );
  }

  late final _OPENSSL_diePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('OPENSSL_die');
  late final _OPENSSL_die = _OPENSSL_diePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int OPENSSL_isservice() {
    return _OPENSSL_isservice();
  }

  late final _OPENSSL_isservicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('OPENSSL_isservice');
  late final _OPENSSL_isservice =
      _OPENSSL_isservicePtr.asFunction<int Function()>();

  int FIPS_mode() {
    return _FIPS_mode();
  }

  late final _FIPS_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('FIPS_mode');
  late final _FIPS_mode = _FIPS_modePtr.asFunction<int Function()>();

  int FIPS_mode_set(
    int r,
  ) {
    return _FIPS_mode_set(
      r,
    );
  }

  late final _FIPS_mode_setPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('FIPS_mode_set');
  late final _FIPS_mode_set = _FIPS_mode_setPtr.asFunction<int Function(int)>();

  void OPENSSL_init() {
    return _OPENSSL_init();
  }

  late final _OPENSSL_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_init');
  late final _OPENSSL_init = _OPENSSL_initPtr.asFunction<void Function()>();

  void OPENSSL_fork_prepare() {
    return _OPENSSL_fork_prepare();
  }

  late final _OPENSSL_fork_preparePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_fork_prepare');
  late final _OPENSSL_fork_prepare =
      _OPENSSL_fork_preparePtr.asFunction<void Function()>();

  void OPENSSL_fork_parent() {
    return _OPENSSL_fork_parent();
  }

  late final _OPENSSL_fork_parentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_fork_parent');
  late final _OPENSSL_fork_parent =
      _OPENSSL_fork_parentPtr.asFunction<void Function()>();

  void OPENSSL_fork_child() {
    return _OPENSSL_fork_child();
  }

  late final _OPENSSL_fork_childPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_fork_child');
  late final _OPENSSL_fork_child =
      _OPENSSL_fork_childPtr.asFunction<void Function()>();

  ffi.Pointer<tm> OPENSSL_gmtime(
    ffi.Pointer<time_t> timer,
    ffi.Pointer<tm> result,
  ) {
    return _OPENSSL_gmtime(
      timer,
      result,
    );
  }

  late final _OPENSSL_gmtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('OPENSSL_gmtime');
  late final _OPENSSL_gmtime = _OPENSSL_gmtimePtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  int OPENSSL_gmtime_adj(
    ffi.Pointer<tm> tm,
    int offset_day,
    int offset_sec,
  ) {
    return _OPENSSL_gmtime_adj(
      tm,
      offset_day,
      offset_sec,
    );
  }

  late final _OPENSSL_gmtime_adjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<tm>, ffi.Int, ffi.Long)>>('OPENSSL_gmtime_adj');
  late final _OPENSSL_gmtime_adj = _OPENSSL_gmtime_adjPtr.asFunction<
      int Function(ffi.Pointer<tm>, int, int)>();

  int OPENSSL_gmtime_diff(
    ffi.Pointer<ffi.Int> pday,
    ffi.Pointer<ffi.Int> psec,
    ffi.Pointer<tm> from,
    ffi.Pointer<tm> to,
  ) {
    return _OPENSSL_gmtime_diff(
      pday,
      psec,
      from,
      to,
    );
  }

  late final _OPENSSL_gmtime_diffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<tm>, ffi.Pointer<tm>)>>('OPENSSL_gmtime_diff');
  late final _OPENSSL_gmtime_diff = _OPENSSL_gmtime_diffPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Pointer<tm>,
          ffi.Pointer<tm>)>();

  int CRYPTO_memcmp(
    ffi.Pointer<ffi.Void> in_a,
    ffi.Pointer<ffi.Void> in_b,
    int len,
  ) {
    return _CRYPTO_memcmp(
      in_a,
      in_b,
      len,
    );
  }

  late final _CRYPTO_memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('CRYPTO_memcmp');
  late final _CRYPTO_memcmp = _CRYPTO_memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void OPENSSL_cleanup() {
    return _OPENSSL_cleanup();
  }

  late final _OPENSSL_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_cleanup');
  late final _OPENSSL_cleanup =
      _OPENSSL_cleanupPtr.asFunction<void Function()>();

  int OPENSSL_init_crypto(
    int opts,
    ffi.Pointer<OPENSSL_INIT_SETTINGS> settings,
  ) {
    return _OPENSSL_init_crypto(
      opts,
      settings,
    );
  }

  late final _OPENSSL_init_cryptoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Uint64,
              ffi.Pointer<OPENSSL_INIT_SETTINGS>)>>('OPENSSL_init_crypto');
  late final _OPENSSL_init_crypto = _OPENSSL_init_cryptoPtr.asFunction<
      int Function(int, ffi.Pointer<OPENSSL_INIT_SETTINGS>)>();

  int OPENSSL_atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> handler,
  ) {
    return _OPENSSL_atexit(
      handler,
    );
  }

  late final _OPENSSL_atexitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'OPENSSL_atexit');
  late final _OPENSSL_atexit = _OPENSSL_atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  void OPENSSL_thread_stop() {
    return _OPENSSL_thread_stop();
  }

  late final _OPENSSL_thread_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OPENSSL_thread_stop');
  late final _OPENSSL_thread_stop =
      _OPENSSL_thread_stopPtr.asFunction<void Function()>();

  ffi.Pointer<OPENSSL_INIT_SETTINGS> OPENSSL_INIT_new() {
    return _OPENSSL_INIT_new();
  }

  late final _OPENSSL_INIT_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<OPENSSL_INIT_SETTINGS> Function()>>(
      'OPENSSL_INIT_new');
  late final _OPENSSL_INIT_new = _OPENSSL_INIT_newPtr.asFunction<
      ffi.Pointer<OPENSSL_INIT_SETTINGS> Function()>();

  int OPENSSL_INIT_set_config_filename(
    ffi.Pointer<OPENSSL_INIT_SETTINGS> settings,
    ffi.Pointer<ffi.Char> config_filename,
  ) {
    return _OPENSSL_INIT_set_config_filename(
      settings,
      config_filename,
    );
  }

  late final _OPENSSL_INIT_set_config_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_INIT_SETTINGS>,
              ffi.Pointer<ffi.Char>)>>('OPENSSL_INIT_set_config_filename');
  late final _OPENSSL_INIT_set_config_filename =
      _OPENSSL_INIT_set_config_filenamePtr.asFunction<
          int Function(
              ffi.Pointer<OPENSSL_INIT_SETTINGS>, ffi.Pointer<ffi.Char>)>();

  void OPENSSL_INIT_set_config_file_flags(
    ffi.Pointer<OPENSSL_INIT_SETTINGS> settings,
    int flags,
  ) {
    return _OPENSSL_INIT_set_config_file_flags(
      settings,
      flags,
    );
  }

  late final _OPENSSL_INIT_set_config_file_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OPENSSL_INIT_SETTINGS>,
              ffi.UnsignedLong)>>('OPENSSL_INIT_set_config_file_flags');
  late final _OPENSSL_INIT_set_config_file_flags =
      _OPENSSL_INIT_set_config_file_flagsPtr.asFunction<
          void Function(ffi.Pointer<OPENSSL_INIT_SETTINGS>, int)>();

  int OPENSSL_INIT_set_config_appname(
    ffi.Pointer<OPENSSL_INIT_SETTINGS> settings,
    ffi.Pointer<ffi.Char> config_appname,
  ) {
    return _OPENSSL_INIT_set_config_appname(
      settings,
      config_appname,
    );
  }

  late final _OPENSSL_INIT_set_config_appnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OPENSSL_INIT_SETTINGS>,
              ffi.Pointer<ffi.Char>)>>('OPENSSL_INIT_set_config_appname');
  late final _OPENSSL_INIT_set_config_appname =
      _OPENSSL_INIT_set_config_appnamePtr.asFunction<
          int Function(
              ffi.Pointer<OPENSSL_INIT_SETTINGS>, ffi.Pointer<ffi.Char>)>();

  void OPENSSL_INIT_free(
    ffi.Pointer<OPENSSL_INIT_SETTINGS> settings,
  ) {
    return _OPENSSL_INIT_free(
      settings,
    );
  }

  late final _OPENSSL_INIT_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OPENSSL_INIT_SETTINGS>)>>('OPENSSL_INIT_free');
  late final _OPENSSL_INIT_free = _OPENSSL_INIT_freePtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_INIT_SETTINGS>)>();

  int __sched_cpucount(
    int __setsize,
    ffi.Pointer<cpu_set_t> __setp,
  ) {
    return ___sched_cpucount(
      __setsize,
      __setp,
    );
  }

  late final ___sched_cpucountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<cpu_set_t>)>>('__sched_cpucount');
  late final ___sched_cpucount = ___sched_cpucountPtr
      .asFunction<int Function(int, ffi.Pointer<cpu_set_t>)>();

  ffi.Pointer<cpu_set_t> __sched_cpualloc(
    int __count,
  ) {
    return ___sched_cpualloc(
      __count,
    );
  }

  late final ___sched_cpuallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cpu_set_t> Function(ffi.Int)>>(
          '__sched_cpualloc');
  late final ___sched_cpualloc =
      ___sched_cpuallocPtr.asFunction<ffi.Pointer<cpu_set_t> Function(int)>();

  void __sched_cpufree(
    ffi.Pointer<cpu_set_t> __set,
  ) {
    return ___sched_cpufree(
      __set,
    );
  }

  late final ___sched_cpufreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cpu_set_t>)>>(
          '__sched_cpufree');
  late final ___sched_cpufree =
      ___sched_cpufreePtr.asFunction<void Function(ffi.Pointer<cpu_set_t>)>();

  int sched_setparam(
    int __pid,
    ffi.Pointer<sched_param> __param,
  ) {
    return _sched_setparam(
      __pid,
      __param,
    );
  }

  late final _sched_setparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              __pid_t, ffi.Pointer<sched_param>)>>('sched_setparam');
  late final _sched_setparam = _sched_setparamPtr
      .asFunction<int Function(int, ffi.Pointer<sched_param>)>();

  int sched_getparam(
    int __pid,
    ffi.Pointer<sched_param> __param,
  ) {
    return _sched_getparam(
      __pid,
      __param,
    );
  }

  late final _sched_getparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              __pid_t, ffi.Pointer<sched_param>)>>('sched_getparam');
  late final _sched_getparam = _sched_getparamPtr
      .asFunction<int Function(int, ffi.Pointer<sched_param>)>();

  int sched_setscheduler(
    int __pid,
    int __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _sched_setscheduler(
      __pid,
      __policy,
      __param,
    );
  }

  late final _sched_setschedulerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(__pid_t, ffi.Int,
              ffi.Pointer<sched_param>)>>('sched_setscheduler');
  late final _sched_setscheduler = _sched_setschedulerPtr
      .asFunction<int Function(int, int, ffi.Pointer<sched_param>)>();

  int sched_getscheduler(
    int __pid,
  ) {
    return _sched_getscheduler(
      __pid,
    );
  }

  late final _sched_getschedulerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__pid_t)>>(
          'sched_getscheduler');
  late final _sched_getscheduler =
      _sched_getschedulerPtr.asFunction<int Function(int)>();

  int sched_yield() {
    return _sched_yield();
  }

  late final _sched_yieldPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sched_yield');
  late final _sched_yield = _sched_yieldPtr.asFunction<int Function()>();

  int sched_get_priority_max(
    int __algorithm,
  ) {
    return _sched_get_priority_max(
      __algorithm,
    );
  }

  late final _sched_get_priority_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sched_get_priority_max');
  late final _sched_get_priority_max =
      _sched_get_priority_maxPtr.asFunction<int Function(int)>();

  int sched_get_priority_min(
    int __algorithm,
  ) {
    return _sched_get_priority_min(
      __algorithm,
    );
  }

  late final _sched_get_priority_minPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sched_get_priority_min');
  late final _sched_get_priority_min =
      _sched_get_priority_minPtr.asFunction<int Function(int)>();

  int sched_rr_get_interval(
    int __pid,
    ffi.Pointer<timespec> __t,
  ) {
    return _sched_rr_get_interval(
      __pid,
      __t,
    );
  }

  late final _sched_rr_get_intervalPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(__pid_t, ffi.Pointer<timespec>)>>(
      'sched_rr_get_interval');
  late final _sched_rr_get_interval = _sched_rr_get_intervalPtr
      .asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int pthread_create(
    ffi.Pointer<pthread_t> __newthread,
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
        __start_routine,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _pthread_create(
      __newthread,
      __attr,
      __start_routine,
      __arg,
    );
  }

  late final _pthread_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_t>,
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('pthread_create');
  late final _pthread_create = _pthread_createPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_t>,
          ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void pthread_exit(
    ffi.Pointer<ffi.Void> __retval,
  ) {
    return _pthread_exit(
      __retval,
    );
  }

  late final _pthread_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'pthread_exit');
  late final _pthread_exit =
      _pthread_exitPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int pthread_join(
    int __th,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __thread_return,
  ) {
    return _pthread_join(
      __th,
      __thread_return,
    );
  }

  late final _pthread_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_t, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('pthread_join');
  late final _pthread_join = _pthread_joinPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pthread_detach(
    int __th,
  ) {
    return _pthread_detach(
      __th,
    );
  }

  late final _pthread_detachPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
          'pthread_detach');
  late final _pthread_detach =
      _pthread_detachPtr.asFunction<int Function(int)>();

  int pthread_self() {
    return _pthread_self();
  }

  late final _pthread_selfPtr =
      _lookup<ffi.NativeFunction<pthread_t Function()>>('pthread_self');
  late final _pthread_self = _pthread_selfPtr.asFunction<int Function()>();

  int pthread_equal(
    int __thread1,
    int __thread2,
  ) {
    return _pthread_equal(
      __thread1,
      __thread2,
    );
  }

  late final _pthread_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, pthread_t)>>(
          'pthread_equal');
  late final _pthread_equal =
      _pthread_equalPtr.asFunction<int Function(int, int)>();

  int pthread_attr_init(
    ffi.Pointer<pthread_attr_t> __attr,
  ) {
    return _pthread_attr_init(
      __attr,
    );
  }

  late final _pthread_attr_initPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>(
      'pthread_attr_init');
  late final _pthread_attr_init = _pthread_attr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_destroy(
    ffi.Pointer<pthread_attr_t> __attr,
  ) {
    return _pthread_attr_destroy(
      __attr,
    );
  }

  late final _pthread_attr_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>(
      'pthread_attr_destroy');
  late final _pthread_attr_destroy = _pthread_attr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_getdetachstate(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __detachstate,
  ) {
    return _pthread_attr_getdetachstate(
      __attr,
      __detachstate,
    );
  }

  late final _pthread_attr_getdetachstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getdetachstate');
  late final _pthread_attr_getdetachstate =
      _pthread_attr_getdetachstatePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setdetachstate(
    ffi.Pointer<pthread_attr_t> __attr,
    int __detachstate,
  ) {
    return _pthread_attr_setdetachstate(
      __attr,
      __detachstate,
    );
  }

  late final _pthread_attr_setdetachstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setdetachstate');
  late final _pthread_attr_setdetachstate = _pthread_attr_setdetachstatePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getguardsize(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __guardsize,
  ) {
    return _pthread_attr_getguardsize(
      __attr,
      __guardsize,
    );
  }

  late final _pthread_attr_getguardsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getguardsize');
  late final _pthread_attr_getguardsize =
      _pthread_attr_getguardsizePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setguardsize(
    ffi.Pointer<pthread_attr_t> __attr,
    int __guardsize,
  ) {
    return _pthread_attr_setguardsize(
      __attr,
      __guardsize,
    );
  }

  late final _pthread_attr_setguardsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setguardsize');
  late final _pthread_attr_setguardsize = _pthread_attr_setguardsizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getschedparam(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_attr_getschedparam(
      __attr,
      __param,
    );
  }

  late final _pthread_attr_getschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<sched_param>)>>('pthread_attr_getschedparam');
  late final _pthread_attr_getschedparam =
      _pthread_attr_getschedparamPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>();

  int pthread_attr_setschedparam(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_attr_setschedparam(
      __attr,
      __param,
    );
  }

  late final _pthread_attr_setschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<sched_param>)>>('pthread_attr_setschedparam');
  late final _pthread_attr_setschedparam =
      _pthread_attr_setschedparamPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>();

  int pthread_attr_getschedpolicy(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __policy,
  ) {
    return _pthread_attr_getschedpolicy(
      __attr,
      __policy,
    );
  }

  late final _pthread_attr_getschedpolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getschedpolicy');
  late final _pthread_attr_getschedpolicy =
      _pthread_attr_getschedpolicyPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setschedpolicy(
    ffi.Pointer<pthread_attr_t> __attr,
    int __policy,
  ) {
    return _pthread_attr_setschedpolicy(
      __attr,
      __policy,
    );
  }

  late final _pthread_attr_setschedpolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setschedpolicy');
  late final _pthread_attr_setschedpolicy = _pthread_attr_setschedpolicyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getinheritsched(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __inherit,
  ) {
    return _pthread_attr_getinheritsched(
      __attr,
      __inherit,
    );
  }

  late final _pthread_attr_getinheritschedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getinheritsched');
  late final _pthread_attr_getinheritsched =
      _pthread_attr_getinheritschedPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setinheritsched(
    ffi.Pointer<pthread_attr_t> __attr,
    int __inherit,
  ) {
    return _pthread_attr_setinheritsched(
      __attr,
      __inherit,
    );
  }

  late final _pthread_attr_setinheritschedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setinheritsched');
  late final _pthread_attr_setinheritsched = _pthread_attr_setinheritschedPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getscope(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __scope,
  ) {
    return _pthread_attr_getscope(
      __attr,
      __scope,
    );
  }

  late final _pthread_attr_getscopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getscope');
  late final _pthread_attr_getscope = _pthread_attr_getscopePtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setscope(
    ffi.Pointer<pthread_attr_t> __attr,
    int __scope,
  ) {
    return _pthread_attr_setscope(
      __attr,
      __scope,
    );
  }

  late final _pthread_attr_setscopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Int)>>('pthread_attr_setscope');
  late final _pthread_attr_setscope = _pthread_attr_setscopePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getstackaddr(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __stackaddr,
  ) {
    return _pthread_attr_getstackaddr(
      __attr,
      __stackaddr,
    );
  }

  late final _pthread_attr_getstackaddrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'pthread_attr_getstackaddr');
  late final _pthread_attr_getstackaddr =
      _pthread_attr_getstackaddrPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pthread_attr_setstackaddr(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Void> __stackaddr,
  ) {
    return _pthread_attr_setstackaddr(
      __attr,
      __stackaddr,
    );
  }

  late final _pthread_attr_setstackaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Void>)>>('pthread_attr_setstackaddr');
  late final _pthread_attr_setstackaddr =
      _pthread_attr_setstackaddrPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>)>();

  int pthread_attr_getstacksize(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __stacksize,
  ) {
    return _pthread_attr_getstacksize(
      __attr,
      __stacksize,
    );
  }

  late final _pthread_attr_getstacksizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getstacksize');
  late final _pthread_attr_getstacksize =
      _pthread_attr_getstacksizePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setstacksize(
    ffi.Pointer<pthread_attr_t> __attr,
    int __stacksize,
  ) {
    return _pthread_attr_setstacksize(
      __attr,
      __stacksize,
    );
  }

  late final _pthread_attr_setstacksizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setstacksize');
  late final _pthread_attr_setstacksize = _pthread_attr_setstacksizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getstack(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __stackaddr,
    ffi.Pointer<ffi.Int> __stacksize,
  ) {
    return _pthread_attr_getstack(
      __attr,
      __stackaddr,
      __stacksize,
    );
  }

  late final _pthread_attr_getstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getstack');
  late final _pthread_attr_getstack = _pthread_attr_getstackPtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setstack(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Void> __stackaddr,
    int __stacksize,
  ) {
    return _pthread_attr_setstack(
      __attr,
      __stackaddr,
      __stacksize,
    );
  }

  late final _pthread_attr_setstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('pthread_attr_setstack');
  late final _pthread_attr_setstack = _pthread_attr_setstackPtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>, int)>();

  int pthread_setschedparam(
    int __target_thread,
    int __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_setschedparam(
      __target_thread,
      __policy,
      __param,
    );
  }

  late final _pthread_setschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Int,
              ffi.Pointer<sched_param>)>>('pthread_setschedparam');
  late final _pthread_setschedparam = _pthread_setschedparamPtr
      .asFunction<int Function(int, int, ffi.Pointer<sched_param>)>();

  int pthread_getschedparam(
    int __target_thread,
    ffi.Pointer<ffi.Int> __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_getschedparam(
      __target_thread,
      __policy,
      __param,
    );
  }

  late final _pthread_getschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Pointer<ffi.Int>,
              ffi.Pointer<sched_param>)>>('pthread_getschedparam');
  late final _pthread_getschedparam = _pthread_getschedparamPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, ffi.Pointer<sched_param>)>();

  int pthread_setschedprio(
    int __target_thread,
    int __prio,
  ) {
    return _pthread_setschedprio(
      __target_thread,
      __prio,
    );
  }

  late final _pthread_setschedprioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>(
          'pthread_setschedprio');
  late final _pthread_setschedprio =
      _pthread_setschedprioPtr.asFunction<int Function(int, int)>();

  int pthread_once(
    ffi.Pointer<pthread_once_t> __once_control,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __init_routine,
  ) {
    return _pthread_once(
      __once_control,
      __init_routine,
    );
  }

  late final _pthread_oncePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_once_t>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'pthread_once');
  late final _pthread_once = _pthread_oncePtr.asFunction<
      int Function(ffi.Pointer<pthread_once_t>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int pthread_setcancelstate(
    int __state,
    ffi.Pointer<ffi.Int> __oldstate,
  ) {
    return _pthread_setcancelstate(
      __state,
      __oldstate,
    );
  }

  late final _pthread_setcancelstatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'pthread_setcancelstate');
  late final _pthread_setcancelstate = _pthread_setcancelstatePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_setcanceltype(
    int __type,
    ffi.Pointer<ffi.Int> __oldtype,
  ) {
    return _pthread_setcanceltype(
      __type,
      __oldtype,
    );
  }

  late final _pthread_setcanceltypePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'pthread_setcanceltype');
  late final _pthread_setcanceltype = _pthread_setcanceltypePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_cancel(
    int __th,
  ) {
    return _pthread_cancel(
      __th,
    );
  }

  late final _pthread_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
          'pthread_cancel');
  late final _pthread_cancel =
      _pthread_cancelPtr.asFunction<int Function(int)>();

  void pthread_testcancel() {
    return _pthread_testcancel();
  }

  late final _pthread_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pthread_testcancel');
  late final _pthread_testcancel =
      _pthread_testcancelPtr.asFunction<void Function()>();

  void __pthread_register_cancel(
    ffi.Pointer<__pthread_unwind_buf_t> __buf,
  ) {
    return ___pthread_register_cancel(
      __buf,
    );
  }

  late final ___pthread_register_cancelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)>>(
      '__pthread_register_cancel');
  late final ___pthread_register_cancel = ___pthread_register_cancelPtr
      .asFunction<void Function(ffi.Pointer<__pthread_unwind_buf_t>)>();

  void __pthread_unregister_cancel(
    ffi.Pointer<__pthread_unwind_buf_t> __buf,
  ) {
    return ___pthread_unregister_cancel(
      __buf,
    );
  }

  late final ___pthread_unregister_cancelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)>>(
      '__pthread_unregister_cancel');
  late final ___pthread_unregister_cancel = ___pthread_unregister_cancelPtr
      .asFunction<void Function(ffi.Pointer<__pthread_unwind_buf_t>)>();

  void __pthread_unwind_next(
    ffi.Pointer<__pthread_unwind_buf_t> __buf,
  ) {
    return ___pthread_unwind_next(
      __buf,
    );
  }

  late final ___pthread_unwind_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<__pthread_unwind_buf_t>)>>('__pthread_unwind_next');
  late final ___pthread_unwind_next = ___pthread_unwind_nextPtr
      .asFunction<void Function(ffi.Pointer<__pthread_unwind_buf_t>)>();

  int __sigsetjmp(
    ffi.Pointer<__jmp_buf_tag> __env,
    int __savemask,
  ) {
    return ___sigsetjmp(
      __env,
      __savemask,
    );
  }

  late final ___sigsetjmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<__jmp_buf_tag>, ffi.Int)>>('__sigsetjmp');
  late final ___sigsetjmp = ___sigsetjmpPtr
      .asFunction<int Function(ffi.Pointer<__jmp_buf_tag>, int)>();

  int pthread_mutex_init(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<pthread_mutexattr_t> __mutexattr,
  ) {
    return _pthread_mutex_init(
      __mutex,
      __mutexattr,
    );
  }

  late final _pthread_mutex_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<pthread_mutexattr_t>)>>('pthread_mutex_init');
  late final _pthread_mutex_init = _pthread_mutex_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_mutex_t>, ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutex_destroy(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_destroy(
      __mutex,
    );
  }

  late final _pthread_mutex_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_destroy');
  late final _pthread_mutex_destroy = _pthread_mutex_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_trylock(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_trylock(
      __mutex,
    );
  }

  late final _pthread_mutex_trylockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_trylock');
  late final _pthread_mutex_trylock = _pthread_mutex_trylockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_lock(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_lock(
      __mutex,
    );
  }

  late final _pthread_mutex_lockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_lock');
  late final _pthread_mutex_lock = _pthread_mutex_lockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_timedlock(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_mutex_timedlock(
      __mutex,
      __abstime,
    );
  }

  late final _pthread_mutex_timedlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>>('pthread_mutex_timedlock');
  late final _pthread_mutex_timedlock = _pthread_mutex_timedlockPtr.asFunction<
      int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<timespec>)>();

  int pthread_mutex_unlock(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_unlock(
      __mutex,
    );
  }

  late final _pthread_mutex_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_unlock');
  late final _pthread_mutex_unlock = _pthread_mutex_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_getprioceiling(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<ffi.Int> __prioceiling,
  ) {
    return _pthread_mutex_getprioceiling(
      __mutex,
      __prioceiling,
    );
  }

  late final _pthread_mutex_getprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutex_getprioceiling');
  late final _pthread_mutex_getprioceiling =
      _pthread_mutex_getprioceilingPtr.asFunction<
          int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutex_setprioceiling(
    ffi.Pointer<pthread_mutex_t> __mutex,
    int __prioceiling,
    ffi.Pointer<ffi.Int> __old_ceiling,
  ) {
    return _pthread_mutex_setprioceiling(
      __mutex,
      __prioceiling,
      __old_ceiling,
    );
  }

  late final _pthread_mutex_setprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('pthread_mutex_setprioceiling');
  late final _pthread_mutex_setprioceiling =
      _pthread_mutex_setprioceilingPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutex_t>, int, ffi.Pointer<ffi.Int>)>();

  int pthread_mutex_consistent(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_consistent(
      __mutex,
    );
  }

  late final _pthread_mutex_consistentPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_consistent');
  late final _pthread_mutex_consistent = _pthread_mutex_consistentPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutexattr_init(
    ffi.Pointer<pthread_mutexattr_t> __attr,
  ) {
    return _pthread_mutexattr_init(
      __attr,
    );
  }

  late final _pthread_mutexattr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_mutexattr_t>)>>('pthread_mutexattr_init');
  late final _pthread_mutexattr_init = _pthread_mutexattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_destroy(
    ffi.Pointer<pthread_mutexattr_t> __attr,
  ) {
    return _pthread_mutexattr_destroy(
      __attr,
    );
  }

  late final _pthread_mutexattr_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_mutexattr_t>)>>('pthread_mutexattr_destroy');
  late final _pthread_mutexattr_destroy = _pthread_mutexattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_getpshared(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_mutexattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_mutexattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getpshared');
  late final _pthread_mutexattr_getpshared =
      _pthread_mutexattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setpshared(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_mutexattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_mutexattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setpshared');
  late final _pthread_mutexattr_setpshared = _pthread_mutexattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_gettype(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __kind,
  ) {
    return _pthread_mutexattr_gettype(
      __attr,
      __kind,
    );
  }

  late final _pthread_mutexattr_gettypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_gettype');
  late final _pthread_mutexattr_gettype =
      _pthread_mutexattr_gettypePtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_settype(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __kind,
  ) {
    return _pthread_mutexattr_settype(
      __attr,
      __kind,
    );
  }

  late final _pthread_mutexattr_settypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_settype');
  late final _pthread_mutexattr_settype = _pthread_mutexattr_settypePtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getprotocol(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __protocol,
  ) {
    return _pthread_mutexattr_getprotocol(
      __attr,
      __protocol,
    );
  }

  late final _pthread_mutexattr_getprotocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getprotocol');
  late final _pthread_mutexattr_getprotocol =
      _pthread_mutexattr_getprotocolPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setprotocol(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __protocol,
  ) {
    return _pthread_mutexattr_setprotocol(
      __attr,
      __protocol,
    );
  }

  late final _pthread_mutexattr_setprotocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setprotocol');
  late final _pthread_mutexattr_setprotocol = _pthread_mutexattr_setprotocolPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getprioceiling(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __prioceiling,
  ) {
    return _pthread_mutexattr_getprioceiling(
      __attr,
      __prioceiling,
    );
  }

  late final _pthread_mutexattr_getprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getprioceiling');
  late final _pthread_mutexattr_getprioceiling =
      _pthread_mutexattr_getprioceilingPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setprioceiling(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __prioceiling,
  ) {
    return _pthread_mutexattr_setprioceiling(
      __attr,
      __prioceiling,
    );
  }

  late final _pthread_mutexattr_setprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setprioceiling');
  late final _pthread_mutexattr_setprioceiling =
      _pthread_mutexattr_setprioceilingPtr
          .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getrobust(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __robustness,
  ) {
    return _pthread_mutexattr_getrobust(
      __attr,
      __robustness,
    );
  }

  late final _pthread_mutexattr_getrobustPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getrobust');
  late final _pthread_mutexattr_getrobust =
      _pthread_mutexattr_getrobustPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setrobust(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __robustness,
  ) {
    return _pthread_mutexattr_setrobust(
      __attr,
      __robustness,
    );
  }

  late final _pthread_mutexattr_setrobustPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setrobust');
  late final _pthread_mutexattr_setrobust = _pthread_mutexattr_setrobustPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_rwlock_init(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<pthread_rwlockattr_t> __attr,
  ) {
    return _pthread_rwlock_init(
      __rwlock,
      __attr,
    );
  }

  late final _pthread_rwlock_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<pthread_rwlockattr_t>)>>('pthread_rwlock_init');
  late final _pthread_rwlock_init = _pthread_rwlock_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlock_destroy(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_destroy(
      __rwlock,
    );
  }

  late final _pthread_rwlock_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_destroy');
  late final _pthread_rwlock_destroy = _pthread_rwlock_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_rdlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_rdlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_rdlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_rdlock');
  late final _pthread_rwlock_rdlock = _pthread_rwlock_rdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_tryrdlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_tryrdlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_tryrdlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_tryrdlock');
  late final _pthread_rwlock_tryrdlock = _pthread_rwlock_tryrdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_timedrdlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_rwlock_timedrdlock(
      __rwlock,
      __abstime,
    );
  }

  late final _pthread_rwlock_timedrdlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<timespec>)>>('pthread_rwlock_timedrdlock');
  late final _pthread_rwlock_timedrdlock =
      _pthread_rwlock_timedrdlockPtr.asFunction<
          int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>();

  int pthread_rwlock_wrlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_wrlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_wrlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_wrlock');
  late final _pthread_rwlock_wrlock = _pthread_rwlock_wrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_trywrlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_trywrlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_trywrlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_trywrlock');
  late final _pthread_rwlock_trywrlock = _pthread_rwlock_trywrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_timedwrlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_rwlock_timedwrlock(
      __rwlock,
      __abstime,
    );
  }

  late final _pthread_rwlock_timedwrlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<timespec>)>>('pthread_rwlock_timedwrlock');
  late final _pthread_rwlock_timedwrlock =
      _pthread_rwlock_timedwrlockPtr.asFunction<
          int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>();

  int pthread_rwlock_unlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_unlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_unlock');
  late final _pthread_rwlock_unlock = _pthread_rwlock_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlockattr_init(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
  ) {
    return _pthread_rwlockattr_init(
      __attr,
    );
  }

  late final _pthread_rwlockattr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_rwlockattr_t>)>>('pthread_rwlockattr_init');
  late final _pthread_rwlockattr_init = _pthread_rwlockattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_destroy(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
  ) {
    return _pthread_rwlockattr_destroy(
      __attr,
    );
  }

  late final _pthread_rwlockattr_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>>(
      'pthread_rwlockattr_destroy');
  late final _pthread_rwlockattr_destroy = _pthread_rwlockattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_getpshared(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_rwlockattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_rwlockattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_rwlockattr_getpshared');
  late final _pthread_rwlockattr_getpshared =
      _pthread_rwlockattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_rwlockattr_setpshared(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_rwlockattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_rwlockattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Int)>>('pthread_rwlockattr_setpshared');
  late final _pthread_rwlockattr_setpshared = _pthread_rwlockattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>, int)>();

  int pthread_rwlockattr_getkind_np(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    ffi.Pointer<ffi.Int> __pref,
  ) {
    return _pthread_rwlockattr_getkind_np(
      __attr,
      __pref,
    );
  }

  late final _pthread_rwlockattr_getkind_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_rwlockattr_getkind_np');
  late final _pthread_rwlockattr_getkind_np =
      _pthread_rwlockattr_getkind_npPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_rwlockattr_setkind_np(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    int __pref,
  ) {
    return _pthread_rwlockattr_setkind_np(
      __attr,
      __pref,
    );
  }

  late final _pthread_rwlockattr_setkind_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Int)>>('pthread_rwlockattr_setkind_np');
  late final _pthread_rwlockattr_setkind_np = _pthread_rwlockattr_setkind_npPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>, int)>();

  int pthread_cond_init(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_condattr_t> __cond_attr,
  ) {
    return _pthread_cond_init(
      __cond,
      __cond_attr,
    );
  }

  late final _pthread_cond_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_condattr_t>)>>('pthread_cond_init');
  late final _pthread_cond_init = _pthread_cond_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_condattr_t>)>();

  int pthread_cond_destroy(
    ffi.Pointer<pthread_cond_t> __cond,
  ) {
    return _pthread_cond_destroy(
      __cond,
    );
  }

  late final _pthread_cond_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_destroy');
  late final _pthread_cond_destroy = _pthread_cond_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_signal(
    ffi.Pointer<pthread_cond_t> __cond,
  ) {
    return _pthread_cond_signal(
      __cond,
    );
  }

  late final _pthread_cond_signalPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_signal');
  late final _pthread_cond_signal = _pthread_cond_signalPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_broadcast(
    ffi.Pointer<pthread_cond_t> __cond,
  ) {
    return _pthread_cond_broadcast(
      __cond,
    );
  }

  late final _pthread_cond_broadcastPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_broadcast');
  late final _pthread_cond_broadcast = _pthread_cond_broadcastPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_wait(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_cond_wait(
      __cond,
      __mutex,
    );
  }

  late final _pthread_cond_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>)>>('pthread_cond_wait');
  late final _pthread_cond_wait = _pthread_cond_waitPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>)>();

  int pthread_cond_timedwait(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_cond_timedwait(
      __cond,
      __mutex,
      __abstime,
    );
  }

  late final _pthread_cond_timedwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>>('pthread_cond_timedwait');
  late final _pthread_cond_timedwait = _pthread_cond_timedwaitPtr.asFunction<
      int Function(ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>,
          ffi.Pointer<timespec>)>();

  int pthread_condattr_init(
    ffi.Pointer<pthread_condattr_t> __attr,
  ) {
    return _pthread_condattr_init(
      __attr,
    );
  }

  late final _pthread_condattr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_condattr_t>)>>('pthread_condattr_init');
  late final _pthread_condattr_init = _pthread_condattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_destroy(
    ffi.Pointer<pthread_condattr_t> __attr,
  ) {
    return _pthread_condattr_destroy(
      __attr,
    );
  }

  late final _pthread_condattr_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_condattr_t>)>>('pthread_condattr_destroy');
  late final _pthread_condattr_destroy = _pthread_condattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_getpshared(
    ffi.Pointer<pthread_condattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_condattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_condattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_condattr_getpshared');
  late final _pthread_condattr_getpshared =
      _pthread_condattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_condattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_condattr_setpshared(
    ffi.Pointer<pthread_condattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_condattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_condattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Int)>>('pthread_condattr_setpshared');
  late final _pthread_condattr_setpshared = _pthread_condattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>, int)>();

  int pthread_condattr_getclock(
    ffi.Pointer<pthread_condattr_t> __attr,
    ffi.Pointer<__clockid_t> __clock_id,
  ) {
    return _pthread_condattr_getclock(
      __attr,
      __clock_id,
    );
  }

  late final _pthread_condattr_getclockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Pointer<__clockid_t>)>>('pthread_condattr_getclock');
  late final _pthread_condattr_getclock =
      _pthread_condattr_getclockPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_condattr_t>, ffi.Pointer<__clockid_t>)>();

  int pthread_condattr_setclock(
    ffi.Pointer<pthread_condattr_t> __attr,
    int __clock_id,
  ) {
    return _pthread_condattr_setclock(
      __attr,
      __clock_id,
    );
  }

  late final _pthread_condattr_setclockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              __clockid_t)>>('pthread_condattr_setclock');
  late final _pthread_condattr_setclock = _pthread_condattr_setclockPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>, int)>();

  int pthread_barrier_init(
    ffi.Pointer<pthread_barrier_t> __barrier,
    ffi.Pointer<pthread_barrierattr_t> __attr,
    int __count,
  ) {
    return _pthread_barrier_init(
      __barrier,
      __attr,
      __count,
    );
  }

  late final _pthread_barrier_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_barrier_t>,
              ffi.Pointer<pthread_barrierattr_t>,
              ffi.UnsignedInt)>>('pthread_barrier_init');
  late final _pthread_barrier_init = _pthread_barrier_initPtr.asFunction<
      int Function(ffi.Pointer<pthread_barrier_t>,
          ffi.Pointer<pthread_barrierattr_t>, int)>();

  int pthread_barrier_destroy(
    ffi.Pointer<pthread_barrier_t> __barrier,
  ) {
    return _pthread_barrier_destroy(
      __barrier,
    );
  }

  late final _pthread_barrier_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>>(
      'pthread_barrier_destroy');
  late final _pthread_barrier_destroy = _pthread_barrier_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrier_t>)>();

  int pthread_barrier_wait(
    ffi.Pointer<pthread_barrier_t> __barrier,
  ) {
    return _pthread_barrier_wait(
      __barrier,
    );
  }

  late final _pthread_barrier_waitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>>(
      'pthread_barrier_wait');
  late final _pthread_barrier_wait = _pthread_barrier_waitPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrier_t>)>();

  int pthread_barrierattr_init(
    ffi.Pointer<pthread_barrierattr_t> __attr,
  ) {
    return _pthread_barrierattr_init(
      __attr,
    );
  }

  late final _pthread_barrierattr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_barrierattr_t>)>>('pthread_barrierattr_init');
  late final _pthread_barrierattr_init = _pthread_barrierattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>)>();

  int pthread_barrierattr_destroy(
    ffi.Pointer<pthread_barrierattr_t> __attr,
  ) {
    return _pthread_barrierattr_destroy(
      __attr,
    );
  }

  late final _pthread_barrierattr_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>)>>(
      'pthread_barrierattr_destroy');
  late final _pthread_barrierattr_destroy = _pthread_barrierattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>)>();

  int pthread_barrierattr_getpshared(
    ffi.Pointer<pthread_barrierattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_barrierattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_barrierattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_barrierattr_getpshared');
  late final _pthread_barrierattr_getpshared =
      _pthread_barrierattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_barrierattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_barrierattr_setpshared(
    ffi.Pointer<pthread_barrierattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_barrierattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_barrierattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>,
              ffi.Int)>>('pthread_barrierattr_setpshared');
  late final _pthread_barrierattr_setpshared =
      _pthread_barrierattr_setpsharedPtr
          .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>, int)>();

  int pthread_key_create(
    ffi.Pointer<pthread_key_t> __key,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        __destr_function,
  ) {
    return _pthread_key_create(
      __key,
      __destr_function,
    );
  }

  late final _pthread_key_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_key_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('pthread_key_create');
  late final _pthread_key_create = _pthread_key_createPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_key_t>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int pthread_key_delete(
    int __key,
  ) {
    return _pthread_key_delete(
      __key,
    );
  }

  late final _pthread_key_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_key_t)>>(
          'pthread_key_delete');
  late final _pthread_key_delete =
      _pthread_key_deletePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> pthread_getspecific(
    int __key,
  ) {
    return _pthread_getspecific(
      __key,
    );
  }

  late final _pthread_getspecificPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pthread_key_t)>>(
      'pthread_getspecific');
  late final _pthread_getspecific =
      _pthread_getspecificPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int pthread_setspecific(
    int __key,
    ffi.Pointer<ffi.Void> __pointer,
  ) {
    return _pthread_setspecific(
      __key,
      __pointer,
    );
  }

  late final _pthread_setspecificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_key_t, ffi.Pointer<ffi.Void>)>>('pthread_setspecific');
  late final _pthread_setspecific = _pthread_setspecificPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int pthread_getcpuclockid(
    int __thread_id,
    ffi.Pointer<__clockid_t> __clock_id,
  ) {
    return _pthread_getcpuclockid(
      __thread_id,
      __clock_id,
    );
  }

  late final _pthread_getcpuclockidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_t, ffi.Pointer<__clockid_t>)>>('pthread_getcpuclockid');
  late final _pthread_getcpuclockid = _pthread_getcpuclockidPtr
      .asFunction<int Function(int, ffi.Pointer<__clockid_t>)>();

  int pthread_atfork(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __prepare,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __parent,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __child,
  ) {
    return _pthread_atfork(
      __prepare,
      __parent,
      __child,
    );
  }

  late final _pthread_atforkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'pthread_atfork');
  late final _pthread_atfork = _pthread_atforkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int CRYPTO_THREAD_run_once(
    ffi.Pointer<CRYPTO_ONCE> once,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> init,
  ) {
    return _CRYPTO_THREAD_run_once(
      once,
      init,
    );
  }

  late final _CRYPTO_THREAD_run_oncePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<CRYPTO_ONCE>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'CRYPTO_THREAD_run_once');
  late final _CRYPTO_THREAD_run_once = _CRYPTO_THREAD_run_oncePtr.asFunction<
      int Function(ffi.Pointer<CRYPTO_ONCE>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int CRYPTO_THREAD_init_local(
    ffi.Pointer<CRYPTO_THREAD_LOCAL> key,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        cleanup,
  ) {
    return _CRYPTO_THREAD_init_local(
      key,
      cleanup,
    );
  }

  late final _CRYPTO_THREAD_init_localPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<CRYPTO_THREAD_LOCAL>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>(
      'CRYPTO_THREAD_init_local');
  late final _CRYPTO_THREAD_init_local =
      _CRYPTO_THREAD_init_localPtr.asFunction<
          int Function(
              ffi.Pointer<CRYPTO_THREAD_LOCAL>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<ffi.Void> CRYPTO_THREAD_get_local(
    ffi.Pointer<CRYPTO_THREAD_LOCAL> key,
  ) {
    return _CRYPTO_THREAD_get_local(
      key,
    );
  }

  late final _CRYPTO_THREAD_get_localPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<CRYPTO_THREAD_LOCAL>)>>('CRYPTO_THREAD_get_local');
  late final _CRYPTO_THREAD_get_local = _CRYPTO_THREAD_get_localPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<CRYPTO_THREAD_LOCAL>)>();

  int CRYPTO_THREAD_set_local(
    ffi.Pointer<CRYPTO_THREAD_LOCAL> key,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _CRYPTO_THREAD_set_local(
      key,
      val,
    );
  }

  late final _CRYPTO_THREAD_set_localPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CRYPTO_THREAD_LOCAL>,
              ffi.Pointer<ffi.Void>)>>('CRYPTO_THREAD_set_local');
  late final _CRYPTO_THREAD_set_local = _CRYPTO_THREAD_set_localPtr.asFunction<
      int Function(ffi.Pointer<CRYPTO_THREAD_LOCAL>, ffi.Pointer<ffi.Void>)>();

  int CRYPTO_THREAD_cleanup_local(
    ffi.Pointer<CRYPTO_THREAD_LOCAL> key,
  ) {
    return _CRYPTO_THREAD_cleanup_local(
      key,
    );
  }

  late final _CRYPTO_THREAD_cleanup_localPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<CRYPTO_THREAD_LOCAL>)>>(
      'CRYPTO_THREAD_cleanup_local');
  late final _CRYPTO_THREAD_cleanup_local = _CRYPTO_THREAD_cleanup_localPtr
      .asFunction<int Function(ffi.Pointer<CRYPTO_THREAD_LOCAL>)>();

  int CRYPTO_THREAD_get_current_id() {
    return _CRYPTO_THREAD_get_current_id();
  }

  late final _CRYPTO_THREAD_get_current_idPtr =
      _lookup<ffi.NativeFunction<CRYPTO_THREAD_ID Function()>>(
          'CRYPTO_THREAD_get_current_id');
  late final _CRYPTO_THREAD_get_current_id =
      _CRYPTO_THREAD_get_current_idPtr.asFunction<int Function()>();

  int CRYPTO_THREAD_compare_id(
    int a,
    int b,
  ) {
    return _CRYPTO_THREAD_compare_id(
      a,
      b,
    );
  }

  late final _CRYPTO_THREAD_compare_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              CRYPTO_THREAD_ID, CRYPTO_THREAD_ID)>>('CRYPTO_THREAD_compare_id');
  late final _CRYPTO_THREAD_compare_id =
      _CRYPTO_THREAD_compare_idPtr.asFunction<int Function(int, int)>();

  int ERR_load_BIO_strings() {
    return _ERR_load_BIO_strings();
  }

  late final _ERR_load_BIO_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_BIO_strings');
  late final _ERR_load_BIO_strings =
      _ERR_load_BIO_stringsPtr.asFunction<int Function()>();

  int BIO_get_new_index() {
    return _BIO_get_new_index();
  }

  late final _BIO_get_new_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('BIO_get_new_index');
  late final _BIO_get_new_index =
      _BIO_get_new_indexPtr.asFunction<int Function()>();

  void BIO_set_flags(
    ffi.Pointer<BIO> b,
    int flags,
  ) {
    return _BIO_set_flags(
      b,
      flags,
    );
  }

  late final _BIO_set_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_set_flags');
  late final _BIO_set_flags =
      _BIO_set_flagsPtr.asFunction<void Function(ffi.Pointer<BIO>, int)>();

  int BIO_test_flags(
    ffi.Pointer<BIO> b,
    int flags,
  ) {
    return _BIO_test_flags(
      b,
      flags,
    );
  }

  late final _BIO_test_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_test_flags');
  late final _BIO_test_flags =
      _BIO_test_flagsPtr.asFunction<int Function(ffi.Pointer<BIO>, int)>();

  void BIO_clear_flags(
    ffi.Pointer<BIO> b,
    int flags,
  ) {
    return _BIO_clear_flags(
      b,
      flags,
    );
  }

  late final _BIO_clear_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_clear_flags');
  late final _BIO_clear_flags =
      _BIO_clear_flagsPtr.asFunction<void Function(ffi.Pointer<BIO>, int)>();

  BIO_callback_fn BIO_get_callback(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_get_callback(
      b,
    );
  }

  late final _BIO_get_callbackPtr =
      _lookup<ffi.NativeFunction<BIO_callback_fn Function(ffi.Pointer<BIO>)>>(
          'BIO_get_callback');
  late final _BIO_get_callback = _BIO_get_callbackPtr.asFunction<
      BIO_callback_fn Function(ffi.Pointer<BIO>)>();

  void BIO_set_callback(
    ffi.Pointer<BIO> b,
    BIO_callback_fn callback,
  ) {
    return _BIO_set_callback(
      b,
      callback,
    );
  }

  late final _BIO_set_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BIO>, BIO_callback_fn)>>('BIO_set_callback');
  late final _BIO_set_callback = _BIO_set_callbackPtr.asFunction<
      void Function(ffi.Pointer<BIO>, BIO_callback_fn)>();

  BIO_callback_fn_ex BIO_get_callback_ex(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_get_callback_ex(
      b,
    );
  }

  late final _BIO_get_callback_exPtr = _lookup<
          ffi.NativeFunction<BIO_callback_fn_ex Function(ffi.Pointer<BIO>)>>(
      'BIO_get_callback_ex');
  late final _BIO_get_callback_ex = _BIO_get_callback_exPtr.asFunction<
      BIO_callback_fn_ex Function(ffi.Pointer<BIO>)>();

  void BIO_set_callback_ex(
    ffi.Pointer<BIO> b,
    BIO_callback_fn_ex callback,
  ) {
    return _BIO_set_callback_ex(
      b,
      callback,
    );
  }

  late final _BIO_set_callback_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BIO>, BIO_callback_fn_ex)>>('BIO_set_callback_ex');
  late final _BIO_set_callback_ex = _BIO_set_callback_exPtr.asFunction<
      void Function(ffi.Pointer<BIO>, BIO_callback_fn_ex)>();

  ffi.Pointer<ffi.Char> BIO_get_callback_arg(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_get_callback_arg(
      b,
    );
  }

  late final _BIO_get_callback_argPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO>)>>(
      'BIO_get_callback_arg');
  late final _BIO_get_callback_arg = _BIO_get_callback_argPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO>)>();

  void BIO_set_callback_arg(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Char> arg,
  ) {
    return _BIO_set_callback_arg(
      b,
      arg,
    );
  }

  late final _BIO_set_callback_argPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Char>)>>('BIO_set_callback_arg');
  late final _BIO_set_callback_arg = _BIO_set_callback_argPtr.asFunction<
      void Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> BIO_method_name(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_method_name(
      b,
    );
  }

  late final _BIO_method_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO>)>>(
      'BIO_method_name');
  late final _BIO_method_name = _BIO_method_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO>)>();

  int BIO_method_type(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_method_type(
      b,
    );
  }

  late final _BIO_method_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_method_type');
  late final _BIO_method_type =
      _BIO_method_typePtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_ctrl_pending(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_ctrl_pending(
      b,
    );
  }

  late final _BIO_ctrl_pendingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_ctrl_pending');
  late final _BIO_ctrl_pending =
      _BIO_ctrl_pendingPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_ctrl_wpending(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_ctrl_wpending(
      b,
    );
  }

  late final _BIO_ctrl_wpendingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_ctrl_wpending');
  late final _BIO_ctrl_wpending =
      _BIO_ctrl_wpendingPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_ctrl_get_write_guarantee(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_ctrl_get_write_guarantee(
      b,
    );
  }

  late final _BIO_ctrl_get_write_guaranteePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_ctrl_get_write_guarantee');
  late final _BIO_ctrl_get_write_guarantee = _BIO_ctrl_get_write_guaranteePtr
      .asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_ctrl_get_read_request(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_ctrl_get_read_request(
      b,
    );
  }

  late final _BIO_ctrl_get_read_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_ctrl_get_read_request');
  late final _BIO_ctrl_get_read_request = _BIO_ctrl_get_read_requestPtr
      .asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_ctrl_reset_read_request(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_ctrl_reset_read_request(
      b,
    );
  }

  late final _BIO_ctrl_reset_read_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_ctrl_reset_read_request');
  late final _BIO_ctrl_reset_read_request = _BIO_ctrl_reset_read_requestPtr
      .asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_set_ex_data(
    ffi.Pointer<BIO> bio,
    int idx,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _BIO_set_ex_data(
      bio,
      idx,
      data,
    );
  }

  late final _BIO_set_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('BIO_set_ex_data');
  late final _BIO_set_ex_data = _BIO_set_ex_dataPtr.asFunction<
      int Function(ffi.Pointer<BIO>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> BIO_get_ex_data(
    ffi.Pointer<BIO> bio,
    int idx,
  ) {
    return _BIO_get_ex_data(
      bio,
      idx,
    );
  }

  late final _BIO_get_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<BIO>, ffi.Int)>>('BIO_get_ex_data');
  late final _BIO_get_ex_data = _BIO_get_ex_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<BIO>, int)>();

  int BIO_number_read(
    ffi.Pointer<BIO> bio,
  ) {
    return _BIO_number_read(
      bio,
    );
  }

  late final _BIO_number_readPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<BIO>)>>(
          'BIO_number_read');
  late final _BIO_number_read =
      _BIO_number_readPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_number_written(
    ffi.Pointer<BIO> bio,
  ) {
    return _BIO_number_written(
      bio,
    );
  }

  late final _BIO_number_writtenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<BIO>)>>(
          'BIO_number_written');
  late final _BIO_number_written =
      _BIO_number_writtenPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_asn1_set_prefix(
    ffi.Pointer<BIO> b,
    ffi.Pointer<asn1_ps_func> prefix,
    ffi.Pointer<asn1_ps_func> prefix_free,
  ) {
    return _BIO_asn1_set_prefix(
      b,
      prefix,
      prefix_free,
    );
  }

  late final _BIO_asn1_set_prefixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<asn1_ps_func>,
              ffi.Pointer<asn1_ps_func>)>>('BIO_asn1_set_prefix');
  late final _BIO_asn1_set_prefix = _BIO_asn1_set_prefixPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<asn1_ps_func>,
          ffi.Pointer<asn1_ps_func>)>();

  int BIO_asn1_get_prefix(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Pointer<asn1_ps_func>> pprefix,
    ffi.Pointer<ffi.Pointer<asn1_ps_func>> pprefix_free,
  ) {
    return _BIO_asn1_get_prefix(
      b,
      pprefix,
      pprefix_free,
    );
  }

  late final _BIO_asn1_get_prefixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<asn1_ps_func>>,
              ffi.Pointer<ffi.Pointer<asn1_ps_func>>)>>('BIO_asn1_get_prefix');
  late final _BIO_asn1_get_prefix = _BIO_asn1_get_prefixPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<asn1_ps_func>>,
          ffi.Pointer<ffi.Pointer<asn1_ps_func>>)>();

  int BIO_asn1_set_suffix(
    ffi.Pointer<BIO> b,
    ffi.Pointer<asn1_ps_func> suffix,
    ffi.Pointer<asn1_ps_func> suffix_free,
  ) {
    return _BIO_asn1_set_suffix(
      b,
      suffix,
      suffix_free,
    );
  }

  late final _BIO_asn1_set_suffixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<asn1_ps_func>,
              ffi.Pointer<asn1_ps_func>)>>('BIO_asn1_set_suffix');
  late final _BIO_asn1_set_suffix = _BIO_asn1_set_suffixPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<asn1_ps_func>,
          ffi.Pointer<asn1_ps_func>)>();

  int BIO_asn1_get_suffix(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Pointer<asn1_ps_func>> psuffix,
    ffi.Pointer<ffi.Pointer<asn1_ps_func>> psuffix_free,
  ) {
    return _BIO_asn1_get_suffix(
      b,
      psuffix,
      psuffix_free,
    );
  }

  late final _BIO_asn1_get_suffixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<asn1_ps_func>>,
              ffi.Pointer<ffi.Pointer<asn1_ps_func>>)>>('BIO_asn1_get_suffix');
  late final _BIO_asn1_get_suffix = _BIO_asn1_get_suffixPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<asn1_ps_func>>,
          ffi.Pointer<ffi.Pointer<asn1_ps_func>>)>();

  ffi.Pointer<BIO_METHOD> BIO_s_file() {
    return _BIO_s_file();
  }

  late final _BIO_s_filePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_file');
  late final _BIO_s_file =
      _BIO_s_filePtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO> BIO_new_file(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> mode,
  ) {
    return _BIO_new_file(
      filename,
      mode,
    );
  }

  late final _BIO_new_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('BIO_new_file');
  late final _BIO_new_file = _BIO_new_filePtr.asFunction<
      ffi.Pointer<BIO> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<BIO> BIO_new_fp(
    ffi.Pointer<FILE> stream,
    int close_flag,
  ) {
    return _BIO_new_fp(
      stream,
      close_flag,
    );
  }

  late final _BIO_new_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(ffi.Pointer<FILE>, ffi.Int)>>('BIO_new_fp');
  late final _BIO_new_fp = _BIO_new_fpPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<FILE>, int)>();

  ffi.Pointer<BIO> BIO_new(
    ffi.Pointer<BIO_METHOD> type,
  ) {
    return _BIO_new(
      type,
    );
  }

  late final _BIO_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(ffi.Pointer<BIO_METHOD>)>>('BIO_new');
  late final _BIO_new = _BIO_newPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_free(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_free(
      a,
    );
  }

  late final _BIO_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_free');
  late final _BIO_free =
      _BIO_freePtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  void BIO_set_data(
    ffi.Pointer<BIO> a,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _BIO_set_data(
      a,
      ptr,
    );
  }

  late final _BIO_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)>>('BIO_set_data');
  late final _BIO_set_data = _BIO_set_dataPtr.asFunction<
      void Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> BIO_get_data(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_get_data(
      a,
    );
  }

  late final _BIO_get_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<BIO>)>>(
      'BIO_get_data');
  late final _BIO_get_data = _BIO_get_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<BIO>)>();

  void BIO_set_init(
    ffi.Pointer<BIO> a,
    int init,
  ) {
    return _BIO_set_init(
      a,
      init,
    );
  }

  late final _BIO_set_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_set_init');
  late final _BIO_set_init =
      _BIO_set_initPtr.asFunction<void Function(ffi.Pointer<BIO>, int)>();

  int BIO_get_init(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_get_init(
      a,
    );
  }

  late final _BIO_get_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_get_init');
  late final _BIO_get_init =
      _BIO_get_initPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  void BIO_set_shutdown(
    ffi.Pointer<BIO> a,
    int shut,
  ) {
    return _BIO_set_shutdown(
      a,
      shut,
    );
  }

  late final _BIO_set_shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_set_shutdown');
  late final _BIO_set_shutdown =
      _BIO_set_shutdownPtr.asFunction<void Function(ffi.Pointer<BIO>, int)>();

  int BIO_get_shutdown(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_get_shutdown(
      a,
    );
  }

  late final _BIO_get_shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_get_shutdown');
  late final _BIO_get_shutdown =
      _BIO_get_shutdownPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  void BIO_vfree(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_vfree(
      a,
    );
  }

  late final _BIO_vfreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
          'BIO_vfree');
  late final _BIO_vfree =
      _BIO_vfreePtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  int BIO_up_ref(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_up_ref(
      a,
    );
  }

  late final _BIO_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_up_ref');
  late final _BIO_up_ref =
      _BIO_up_refPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int BIO_read(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Void> data,
    int dlen,
  ) {
    return _BIO_read(
      b,
      data,
      dlen,
    );
  }

  late final _BIO_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, ffi.Int)>>('BIO_read');
  late final _BIO_read = _BIO_readPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, int)>();

  int BIO_read_ex(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Void> data,
    int dlen,
    ffi.Pointer<ffi.Int> readbytes,
  ) {
    return _BIO_read_ex(
      b,
      data,
      dlen,
      readbytes,
    );
  }

  late final _BIO_read_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('BIO_read_ex');
  late final _BIO_read_ex = _BIO_read_exPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Int>)>();

  int BIO_gets(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _BIO_gets(
      bp,
      buf,
      size,
    );
  }

  late final _BIO_getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>('BIO_gets');
  late final _BIO_gets = _BIO_getsPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, int)>();

  int BIO_write(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Void> data,
    int dlen,
  ) {
    return _BIO_write(
      b,
      data,
      dlen,
    );
  }

  late final _BIO_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, ffi.Int)>>('BIO_write');
  late final _BIO_write = _BIO_writePtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, int)>();

  int BIO_write_ex(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Void> data,
    int dlen,
    ffi.Pointer<ffi.Int> written,
  ) {
    return _BIO_write_ex(
      b,
      data,
      dlen,
      written,
    );
  }

  late final _BIO_write_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('BIO_write_ex');
  late final _BIO_write_ex = _BIO_write_exPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Int>)>();

  int BIO_puts(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _BIO_puts(
      bp,
      buf,
    );
  }

  late final _BIO_putsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>('BIO_puts');
  late final _BIO_puts = _BIO_putsPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>();

  int BIO_indent(
    ffi.Pointer<BIO> b,
    int indent,
    int max,
  ) {
    return _BIO_indent(
      b,
      indent,
      max,
    );
  }

  late final _BIO_indentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Int, ffi.Int)>>('BIO_indent');
  late final _BIO_indent =
      _BIO_indentPtr.asFunction<int Function(ffi.Pointer<BIO>, int, int)>();

  int BIO_ctrl(
    ffi.Pointer<BIO> bp,
    int cmd,
    int larg,
    ffi.Pointer<ffi.Void> parg,
  ) {
    return _BIO_ctrl(
      bp,
      cmd,
      larg,
      parg,
    );
  }

  late final _BIO_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
              ffi.Pointer<ffi.Void>)>>('BIO_ctrl');
  late final _BIO_ctrl = _BIO_ctrlPtr.asFunction<
      int Function(ffi.Pointer<BIO>, int, int, ffi.Pointer<ffi.Void>)>();

  int BIO_callback_ctrl(
    ffi.Pointer<BIO> b,
    int cmd,
    ffi.Pointer<BIO_info_cb> fp,
  ) {
    return _BIO_callback_ctrl(
      b,
      cmd,
      fp,
    );
  }

  late final _BIO_callback_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<BIO>, ffi.Int,
              ffi.Pointer<BIO_info_cb>)>>('BIO_callback_ctrl');
  late final _BIO_callback_ctrl = _BIO_callback_ctrlPtr.asFunction<
      int Function(ffi.Pointer<BIO>, int, ffi.Pointer<BIO_info_cb>)>();

  ffi.Pointer<ffi.Void> BIO_ptr_ctrl(
    ffi.Pointer<BIO> bp,
    int cmd,
    int larg,
  ) {
    return _BIO_ptr_ctrl(
      bp,
      cmd,
      larg,
    );
  }

  late final _BIO_ptr_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<BIO>, ffi.Int, ffi.Long)>>('BIO_ptr_ctrl');
  late final _BIO_ptr_ctrl = _BIO_ptr_ctrlPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<BIO>, int, int)>();

  int BIO_int_ctrl(
    ffi.Pointer<BIO> bp,
    int cmd,
    int larg,
    int iarg,
  ) {
    return _BIO_int_ctrl(
      bp,
      cmd,
      larg,
      iarg,
    );
  }

  late final _BIO_int_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<BIO>, ffi.Int, ffi.Long, ffi.Int)>>('BIO_int_ctrl');
  late final _BIO_int_ctrl = _BIO_int_ctrlPtr.asFunction<
      int Function(ffi.Pointer<BIO>, int, int, int)>();

  ffi.Pointer<BIO> BIO_push(
    ffi.Pointer<BIO> b,
    ffi.Pointer<BIO> append,
  ) {
    return _BIO_push(
      b,
      append,
    );
  }

  late final _BIO_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
              ffi.Pointer<BIO>, ffi.Pointer<BIO>)>>('BIO_push');
  late final _BIO_push = _BIO_pushPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<BIO>, ffi.Pointer<BIO>)>();

  ffi.Pointer<BIO> BIO_pop(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_pop(
      b,
    );
  }

  late final _BIO_popPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>>(
          'BIO_pop');
  late final _BIO_pop =
      _BIO_popPtr.asFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>();

  void BIO_free_all(
    ffi.Pointer<BIO> a,
  ) {
    return _BIO_free_all(
      a,
    );
  }

  late final _BIO_free_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
          'BIO_free_all');
  late final _BIO_free_all =
      _BIO_free_allPtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  ffi.Pointer<BIO> BIO_find_type(
    ffi.Pointer<BIO> b,
    int bio_type,
  ) {
    return _BIO_find_type(
      b,
      bio_type,
    );
  }

  late final _BIO_find_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
              ffi.Pointer<BIO>, ffi.Int)>>('BIO_find_type');
  late final _BIO_find_type = _BIO_find_typePtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<BIO>, int)>();

  ffi.Pointer<BIO> BIO_next(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_next(
      b,
    );
  }

  late final _BIO_nextPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>>(
          'BIO_next');
  late final _BIO_next =
      _BIO_nextPtr.asFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>();

  void BIO_set_next(
    ffi.Pointer<BIO> b,
    ffi.Pointer<BIO> next,
  ) {
    return _BIO_set_next(
      b,
      next,
    );
  }

  late final _BIO_set_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BIO>, ffi.Pointer<BIO>)>>('BIO_set_next');
  late final _BIO_set_next = _BIO_set_nextPtr.asFunction<
      void Function(ffi.Pointer<BIO>, ffi.Pointer<BIO>)>();

  ffi.Pointer<BIO> BIO_get_retry_BIO(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Int> reason,
  ) {
    return _BIO_get_retry_BIO(
      bio,
      reason,
    );
  }

  late final _BIO_get_retry_BIOPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Int>)>>('BIO_get_retry_BIO');
  late final _BIO_get_retry_BIO = _BIO_get_retry_BIOPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Int>)>();

  int BIO_get_retry_reason(
    ffi.Pointer<BIO> bio,
  ) {
    return _BIO_get_retry_reason(
      bio,
    );
  }

  late final _BIO_get_retry_reasonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'BIO_get_retry_reason');
  late final _BIO_get_retry_reason =
      _BIO_get_retry_reasonPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  void BIO_set_retry_reason(
    ffi.Pointer<BIO> bio,
    int reason,
  ) {
    return _BIO_set_retry_reason(
      bio,
      reason,
    );
  }

  late final _BIO_set_retry_reasonPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>, ffi.Int)>>(
          'BIO_set_retry_reason');
  late final _BIO_set_retry_reason = _BIO_set_retry_reasonPtr.asFunction<
      void Function(ffi.Pointer<BIO>, int)>();

  ffi.Pointer<BIO> BIO_dup_chain(
    ffi.Pointer<BIO> in1,
  ) {
    return _BIO_dup_chain(
      in1,
    );
  }

  late final _BIO_dup_chainPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>>(
          'BIO_dup_chain');
  late final _BIO_dup_chain = _BIO_dup_chainPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<BIO>)>();

  int BIO_nread0(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
  ) {
    return _BIO_nread0(
      bio,
      buf,
    );
  }

  late final _BIO_nread0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('BIO_nread0');
  late final _BIO_nread0 = _BIO_nread0Ptr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int BIO_nread(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
    int num,
  ) {
    return _BIO_nread(
      bio,
      buf,
      num,
    );
  }

  late final _BIO_nreadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('BIO_nread');
  late final _BIO_nread = _BIO_nreadPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int BIO_nwrite0(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
  ) {
    return _BIO_nwrite0(
      bio,
      buf,
    );
  }

  late final _BIO_nwrite0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('BIO_nwrite0');
  late final _BIO_nwrite0 = _BIO_nwrite0Ptr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int BIO_nwrite(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
    int num,
  ) {
    return _BIO_nwrite(
      bio,
      buf,
      num,
    );
  }

  late final _BIO_nwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('BIO_nwrite');
  late final _BIO_nwrite = _BIO_nwritePtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int BIO_debug_callback(
    ffi.Pointer<BIO> bio,
    int cmd,
    ffi.Pointer<ffi.Char> argp,
    int argi,
    int argl,
    int ret,
  ) {
    return _BIO_debug_callback(
      bio,
      cmd,
      argp,
      argi,
      argl,
      ret,
    );
  }

  late final _BIO_debug_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Long, ffi.Long)>>('BIO_debug_callback');
  late final _BIO_debug_callback = _BIO_debug_callbackPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, int, ffi.Pointer<ffi.Char>, int, int, int)>();

  ffi.Pointer<BIO_METHOD> BIO_s_mem() {
    return _BIO_s_mem();
  }

  late final _BIO_s_memPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_mem');
  late final _BIO_s_mem =
      _BIO_s_memPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_secmem() {
    return _BIO_s_secmem();
  }

  late final _BIO_s_secmemPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_secmem');
  late final _BIO_s_secmem =
      _BIO_s_secmemPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO> BIO_new_mem_buf(
    ffi.Pointer<ffi.Void> buf,
    int len,
  ) {
    return _BIO_new_mem_buf(
      buf,
      len,
    );
  }

  late final _BIO_new_mem_bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('BIO_new_mem_buf');
  late final _BIO_new_mem_buf = _BIO_new_mem_bufPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<BIO_METHOD> BIO_s_socket() {
    return _BIO_s_socket();
  }

  late final _BIO_s_socketPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_socket');
  late final _BIO_s_socket =
      _BIO_s_socketPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_connect() {
    return _BIO_s_connect();
  }

  late final _BIO_s_connectPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_connect');
  late final _BIO_s_connect =
      _BIO_s_connectPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_accept() {
    return _BIO_s_accept();
  }

  late final _BIO_s_acceptPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_accept');
  late final _BIO_s_accept =
      _BIO_s_acceptPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_fd() {
    return _BIO_s_fd();
  }

  late final _BIO_s_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_fd');
  late final _BIO_s_fd =
      _BIO_s_fdPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_log() {
    return _BIO_s_log();
  }

  late final _BIO_s_logPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_log');
  late final _BIO_s_log =
      _BIO_s_logPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_bio() {
    return _BIO_s_bio();
  }

  late final _BIO_s_bioPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_bio');
  late final _BIO_s_bio =
      _BIO_s_bioPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_null() {
    return _BIO_s_null();
  }

  late final _BIO_s_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_null');
  late final _BIO_s_null =
      _BIO_s_nullPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_null() {
    return _BIO_f_null();
  }

  late final _BIO_f_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_null');
  late final _BIO_f_null =
      _BIO_f_nullPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_buffer() {
    return _BIO_f_buffer();
  }

  late final _BIO_f_bufferPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_buffer');
  late final _BIO_f_buffer =
      _BIO_f_bufferPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_linebuffer() {
    return _BIO_f_linebuffer();
  }

  late final _BIO_f_linebufferPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_linebuffer');
  late final _BIO_f_linebuffer =
      _BIO_f_linebufferPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_f_nbio_test() {
    return _BIO_f_nbio_test();
  }

  late final _BIO_f_nbio_testPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_f_nbio_test');
  late final _BIO_f_nbio_test =
      _BIO_f_nbio_testPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  ffi.Pointer<BIO_METHOD> BIO_s_datagram() {
    return _BIO_s_datagram();
  }

  late final _BIO_s_datagramPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD> Function()>>(
          'BIO_s_datagram');
  late final _BIO_s_datagram =
      _BIO_s_datagramPtr.asFunction<ffi.Pointer<BIO_METHOD> Function()>();

  int BIO_dgram_non_fatal_error(
    int error,
  ) {
    return _BIO_dgram_non_fatal_error(
      error,
    );
  }

  late final _BIO_dgram_non_fatal_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'BIO_dgram_non_fatal_error');
  late final _BIO_dgram_non_fatal_error =
      _BIO_dgram_non_fatal_errorPtr.asFunction<int Function(int)>();

  ffi.Pointer<BIO> BIO_new_dgram(
    int fd,
    int close_flag,
  ) {
    return _BIO_new_dgram(
      fd,
      close_flag,
    );
  }

  late final _BIO_new_dgramPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Int, ffi.Int)>>(
          'BIO_new_dgram');
  late final _BIO_new_dgram =
      _BIO_new_dgramPtr.asFunction<ffi.Pointer<BIO> Function(int, int)>();

  int BIO_sock_should_retry(
    int i,
  ) {
    return _BIO_sock_should_retry(
      i,
    );
  }

  late final _BIO_sock_should_retryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'BIO_sock_should_retry');
  late final _BIO_sock_should_retry =
      _BIO_sock_should_retryPtr.asFunction<int Function(int)>();

  int BIO_sock_non_fatal_error(
    int error,
  ) {
    return _BIO_sock_non_fatal_error(
      error,
    );
  }

  late final _BIO_sock_non_fatal_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'BIO_sock_non_fatal_error');
  late final _BIO_sock_non_fatal_error =
      _BIO_sock_non_fatal_errorPtr.asFunction<int Function(int)>();

  int BIO_fd_should_retry(
    int i,
  ) {
    return _BIO_fd_should_retry(
      i,
    );
  }

  late final _BIO_fd_should_retryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'BIO_fd_should_retry');
  late final _BIO_fd_should_retry =
      _BIO_fd_should_retryPtr.asFunction<int Function(int)>();

  int BIO_fd_non_fatal_error(
    int error,
  ) {
    return _BIO_fd_non_fatal_error(
      error,
    );
  }

  late final _BIO_fd_non_fatal_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'BIO_fd_non_fatal_error');
  late final _BIO_fd_non_fatal_error =
      _BIO_fd_non_fatal_errorPtr.asFunction<int Function(int)>();

  int BIO_dump_cb(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Void>)>>
        cb,
    ffi.Pointer<ffi.Void> u,
    ffi.Pointer<ffi.Char> s,
    int len,
  ) {
    return _BIO_dump_cb(
      cb,
      u,
      s,
      len,
    );
  }

  late final _BIO_dump_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('BIO_dump_cb');
  late final _BIO_dump_cb = _BIO_dump_cbPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          int)>();

  int BIO_dump_indent_cb(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Void>)>>
        cb,
    ffi.Pointer<ffi.Void> u,
    ffi.Pointer<ffi.Char> s,
    int len,
    int indent,
  ) {
    return _BIO_dump_indent_cb(
      cb,
      u,
      s,
      len,
      indent,
    );
  }

  late final _BIO_dump_indent_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int)>>('BIO_dump_indent_cb');
  late final _BIO_dump_indent_cb = _BIO_dump_indent_cbPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          int,
          int)>();

  int BIO_dump(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Char> bytes,
    int len,
  ) {
    return _BIO_dump(
      b,
      bytes,
      len,
    );
  }

  late final _BIO_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>('BIO_dump');
  late final _BIO_dump = _BIO_dumpPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, int)>();

  int BIO_dump_indent(
    ffi.Pointer<BIO> b,
    ffi.Pointer<ffi.Char> bytes,
    int len,
    int indent,
  ) {
    return _BIO_dump_indent(
      b,
      bytes,
      len,
      indent,
    );
  }

  late final _BIO_dump_indentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('BIO_dump_indent');
  late final _BIO_dump_indent = _BIO_dump_indentPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, int, int)>();

  int BIO_dump_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Char> s,
    int len,
  ) {
    return _BIO_dump_fp(
      fp,
      s,
      len,
    );
  }

  late final _BIO_dump_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('BIO_dump_fp');
  late final _BIO_dump_fp = _BIO_dump_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int BIO_dump_indent_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Char> s,
    int len,
    int indent,
  ) {
    return _BIO_dump_indent_fp(
      fp,
      s,
      len,
      indent,
    );
  }

  late final _BIO_dump_indent_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('BIO_dump_indent_fp');
  late final _BIO_dump_indent_fp = _BIO_dump_indent_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  int BIO_hex_string(
    ffi.Pointer<BIO> out,
    int indent,
    int width,
    ffi.Pointer<ffi.UnsignedChar> data,
    int datalen,
  ) {
    return _BIO_hex_string(
      out,
      indent,
      width,
      data,
      datalen,
    );
  }

  late final _BIO_hex_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('BIO_hex_string');
  late final _BIO_hex_string = _BIO_hex_stringPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, int, int, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<BIO_ADDR> BIO_ADDR_new() {
    return _BIO_ADDR_new();
  }

  late final _BIO_ADDR_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_ADDR> Function()>>(
          'BIO_ADDR_new');
  late final _BIO_ADDR_new =
      _BIO_ADDR_newPtr.asFunction<ffi.Pointer<BIO_ADDR> Function()>();

  int BIO_ADDR_rawmake(
    ffi.Pointer<BIO_ADDR> ap,
    int family,
    ffi.Pointer<ffi.Void> where,
    int wherelen,
    int port,
  ) {
    return _BIO_ADDR_rawmake(
      ap,
      family,
      where,
      wherelen,
      port,
    );
  }

  late final _BIO_ADDR_rawmakePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_ADDR>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.UnsignedShort)>>('BIO_ADDR_rawmake');
  late final _BIO_ADDR_rawmake = _BIO_ADDR_rawmakePtr.asFunction<
      int Function(
          ffi.Pointer<BIO_ADDR>, int, ffi.Pointer<ffi.Void>, int, int)>();

  void BIO_ADDR_free(
    ffi.Pointer<BIO_ADDR> arg0,
  ) {
    return _BIO_ADDR_free(
      arg0,
    );
  }

  late final _BIO_ADDR_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO_ADDR>)>>(
          'BIO_ADDR_free');
  late final _BIO_ADDR_free =
      _BIO_ADDR_freePtr.asFunction<void Function(ffi.Pointer<BIO_ADDR>)>();

  void BIO_ADDR_clear(
    ffi.Pointer<BIO_ADDR> ap,
  ) {
    return _BIO_ADDR_clear(
      ap,
    );
  }

  late final _BIO_ADDR_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO_ADDR>)>>(
          'BIO_ADDR_clear');
  late final _BIO_ADDR_clear =
      _BIO_ADDR_clearPtr.asFunction<void Function(ffi.Pointer<BIO_ADDR>)>();

  int BIO_ADDR_family(
    ffi.Pointer<BIO_ADDR> ap,
  ) {
    return _BIO_ADDR_family(
      ap,
    );
  }

  late final _BIO_ADDR_familyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO_ADDR>)>>(
          'BIO_ADDR_family');
  late final _BIO_ADDR_family =
      _BIO_ADDR_familyPtr.asFunction<int Function(ffi.Pointer<BIO_ADDR>)>();

  int BIO_ADDR_rawaddress(
    ffi.Pointer<BIO_ADDR> ap,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ffi.Int> l,
  ) {
    return _BIO_ADDR_rawaddress(
      ap,
      p,
      l,
    );
  }

  late final _BIO_ADDR_rawaddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO_ADDR>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('BIO_ADDR_rawaddress');
  late final _BIO_ADDR_rawaddress = _BIO_ADDR_rawaddressPtr.asFunction<
      int Function(ffi.Pointer<BIO_ADDR>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int>)>();

  int BIO_ADDR_rawport(
    ffi.Pointer<BIO_ADDR> ap,
  ) {
    return _BIO_ADDR_rawport(
      ap,
    );
  }

  late final _BIO_ADDR_rawportPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(
              ffi.Pointer<BIO_ADDR>)>>('BIO_ADDR_rawport');
  late final _BIO_ADDR_rawport =
      _BIO_ADDR_rawportPtr.asFunction<int Function(ffi.Pointer<BIO_ADDR>)>();

  ffi.Pointer<ffi.Char> BIO_ADDR_hostname_string(
    ffi.Pointer<BIO_ADDR> ap,
    int numeric,
  ) {
    return _BIO_ADDR_hostname_string(
      ap,
      numeric,
    );
  }

  late final _BIO_ADDR_hostname_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_ADDR_hostname_string');
  late final _BIO_ADDR_hostname_string = _BIO_ADDR_hostname_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO_ADDR>, int)>();

  ffi.Pointer<ffi.Char> BIO_ADDR_service_string(
    ffi.Pointer<BIO_ADDR> ap,
    int numeric,
  ) {
    return _BIO_ADDR_service_string(
      ap,
      numeric,
    );
  }

  late final _BIO_ADDR_service_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_ADDR_service_string');
  late final _BIO_ADDR_service_string = _BIO_ADDR_service_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO_ADDR>, int)>();

  ffi.Pointer<ffi.Char> BIO_ADDR_path_string(
    ffi.Pointer<BIO_ADDR> ap,
  ) {
    return _BIO_ADDR_path_string(
      ap,
    );
  }

  late final _BIO_ADDR_path_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<BIO_ADDR>)>>('BIO_ADDR_path_string');
  late final _BIO_ADDR_path_string = _BIO_ADDR_path_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIO_ADDR>)>();

  ffi.Pointer<BIO_ADDRINFO> BIO_ADDRINFO_next(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_next(
      bai,
    );
  }

  late final _BIO_ADDRINFO_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO_ADDRINFO> Function(
              ffi.Pointer<BIO_ADDRINFO>)>>('BIO_ADDRINFO_next');
  late final _BIO_ADDRINFO_next = _BIO_ADDRINFO_nextPtr.asFunction<
      ffi.Pointer<BIO_ADDRINFO> Function(ffi.Pointer<BIO_ADDRINFO>)>();

  int BIO_ADDRINFO_family(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_family(
      bai,
    );
  }

  late final _BIO_ADDRINFO_familyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO_ADDRINFO>)>>(
          'BIO_ADDRINFO_family');
  late final _BIO_ADDRINFO_family = _BIO_ADDRINFO_familyPtr.asFunction<
      int Function(ffi.Pointer<BIO_ADDRINFO>)>();

  int BIO_ADDRINFO_socktype(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_socktype(
      bai,
    );
  }

  late final _BIO_ADDRINFO_socktypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO_ADDRINFO>)>>(
          'BIO_ADDRINFO_socktype');
  late final _BIO_ADDRINFO_socktype = _BIO_ADDRINFO_socktypePtr.asFunction<
      int Function(ffi.Pointer<BIO_ADDRINFO>)>();

  int BIO_ADDRINFO_protocol(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_protocol(
      bai,
    );
  }

  late final _BIO_ADDRINFO_protocolPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO_ADDRINFO>)>>(
          'BIO_ADDRINFO_protocol');
  late final _BIO_ADDRINFO_protocol = _BIO_ADDRINFO_protocolPtr.asFunction<
      int Function(ffi.Pointer<BIO_ADDRINFO>)>();

  ffi.Pointer<BIO_ADDR> BIO_ADDRINFO_address(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_address(
      bai,
    );
  }

  late final _BIO_ADDRINFO_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO_ADDR> Function(
              ffi.Pointer<BIO_ADDRINFO>)>>('BIO_ADDRINFO_address');
  late final _BIO_ADDRINFO_address = _BIO_ADDRINFO_addressPtr.asFunction<
      ffi.Pointer<BIO_ADDR> Function(ffi.Pointer<BIO_ADDRINFO>)>();

  void BIO_ADDRINFO_free(
    ffi.Pointer<BIO_ADDRINFO> bai,
  ) {
    return _BIO_ADDRINFO_free(
      bai,
    );
  }

  late final _BIO_ADDRINFO_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO_ADDRINFO>)>>(
          'BIO_ADDRINFO_free');
  late final _BIO_ADDRINFO_free = _BIO_ADDRINFO_freePtr.asFunction<
      void Function(ffi.Pointer<BIO_ADDRINFO>)>();

  int BIO_parse_hostserv(
    ffi.Pointer<ffi.Char> hostserv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> host,
    ffi.Pointer<ffi.Pointer<ffi.Char>> service,
    int hostserv_prio,
  ) {
    return _BIO_parse_hostserv(
      hostserv,
      host,
      service,
      hostserv_prio,
    );
  }

  late final _BIO_parse_hostservPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int32)>>('BIO_parse_hostserv');
  late final _BIO_parse_hostserv = _BIO_parse_hostservPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int BIO_lookup(
    ffi.Pointer<ffi.Char> host,
    ffi.Pointer<ffi.Char> service,
    int lookup_type,
    int family,
    int socktype,
    ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>> res,
  ) {
    return _BIO_lookup(
      host,
      service,
      lookup_type,
      family,
      socktype,
      res,
    );
  }

  late final _BIO_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>>)>>('BIO_lookup');
  late final _BIO_lookup = _BIO_lookupPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int,
          ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>>)>();

  int BIO_lookup_ex(
    ffi.Pointer<ffi.Char> host,
    ffi.Pointer<ffi.Char> service,
    int lookup_type,
    int family,
    int socktype,
    int protocol,
    ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>> res,
  ) {
    return _BIO_lookup_ex(
      host,
      service,
      lookup_type,
      family,
      socktype,
      protocol,
      res,
    );
  }

  late final _BIO_lookup_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>>)>>('BIO_lookup_ex');
  late final _BIO_lookup_ex = _BIO_lookup_exPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int,
          int, ffi.Pointer<ffi.Pointer<BIO_ADDRINFO>>)>();

  int BIO_sock_error(
    int sock,
  ) {
    return _BIO_sock_error(
      sock,
    );
  }

  late final _BIO_sock_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('BIO_sock_error');
  late final _BIO_sock_error =
      _BIO_sock_errorPtr.asFunction<int Function(int)>();

  int BIO_socket_ioctl(
    int fd,
    int type,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _BIO_socket_ioctl(
      fd,
      type,
      arg,
    );
  }

  late final _BIO_socket_ioctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Long, ffi.Pointer<ffi.Void>)>>('BIO_socket_ioctl');
  late final _BIO_socket_ioctl = _BIO_socket_ioctlPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>)>();

  int BIO_socket_nbio(
    int fd,
    int mode,
  ) {
    return _BIO_socket_nbio(
      fd,
      mode,
    );
  }

  late final _BIO_socket_nbioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'BIO_socket_nbio');
  late final _BIO_socket_nbio =
      _BIO_socket_nbioPtr.asFunction<int Function(int, int)>();

  int BIO_sock_init() {
    return _BIO_sock_init();
  }

  late final _BIO_sock_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('BIO_sock_init');
  late final _BIO_sock_init = _BIO_sock_initPtr.asFunction<int Function()>();

  int BIO_set_tcp_ndelay(
    int sock,
    int turn_on,
  ) {
    return _BIO_set_tcp_ndelay(
      sock,
      turn_on,
    );
  }

  late final _BIO_set_tcp_ndelayPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'BIO_set_tcp_ndelay');
  late final _BIO_set_tcp_ndelay =
      _BIO_set_tcp_ndelayPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<hostent> BIO_gethostbyname(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _BIO_gethostbyname(
      name,
    );
  }

  late final _BIO_gethostbynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hostent> Function(
              ffi.Pointer<ffi.Char>)>>('BIO_gethostbyname');
  late final _BIO_gethostbyname = _BIO_gethostbynamePtr.asFunction<
      ffi.Pointer<hostent> Function(ffi.Pointer<ffi.Char>)>();

  int BIO_get_port(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.UnsignedShort> port_ptr,
  ) {
    return _BIO_get_port(
      str,
      port_ptr,
    );
  }

  late final _BIO_get_portPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedShort>)>>('BIO_get_port');
  late final _BIO_get_port = _BIO_get_portPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedShort>)>();

  int BIO_get_host_ip(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.UnsignedChar> ip,
  ) {
    return _BIO_get_host_ip(
      str,
      ip,
    );
  }

  late final _BIO_get_host_ipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>)>>('BIO_get_host_ip');
  late final _BIO_get_host_ip = _BIO_get_host_ipPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>)>();

  int BIO_get_accept_socket(
    ffi.Pointer<ffi.Char> host_port,
    int mode,
  ) {
    return _BIO_get_accept_socket(
      host_port,
      mode,
    );
  }

  late final _BIO_get_accept_socketPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'BIO_get_accept_socket');
  late final _BIO_get_accept_socket = _BIO_get_accept_socketPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int)>();

  int BIO_accept(
    int sock,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ip_port,
  ) {
    return _BIO_accept(
      sock,
      ip_port,
    );
  }

  late final _BIO_acceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('BIO_accept');
  late final _BIO_accept = _BIO_acceptPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int BIO_sock_info(
    int sock,
    int type,
    ffi.Pointer<BIO_sock_info_u> info,
  ) {
    return _BIO_sock_info(
      sock,
      type,
      info,
    );
  }

  late final _BIO_sock_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int32,
              ffi.Pointer<BIO_sock_info_u>)>>('BIO_sock_info');
  late final _BIO_sock_info = _BIO_sock_infoPtr.asFunction<
      int Function(int, int, ffi.Pointer<BIO_sock_info_u>)>();

  int BIO_socket(
    int domain,
    int socktype,
    int protocol,
    int options,
  ) {
    return _BIO_socket(
      domain,
      socktype,
      protocol,
      options,
    );
  }

  late final _BIO_socketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('BIO_socket');
  late final _BIO_socket =
      _BIO_socketPtr.asFunction<int Function(int, int, int, int)>();

  int BIO_connect(
    int sock,
    ffi.Pointer<BIO_ADDR> addr,
    int options,
  ) {
    return _BIO_connect(
      sock,
      addr,
      options,
    );
  }

  late final _BIO_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_connect');
  late final _BIO_connect = _BIO_connectPtr.asFunction<
      int Function(int, ffi.Pointer<BIO_ADDR>, int)>();

  int BIO_bind(
    int sock,
    ffi.Pointer<BIO_ADDR> addr,
    int options,
  ) {
    return _BIO_bind(
      sock,
      addr,
      options,
    );
  }

  late final _BIO_bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_bind');
  late final _BIO_bind =
      _BIO_bindPtr.asFunction<int Function(int, ffi.Pointer<BIO_ADDR>, int)>();

  int BIO_listen(
    int sock,
    ffi.Pointer<BIO_ADDR> addr,
    int options,
  ) {
    return _BIO_listen(
      sock,
      addr,
      options,
    );
  }

  late final _BIO_listenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_listen');
  late final _BIO_listen = _BIO_listenPtr.asFunction<
      int Function(int, ffi.Pointer<BIO_ADDR>, int)>();

  int BIO_accept_ex(
    int accept_sock,
    ffi.Pointer<BIO_ADDR> addr,
    int options,
  ) {
    return _BIO_accept_ex(
      accept_sock,
      addr,
      options,
    );
  }

  late final _BIO_accept_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<BIO_ADDR>, ffi.Int)>>('BIO_accept_ex');
  late final _BIO_accept_ex = _BIO_accept_exPtr.asFunction<
      int Function(int, ffi.Pointer<BIO_ADDR>, int)>();

  int BIO_closesocket(
    int sock,
  ) {
    return _BIO_closesocket(
      sock,
    );
  }

  late final _BIO_closesocketPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('BIO_closesocket');
  late final _BIO_closesocket =
      _BIO_closesocketPtr.asFunction<int Function(int)>();

  ffi.Pointer<BIO> BIO_new_socket(
    int sock,
    int close_flag,
  ) {
    return _BIO_new_socket(
      sock,
      close_flag,
    );
  }

  late final _BIO_new_socketPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Int, ffi.Int)>>(
          'BIO_new_socket');
  late final _BIO_new_socket =
      _BIO_new_socketPtr.asFunction<ffi.Pointer<BIO> Function(int, int)>();

  ffi.Pointer<BIO> BIO_new_connect(
    ffi.Pointer<ffi.Char> host_port,
  ) {
    return _BIO_new_connect(
      host_port,
    );
  }

  late final _BIO_new_connectPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Char>)>>(
      'BIO_new_connect');
  late final _BIO_new_connect = _BIO_new_connectPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<BIO> BIO_new_accept(
    ffi.Pointer<ffi.Char> host_port,
  ) {
    return _BIO_new_accept(
      host_port,
    );
  }

  late final _BIO_new_acceptPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Char>)>>(
      'BIO_new_accept');
  late final _BIO_new_accept = _BIO_new_acceptPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<BIO> BIO_new_fd(
    int fd,
    int close_flag,
  ) {
    return _BIO_new_fd(
      fd,
      close_flag,
    );
  }

  late final _BIO_new_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO> Function(ffi.Int, ffi.Int)>>(
          'BIO_new_fd');
  late final _BIO_new_fd =
      _BIO_new_fdPtr.asFunction<ffi.Pointer<BIO> Function(int, int)>();

  int BIO_new_bio_pair(
    ffi.Pointer<ffi.Pointer<BIO>> bio1,
    int writebuf1,
    ffi.Pointer<ffi.Pointer<BIO>> bio2,
    int writebuf2,
  ) {
    return _BIO_new_bio_pair(
      bio1,
      writebuf1,
      bio2,
      writebuf2,
    );
  }

  late final _BIO_new_bio_pairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<BIO>>, ffi.Int,
              ffi.Pointer<ffi.Pointer<BIO>>, ffi.Int)>>('BIO_new_bio_pair');
  late final _BIO_new_bio_pair = _BIO_new_bio_pairPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<BIO>>, int,
          ffi.Pointer<ffi.Pointer<BIO>>, int)>();

  void BIO_copy_next_retry(
    ffi.Pointer<BIO> b,
  ) {
    return _BIO_copy_next_retry(
      b,
    );
  }

  late final _BIO_copy_next_retryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
          'BIO_copy_next_retry');
  late final _BIO_copy_next_retry =
      _BIO_copy_next_retryPtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  int BIO_printf(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _BIO_printf(
      bio,
      format,
    );
  }

  late final _BIO_printfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>('BIO_printf');
  late final _BIO_printf = _BIO_printfPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>();

  int BIO_vprintf(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Char> format,
    int args,
  ) {
    return _BIO_vprintf(
      bio,
      format,
      args,
    );
  }

  late final _BIO_vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
              va_list)>>('BIO_vprintf');
  late final _BIO_vprintf = _BIO_vprintfPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, int)>();

  int BIO_snprintf(
    ffi.Pointer<ffi.Char> buf,
    int n,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _BIO_snprintf(
      buf,
      n,
      format,
    );
  }

  late final _BIO_snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('BIO_snprintf');
  late final _BIO_snprintf = _BIO_snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int BIO_vsnprintf(
    ffi.Pointer<ffi.Char> buf,
    int n,
    ffi.Pointer<ffi.Char> format,
    int args,
  ) {
    return _BIO_vsnprintf(
      buf,
      n,
      format,
      args,
    );
  }

  late final _BIO_vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, va_list)>>('BIO_vsnprintf');
  late final _BIO_vsnprintf = _BIO_vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<BIO_METHOD> BIO_meth_new(
    int type,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _BIO_meth_new(
      type,
      name,
    );
  }

  late final _BIO_meth_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO_METHOD> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('BIO_meth_new');
  late final _BIO_meth_new = _BIO_meth_newPtr.asFunction<
      ffi.Pointer<BIO_METHOD> Function(int, ffi.Pointer<ffi.Char>)>();

  void BIO_meth_free(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_free(
      biom,
    );
  }

  late final _BIO_meth_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO_METHOD>)>>(
          'BIO_meth_free');
  late final _BIO_meth_free =
      _BIO_meth_freePtr.asFunction<void Function(ffi.Pointer<BIO_METHOD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      BIO_meth_get_write(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_write(
      biom,
    );
  }

  late final _BIO_meth_get_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_write');
  late final _BIO_meth_get_write = _BIO_meth_get_writePtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Int>)>> BIO_meth_get_write_ex(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_write_ex(
      biom,
    );
  }

  late final _BIO_meth_get_write_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                          ffi.Int, ffi.Pointer<ffi.Int>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_write_ex');
  late final _BIO_meth_get_write_ex = _BIO_meth_get_write_exPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                      ffi.Int, ffi.Pointer<ffi.Int>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_write(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        write,
  ) {
    return _BIO_meth_set_write(
      biom,
      write,
    );
  }

  late final _BIO_meth_set_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                          ffi.Int)>>)>>('BIO_meth_set_write');
  late final _BIO_meth_set_write = _BIO_meth_set_writePtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>)>();

  int BIO_meth_set_write_ex(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                    ffi.Int, ffi.Pointer<ffi.Int>)>>
        bwrite,
  ) {
    return _BIO_meth_set_write_ex(
      biom,
      bwrite,
    );
  }

  late final _BIO_meth_set_write_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Int,
                          ffi.Pointer<ffi.Int>)>>)>>('BIO_meth_set_write_ex');
  late final _BIO_meth_set_write_ex = _BIO_meth_set_write_exPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                      ffi.Int, ffi.Pointer<ffi.Int>)>>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      BIO_meth_get_read(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_read(
      biom,
    );
  }

  late final _BIO_meth_get_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_read');
  late final _BIO_meth_get_read = _BIO_meth_get_readPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Int>)>> BIO_meth_get_read_ex(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_read_ex(
      biom,
    );
  }

  late final _BIO_meth_get_read_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                          ffi.Int, ffi.Pointer<ffi.Int>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_read_ex');
  late final _BIO_meth_get_read_ex = _BIO_meth_get_read_exPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                      ffi.Int, ffi.Pointer<ffi.Int>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_read(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        read,
  ) {
    return _BIO_meth_set_read(
      biom,
      read,
    );
  }

  late final _BIO_meth_set_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                          ffi.Int)>>)>>('BIO_meth_set_read');
  late final _BIO_meth_set_read = _BIO_meth_set_readPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>)>();

  int BIO_meth_set_read_ex(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                    ffi.Int, ffi.Pointer<ffi.Int>)>>
        bread,
  ) {
    return _BIO_meth_set_read_ex(
      biom,
      bread,
    );
  }

  late final _BIO_meth_set_read_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Int,
                          ffi.Pointer<ffi.Int>)>>)>>('BIO_meth_set_read_ex');
  late final _BIO_meth_set_read_ex = _BIO_meth_set_read_exPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                      ffi.Int, ffi.Pointer<ffi.Int>)>>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>
      BIO_meth_get_puts(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_puts(
      biom,
    );
  }

  late final _BIO_meth_get_putsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_puts');
  late final _BIO_meth_get_puts = _BIO_meth_get_putsPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_puts(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>
        puts,
  ) {
    return _BIO_meth_set_puts(
      biom,
      puts,
    );
  }

  late final _BIO_meth_set_putsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>,
                          ffi.Pointer<ffi.Char>)>>)>>('BIO_meth_set_puts');
  late final _BIO_meth_set_puts = _BIO_meth_set_putsPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>)>>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      BIO_meth_get_gets(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_gets(
      biom,
    );
  }

  late final _BIO_meth_get_getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_gets');
  late final _BIO_meth_get_gets = _BIO_meth_get_getsPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_gets(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        gets,
  ) {
    return _BIO_meth_set_gets(
      biom,
      gets,
    );
  }

  late final _BIO_meth_set_getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
                          ffi.Int)>>)>>('BIO_meth_set_gets');
  late final _BIO_meth_set_gets = _BIO_meth_set_getsPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Int)>>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Long Function(
                  ffi.Pointer<BIO>, ffi.Int, ffi.Long, ffi.Pointer<ffi.Void>)>>
      BIO_meth_get_ctrl(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_ctrl(
      biom,
    );
  }

  late final _BIO_meth_get_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
                          ffi.Pointer<ffi.Void>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_ctrl');
  late final _BIO_meth_get_ctrl = _BIO_meth_get_ctrlPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
                      ffi.Pointer<ffi.Void>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_ctrl(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
                    ffi.Pointer<ffi.Void>)>>
        ctrl,
  ) {
    return _BIO_meth_set_ctrl(
      biom,
      ctrl,
    );
  }

  late final _BIO_meth_set_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
                          ffi.Pointer<ffi.Void>)>>)>>('BIO_meth_set_ctrl');
  late final _BIO_meth_set_ctrl = _BIO_meth_set_ctrlPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Long,
                      ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
      BIO_meth_get_create(
    ffi.Pointer<BIO_METHOD> bion,
  ) {
    return _BIO_meth_get_create(
      bion,
    );
  }

  late final _BIO_meth_get_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_create');
  late final _BIO_meth_get_create = _BIO_meth_get_createPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_create(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>> create,
  ) {
    return _BIO_meth_set_create(
      biom,
      create,
    );
  }

  late final _BIO_meth_set_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>)>>)>>('BIO_meth_set_create');
  late final _BIO_meth_set_create = _BIO_meth_set_createPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
      BIO_meth_get_destroy(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_destroy(
      biom,
    );
  }

  late final _BIO_meth_get_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_destroy');
  late final _BIO_meth_get_destroy = _BIO_meth_get_destroyPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>
          Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_destroy(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>> destroy,
  ) {
    return _BIO_meth_set_destroy(
      biom,
      destroy,
    );
  }

  late final _BIO_meth_set_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>)>>)>>('BIO_meth_set_destroy');
  late final _BIO_meth_set_destroy = _BIO_meth_set_destroyPtr.asFunction<
      int Function(
          ffi.Pointer<BIO_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Long Function(
                  ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<BIO_info_cb>)>>
      BIO_meth_get_callback_ctrl(
    ffi.Pointer<BIO_METHOD> biom,
  ) {
    return _BIO_meth_get_callback_ctrl(
      biom,
    );
  }

  late final _BIO_meth_get_callback_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(
                          ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<BIO_info_cb>)>>
              Function(ffi.Pointer<BIO_METHOD>)>>('BIO_meth_get_callback_ctrl');
  late final _BIO_meth_get_callback_ctrl =
      _BIO_meth_get_callback_ctrlPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(
                          ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<BIO_info_cb>)>>
              Function(ffi.Pointer<BIO_METHOD>)>();

  int BIO_meth_set_callback_ctrl(
    ffi.Pointer<BIO_METHOD> biom,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Long Function(
                    ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<BIO_info_cb>)>>
        callback_ctrl,
  ) {
    return _BIO_meth_set_callback_ctrl(
      biom,
      callback_ctrl,
    );
  }

  late final _BIO_meth_set_callback_ctrlPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Long Function(ffi.Pointer<BIO>, ffi.Int,
                              ffi.Pointer<BIO_info_cb>)>>)>>(
      'BIO_meth_set_callback_ctrl');
  late final _BIO_meth_set_callback_ctrl =
      _BIO_meth_set_callback_ctrlPtr.asFunction<
          int Function(
              ffi.Pointer<BIO_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(ffi.Pointer<BIO>, ffi.Int,
                          ffi.Pointer<BIO_info_cb>)>>)>();

  int OPENSSL_LH_error(
    ffi.Pointer<OPENSSL_LHASH> lh,
  ) {
    return _OPENSSL_LH_error(
      lh,
    );
  }

  late final _OPENSSL_LH_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<OPENSSL_LHASH>)>>(
          'OPENSSL_LH_error');
  late final _OPENSSL_LH_error = _OPENSSL_LH_errorPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_LHASH>)>();

  ffi.Pointer<OPENSSL_LHASH> OPENSSL_LH_new(
    OPENSSL_LH_HASHFUNC h,
    OPENSSL_LH_COMPFUNC c,
  ) {
    return _OPENSSL_LH_new(
      h,
      c,
    );
  }

  late final _OPENSSL_LH_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OPENSSL_LHASH> Function(
              OPENSSL_LH_HASHFUNC, OPENSSL_LH_COMPFUNC)>>('OPENSSL_LH_new');
  late final _OPENSSL_LH_new = _OPENSSL_LH_newPtr.asFunction<
      ffi.Pointer<OPENSSL_LHASH> Function(
          OPENSSL_LH_HASHFUNC, OPENSSL_LH_COMPFUNC)>();

  void OPENSSL_LH_free(
    ffi.Pointer<OPENSSL_LHASH> lh,
  ) {
    return _OPENSSL_LH_free(
      lh,
    );
  }

  late final _OPENSSL_LH_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OPENSSL_LHASH>)>>(
      'OPENSSL_LH_free');
  late final _OPENSSL_LH_free = _OPENSSL_LH_freePtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_LHASH>)>();

  ffi.Pointer<ffi.Void> OPENSSL_LH_insert(
    ffi.Pointer<OPENSSL_LHASH> lh,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_LH_insert(
      lh,
      data,
    );
  }

  late final _OPENSSL_LH_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_LHASH>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_LH_insert');
  late final _OPENSSL_LH_insert = _OPENSSL_LH_insertPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<OPENSSL_LHASH>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> OPENSSL_LH_delete(
    ffi.Pointer<OPENSSL_LHASH> lh,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_LH_delete(
      lh,
      data,
    );
  }

  late final _OPENSSL_LH_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_LHASH>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_LH_delete');
  late final _OPENSSL_LH_delete = _OPENSSL_LH_deletePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<OPENSSL_LHASH>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> OPENSSL_LH_retrieve(
    ffi.Pointer<OPENSSL_LHASH> lh,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _OPENSSL_LH_retrieve(
      lh,
      data,
    );
  }

  late final _OPENSSL_LH_retrievePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<OPENSSL_LHASH>,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_LH_retrieve');
  late final _OPENSSL_LH_retrieve = _OPENSSL_LH_retrievePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<OPENSSL_LHASH>, ffi.Pointer<ffi.Void>)>();

  void OPENSSL_LH_doall(
    ffi.Pointer<OPENSSL_LHASH> lh,
    OPENSSL_LH_DOALL_FUNC func,
  ) {
    return _OPENSSL_LH_doall(
      lh,
      func,
    );
  }

  late final _OPENSSL_LH_doallPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OPENSSL_LHASH>,
              OPENSSL_LH_DOALL_FUNC)>>('OPENSSL_LH_doall');
  late final _OPENSSL_LH_doall = _OPENSSL_LH_doallPtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_LHASH>, OPENSSL_LH_DOALL_FUNC)>();

  void OPENSSL_LH_doall_arg(
    ffi.Pointer<OPENSSL_LHASH> lh,
    OPENSSL_LH_DOALL_FUNCARG func,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _OPENSSL_LH_doall_arg(
      lh,
      func,
      arg,
    );
  }

  late final _OPENSSL_LH_doall_argPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<OPENSSL_LHASH>,
              OPENSSL_LH_DOALL_FUNCARG,
              ffi.Pointer<ffi.Void>)>>('OPENSSL_LH_doall_arg');
  late final _OPENSSL_LH_doall_arg = _OPENSSL_LH_doall_argPtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_LHASH>, OPENSSL_LH_DOALL_FUNCARG,
          ffi.Pointer<ffi.Void>)>();

  int OPENSSL_LH_strhash(
    ffi.Pointer<ffi.Char> c,
  ) {
    return _OPENSSL_LH_strhash(
      c,
    );
  }

  late final _OPENSSL_LH_strhashPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>(
      'OPENSSL_LH_strhash');
  late final _OPENSSL_LH_strhash =
      _OPENSSL_LH_strhashPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int OPENSSL_LH_num_items(
    ffi.Pointer<OPENSSL_LHASH> lh,
  ) {
    return _OPENSSL_LH_num_items(
      lh,
    );
  }

  late final _OPENSSL_LH_num_itemsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<OPENSSL_LHASH>)>>('OPENSSL_LH_num_items');
  late final _OPENSSL_LH_num_items = _OPENSSL_LH_num_itemsPtr.asFunction<
      int Function(ffi.Pointer<OPENSSL_LHASH>)>();

  int OPENSSL_LH_get_down_load(
    ffi.Pointer<OPENSSL_LHASH> lh,
  ) {
    return _OPENSSL_LH_get_down_load(
      lh,
    );
  }

  late final _OPENSSL_LH_get_down_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<OPENSSL_LHASH>)>>('OPENSSL_LH_get_down_load');
  late final _OPENSSL_LH_get_down_load = _OPENSSL_LH_get_down_loadPtr
      .asFunction<int Function(ffi.Pointer<OPENSSL_LHASH>)>();

  void OPENSSL_LH_set_down_load(
    ffi.Pointer<OPENSSL_LHASH> lh,
    int down_load,
  ) {
    return _OPENSSL_LH_set_down_load(
      lh,
      down_load,
    );
  }

  late final _OPENSSL_LH_set_down_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OPENSSL_LHASH>,
              ffi.UnsignedLong)>>('OPENSSL_LH_set_down_load');
  late final _OPENSSL_LH_set_down_load = _OPENSSL_LH_set_down_loadPtr
      .asFunction<void Function(ffi.Pointer<OPENSSL_LHASH>, int)>();

  void OPENSSL_LH_stats(
    ffi.Pointer<OPENSSL_LHASH> lh,
    ffi.Pointer<FILE> fp,
  ) {
    return _OPENSSL_LH_stats(
      lh,
      fp,
    );
  }

  late final _OPENSSL_LH_statsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OPENSSL_LHASH>,
              ffi.Pointer<FILE>)>>('OPENSSL_LH_stats');
  late final _OPENSSL_LH_stats = _OPENSSL_LH_statsPtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_LHASH>, ffi.Pointer<FILE>)>();

  void OPENSSL_LH_node_stats(
    ffi.Pointer<OPENSSL_LHASH> lh,
    ffi.Pointer<FILE> fp,
  ) {
    return _OPENSSL_LH_node_stats(
      lh,
      fp,
    );
  }

  late final _OPENSSL_LH_node_statsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OPENSSL_LHASH>,
              ffi.Pointer<FILE>)>>('OPENSSL_LH_node_stats');
  late final _OPENSSL_LH_node_stats = _OPENSSL_LH_node_statsPtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_LHASH>, ffi.Pointer<FILE>)>();

  void OPENSSL_LH_node_usage_stats(
    ffi.Pointer<OPENSSL_LHASH> lh,
    ffi.Pointer<FILE> fp,
  ) {
    return _OPENSSL_LH_node_usage_stats(
      lh,
      fp,
    );
  }

  late final _OPENSSL_LH_node_usage_statsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OPENSSL_LHASH>,
              ffi.Pointer<FILE>)>>('OPENSSL_LH_node_usage_stats');
  late final _OPENSSL_LH_node_usage_stats =
      _OPENSSL_LH_node_usage_statsPtr.asFunction<
          void Function(ffi.Pointer<OPENSSL_LHASH>, ffi.Pointer<FILE>)>();

  void OPENSSL_LH_stats_bio(
    ffi.Pointer<OPENSSL_LHASH> lh,
    ffi.Pointer<BIO> out,
  ) {
    return _OPENSSL_LH_stats_bio(
      lh,
      out,
    );
  }

  late final _OPENSSL_LH_stats_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OPENSSL_LHASH>,
              ffi.Pointer<BIO>)>>('OPENSSL_LH_stats_bio');
  late final _OPENSSL_LH_stats_bio = _OPENSSL_LH_stats_bioPtr.asFunction<
      void Function(ffi.Pointer<OPENSSL_LHASH>, ffi.Pointer<BIO>)>();

  void OPENSSL_LH_node_stats_bio(
    ffi.Pointer<OPENSSL_LHASH> lh,
    ffi.Pointer<BIO> out,
  ) {
    return _OPENSSL_LH_node_stats_bio(
      lh,
      out,
    );
  }

  late final _OPENSSL_LH_node_stats_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OPENSSL_LHASH>,
              ffi.Pointer<BIO>)>>('OPENSSL_LH_node_stats_bio');
  late final _OPENSSL_LH_node_stats_bio =
      _OPENSSL_LH_node_stats_bioPtr.asFunction<
          void Function(ffi.Pointer<OPENSSL_LHASH>, ffi.Pointer<BIO>)>();

  void OPENSSL_LH_node_usage_stats_bio(
    ffi.Pointer<OPENSSL_LHASH> lh,
    ffi.Pointer<BIO> out,
  ) {
    return _OPENSSL_LH_node_usage_stats_bio(
      lh,
      out,
    );
  }

  late final _OPENSSL_LH_node_usage_stats_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<OPENSSL_LHASH>,
              ffi.Pointer<BIO>)>>('OPENSSL_LH_node_usage_stats_bio');
  late final _OPENSSL_LH_node_usage_stats_bio =
      _OPENSSL_LH_node_usage_stats_bioPtr.asFunction<
          void Function(ffi.Pointer<OPENSSL_LHASH>, ffi.Pointer<BIO>)>();

  int ERR_load_CONF_strings() {
    return _ERR_load_CONF_strings();
  }

  late final _ERR_load_CONF_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_CONF_strings');
  late final _ERR_load_CONF_strings =
      _ERR_load_CONF_stringsPtr.asFunction<int Function()>();

  int CONF_set_default_method(
    ffi.Pointer<CONF_METHOD> meth,
  ) {
    return _CONF_set_default_method(
      meth,
    );
  }

  late final _CONF_set_default_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CONF_METHOD>)>>(
          'CONF_set_default_method');
  late final _CONF_set_default_method = _CONF_set_default_methodPtr.asFunction<
      int Function(ffi.Pointer<CONF_METHOD>)>();

  void CONF_set_nconf(
    ffi.Pointer<CONF> conf,
    ffi.Pointer<lhash_st_CONF_VALUE> hash,
  ) {
    return _CONF_set_nconf(
      conf,
      hash,
    );
  }

  late final _CONF_set_nconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CONF>,
              ffi.Pointer<lhash_st_CONF_VALUE>)>>('CONF_set_nconf');
  late final _CONF_set_nconf = _CONF_set_nconfPtr.asFunction<
      void Function(ffi.Pointer<CONF>, ffi.Pointer<lhash_st_CONF_VALUE>)>();

  ffi.Pointer<lhash_st_CONF_VALUE> CONF_load(
    ffi.Pointer<lhash_st_CONF_VALUE> conf,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Long> eline,
  ) {
    return _CONF_load(
      conf,
      file,
      eline,
    );
  }

  late final _CONF_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<lhash_st_CONF_VALUE> Function(
              ffi.Pointer<lhash_st_CONF_VALUE>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>>('CONF_load');
  late final _CONF_load = _CONF_loadPtr.asFunction<
      ffi.Pointer<lhash_st_CONF_VALUE> Function(
          ffi.Pointer<lhash_st_CONF_VALUE>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Long>)>();

  ffi.Pointer<lhash_st_CONF_VALUE> CONF_load_fp(
    ffi.Pointer<lhash_st_CONF_VALUE> conf,
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Long> eline,
  ) {
    return _CONF_load_fp(
      conf,
      fp,
      eline,
    );
  }

  late final _CONF_load_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<lhash_st_CONF_VALUE> Function(
              ffi.Pointer<lhash_st_CONF_VALUE>,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Long>)>>('CONF_load_fp');
  late final _CONF_load_fp = _CONF_load_fpPtr.asFunction<
      ffi.Pointer<lhash_st_CONF_VALUE> Function(
          ffi.Pointer<lhash_st_CONF_VALUE>,
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Long>)>();

  ffi.Pointer<lhash_st_CONF_VALUE> CONF_load_bio(
    ffi.Pointer<lhash_st_CONF_VALUE> conf,
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Long> eline,
  ) {
    return _CONF_load_bio(
      conf,
      bp,
      eline,
    );
  }

  late final _CONF_load_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<lhash_st_CONF_VALUE> Function(
              ffi.Pointer<lhash_st_CONF_VALUE>,
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Long>)>>('CONF_load_bio');
  late final _CONF_load_bio = _CONF_load_bioPtr.asFunction<
      ffi.Pointer<lhash_st_CONF_VALUE> Function(
          ffi.Pointer<lhash_st_CONF_VALUE>,
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Long>)>();

  ffi.Pointer<stack_st_CONF_VALUE> CONF_get_section(
    ffi.Pointer<lhash_st_CONF_VALUE> conf,
    ffi.Pointer<ffi.Char> section,
  ) {
    return _CONF_get_section(
      conf,
      section,
    );
  }

  late final _CONF_get_sectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_CONF_VALUE> Function(
              ffi.Pointer<lhash_st_CONF_VALUE>,
              ffi.Pointer<ffi.Char>)>>('CONF_get_section');
  late final _CONF_get_section = _CONF_get_sectionPtr.asFunction<
      ffi.Pointer<stack_st_CONF_VALUE> Function(
          ffi.Pointer<lhash_st_CONF_VALUE>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> CONF_get_string(
    ffi.Pointer<lhash_st_CONF_VALUE> conf,
    ffi.Pointer<ffi.Char> group,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _CONF_get_string(
      conf,
      group,
      name,
    );
  }

  late final _CONF_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<lhash_st_CONF_VALUE>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('CONF_get_string');
  late final _CONF_get_string = _CONF_get_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<lhash_st_CONF_VALUE>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int CONF_get_number(
    ffi.Pointer<lhash_st_CONF_VALUE> conf,
    ffi.Pointer<ffi.Char> group,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _CONF_get_number(
      conf,
      group,
      name,
    );
  }

  late final _CONF_get_numberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<lhash_st_CONF_VALUE>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('CONF_get_number');
  late final _CONF_get_number = _CONF_get_numberPtr.asFunction<
      int Function(ffi.Pointer<lhash_st_CONF_VALUE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void CONF_free(
    ffi.Pointer<lhash_st_CONF_VALUE> conf,
  ) {
    return _CONF_free(
      conf,
    );
  }

  late final _CONF_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lhash_st_CONF_VALUE>)>>('CONF_free');
  late final _CONF_free = _CONF_freePtr.asFunction<
      void Function(ffi.Pointer<lhash_st_CONF_VALUE>)>();

  int CONF_dump_fp(
    ffi.Pointer<lhash_st_CONF_VALUE> conf,
    ffi.Pointer<FILE> out,
  ) {
    return _CONF_dump_fp(
      conf,
      out,
    );
  }

  late final _CONF_dump_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<lhash_st_CONF_VALUE>,
              ffi.Pointer<FILE>)>>('CONF_dump_fp');
  late final _CONF_dump_fp = _CONF_dump_fpPtr.asFunction<
      int Function(ffi.Pointer<lhash_st_CONF_VALUE>, ffi.Pointer<FILE>)>();

  int CONF_dump_bio(
    ffi.Pointer<lhash_st_CONF_VALUE> conf,
    ffi.Pointer<BIO> out,
  ) {
    return _CONF_dump_bio(
      conf,
      out,
    );
  }

  late final _CONF_dump_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<lhash_st_CONF_VALUE>,
              ffi.Pointer<BIO>)>>('CONF_dump_bio');
  late final _CONF_dump_bio = _CONF_dump_bioPtr.asFunction<
      int Function(ffi.Pointer<lhash_st_CONF_VALUE>, ffi.Pointer<BIO>)>();

  void OPENSSL_config(
    ffi.Pointer<ffi.Char> config_name,
  ) {
    return _OPENSSL_config(
      config_name,
    );
  }

  late final _OPENSSL_configPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'OPENSSL_config');
  late final _OPENSSL_config =
      _OPENSSL_configPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<CONF> NCONF_new(
    ffi.Pointer<CONF_METHOD> meth,
  ) {
    return _NCONF_new(
      meth,
    );
  }

  late final _NCONF_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CONF> Function(ffi.Pointer<CONF_METHOD>)>>('NCONF_new');
  late final _NCONF_new = _NCONF_newPtr.asFunction<
      ffi.Pointer<CONF> Function(ffi.Pointer<CONF_METHOD>)>();

  ffi.Pointer<CONF_METHOD> NCONF_default() {
    return _NCONF_default();
  }

  late final _NCONF_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CONF_METHOD> Function()>>(
          'NCONF_default');
  late final _NCONF_default =
      _NCONF_defaultPtr.asFunction<ffi.Pointer<CONF_METHOD> Function()>();

  ffi.Pointer<CONF_METHOD> NCONF_WIN32() {
    return _NCONF_WIN32();
  }

  late final _NCONF_WIN32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CONF_METHOD> Function()>>(
          'NCONF_WIN32');
  late final _NCONF_WIN32 =
      _NCONF_WIN32Ptr.asFunction<ffi.Pointer<CONF_METHOD> Function()>();

  void NCONF_free(
    ffi.Pointer<CONF> conf,
  ) {
    return _NCONF_free(
      conf,
    );
  }

  late final _NCONF_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CONF>)>>(
          'NCONF_free');
  late final _NCONF_free =
      _NCONF_freePtr.asFunction<void Function(ffi.Pointer<CONF>)>();

  void NCONF_free_data(
    ffi.Pointer<CONF> conf,
  ) {
    return _NCONF_free_data(
      conf,
    );
  }

  late final _NCONF_free_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CONF>)>>(
          'NCONF_free_data');
  late final _NCONF_free_data =
      _NCONF_free_dataPtr.asFunction<void Function(ffi.Pointer<CONF>)>();

  int NCONF_load(
    ffi.Pointer<CONF> conf,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Long> eline,
  ) {
    return _NCONF_load(
      conf,
      file,
      eline,
    );
  }

  late final _NCONF_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CONF>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>>('NCONF_load');
  late final _NCONF_load = _NCONF_loadPtr.asFunction<
      int Function(
          ffi.Pointer<CONF>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Long>)>();

  int NCONF_load_fp(
    ffi.Pointer<CONF> conf,
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Long> eline,
  ) {
    return _NCONF_load_fp(
      conf,
      fp,
      eline,
    );
  }

  late final _NCONF_load_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CONF>, ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Long>)>>('NCONF_load_fp');
  late final _NCONF_load_fp = _NCONF_load_fpPtr.asFunction<
      int Function(
          ffi.Pointer<CONF>, ffi.Pointer<FILE>, ffi.Pointer<ffi.Long>)>();

  int NCONF_load_bio(
    ffi.Pointer<CONF> conf,
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Long> eline,
  ) {
    return _NCONF_load_bio(
      conf,
      bp,
      eline,
    );
  }

  late final _NCONF_load_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CONF>, ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Long>)>>('NCONF_load_bio');
  late final _NCONF_load_bio = _NCONF_load_bioPtr.asFunction<
      int Function(
          ffi.Pointer<CONF>, ffi.Pointer<BIO>, ffi.Pointer<ffi.Long>)>();

  ffi.Pointer<stack_st_CONF_VALUE> NCONF_get_section(
    ffi.Pointer<CONF> conf,
    ffi.Pointer<ffi.Char> section,
  ) {
    return _NCONF_get_section(
      conf,
      section,
    );
  }

  late final _NCONF_get_sectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_CONF_VALUE> Function(
              ffi.Pointer<CONF>, ffi.Pointer<ffi.Char>)>>('NCONF_get_section');
  late final _NCONF_get_section = _NCONF_get_sectionPtr.asFunction<
      ffi.Pointer<stack_st_CONF_VALUE> Function(
          ffi.Pointer<CONF>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> NCONF_get_string(
    ffi.Pointer<CONF> conf,
    ffi.Pointer<ffi.Char> group,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _NCONF_get_string(
      conf,
      group,
      name,
    );
  }

  late final _NCONF_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<CONF>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('NCONF_get_string');
  late final _NCONF_get_string = _NCONF_get_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<CONF>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int NCONF_get_number_e(
    ffi.Pointer<CONF> conf,
    ffi.Pointer<ffi.Char> group,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Long> result,
  ) {
    return _NCONF_get_number_e(
      conf,
      group,
      name,
      result,
    );
  }

  late final _NCONF_get_number_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<CONF>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>>('NCONF_get_number_e');
  late final _NCONF_get_number_e = _NCONF_get_number_ePtr.asFunction<
      int Function(ffi.Pointer<CONF>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Long>)>();

  int NCONF_dump_fp(
    ffi.Pointer<CONF> conf,
    ffi.Pointer<FILE> out,
  ) {
    return _NCONF_dump_fp(
      conf,
      out,
    );
  }

  late final _NCONF_dump_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<CONF>, ffi.Pointer<FILE>)>>('NCONF_dump_fp');
  late final _NCONF_dump_fp = _NCONF_dump_fpPtr.asFunction<
      int Function(ffi.Pointer<CONF>, ffi.Pointer<FILE>)>();

  int NCONF_dump_bio(
    ffi.Pointer<CONF> conf,
    ffi.Pointer<BIO> out,
  ) {
    return _NCONF_dump_bio(
      conf,
      out,
    );
  }

  late final _NCONF_dump_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<CONF>, ffi.Pointer<BIO>)>>('NCONF_dump_bio');
  late final _NCONF_dump_bio = _NCONF_dump_bioPtr.asFunction<
      int Function(ffi.Pointer<CONF>, ffi.Pointer<BIO>)>();

  int CONF_modules_load(
    ffi.Pointer<CONF> cnf,
    ffi.Pointer<ffi.Char> appname,
    int flags,
  ) {
    return _CONF_modules_load(
      cnf,
      appname,
      flags,
    );
  }

  late final _CONF_modules_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CONF>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedLong)>>('CONF_modules_load');
  late final _CONF_modules_load = _CONF_modules_loadPtr.asFunction<
      int Function(ffi.Pointer<CONF>, ffi.Pointer<ffi.Char>, int)>();

  int CONF_modules_load_file(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> appname,
    int flags,
  ) {
    return _CONF_modules_load_file(
      filename,
      appname,
      flags,
    );
  }

  late final _CONF_modules_load_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedLong)>>('CONF_modules_load_file');
  late final _CONF_modules_load_file = _CONF_modules_load_filePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void CONF_modules_unload(
    int all,
  ) {
    return _CONF_modules_unload(
      all,
    );
  }

  late final _CONF_modules_unloadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'CONF_modules_unload');
  late final _CONF_modules_unload =
      _CONF_modules_unloadPtr.asFunction<void Function(int)>();

  void CONF_modules_finish() {
    return _CONF_modules_finish();
  }

  late final _CONF_modules_finishPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CONF_modules_finish');
  late final _CONF_modules_finish =
      _CONF_modules_finishPtr.asFunction<void Function()>();

  int CONF_module_add(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<conf_init_func> ifunc,
    ffi.Pointer<conf_finish_func> ffunc,
  ) {
    return _CONF_module_add(
      name,
      ifunc,
      ffunc,
    );
  }

  late final _CONF_module_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<conf_init_func>,
              ffi.Pointer<conf_finish_func>)>>('CONF_module_add');
  late final _CONF_module_add = _CONF_module_addPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<conf_init_func>,
          ffi.Pointer<conf_finish_func>)>();

  ffi.Pointer<ffi.Char> CONF_imodule_get_name(
    ffi.Pointer<CONF_IMODULE> md,
  ) {
    return _CONF_imodule_get_name(
      md,
    );
  }

  late final _CONF_imodule_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<CONF_IMODULE>)>>('CONF_imodule_get_name');
  late final _CONF_imodule_get_name = _CONF_imodule_get_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<CONF_IMODULE>)>();

  ffi.Pointer<ffi.Char> CONF_imodule_get_value(
    ffi.Pointer<CONF_IMODULE> md,
  ) {
    return _CONF_imodule_get_value(
      md,
    );
  }

  late final _CONF_imodule_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<CONF_IMODULE>)>>('CONF_imodule_get_value');
  late final _CONF_imodule_get_value = _CONF_imodule_get_valuePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<CONF_IMODULE>)>();

  ffi.Pointer<ffi.Void> CONF_imodule_get_usr_data(
    ffi.Pointer<CONF_IMODULE> md,
  ) {
    return _CONF_imodule_get_usr_data(
      md,
    );
  }

  late final _CONF_imodule_get_usr_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<CONF_IMODULE>)>>('CONF_imodule_get_usr_data');
  late final _CONF_imodule_get_usr_data = _CONF_imodule_get_usr_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<CONF_IMODULE>)>();

  void CONF_imodule_set_usr_data(
    ffi.Pointer<CONF_IMODULE> md,
    ffi.Pointer<ffi.Void> usr_data,
  ) {
    return _CONF_imodule_set_usr_data(
      md,
      usr_data,
    );
  }

  late final _CONF_imodule_set_usr_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CONF_IMODULE>,
              ffi.Pointer<ffi.Void>)>>('CONF_imodule_set_usr_data');
  late final _CONF_imodule_set_usr_data =
      _CONF_imodule_set_usr_dataPtr.asFunction<
          void Function(ffi.Pointer<CONF_IMODULE>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<CONF_MODULE> CONF_imodule_get_module(
    ffi.Pointer<CONF_IMODULE> md,
  ) {
    return _CONF_imodule_get_module(
      md,
    );
  }

  late final _CONF_imodule_get_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CONF_MODULE> Function(
              ffi.Pointer<CONF_IMODULE>)>>('CONF_imodule_get_module');
  late final _CONF_imodule_get_module = _CONF_imodule_get_modulePtr.asFunction<
      ffi.Pointer<CONF_MODULE> Function(ffi.Pointer<CONF_IMODULE>)>();

  int CONF_imodule_get_flags(
    ffi.Pointer<CONF_IMODULE> md,
  ) {
    return _CONF_imodule_get_flags(
      md,
    );
  }

  late final _CONF_imodule_get_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<CONF_IMODULE>)>>('CONF_imodule_get_flags');
  late final _CONF_imodule_get_flags = _CONF_imodule_get_flagsPtr.asFunction<
      int Function(ffi.Pointer<CONF_IMODULE>)>();

  void CONF_imodule_set_flags(
    ffi.Pointer<CONF_IMODULE> md,
    int flags,
  ) {
    return _CONF_imodule_set_flags(
      md,
      flags,
    );
  }

  late final _CONF_imodule_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CONF_IMODULE>,
              ffi.UnsignedLong)>>('CONF_imodule_set_flags');
  late final _CONF_imodule_set_flags = _CONF_imodule_set_flagsPtr.asFunction<
      void Function(ffi.Pointer<CONF_IMODULE>, int)>();

  ffi.Pointer<ffi.Void> CONF_module_get_usr_data(
    ffi.Pointer<CONF_MODULE> pmod,
  ) {
    return _CONF_module_get_usr_data(
      pmod,
    );
  }

  late final _CONF_module_get_usr_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<CONF_MODULE>)>>('CONF_module_get_usr_data');
  late final _CONF_module_get_usr_data = _CONF_module_get_usr_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<CONF_MODULE>)>();

  void CONF_module_set_usr_data(
    ffi.Pointer<CONF_MODULE> pmod,
    ffi.Pointer<ffi.Void> usr_data,
  ) {
    return _CONF_module_set_usr_data(
      pmod,
      usr_data,
    );
  }

  late final _CONF_module_set_usr_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CONF_MODULE>,
              ffi.Pointer<ffi.Void>)>>('CONF_module_set_usr_data');
  late final _CONF_module_set_usr_data =
      _CONF_module_set_usr_dataPtr.asFunction<
          void Function(ffi.Pointer<CONF_MODULE>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> CONF_get1_default_config_file() {
    return _CONF_get1_default_config_file();
  }

  late final _CONF_get1_default_config_filePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'CONF_get1_default_config_file');
  late final _CONF_get1_default_config_file = _CONF_get1_default_config_filePtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  int CONF_parse_list(
    ffi.Pointer<ffi.Char> list,
    int sep,
    int nospc,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Void>)>>
        list_cb,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _CONF_parse_list(
      list,
      sep,
      nospc,
      list_cb,
      arg,
    );
  }

  late final _CONF_parse_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('CONF_parse_list');
  late final _CONF_parse_list = _CONF_parse_listPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void OPENSSL_load_builtin_modules() {
    return _OPENSSL_load_builtin_modules();
  }

  late final _OPENSSL_load_builtin_modulesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'OPENSSL_load_builtin_modules');
  late final _OPENSSL_load_builtin_modules =
      _OPENSSL_load_builtin_modulesPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Int> __errno_location() {
    return ___errno_location();
  }

  late final ___errno_locationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__errno_location');
  late final ___errno_location =
      ___errno_locationPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  void ERR_put_error(
    int lib,
    int func,
    int reason,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _ERR_put_error(
      lib,
      func,
      reason,
      file,
      line,
    );
  }

  late final _ERR_put_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('ERR_put_error');
  late final _ERR_put_error = _ERR_put_errorPtr.asFunction<
      void Function(int, int, int, ffi.Pointer<ffi.Char>, int)>();

  void ERR_set_error_data(
    ffi.Pointer<ffi.Char> data,
    int flags,
  ) {
    return _ERR_set_error_data(
      data,
      flags,
    );
  }

  late final _ERR_set_error_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('ERR_set_error_data');
  late final _ERR_set_error_data = _ERR_set_error_dataPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int)>();

  int ERR_get_error() {
    return _ERR_get_error();
  }

  late final _ERR_get_errorPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>('ERR_get_error');
  late final _ERR_get_error = _ERR_get_errorPtr.asFunction<int Function()>();

  int ERR_get_error_line(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
  ) {
    return _ERR_get_error_line(
      file,
      line,
    );
  }

  late final _ERR_get_error_linePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('ERR_get_error_line');
  late final _ERR_get_error_line = _ERR_get_error_linePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  int ERR_get_error_line_data(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
    ffi.Pointer<ffi.Pointer<ffi.Char>> data,
    ffi.Pointer<ffi.Int> flags,
  ) {
    return _ERR_get_error_line_data(
      file,
      line,
      data,
      flags,
    );
  }

  late final _ERR_get_error_line_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('ERR_get_error_line_data');
  late final _ERR_get_error_line_data = _ERR_get_error_line_dataPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  int ERR_peek_error() {
    return _ERR_peek_error();
  }

  late final _ERR_peek_errorPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'ERR_peek_error');
  late final _ERR_peek_error = _ERR_peek_errorPtr.asFunction<int Function()>();

  int ERR_peek_error_line(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
  ) {
    return _ERR_peek_error_line(
      file,
      line,
    );
  }

  late final _ERR_peek_error_linePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('ERR_peek_error_line');
  late final _ERR_peek_error_line = _ERR_peek_error_linePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  int ERR_peek_error_line_data(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
    ffi.Pointer<ffi.Pointer<ffi.Char>> data,
    ffi.Pointer<ffi.Int> flags,
  ) {
    return _ERR_peek_error_line_data(
      file,
      line,
      data,
      flags,
    );
  }

  late final _ERR_peek_error_line_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('ERR_peek_error_line_data');
  late final _ERR_peek_error_line_data =
      _ERR_peek_error_line_dataPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  int ERR_peek_last_error() {
    return _ERR_peek_last_error();
  }

  late final _ERR_peek_last_errorPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'ERR_peek_last_error');
  late final _ERR_peek_last_error =
      _ERR_peek_last_errorPtr.asFunction<int Function()>();

  int ERR_peek_last_error_line(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
  ) {
    return _ERR_peek_last_error_line(
      file,
      line,
    );
  }

  late final _ERR_peek_last_error_linePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('ERR_peek_last_error_line');
  late final _ERR_peek_last_error_line =
      _ERR_peek_last_error_linePtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  int ERR_peek_last_error_line_data(
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.Int> line,
    ffi.Pointer<ffi.Pointer<ffi.Char>> data,
    ffi.Pointer<ffi.Int> flags,
  ) {
    return _ERR_peek_last_error_line_data(
      file,
      line,
      data,
      flags,
    );
  }

  late final _ERR_peek_last_error_line_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>)>>('ERR_peek_last_error_line_data');
  late final _ERR_peek_last_error_line_data =
      _ERR_peek_last_error_line_dataPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>)>();

  void ERR_clear_error() {
    return _ERR_clear_error();
  }

  late final _ERR_clear_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ERR_clear_error');
  late final _ERR_clear_error =
      _ERR_clear_errorPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> ERR_error_string(
    int e,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _ERR_error_string(
      e,
      buf,
    );
  }

  late final _ERR_error_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedLong, ffi.Pointer<ffi.Char>)>>('ERR_error_string');
  late final _ERR_error_string = _ERR_error_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>)>();

  void ERR_error_string_n(
    int e,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _ERR_error_string_n(
      e,
      buf,
      len,
    );
  }

  late final _ERR_error_string_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedLong, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('ERR_error_string_n');
  late final _ERR_error_string_n = _ERR_error_string_nPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> ERR_lib_error_string(
    int e,
  ) {
    return _ERR_lib_error_string(
      e,
    );
  }

  late final _ERR_lib_error_stringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedLong)>>(
      'ERR_lib_error_string');
  late final _ERR_lib_error_string = _ERR_lib_error_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> ERR_func_error_string(
    int e,
  ) {
    return _ERR_func_error_string(
      e,
    );
  }

  late final _ERR_func_error_stringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedLong)>>(
      'ERR_func_error_string');
  late final _ERR_func_error_string = _ERR_func_error_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> ERR_reason_error_string(
    int e,
  ) {
    return _ERR_reason_error_string(
      e,
    );
  }

  late final _ERR_reason_error_stringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedLong)>>(
      'ERR_reason_error_string');
  late final _ERR_reason_error_string = _ERR_reason_error_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int)>();

  void ERR_print_errors_cb(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Void>)>>
        cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _ERR_print_errors_cb(
      cb,
      u,
    );
  }

  late final _ERR_print_errors_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('ERR_print_errors_cb');
  late final _ERR_print_errors_cb = _ERR_print_errors_cbPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void ERR_print_errors_fp(
    ffi.Pointer<FILE> fp,
  ) {
    return _ERR_print_errors_fp(
      fp,
    );
  }

  late final _ERR_print_errors_fpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'ERR_print_errors_fp');
  late final _ERR_print_errors_fp =
      _ERR_print_errors_fpPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  void ERR_print_errors(
    ffi.Pointer<BIO> bp,
  ) {
    return _ERR_print_errors(
      bp,
    );
  }

  late final _ERR_print_errorsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIO>)>>(
          'ERR_print_errors');
  late final _ERR_print_errors =
      _ERR_print_errorsPtr.asFunction<void Function(ffi.Pointer<BIO>)>();

  void ERR_add_error_data(
    int num,
  ) {
    return _ERR_add_error_data(
      num,
    );
  }

  late final _ERR_add_error_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'ERR_add_error_data');
  late final _ERR_add_error_data =
      _ERR_add_error_dataPtr.asFunction<void Function(int)>();

  void ERR_add_error_vdata(
    int num,
    int args,
  ) {
    return _ERR_add_error_vdata(
      num,
      args,
    );
  }

  late final _ERR_add_error_vdataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, va_list)>>(
          'ERR_add_error_vdata');
  late final _ERR_add_error_vdata =
      _ERR_add_error_vdataPtr.asFunction<void Function(int, int)>();

  int ERR_load_strings(
    int lib,
    ffi.Pointer<ERR_STRING_DATA> str,
  ) {
    return _ERR_load_strings(
      lib,
      str,
    );
  }

  late final _ERR_load_stringsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ERR_STRING_DATA>)>>('ERR_load_strings');
  late final _ERR_load_strings = _ERR_load_stringsPtr.asFunction<
      int Function(int, ffi.Pointer<ERR_STRING_DATA>)>();

  int ERR_load_strings_const(
    ffi.Pointer<ERR_STRING_DATA> str,
  ) {
    return _ERR_load_strings_const(
      str,
    );
  }

  late final _ERR_load_strings_constPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ERR_STRING_DATA>)>>(
      'ERR_load_strings_const');
  late final _ERR_load_strings_const = _ERR_load_strings_constPtr.asFunction<
      int Function(ffi.Pointer<ERR_STRING_DATA>)>();

  int ERR_unload_strings(
    int lib,
    ffi.Pointer<ERR_STRING_DATA> str,
  ) {
    return _ERR_unload_strings(
      lib,
      str,
    );
  }

  late final _ERR_unload_stringsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ERR_STRING_DATA>)>>('ERR_unload_strings');
  late final _ERR_unload_strings = _ERR_unload_stringsPtr.asFunction<
      int Function(int, ffi.Pointer<ERR_STRING_DATA>)>();

  int ERR_load_ERR_strings() {
    return _ERR_load_ERR_strings();
  }

  late final _ERR_load_ERR_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_ERR_strings');
  late final _ERR_load_ERR_strings =
      _ERR_load_ERR_stringsPtr.asFunction<int Function()>();

  void ERR_remove_thread_state(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _ERR_remove_thread_state(
      arg0,
    );
  }

  late final _ERR_remove_thread_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'ERR_remove_thread_state');
  late final _ERR_remove_thread_state = _ERR_remove_thread_statePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>)>();

  void ERR_remove_state(
    int pid,
  ) {
    return _ERR_remove_state(
      pid,
    );
  }

  late final _ERR_remove_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedLong)>>(
          'ERR_remove_state');
  late final _ERR_remove_state =
      _ERR_remove_statePtr.asFunction<void Function(int)>();

  ffi.Pointer<ERR_STATE> ERR_get_state() {
    return _ERR_get_state();
  }

  late final _ERR_get_statePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ERR_STATE> Function()>>(
          'ERR_get_state');
  late final _ERR_get_state =
      _ERR_get_statePtr.asFunction<ffi.Pointer<ERR_STATE> Function()>();

  int ERR_get_next_error_library() {
    return _ERR_get_next_error_library();
  }

  late final _ERR_get_next_error_libraryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ERR_get_next_error_library');
  late final _ERR_get_next_error_library =
      _ERR_get_next_error_libraryPtr.asFunction<int Function()>();

  int ERR_set_mark() {
    return _ERR_set_mark();
  }

  late final _ERR_set_markPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_set_mark');
  late final _ERR_set_mark = _ERR_set_markPtr.asFunction<int Function()>();

  int ERR_pop_to_mark() {
    return _ERR_pop_to_mark();
  }

  late final _ERR_pop_to_markPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_pop_to_mark');
  late final _ERR_pop_to_mark =
      _ERR_pop_to_markPtr.asFunction<int Function()>();

  int ERR_clear_last_mark() {
    return _ERR_clear_last_mark();
  }

  late final _ERR_clear_last_markPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_clear_last_mark');
  late final _ERR_clear_last_mark =
      _ERR_clear_last_markPtr.asFunction<int Function()>();

  int ERR_load_EVP_strings() {
    return _ERR_load_EVP_strings();
  }

  late final _ERR_load_EVP_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_EVP_strings');
  late final _ERR_load_EVP_strings =
      _ERR_load_EVP_stringsPtr.asFunction<int Function()>();

  int ERR_load_ASN1_strings() {
    return _ERR_load_ASN1_strings();
  }

  late final _ERR_load_ASN1_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_ASN1_strings');
  late final _ERR_load_ASN1_strings =
      _ERR_load_ASN1_stringsPtr.asFunction<int Function()>();

  int ERR_load_BN_strings() {
    return _ERR_load_BN_strings();
  }

  late final _ERR_load_BN_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_BN_strings');
  late final _ERR_load_BN_strings =
      _ERR_load_BN_stringsPtr.asFunction<int Function()>();

  void BN_set_flags(
    ffi.Pointer<BIGNUM> b,
    int n,
  ) {
    return _BN_set_flags(
      b,
      n,
    );
  }

  late final _BN_set_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_set_flags');
  late final _BN_set_flags =
      _BN_set_flagsPtr.asFunction<void Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_get_flags(
    ffi.Pointer<BIGNUM> b,
    int n,
  ) {
    return _BN_get_flags(
      b,
      n,
    );
  }

  late final _BN_get_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_get_flags');
  late final _BN_get_flags =
      _BN_get_flagsPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  void BN_with_flags(
    ffi.Pointer<BIGNUM> dest,
    ffi.Pointer<BIGNUM> b,
    int flags,
  ) {
    return _BN_with_flags(
      dest,
      b,
      flags,
    );
  }

  late final _BN_with_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Int)>>('BN_with_flags');
  late final _BN_with_flags = _BN_with_flagsPtr.asFunction<
      void Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)>();

  int BN_GENCB_call(
    ffi.Pointer<BN_GENCB> cb,
    int a,
    int b,
  ) {
    return _BN_GENCB_call(
      cb,
      a,
      b,
    );
  }

  late final _BN_GENCB_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BN_GENCB>, ffi.Int, ffi.Int)>>('BN_GENCB_call');
  late final _BN_GENCB_call = _BN_GENCB_callPtr.asFunction<
      int Function(ffi.Pointer<BN_GENCB>, int, int)>();

  ffi.Pointer<BN_GENCB> BN_GENCB_new() {
    return _BN_GENCB_new();
  }

  late final _BN_GENCB_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_GENCB> Function()>>(
          'BN_GENCB_new');
  late final _BN_GENCB_new =
      _BN_GENCB_newPtr.asFunction<ffi.Pointer<BN_GENCB> Function()>();

  void BN_GENCB_free(
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_GENCB_free(
      cb,
    );
  }

  late final _BN_GENCB_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_GENCB>)>>(
          'BN_GENCB_free');
  late final _BN_GENCB_free =
      _BN_GENCB_freePtr.asFunction<void Function(ffi.Pointer<BN_GENCB>)>();

  void BN_GENCB_set_old(
    ffi.Pointer<BN_GENCB> gencb,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _BN_GENCB_set_old(
      gencb,
      callback,
      cb_arg,
    );
  }

  late final _BN_GENCB_set_oldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BN_GENCB>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('BN_GENCB_set_old');
  late final _BN_GENCB_set_old = _BN_GENCB_set_oldPtr.asFunction<
      void Function(
          ffi.Pointer<BN_GENCB>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void BN_GENCB_set(
    ffi.Pointer<BN_GENCB> gencb,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<BN_GENCB>)>>
        callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _BN_GENCB_set(
      gencb,
      callback,
      cb_arg,
    );
  }

  late final _BN_GENCB_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BN_GENCB>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int, ffi.Int, ffi.Pointer<BN_GENCB>)>>,
              ffi.Pointer<ffi.Void>)>>('BN_GENCB_set');
  late final _BN_GENCB_set = _BN_GENCB_setPtr.asFunction<
      void Function(
          ffi.Pointer<BN_GENCB>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Int, ffi.Int, ffi.Pointer<BN_GENCB>)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> BN_GENCB_get_arg(
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_GENCB_get_arg(
      cb,
    );
  }

  late final _BN_GENCB_get_argPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<BN_GENCB>)>>('BN_GENCB_get_arg');
  late final _BN_GENCB_get_arg = _BN_GENCB_get_argPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<BN_GENCB>)>();

  int BN_abs_is_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_abs_is_word(
      a,
      w,
    );
  }

  late final _BN_abs_is_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_abs_is_word');
  late final _BN_abs_is_word =
      _BN_abs_is_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_is_zero(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_is_zero(
      a,
    );
  }

  late final _BN_is_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
          'BN_is_zero');
  late final _BN_is_zero =
      _BN_is_zeroPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_is_one(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_is_one(
      a,
    );
  }

  late final _BN_is_onePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
          'BN_is_one');
  late final _BN_is_one =
      _BN_is_onePtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_is_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_is_word(
      a,
      w,
    );
  }

  late final _BN_is_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_is_word');
  late final _BN_is_word =
      _BN_is_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_is_odd(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_is_odd(
      a,
    );
  }

  late final _BN_is_oddPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
          'BN_is_odd');
  late final _BN_is_odd =
      _BN_is_oddPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  void BN_zero_ex(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_zero_ex(
      a,
    );
  }

  late final _BN_zero_exPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
          'BN_zero_ex');
  late final _BN_zero_ex =
      _BN_zero_exPtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_value_one() {
    return _BN_value_one();
  }

  late final _BN_value_onePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_value_one');
  late final _BN_value_one =
      _BN_value_onePtr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<ffi.Char> BN_options() {
    return _BN_options();
  }

  late final _BN_optionsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'BN_options');
  late final _BN_options =
      _BN_optionsPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<BN_CTX> BN_CTX_new() {
    return _BN_CTX_new();
  }

  late final _BN_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_CTX> Function()>>('BN_CTX_new');
  late final _BN_CTX_new =
      _BN_CTX_newPtr.asFunction<ffi.Pointer<BN_CTX> Function()>();

  ffi.Pointer<BN_CTX> BN_CTX_secure_new() {
    return _BN_CTX_secure_new();
  }

  late final _BN_CTX_secure_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_CTX> Function()>>(
          'BN_CTX_secure_new');
  late final _BN_CTX_secure_new =
      _BN_CTX_secure_newPtr.asFunction<ffi.Pointer<BN_CTX> Function()>();

  void BN_CTX_free(
    ffi.Pointer<BN_CTX> c,
  ) {
    return _BN_CTX_free(
      c,
    );
  }

  late final _BN_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_CTX>)>>(
          'BN_CTX_free');
  late final _BN_CTX_free =
      _BN_CTX_freePtr.asFunction<void Function(ffi.Pointer<BN_CTX>)>();

  void BN_CTX_start(
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_CTX_start(
      ctx,
    );
  }

  late final _BN_CTX_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_CTX>)>>(
          'BN_CTX_start');
  late final _BN_CTX_start =
      _BN_CTX_startPtr.asFunction<void Function(ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> BN_CTX_get(
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_CTX_get(
      ctx,
    );
  }

  late final _BN_CTX_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<BN_CTX>)>>('BN_CTX_get');
  late final _BN_CTX_get = _BN_CTX_getPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<BN_CTX>)>();

  void BN_CTX_end(
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_CTX_end(
      ctx,
    );
  }

  late final _BN_CTX_endPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_CTX>)>>(
          'BN_CTX_end');
  late final _BN_CTX_end =
      _BN_CTX_endPtr.asFunction<void Function(ffi.Pointer<BN_CTX>)>();

  int BN_rand(
    ffi.Pointer<BIGNUM> rnd,
    int bits,
    int top,
    int bottom,
  ) {
    return _BN_rand(
      rnd,
      bits,
      top,
      bottom,
    );
  }

  late final _BN_randPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int, ffi.Int)>>('BN_rand');
  late final _BN_rand = _BN_randPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, int, int)>();

  int BN_priv_rand(
    ffi.Pointer<BIGNUM> rnd,
    int bits,
    int top,
    int bottom,
  ) {
    return _BN_priv_rand(
      rnd,
      bits,
      top,
      bottom,
    );
  }

  late final _BN_priv_randPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int, ffi.Int)>>('BN_priv_rand');
  late final _BN_priv_rand = _BN_priv_randPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, int, int)>();

  int BN_rand_range(
    ffi.Pointer<BIGNUM> rnd,
    ffi.Pointer<BIGNUM> range,
  ) {
    return _BN_rand_range(
      rnd,
      range,
    );
  }

  late final _BN_rand_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_rand_range');
  late final _BN_rand_range = _BN_rand_rangePtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_priv_rand_range(
    ffi.Pointer<BIGNUM> rnd,
    ffi.Pointer<BIGNUM> range,
  ) {
    return _BN_priv_rand_range(
      rnd,
      range,
    );
  }

  late final _BN_priv_rand_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_priv_rand_range');
  late final _BN_priv_rand_range = _BN_priv_rand_rangePtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_pseudo_rand(
    ffi.Pointer<BIGNUM> rnd,
    int bits,
    int top,
    int bottom,
  ) {
    return _BN_pseudo_rand(
      rnd,
      bits,
      top,
      bottom,
    );
  }

  late final _BN_pseudo_randPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int,
              ffi.Int)>>('BN_pseudo_rand');
  late final _BN_pseudo_rand = _BN_pseudo_randPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, int, int)>();

  int BN_pseudo_rand_range(
    ffi.Pointer<BIGNUM> rnd,
    ffi.Pointer<BIGNUM> range,
  ) {
    return _BN_pseudo_rand_range(
      rnd,
      range,
    );
  }

  late final _BN_pseudo_rand_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_pseudo_rand_range');
  late final _BN_pseudo_rand_range = _BN_pseudo_rand_rangePtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_num_bits(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_num_bits(
      a,
    );
  }

  late final _BN_num_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
          'BN_num_bits');
  late final _BN_num_bits =
      _BN_num_bitsPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_num_bits_word(
    int l,
  ) {
    return _BN_num_bits_word(
      l,
    );
  }

  late final _BN_num_bits_wordPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedLong)>>(
          'BN_num_bits_word');
  late final _BN_num_bits_word =
      _BN_num_bits_wordPtr.asFunction<int Function(int)>();

  int BN_security_bits(
    int L,
    int N,
  ) {
    return _BN_security_bits(
      L,
      N,
    );
  }

  late final _BN_security_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'BN_security_bits');
  late final _BN_security_bits =
      _BN_security_bitsPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<BIGNUM> BN_new() {
    return _BN_new();
  }

  late final _BN_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>('BN_new');
  late final _BN_new = _BN_newPtr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_secure_new() {
    return _BN_secure_new();
  }

  late final _BN_secure_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_secure_new');
  late final _BN_secure_new =
      _BN_secure_newPtr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  void BN_clear_free(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_clear_free(
      a,
    );
  }

  late final _BN_clear_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
          'BN_clear_free');
  late final _BN_clear_free =
      _BN_clear_freePtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_copy(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_copy(
      a,
      b,
    );
  }

  late final _BN_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_copy');
  late final _BN_copy = _BN_copyPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  void BN_swap(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_swap(
      a,
      b,
    );
  }

  late final _BN_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_swap');
  late final _BN_swap = _BN_swapPtr.asFunction<
      void Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_bin2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_bin2bn(
      s,
      len,
      ret,
    );
  }

  late final _BN_bin2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<BIGNUM>)>>('BN_bin2bn');
  late final _BN_bin2bn = _BN_bin2bnPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<BIGNUM>)>();

  int BN_bn2bin(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
  ) {
    return _BN_bn2bin(
      a,
      to,
    );
  }

  late final _BN_bn2binPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.UnsignedChar>)>>('BN_bn2bin');
  late final _BN_bn2bin = _BN_bn2binPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>)>();

  int BN_bn2binpad(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
    int tolen,
  ) {
    return _BN_bn2binpad(
      a,
      to,
      tolen,
    );
  }

  late final _BN_bn2binpadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('BN_bn2binpad');
  late final _BN_bn2binpad = _BN_bn2binpadPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<BIGNUM> BN_lebin2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_lebin2bn(
      s,
      len,
      ret,
    );
  }

  late final _BN_lebin2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<BIGNUM>)>>('BN_lebin2bn');
  late final _BN_lebin2bn = _BN_lebin2bnPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<BIGNUM>)>();

  int BN_bn2lebinpad(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
    int tolen,
  ) {
    return _BN_bn2lebinpad(
      a,
      to,
      tolen,
    );
  }

  late final _BN_bn2lebinpadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('BN_bn2lebinpad');
  late final _BN_bn2lebinpad = _BN_bn2lebinpadPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<BIGNUM> BN_mpi2bn(
    ffi.Pointer<ffi.UnsignedChar> s,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return _BN_mpi2bn(
      s,
      len,
      ret,
    );
  }

  late final _BN_mpi2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<BIGNUM>)>>('BN_mpi2bn');
  late final _BN_mpi2bn = _BN_mpi2bnPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<BIGNUM>)>();

  int BN_bn2mpi(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.UnsignedChar> to,
  ) {
    return _BN_bn2mpi(
      a,
      to,
    );
  }

  late final _BN_bn2mpiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.UnsignedChar>)>>('BN_bn2mpi');
  late final _BN_bn2mpi = _BN_bn2mpiPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.UnsignedChar>)>();

  int BN_sub(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_sub(
      r,
      a,
      b,
    );
  }

  late final _BN_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_sub');
  late final _BN_sub = _BN_subPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_usub(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_usub(
      r,
      a,
      b,
    );
  }

  late final _BN_usubPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_usub');
  late final _BN_usub = _BN_usubPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_uadd(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_uadd(
      r,
      a,
      b,
    );
  }

  late final _BN_uaddPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_uadd');
  late final _BN_uadd = _BN_uaddPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_add(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_add(
      r,
      a,
      b,
    );
  }

  late final _BN_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_add');
  late final _BN_add = _BN_addPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_mul(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mul(
      r,
      a,
      b,
      ctx,
    );
  }

  late final _BN_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mul');
  late final _BN_mul = _BN_mulPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_sqr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_sqr(
      r,
      a,
      ctx,
    );
  }

  late final _BN_sqrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_sqr');
  late final _BN_sqr = _BN_sqrPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  void BN_set_negative(
    ffi.Pointer<BIGNUM> b,
    int n,
  ) {
    return _BN_set_negative(
      b,
      n,
    );
  }

  late final _BN_set_negativePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_set_negative');
  late final _BN_set_negative =
      _BN_set_negativePtr.asFunction<void Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_is_negative(
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_is_negative(
      b,
    );
  }

  late final _BN_is_negativePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>)>>(
          'BN_is_negative');
  late final _BN_is_negative =
      _BN_is_negativePtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_div(
    ffi.Pointer<BIGNUM> dv,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BIGNUM> d,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_div(
      dv,
      rem,
      m,
      d,
      ctx,
    );
  }

  late final _BN_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_div');
  late final _BN_div = _BN_divPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_nnmod(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BIGNUM> d,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nnmod(
      r,
      m,
      d,
      ctx,
    );
  }

  late final _BN_nnmodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nnmod');
  late final _BN_nnmod = _BN_nnmodPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_add(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_add(
      r,
      a,
      b,
      m,
      ctx,
    );
  }

  late final _BN_mod_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_add');
  late final _BN_mod_add = _BN_mod_addPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_add_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_add_quick(
      r,
      a,
      b,
      m,
    );
  }

  late final _BN_mod_add_quickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_mod_add_quick');
  late final _BN_mod_add_quick = _BN_mod_add_quickPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_mod_sub(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_sub(
      r,
      a,
      b,
      m,
      ctx,
    );
  }

  late final _BN_mod_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_sub');
  late final _BN_mod_sub = _BN_mod_subPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_sub_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_sub_quick(
      r,
      a,
      b,
      m,
    );
  }

  late final _BN_mod_sub_quickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_mod_sub_quick');
  late final _BN_mod_sub_quick = _BN_mod_sub_quickPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_mod_mul(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_mul(
      r,
      a,
      b,
      m,
      ctx,
    );
  }

  late final _BN_mod_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_mul');
  late final _BN_mod_mul = _BN_mod_mulPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_sqr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_sqr(
      r,
      a,
      m,
      ctx,
    );
  }

  late final _BN_mod_sqrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mod_sqr');
  late final _BN_mod_sqr = _BN_mod_sqrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_lshift1(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_lshift1(
      r,
      a,
      m,
      ctx,
    );
  }

  late final _BN_mod_lshift1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mod_lshift1');
  late final _BN_mod_lshift1 = _BN_mod_lshift1Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_lshift1_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_lshift1_quick(
      r,
      a,
      m,
    );
  }

  late final _BN_mod_lshift1_quickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_mod_lshift1_quick');
  late final _BN_mod_lshift1_quick = _BN_mod_lshift1_quickPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_mod_lshift(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    int n,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_lshift(
      r,
      a,
      n,
      m,
      ctx,
    );
  }

  late final _BN_mod_lshiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mod_lshift');
  late final _BN_mod_lshift = _BN_mod_lshiftPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_lshift_quick(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    int n,
    ffi.Pointer<BIGNUM> m,
  ) {
    return _BN_mod_lshift_quick(
      r,
      a,
      n,
      m,
    );
  }

  late final _BN_mod_lshift_quickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int,
              ffi.Pointer<BIGNUM>)>>('BN_mod_lshift_quick');
  late final _BN_mod_lshift_quick = _BN_mod_lshift_quickPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int,
          ffi.Pointer<BIGNUM>)>();

  int BN_mod_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_mod_word(
      a,
      w,
    );
  }

  late final _BN_mod_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_mod_word');
  late final _BN_mod_word =
      _BN_mod_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_div_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_div_word(
      a,
      w,
    );
  }

  late final _BN_div_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_div_word');
  late final _BN_div_word =
      _BN_div_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_mul_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_mul_word(
      a,
      w,
    );
  }

  late final _BN_mul_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_mul_word');
  late final _BN_mul_word =
      _BN_mul_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_add_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_add_word(
      a,
      w,
    );
  }

  late final _BN_add_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_add_word');
  late final _BN_add_word =
      _BN_add_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_sub_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_sub_word(
      a,
      w,
    );
  }

  late final _BN_sub_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_sub_word');
  late final _BN_sub_word =
      _BN_sub_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_set_word(
    ffi.Pointer<BIGNUM> a,
    int w,
  ) {
    return _BN_set_word(
      a,
      w,
    );
  }

  late final _BN_set_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.UnsignedLong)>>('BN_set_word');
  late final _BN_set_word =
      _BN_set_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_get_word(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_get_word(
      a,
    );
  }

  late final _BN_get_wordPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<BIGNUM>)>>(
      'BN_get_word');
  late final _BN_get_word =
      _BN_get_wordPtr.asFunction<int Function(ffi.Pointer<BIGNUM>)>();

  int BN_cmp(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_cmp(
      a,
      b,
    );
  }

  late final _BN_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_cmp');
  late final _BN_cmp = _BN_cmpPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  void BN_free(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_free(
      a,
    );
  }

  late final _BN_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
          'BN_free');
  late final _BN_free =
      _BN_freePtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  int BN_is_bit_set(
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_is_bit_set(
      a,
      n,
    );
  }

  late final _BN_is_bit_setPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_is_bit_set');
  late final _BN_is_bit_set =
      _BN_is_bit_setPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_lshift(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_lshift(
      r,
      a,
      n,
    );
  }

  late final _BN_lshiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int)>>('BN_lshift');
  late final _BN_lshift = _BN_lshiftPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)>();

  int BN_lshift1(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_lshift1(
      r,
      a,
    );
  }

  late final _BN_lshift1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_lshift1');
  late final _BN_lshift1 = _BN_lshift1Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_exp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_exp(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_exp');
  late final _BN_exp = _BN_expPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_exp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_exp(
      r,
      a,
      p,
      m,
      ctx,
    );
  }

  late final _BN_mod_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_exp');
  late final _BN_mod_exp = _BN_mod_expPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mod_exp_mont(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> m_ctx,
  ) {
    return _BN_mod_exp_mont(
      r,
      a,
      p,
      m,
      ctx,
      m_ctx,
    );
  }

  late final _BN_mod_exp_montPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_mod_exp_mont');
  late final _BN_mod_exp_mont = _BN_mod_exp_montPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_MONT_CTX>)>();

  int BN_mod_exp_mont_consttime(
    ffi.Pointer<BIGNUM> rr,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> in_mont,
  ) {
    return _BN_mod_exp_mont_consttime(
      rr,
      a,
      p,
      m,
      ctx,
      in_mont,
    );
  }

  late final _BN_mod_exp_mont_consttimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_mod_exp_mont_consttime');
  late final _BN_mod_exp_mont_consttime =
      _BN_mod_exp_mont_consttimePtr.asFunction<
          int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>();

  int BN_mod_exp_mont_word(
    ffi.Pointer<BIGNUM> r,
    int a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> m_ctx,
  ) {
    return _BN_mod_exp_mont_word(
      r,
      a,
      p,
      m,
      ctx,
      m_ctx,
    );
  }

  late final _BN_mod_exp_mont_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.UnsignedLong,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_mod_exp_mont_word');
  late final _BN_mod_exp_mont_word = _BN_mod_exp_mont_wordPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_MONT_CTX>)>();

  int BN_mod_exp2_mont(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a1,
    ffi.Pointer<BIGNUM> p1,
    ffi.Pointer<BIGNUM> a2,
    ffi.Pointer<BIGNUM> p2,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_MONT_CTX> m_ctx,
  ) {
    return _BN_mod_exp2_mont(
      r,
      a1,
      p1,
      a2,
      p2,
      m,
      ctx,
      m_ctx,
    );
  }

  late final _BN_mod_exp2_montPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_mod_exp2_mont');
  late final _BN_mod_exp2_mont = _BN_mod_exp2_montPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_MONT_CTX>)>();

  int BN_mod_exp_simple(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_exp_simple(
      r,
      a,
      p,
      m,
      ctx,
    );
  }

  late final _BN_mod_exp_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_exp_simple');
  late final _BN_mod_exp_simple = _BN_mod_exp_simplePtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_mask_bits(
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_mask_bits(
      a,
      n,
    );
  }

  late final _BN_mask_bitsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_mask_bits');
  late final _BN_mask_bits =
      _BN_mask_bitsPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_print_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_print_fp(
      fp,
      a,
    );
  }

  late final _BN_print_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<BIGNUM>)>>('BN_print_fp');
  late final _BN_print_fp = _BN_print_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<BIGNUM>)>();

  int BN_print(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_print(
      bio,
      a,
    );
  }

  late final _BN_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<BIGNUM>)>>('BN_print');
  late final _BN_print = _BN_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<BIGNUM>)>();

  int BN_reciprocal(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> m,
    int len,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_reciprocal(
      r,
      m,
      len,
      ctx,
    );
  }

  late final _BN_reciprocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int,
              ffi.Pointer<BN_CTX>)>>('BN_reciprocal');
  late final _BN_reciprocal = _BN_reciprocalPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int,
          ffi.Pointer<BN_CTX>)>();

  int BN_rshift(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_rshift(
      r,
      a,
      n,
    );
  }

  late final _BN_rshiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int)>>('BN_rshift');
  late final _BN_rshift = _BN_rshiftPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)>();

  int BN_rshift1(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_rshift1(
      r,
      a,
    );
  }

  late final _BN_rshift1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_rshift1');
  late final _BN_rshift1 = _BN_rshift1Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  void BN_clear(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_clear(
      a,
    );
  }

  late final _BN_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BIGNUM>)>>(
          'BN_clear');
  late final _BN_clear =
      _BN_clearPtr.asFunction<void Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_dup(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_dup(
      a,
    );
  }

  late final _BN_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>>('BN_dup');
  late final _BN_dup = _BN_dupPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  int BN_ucmp(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_ucmp(
      a,
      b,
    );
  }

  late final _BN_ucmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_ucmp');
  late final _BN_ucmp = _BN_ucmpPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_set_bit(
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_set_bit(
      a,
      n,
    );
  }

  late final _BN_set_bitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_set_bit');
  late final _BN_set_bit =
      _BN_set_bitPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  int BN_clear_bit(
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return _BN_clear_bit(
      a,
      n,
    );
  }

  late final _BN_clear_bitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int)>>(
      'BN_clear_bit');
  late final _BN_clear_bit =
      _BN_clear_bitPtr.asFunction<int Function(ffi.Pointer<BIGNUM>, int)>();

  ffi.Pointer<ffi.Char> BN_bn2hex(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_bn2hex(
      a,
    );
  }

  late final _BN_bn2hexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)>>('BN_bn2hex');
  late final _BN_bn2hex = _BN_bn2hexPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<ffi.Char> BN_bn2dec(
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_bn2dec(
      a,
    );
  }

  late final _BN_bn2decPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)>>('BN_bn2dec');
  late final _BN_bn2dec = _BN_bn2decPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<BIGNUM>)>();

  int BN_hex2bn(
    ffi.Pointer<ffi.Pointer<BIGNUM>> a,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _BN_hex2bn(
      a,
      str,
    );
  }

  late final _BN_hex2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Char>)>>('BN_hex2bn');
  late final _BN_hex2bn = _BN_hex2bnPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>, ffi.Pointer<ffi.Char>)>();

  int BN_dec2bn(
    ffi.Pointer<ffi.Pointer<BIGNUM>> a,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _BN_dec2bn(
      a,
      str,
    );
  }

  late final _BN_dec2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Char>)>>('BN_dec2bn');
  late final _BN_dec2bn = _BN_dec2bnPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>, ffi.Pointer<ffi.Char>)>();

  int BN_asc2bn(
    ffi.Pointer<ffi.Pointer<BIGNUM>> a,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _BN_asc2bn(
      a,
      str,
    );
  }

  late final _BN_asc2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Char>)>>('BN_asc2bn');
  late final _BN_asc2bn = _BN_asc2bnPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<BIGNUM>>, ffi.Pointer<ffi.Char>)>();

  int BN_gcd(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_gcd(
      r,
      a,
      b,
      ctx,
    );
  }

  late final _BN_gcdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_gcd');
  late final _BN_gcd = _BN_gcdPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_kronecker(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_kronecker(
      a,
      b,
      ctx,
    );
  }

  late final _BN_kroneckerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_kronecker');
  late final _BN_kronecker = _BN_kroneckerPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> BN_mod_inverse(
    ffi.Pointer<BIGNUM> ret,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_inverse(
      ret,
      a,
      n,
      ctx,
    );
  }

  late final _BN_mod_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mod_inverse');
  late final _BN_mod_inverse = _BN_mod_inversePtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> BN_mod_sqrt(
    ffi.Pointer<BIGNUM> ret,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_sqrt(
      ret,
      a,
      n,
      ctx,
    );
  }

  late final _BN_mod_sqrtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_mod_sqrt');
  late final _BN_mod_sqrt = _BN_mod_sqrtPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  void BN_consttime_swap(
    int swap,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    int nwords,
  ) {
    return _BN_consttime_swap(
      swap,
      a,
      b,
      nwords,
    );
  }

  late final _BN_consttime_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedLong, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Int)>>('BN_consttime_swap');
  late final _BN_consttime_swap = _BN_consttime_swapPtr.asFunction<
      void Function(int, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int)>();

  ffi.Pointer<BIGNUM> BN_generate_prime(
    ffi.Pointer<BIGNUM> ret,
    int bits,
    int safe,
    ffi.Pointer<BIGNUM> add,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _BN_generate_prime(
      ret,
      bits,
      safe,
      add,
      rem,
      callback,
      cb_arg,
    );
  }

  late final _BN_generate_primePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('BN_generate_prime');
  late final _BN_generate_prime = _BN_generate_primePtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<BIGNUM>,
          int,
          int,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int BN_is_prime(
    ffi.Pointer<BIGNUM> p,
    int nchecks,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _BN_is_prime(
      p,
      nchecks,
      callback,
      ctx,
      cb_arg,
    );
  }

  late final _BN_is_primePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<ffi.Void>)>>('BN_is_prime');
  late final _BN_is_prime = _BN_is_primePtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<ffi.Void>)>();

  int BN_is_prime_fasttest(
    ffi.Pointer<BIGNUM> p,
    int nchecks,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<ffi.Void> cb_arg,
    int do_trial_division,
  ) {
    return _BN_is_prime_fasttest(
      p,
      nchecks,
      callback,
      ctx,
      cb_arg,
      do_trial_division,
    );
  }

  late final _BN_is_prime_fasttestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<ffi.Void>,
              ffi.Int)>>('BN_is_prime_fasttest');
  late final _BN_is_prime_fasttest = _BN_is_prime_fasttestPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<ffi.Void>,
          int)>();

  int BN_generate_prime_ex(
    ffi.Pointer<BIGNUM> ret,
    int bits,
    int safe,
    ffi.Pointer<BIGNUM> add,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_generate_prime_ex(
      ret,
      bits,
      safe,
      add,
      rem,
      cb,
    );
  }

  late final _BN_generate_prime_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_GENCB>)>>('BN_generate_prime_ex');
  late final _BN_generate_prime_ex = _BN_generate_prime_exPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, int, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_GENCB>)>();

  int BN_is_prime_ex(
    ffi.Pointer<BIGNUM> p,
    int nchecks,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_is_prime_ex(
      p,
      nchecks,
      ctx,
      cb,
    );
  }

  late final _BN_is_prime_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_GENCB>)>>('BN_is_prime_ex');
  late final _BN_is_prime_ex = _BN_is_prime_exPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_GENCB>)>();

  int BN_is_prime_fasttest_ex(
    ffi.Pointer<BIGNUM> p,
    int nchecks,
    ffi.Pointer<BN_CTX> ctx,
    int do_trial_division,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_is_prime_fasttest_ex(
      p,
      nchecks,
      ctx,
      do_trial_division,
      cb,
    );
  }

  late final _BN_is_prime_fasttest_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Pointer<BN_CTX>,
              ffi.Int, ffi.Pointer<BN_GENCB>)>>('BN_is_prime_fasttest_ex');
  late final _BN_is_prime_fasttest_ex = _BN_is_prime_fasttest_exPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, ffi.Pointer<BN_CTX>, int,
          ffi.Pointer<BN_GENCB>)>();

  int BN_X931_generate_Xpq(
    ffi.Pointer<BIGNUM> Xp,
    ffi.Pointer<BIGNUM> Xq,
    int nbits,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_X931_generate_Xpq(
      Xp,
      Xq,
      nbits,
      ctx,
    );
  }

  late final _BN_X931_generate_XpqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Int,
              ffi.Pointer<BN_CTX>)>>('BN_X931_generate_Xpq');
  late final _BN_X931_generate_Xpq = _BN_X931_generate_XpqPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, int,
          ffi.Pointer<BN_CTX>)>();

  int BN_X931_derive_prime_ex(
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> p1,
    ffi.Pointer<BIGNUM> p2,
    ffi.Pointer<BIGNUM> Xp,
    ffi.Pointer<BIGNUM> Xp1,
    ffi.Pointer<BIGNUM> Xp2,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_X931_derive_prime_ex(
      p,
      p1,
      p2,
      Xp,
      Xp1,
      Xp2,
      e,
      ctx,
      cb,
    );
  }

  late final _BN_X931_derive_prime_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_GENCB>)>>('BN_X931_derive_prime_ex');
  late final _BN_X931_derive_prime_ex = _BN_X931_derive_prime_exPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<BN_GENCB>)>();

  int BN_X931_generate_prime_ex(
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> p1,
    ffi.Pointer<BIGNUM> p2,
    ffi.Pointer<BIGNUM> Xp1,
    ffi.Pointer<BIGNUM> Xp2,
    ffi.Pointer<BIGNUM> Xp,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _BN_X931_generate_prime_ex(
      p,
      p1,
      p2,
      Xp1,
      Xp2,
      Xp,
      e,
      ctx,
      cb,
    );
  }

  late final _BN_X931_generate_prime_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_GENCB>)>>('BN_X931_generate_prime_ex');
  late final _BN_X931_generate_prime_ex =
      _BN_X931_generate_prime_exPtr.asFunction<
          int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_GENCB>)>();

  ffi.Pointer<BN_MONT_CTX> BN_MONT_CTX_new() {
    return _BN_MONT_CTX_new();
  }

  late final _BN_MONT_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_MONT_CTX> Function()>>(
          'BN_MONT_CTX_new');
  late final _BN_MONT_CTX_new =
      _BN_MONT_CTX_newPtr.asFunction<ffi.Pointer<BN_MONT_CTX> Function()>();

  int BN_mod_mul_montgomery(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_mul_montgomery(
      r,
      a,
      b,
      mont,
      ctx,
    );
  }

  late final _BN_mod_mul_montgomeryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_MONT_CTX>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_mul_montgomery');
  late final _BN_mod_mul_montgomery = _BN_mod_mul_montgomeryPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>,
          ffi.Pointer<BN_CTX>)>();

  int BN_to_montgomery(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_to_montgomery(
      r,
      a,
      mont,
      ctx,
    );
  }

  late final _BN_to_montgomeryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_MONT_CTX>,
              ffi.Pointer<BN_CTX>)>>('BN_to_montgomery');
  late final _BN_to_montgomery = _BN_to_montgomeryPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>, ffi.Pointer<BN_CTX>)>();

  int BN_from_montgomery(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_from_montgomery(
      r,
      a,
      mont,
      ctx,
    );
  }

  late final _BN_from_montgomeryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_MONT_CTX>,
              ffi.Pointer<BN_CTX>)>>('BN_from_montgomery');
  late final _BN_from_montgomery = _BN_from_montgomeryPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_MONT_CTX>, ffi.Pointer<BN_CTX>)>();

  void BN_MONT_CTX_free(
    ffi.Pointer<BN_MONT_CTX> mont,
  ) {
    return _BN_MONT_CTX_free(
      mont,
    );
  }

  late final _BN_MONT_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_MONT_CTX>)>>(
          'BN_MONT_CTX_free');
  late final _BN_MONT_CTX_free = _BN_MONT_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<BN_MONT_CTX>)>();

  int BN_MONT_CTX_set(
    ffi.Pointer<BN_MONT_CTX> mont,
    ffi.Pointer<BIGNUM> mod,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_MONT_CTX_set(
      mont,
      mod,
      ctx,
    );
  }

  late final _BN_MONT_CTX_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BN_MONT_CTX>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_MONT_CTX_set');
  late final _BN_MONT_CTX_set = _BN_MONT_CTX_setPtr.asFunction<
      int Function(ffi.Pointer<BN_MONT_CTX>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BN_MONT_CTX> BN_MONT_CTX_copy(
    ffi.Pointer<BN_MONT_CTX> to,
    ffi.Pointer<BN_MONT_CTX> from,
  ) {
    return _BN_MONT_CTX_copy(
      to,
      from,
    );
  }

  late final _BN_MONT_CTX_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BN_MONT_CTX> Function(ffi.Pointer<BN_MONT_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_MONT_CTX_copy');
  late final _BN_MONT_CTX_copy = _BN_MONT_CTX_copyPtr.asFunction<
      ffi.Pointer<BN_MONT_CTX> Function(
          ffi.Pointer<BN_MONT_CTX>, ffi.Pointer<BN_MONT_CTX>)>();

  ffi.Pointer<BN_MONT_CTX> BN_MONT_CTX_set_locked(
    ffi.Pointer<ffi.Pointer<BN_MONT_CTX>> pmont,
    ffi.Pointer<CRYPTO_RWLOCK> lock,
    ffi.Pointer<BIGNUM> mod,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_MONT_CTX_set_locked(
      pmont,
      lock,
      mod,
      ctx,
    );
  }

  late final _BN_MONT_CTX_set_lockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BN_MONT_CTX> Function(
              ffi.Pointer<ffi.Pointer<BN_MONT_CTX>>,
              ffi.Pointer<CRYPTO_RWLOCK>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_MONT_CTX_set_locked');
  late final _BN_MONT_CTX_set_locked = _BN_MONT_CTX_set_lockedPtr.asFunction<
      ffi.Pointer<BN_MONT_CTX> Function(
          ffi.Pointer<ffi.Pointer<BN_MONT_CTX>>,
          ffi.Pointer<CRYPTO_RWLOCK>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BN_BLINDING> BN_BLINDING_new(
    ffi.Pointer<BIGNUM> A,
    ffi.Pointer<BIGNUM> Ai,
    ffi.Pointer<BIGNUM> mod,
  ) {
    return _BN_BLINDING_new(
      A,
      Ai,
      mod,
    );
  }

  late final _BN_BLINDING_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BN_BLINDING> Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('BN_BLINDING_new');
  late final _BN_BLINDING_new = _BN_BLINDING_newPtr.asFunction<
      ffi.Pointer<BN_BLINDING> Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  void BN_BLINDING_free(
    ffi.Pointer<BN_BLINDING> b,
  ) {
    return _BN_BLINDING_free(
      b,
    );
  }

  late final _BN_BLINDING_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_BLINDING>)>>(
          'BN_BLINDING_free');
  late final _BN_BLINDING_free = _BN_BLINDING_freePtr.asFunction<
      void Function(ffi.Pointer<BN_BLINDING>)>();

  int BN_BLINDING_update(
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_BLINDING_update(
      b,
      ctx,
    );
  }

  late final _BN_BLINDING_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BN_CTX>)>>('BN_BLINDING_update');
  late final _BN_BLINDING_update = _BN_BLINDING_updatePtr.asFunction<
      int Function(ffi.Pointer<BN_BLINDING>, ffi.Pointer<BN_CTX>)>();

  int BN_BLINDING_convert(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_BLINDING_convert(
      n,
      b,
      ctx,
    );
  }

  late final _BN_BLINDING_convertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BN_CTX>)>>('BN_BLINDING_convert');
  late final _BN_BLINDING_convert = _BN_BLINDING_convertPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BN_BLINDING>,
          ffi.Pointer<BN_CTX>)>();

  int BN_BLINDING_invert(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_BLINDING_invert(
      n,
      b,
      ctx,
    );
  }

  late final _BN_BLINDING_invertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BN_CTX>)>>('BN_BLINDING_invert');
  late final _BN_BLINDING_invert = _BN_BLINDING_invertPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BN_BLINDING>,
          ffi.Pointer<BN_CTX>)>();

  int BN_BLINDING_convert_ex(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> arg3,
  ) {
    return _BN_BLINDING_convert_ex(
      n,
      r,
      b,
      arg3,
    );
  }

  late final _BN_BLINDING_convert_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BN_CTX>)>>('BN_BLINDING_convert_ex');
  late final _BN_BLINDING_convert_ex = _BN_BLINDING_convert_exPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_BLINDING>, ffi.Pointer<BN_CTX>)>();

  int BN_BLINDING_invert_ex(
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BN_CTX> arg3,
  ) {
    return _BN_BLINDING_invert_ex(
      n,
      r,
      b,
      arg3,
    );
  }

  late final _BN_BLINDING_invert_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BN_CTX>)>>('BN_BLINDING_invert_ex');
  late final _BN_BLINDING_invert_ex = _BN_BLINDING_invert_exPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_BLINDING>, ffi.Pointer<BN_CTX>)>();

  int BN_BLINDING_is_current_thread(
    ffi.Pointer<BN_BLINDING> b,
  ) {
    return _BN_BLINDING_is_current_thread(
      b,
    );
  }

  late final _BN_BLINDING_is_current_threadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BN_BLINDING>)>>(
          'BN_BLINDING_is_current_thread');
  late final _BN_BLINDING_is_current_thread = _BN_BLINDING_is_current_threadPtr
      .asFunction<int Function(ffi.Pointer<BN_BLINDING>)>();

  void BN_BLINDING_set_current_thread(
    ffi.Pointer<BN_BLINDING> b,
  ) {
    return _BN_BLINDING_set_current_thread(
      b,
    );
  }

  late final _BN_BLINDING_set_current_threadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_BLINDING>)>>(
          'BN_BLINDING_set_current_thread');
  late final _BN_BLINDING_set_current_thread =
      _BN_BLINDING_set_current_threadPtr.asFunction<
          void Function(ffi.Pointer<BN_BLINDING>)>();

  int BN_BLINDING_lock(
    ffi.Pointer<BN_BLINDING> b,
  ) {
    return _BN_BLINDING_lock(
      b,
    );
  }

  late final _BN_BLINDING_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BN_BLINDING>)>>(
          'BN_BLINDING_lock');
  late final _BN_BLINDING_lock =
      _BN_BLINDING_lockPtr.asFunction<int Function(ffi.Pointer<BN_BLINDING>)>();

  int BN_BLINDING_unlock(
    ffi.Pointer<BN_BLINDING> b,
  ) {
    return _BN_BLINDING_unlock(
      b,
    );
  }

  late final _BN_BLINDING_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BN_BLINDING>)>>(
          'BN_BLINDING_unlock');
  late final _BN_BLINDING_unlock = _BN_BLINDING_unlockPtr.asFunction<
      int Function(ffi.Pointer<BN_BLINDING>)>();

  int BN_BLINDING_get_flags(
    ffi.Pointer<BN_BLINDING> arg0,
  ) {
    return _BN_BLINDING_get_flags(
      arg0,
    );
  }

  late final _BN_BLINDING_get_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<BN_BLINDING>)>>('BN_BLINDING_get_flags');
  late final _BN_BLINDING_get_flags = _BN_BLINDING_get_flagsPtr.asFunction<
      int Function(ffi.Pointer<BN_BLINDING>)>();

  void BN_BLINDING_set_flags(
    ffi.Pointer<BN_BLINDING> arg0,
    int arg1,
  ) {
    return _BN_BLINDING_set_flags(
      arg0,
      arg1,
    );
  }

  late final _BN_BLINDING_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<BN_BLINDING>,
              ffi.UnsignedLong)>>('BN_BLINDING_set_flags');
  late final _BN_BLINDING_set_flags = _BN_BLINDING_set_flagsPtr.asFunction<
      void Function(ffi.Pointer<BN_BLINDING>, int)>();

  ffi.Pointer<BN_BLINDING> BN_BLINDING_create_param(
    ffi.Pointer<BN_BLINDING> b,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BN_CTX>,
                    ffi.Pointer<BN_MONT_CTX>)>>
        bn_mod_exp,
    ffi.Pointer<BN_MONT_CTX> m_ctx,
  ) {
    return _BN_BLINDING_create_param(
      b,
      e,
      m,
      ctx,
      bn_mod_exp,
      m_ctx,
    );
  }

  late final _BN_BLINDING_create_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BN_BLINDING> Function(
              ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BN_CTX>,
                          ffi.Pointer<BN_MONT_CTX>)>>,
              ffi.Pointer<BN_MONT_CTX>)>>('BN_BLINDING_create_param');
  late final _BN_BLINDING_create_param =
      _BN_BLINDING_create_paramPtr.asFunction<
          ffi.Pointer<BN_BLINDING> Function(
              ffi.Pointer<BN_BLINDING>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BN_CTX>,
                          ffi.Pointer<BN_MONT_CTX>)>>,
              ffi.Pointer<BN_MONT_CTX>)>();

  void BN_set_params(
    int mul,
    int high,
    int low,
    int mont,
  ) {
    return _BN_set_params(
      mul,
      high,
      low,
      mont,
    );
  }

  late final _BN_set_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('BN_set_params');
  late final _BN_set_params =
      _BN_set_paramsPtr.asFunction<void Function(int, int, int, int)>();

  int BN_get_params(
    int which,
  ) {
    return _BN_get_params(
      which,
    );
  }

  late final _BN_get_paramsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('BN_get_params');
  late final _BN_get_params = _BN_get_paramsPtr.asFunction<int Function(int)>();

  ffi.Pointer<BN_RECP_CTX> BN_RECP_CTX_new() {
    return _BN_RECP_CTX_new();
  }

  late final _BN_RECP_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BN_RECP_CTX> Function()>>(
          'BN_RECP_CTX_new');
  late final _BN_RECP_CTX_new =
      _BN_RECP_CTX_newPtr.asFunction<ffi.Pointer<BN_RECP_CTX> Function()>();

  void BN_RECP_CTX_free(
    ffi.Pointer<BN_RECP_CTX> recp,
  ) {
    return _BN_RECP_CTX_free(
      recp,
    );
  }

  late final _BN_RECP_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BN_RECP_CTX>)>>(
          'BN_RECP_CTX_free');
  late final _BN_RECP_CTX_free = _BN_RECP_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<BN_RECP_CTX>)>();

  int BN_RECP_CTX_set(
    ffi.Pointer<BN_RECP_CTX> recp,
    ffi.Pointer<BIGNUM> rdiv,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_RECP_CTX_set(
      recp,
      rdiv,
      ctx,
    );
  }

  late final _BN_RECP_CTX_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BN_RECP_CTX>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_RECP_CTX_set');
  late final _BN_RECP_CTX_set = _BN_RECP_CTX_setPtr.asFunction<
      int Function(ffi.Pointer<BN_RECP_CTX>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>)>();

  int BN_mod_mul_reciprocal(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_RECP_CTX> recp,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_mul_reciprocal(
      r,
      x,
      y,
      recp,
      ctx,
    );
  }

  late final _BN_mod_mul_reciprocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_RECP_CTX>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_mul_reciprocal');
  late final _BN_mod_mul_reciprocal = _BN_mod_mul_reciprocalPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_RECP_CTX>,
          ffi.Pointer<BN_CTX>)>();

  int BN_mod_exp_recp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_mod_exp_recp(
      r,
      a,
      p,
      m,
      ctx,
    );
  }

  late final _BN_mod_exp_recpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_mod_exp_recp');
  late final _BN_mod_exp_recp = _BN_mod_exp_recpPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_div_recp(
    ffi.Pointer<BIGNUM> dv,
    ffi.Pointer<BIGNUM> rem,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_RECP_CTX> recp,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_div_recp(
      dv,
      rem,
      m,
      recp,
      ctx,
    );
  }

  late final _BN_div_recpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_RECP_CTX>,
              ffi.Pointer<BN_CTX>)>>('BN_div_recp');
  late final _BN_div_recp = _BN_div_recpPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_RECP_CTX>,
          ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_add(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return _BN_GF2m_add(
      r,
      a,
      b,
    );
  }

  late final _BN_GF2m_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_GF2m_add');
  late final _BN_GF2m_add = _BN_GF2m_addPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_GF2m_mod(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
  ) {
    return _BN_GF2m_mod(
      r,
      a,
      p,
    );
  }

  late final _BN_GF2m_modPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('BN_GF2m_mod');
  late final _BN_GF2m_mod = _BN_GF2m_modPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int BN_GF2m_mod_mul(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_mul(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_mul');
  late final _BN_GF2m_mod_mul = _BN_GF2m_mod_mulPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_sqr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_sqr(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_sqrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_sqr');
  late final _BN_GF2m_mod_sqr = _BN_GF2m_mod_sqrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_inv(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_inv(
      r,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_invPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_inv');
  late final _BN_GF2m_mod_inv = _BN_GF2m_mod_invPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_div(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_div(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_div');
  late final _BN_GF2m_mod_div = _BN_GF2m_mod_divPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_exp(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_exp(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_exp');
  late final _BN_GF2m_mod_exp = _BN_GF2m_mod_expPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_sqrt(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_sqrt(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_sqrtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_sqrt');
  late final _BN_GF2m_mod_sqrt = _BN_GF2m_mod_sqrtPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_solve_quad(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_solve_quad(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_solve_quadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_solve_quad');
  late final _BN_GF2m_mod_solve_quad = _BN_GF2m_mod_solve_quadPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
  ) {
    return _BN_GF2m_mod_arr(
      r,
      a,
      p,
    );
  }

  late final _BN_GF2m_mod_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>)>>('BN_GF2m_mod_arr');
  late final _BN_GF2m_mod_arr = _BN_GF2m_mod_arrPtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>)>();

  int BN_GF2m_mod_mul_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_mul_arr(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_mul_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_mul_arr');
  late final _BN_GF2m_mod_mul_arr = _BN_GF2m_mod_mul_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_sqr_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_sqr_arr(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_sqr_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_sqr_arr');
  late final _BN_GF2m_mod_sqr_arr = _BN_GF2m_mod_sqr_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_inv_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_inv_arr(
      r,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_inv_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_inv_arr');
  late final _BN_GF2m_mod_inv_arr = _BN_GF2m_mod_inv_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_div_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_div_arr(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_div_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_div_arr');
  late final _BN_GF2m_mod_div_arr = _BN_GF2m_mod_div_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_exp_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_exp_arr(
      r,
      a,
      b,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_exp_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_exp_arr');
  late final _BN_GF2m_mod_exp_arr = _BN_GF2m_mod_exp_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_sqrt_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_sqrt_arr(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_sqrt_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_sqrt_arr');
  late final _BN_GF2m_mod_sqrt_arr = _BN_GF2m_mod_sqrt_arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_mod_solve_quad_arr(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_GF2m_mod_solve_quad_arr(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_GF2m_mod_solve_quad_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<BN_CTX>)>>('BN_GF2m_mod_solve_quad_arr');
  late final _BN_GF2m_mod_solve_quad_arr =
      _BN_GF2m_mod_solve_quad_arrPtr.asFunction<
          int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<BN_CTX>)>();

  int BN_GF2m_poly2arr(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<ffi.Int> p,
    int max,
  ) {
    return _BN_GF2m_poly2arr(
      a,
      p,
      max,
    );
  }

  late final _BN_GF2m_poly2arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('BN_GF2m_poly2arr');
  late final _BN_GF2m_poly2arr = _BN_GF2m_poly2arrPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>, int)>();

  int BN_GF2m_arr2poly(
    ffi.Pointer<ffi.Int> p,
    ffi.Pointer<BIGNUM> a,
  ) {
    return _BN_GF2m_arr2poly(
      p,
      a,
    );
  }

  late final _BN_GF2m_arr2polyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<BIGNUM>)>>('BN_GF2m_arr2poly');
  late final _BN_GF2m_arr2poly = _BN_GF2m_arr2polyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<BIGNUM>)>();

  int BN_nist_mod_192(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_192(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_nist_mod_192Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nist_mod_192');
  late final _BN_nist_mod_192 = _BN_nist_mod_192Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_nist_mod_224(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_224(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_nist_mod_224Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nist_mod_224');
  late final _BN_nist_mod_224 = _BN_nist_mod_224Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_nist_mod_256(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_256(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_nist_mod_256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nist_mod_256');
  late final _BN_nist_mod_256 = _BN_nist_mod_256Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_nist_mod_384(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_384(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_nist_mod_384Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nist_mod_384');
  late final _BN_nist_mod_384 = _BN_nist_mod_384Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int BN_nist_mod_521(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_nist_mod_521(
      r,
      a,
      p,
      ctx,
    );
  }

  late final _BN_nist_mod_521Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>('BN_nist_mod_521');
  late final _BN_nist_mod_521 = _BN_nist_mod_521Ptr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_192() {
    return _BN_get0_nist_prime_192();
  }

  late final _BN_get0_nist_prime_192Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_get0_nist_prime_192');
  late final _BN_get0_nist_prime_192 =
      _BN_get0_nist_prime_192Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_224() {
    return _BN_get0_nist_prime_224();
  }

  late final _BN_get0_nist_prime_224Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_get0_nist_prime_224');
  late final _BN_get0_nist_prime_224 =
      _BN_get0_nist_prime_224Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_256() {
    return _BN_get0_nist_prime_256();
  }

  late final _BN_get0_nist_prime_256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_get0_nist_prime_256');
  late final _BN_get0_nist_prime_256 =
      _BN_get0_nist_prime_256Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_384() {
    return _BN_get0_nist_prime_384();
  }

  late final _BN_get0_nist_prime_384Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_get0_nist_prime_384');
  late final _BN_get0_nist_prime_384 =
      _BN_get0_nist_prime_384Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<BIGNUM> BN_get0_nist_prime_521() {
    return _BN_get0_nist_prime_521();
  }

  late final _BN_get0_nist_prime_521Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIGNUM> Function()>>(
          'BN_get0_nist_prime_521');
  late final _BN_get0_nist_prime_521 =
      _BN_get0_nist_prime_521Ptr.asFunction<ffi.Pointer<BIGNUM> Function()>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>> BN_nist_mod_func(
    ffi.Pointer<BIGNUM> p,
  ) {
    return _BN_nist_mod_func(
      p,
    );
  }

  late final _BN_nist_mod_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>
              Function(ffi.Pointer<BIGNUM>)>>('BN_nist_mod_func');
  late final _BN_nist_mod_func = _BN_nist_mod_funcPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>>
          Function(ffi.Pointer<BIGNUM>)>();

  int BN_generate_dsa_nonce(
    ffi.Pointer<BIGNUM> out,
    ffi.Pointer<BIGNUM> range,
    ffi.Pointer<BIGNUM> priv,
    ffi.Pointer<ffi.UnsignedChar> message,
    int message_len,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _BN_generate_dsa_nonce(
      out,
      range,
      priv,
      message,
      message_len,
      ctx,
    );
  }

  late final _BN_generate_dsa_noncePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<BN_CTX>)>>('BN_generate_dsa_nonce');
  late final _BN_generate_dsa_nonce = _BN_generate_dsa_noncePtr.asFunction<
      int Function(
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc2409_prime_768(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc2409_prime_768(
      bn,
    );
  }

  late final _BN_get_rfc2409_prime_768Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>)>>('BN_get_rfc2409_prime_768');
  late final _BN_get_rfc2409_prime_768 = _BN_get_rfc2409_prime_768Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc2409_prime_1024(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc2409_prime_1024(
      bn,
    );
  }

  late final _BN_get_rfc2409_prime_1024Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>)>>('BN_get_rfc2409_prime_1024');
  late final _BN_get_rfc2409_prime_1024 = _BN_get_rfc2409_prime_1024Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_1536(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_1536(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_1536Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>)>>('BN_get_rfc3526_prime_1536');
  late final _BN_get_rfc3526_prime_1536 = _BN_get_rfc3526_prime_1536Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_2048(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_2048(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_2048Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>)>>('BN_get_rfc3526_prime_2048');
  late final _BN_get_rfc3526_prime_2048 = _BN_get_rfc3526_prime_2048Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_3072(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_3072(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_3072Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>)>>('BN_get_rfc3526_prime_3072');
  late final _BN_get_rfc3526_prime_3072 = _BN_get_rfc3526_prime_3072Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_4096(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_4096(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_4096Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>)>>('BN_get_rfc3526_prime_4096');
  late final _BN_get_rfc3526_prime_4096 = _BN_get_rfc3526_prime_4096Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_6144(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_6144(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_6144Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>)>>('BN_get_rfc3526_prime_6144');
  late final _BN_get_rfc3526_prime_6144 = _BN_get_rfc3526_prime_6144Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> BN_get_rfc3526_prime_8192(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _BN_get_rfc3526_prime_8192(
      bn,
    );
  }

  late final _BN_get_rfc3526_prime_8192Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<BIGNUM>)>>('BN_get_rfc3526_prime_8192');
  late final _BN_get_rfc3526_prime_8192 = _BN_get_rfc3526_prime_8192Ptr
      .asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<BIGNUM>)>();

  int BN_bntest_rand(
    ffi.Pointer<BIGNUM> rnd,
    int bits,
    int top,
    int bottom,
  ) {
    return _BN_bntest_rand(
      rnd,
      bits,
      top,
      bottom,
    );
  }

  late final _BN_bntest_randPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Int, ffi.Int,
              ffi.Int)>>('BN_bntest_rand');
  late final _BN_bntest_rand = _BN_bntest_randPtr.asFunction<
      int Function(ffi.Pointer<BIGNUM>, int, int, int)>();

  ffi.Pointer<ASN1_SEQUENCE_ANY> d2i_ASN1_SEQUENCE_ANY(
    ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_SEQUENCE_ANY(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_SEQUENCE_ANYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_SEQUENCE_ANY> Function(
              ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_SEQUENCE_ANY');
  late final _d2i_ASN1_SEQUENCE_ANY = _d2i_ASN1_SEQUENCE_ANYPtr.asFunction<
      ffi.Pointer<ASN1_SEQUENCE_ANY> Function(
          ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_SEQUENCE_ANY(
    ffi.Pointer<ASN1_SEQUENCE_ANY> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_SEQUENCE_ANY(
      a,
      out,
    );
  }

  late final _i2d_ASN1_SEQUENCE_ANYPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_SEQUENCE_ANY>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_SEQUENCE_ANY');
  late final _i2d_ASN1_SEQUENCE_ANY = _i2d_ASN1_SEQUENCE_ANYPtr.asFunction<
      int Function(ffi.Pointer<ASN1_SEQUENCE_ANY>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_SEQUENCE_ANY_it =
      _lookup<ASN1_ITEM>('ASN1_SEQUENCE_ANY_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_SEQUENCE_ANY_it => _ASN1_SEQUENCE_ANY_it;

  ffi.Pointer<ASN1_SEQUENCE_ANY> d2i_ASN1_SET_ANY(
    ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_SET_ANY(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_SET_ANYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_SEQUENCE_ANY> Function(
              ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_SET_ANY');
  late final _d2i_ASN1_SET_ANY = _d2i_ASN1_SET_ANYPtr.asFunction<
      ffi.Pointer<ASN1_SEQUENCE_ANY> Function(
          ffi.Pointer<ffi.Pointer<ASN1_SEQUENCE_ANY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_SET_ANY(
    ffi.Pointer<ASN1_SEQUENCE_ANY> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_SET_ANY(
      a,
      out,
    );
  }

  late final _i2d_ASN1_SET_ANYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_SEQUENCE_ANY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_SET_ANY');
  late final _i2d_ASN1_SET_ANY = _i2d_ASN1_SET_ANYPtr.asFunction<
      int Function(ffi.Pointer<ASN1_SEQUENCE_ANY>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_SET_ANY_it =
      _lookup<ASN1_ITEM>('ASN1_SET_ANY_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_SET_ANY_it => _ASN1_SET_ANY_it;

  ffi.Pointer<ASN1_TYPE> ASN1_TYPE_new() {
    return _ASN1_TYPE_new();
  }

  late final _ASN1_TYPE_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_TYPE> Function()>>(
          'ASN1_TYPE_new');
  late final _ASN1_TYPE_new =
      _ASN1_TYPE_newPtr.asFunction<ffi.Pointer<ASN1_TYPE> Function()>();

  void ASN1_TYPE_free(
    ffi.Pointer<ASN1_TYPE> a,
  ) {
    return _ASN1_TYPE_free(
      a,
    );
  }

  late final _ASN1_TYPE_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_TYPE>)>>(
          'ASN1_TYPE_free');
  late final _ASN1_TYPE_free =
      _ASN1_TYPE_freePtr.asFunction<void Function(ffi.Pointer<ASN1_TYPE>)>();

  ffi.Pointer<ASN1_TYPE> d2i_ASN1_TYPE(
    ffi.Pointer<ffi.Pointer<ASN1_TYPE>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_TYPE(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_TYPEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TYPE> Function(
              ffi.Pointer<ffi.Pointer<ASN1_TYPE>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_TYPE');
  late final _d2i_ASN1_TYPE = _d2i_ASN1_TYPEPtr.asFunction<
      ffi.Pointer<ASN1_TYPE> Function(ffi.Pointer<ffi.Pointer<ASN1_TYPE>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_TYPE(
    ffi.Pointer<ASN1_TYPE> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_TYPE(
      a,
      out,
    );
  }

  late final _i2d_ASN1_TYPEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_TYPE');
  late final _i2d_ASN1_TYPE = _i2d_ASN1_TYPEPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TYPE>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_ANY_it =
      _lookup<ASN1_ITEM>('ASN1_ANY_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_ANY_it => _ASN1_ANY_it;

  int ASN1_TYPE_get(
    ffi.Pointer<ASN1_TYPE> a,
  ) {
    return _ASN1_TYPE_get(
      a,
    );
  }

  late final _ASN1_TYPE_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_TYPE>)>>(
          'ASN1_TYPE_get');
  late final _ASN1_TYPE_get =
      _ASN1_TYPE_getPtr.asFunction<int Function(ffi.Pointer<ASN1_TYPE>)>();

  void ASN1_TYPE_set(
    ffi.Pointer<ASN1_TYPE> a,
    int type,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _ASN1_TYPE_set(
      a,
      type,
      value,
    );
  }

  late final _ASN1_TYPE_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_TYPE>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ASN1_TYPE_set');
  late final _ASN1_TYPE_set = _ASN1_TYPE_setPtr.asFunction<
      void Function(ffi.Pointer<ASN1_TYPE>, int, ffi.Pointer<ffi.Void>)>();

  int ASN1_TYPE_set1(
    ffi.Pointer<ASN1_TYPE> a,
    int type,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _ASN1_TYPE_set1(
      a,
      type,
      value,
    );
  }

  late final _ASN1_TYPE_set1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TYPE>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('ASN1_TYPE_set1');
  late final _ASN1_TYPE_set1 = _ASN1_TYPE_set1Ptr.asFunction<
      int Function(ffi.Pointer<ASN1_TYPE>, int, ffi.Pointer<ffi.Void>)>();

  int ASN1_TYPE_cmp(
    ffi.Pointer<ASN1_TYPE> a,
    ffi.Pointer<ASN1_TYPE> b,
  ) {
    return _ASN1_TYPE_cmp(
      a,
      b,
    );
  }

  late final _ASN1_TYPE_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<ASN1_TYPE>)>>('ASN1_TYPE_cmp');
  late final _ASN1_TYPE_cmp = _ASN1_TYPE_cmpPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TYPE>, ffi.Pointer<ASN1_TYPE>)>();

  ffi.Pointer<ASN1_TYPE> ASN1_TYPE_pack_sequence(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<ffi.Void> s,
    ffi.Pointer<ffi.Pointer<ASN1_TYPE>> t,
  ) {
    return _ASN1_TYPE_pack_sequence(
      it,
      s,
      t,
    );
  }

  late final _ASN1_TYPE_pack_sequencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TYPE> Function(
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ASN1_TYPE>>)>>('ASN1_TYPE_pack_sequence');
  late final _ASN1_TYPE_pack_sequence = _ASN1_TYPE_pack_sequencePtr.asFunction<
      ffi.Pointer<ASN1_TYPE> Function(ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<ASN1_TYPE>>)>();

  ffi.Pointer<ffi.Void> ASN1_TYPE_unpack_sequence(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<ASN1_TYPE> t,
  ) {
    return _ASN1_TYPE_unpack_sequence(
      it,
      t,
    );
  }

  late final _ASN1_TYPE_unpack_sequencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<ASN1_TYPE>)>>('ASN1_TYPE_unpack_sequence');
  late final _ASN1_TYPE_unpack_sequence =
      _ASN1_TYPE_unpack_sequencePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ASN1_ITEM>, ffi.Pointer<ASN1_TYPE>)>();

  ffi.Pointer<ASN1_OBJECT> ASN1_OBJECT_new() {
    return _ASN1_OBJECT_new();
  }

  late final _ASN1_OBJECT_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_OBJECT> Function()>>(
          'ASN1_OBJECT_new');
  late final _ASN1_OBJECT_new =
      _ASN1_OBJECT_newPtr.asFunction<ffi.Pointer<ASN1_OBJECT> Function()>();

  void ASN1_OBJECT_free(
    ffi.Pointer<ASN1_OBJECT> a,
  ) {
    return _ASN1_OBJECT_free(
      a,
    );
  }

  late final _ASN1_OBJECT_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_OBJECT>)>>(
          'ASN1_OBJECT_free');
  late final _ASN1_OBJECT_free = _ASN1_OBJECT_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_OBJECT>)>();

  int i2d_ASN1_OBJECT(
    ffi.Pointer<ASN1_OBJECT> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_ASN1_OBJECT(
      a,
      pp,
    );
  }

  late final _i2d_ASN1_OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_OBJECT>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_OBJECT');
  late final _i2d_ASN1_OBJECT = _i2d_ASN1_OBJECTPtr.asFunction<
      int Function(ffi.Pointer<ASN1_OBJECT>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_OBJECT> d2i_ASN1_OBJECT(
    ffi.Pointer<ffi.Pointer<ASN1_OBJECT>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_ASN1_OBJECT(
      a,
      pp,
      length,
    );
  }

  late final _d2i_ASN1_OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(
              ffi.Pointer<ffi.Pointer<ASN1_OBJECT>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_OBJECT');
  late final _d2i_ASN1_OBJECT = _d2i_ASN1_OBJECTPtr.asFunction<
      ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<ffi.Pointer<ASN1_OBJECT>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_OBJECT_it =
      _lookup<ASN1_ITEM>('ASN1_OBJECT_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_OBJECT_it => _ASN1_OBJECT_it;

  ffi.Pointer<ASN1_STRING> ASN1_STRING_new() {
    return _ASN1_STRING_new();
  }

  late final _ASN1_STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_STRING> Function()>>(
          'ASN1_STRING_new');
  late final _ASN1_STRING_new =
      _ASN1_STRING_newPtr.asFunction<ffi.Pointer<ASN1_STRING> Function()>();

  void ASN1_STRING_free(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _ASN1_STRING_free(
      a,
    );
  }

  late final _ASN1_STRING_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_STRING>)>>(
          'ASN1_STRING_free');
  late final _ASN1_STRING_free = _ASN1_STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>)>();

  void ASN1_STRING_clear_free(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _ASN1_STRING_clear_free(
      a,
    );
  }

  late final _ASN1_STRING_clear_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_STRING>)>>(
          'ASN1_STRING_clear_free');
  late final _ASN1_STRING_clear_free = _ASN1_STRING_clear_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>)>();

  int ASN1_STRING_copy(
    ffi.Pointer<ASN1_STRING> dst,
    ffi.Pointer<ASN1_STRING> str,
  ) {
    return _ASN1_STRING_copy(
      dst,
      str,
    );
  }

  late final _ASN1_STRING_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_STRING>,
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_copy');
  late final _ASN1_STRING_copy = _ASN1_STRING_copyPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_STRING> ASN1_STRING_dup(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _ASN1_STRING_dup(
      a,
    );
  }

  late final _ASN1_STRING_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_dup');
  late final _ASN1_STRING_dup = _ASN1_STRING_dupPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_STRING> ASN1_STRING_type_new(
    int type,
  ) {
    return _ASN1_STRING_type_new(
      type,
    );
  }

  late final _ASN1_STRING_type_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_STRING> Function(ffi.Int)>>(
          'ASN1_STRING_type_new');
  late final _ASN1_STRING_type_new = _ASN1_STRING_type_newPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(int)>();

  int ASN1_STRING_cmp(
    ffi.Pointer<ASN1_STRING> a,
    ffi.Pointer<ASN1_STRING> b,
  ) {
    return _ASN1_STRING_cmp(
      a,
      b,
    );
  }

  late final _ASN1_STRING_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_STRING>,
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_cmp');
  late final _ASN1_STRING_cmp = _ASN1_STRING_cmpPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ASN1_STRING>)>();

  int ASN1_STRING_set(
    ffi.Pointer<ASN1_STRING> str,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _ASN1_STRING_set(
      str,
      data,
      len,
    );
  }

  late final _ASN1_STRING_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('ASN1_STRING_set');
  late final _ASN1_STRING_set = _ASN1_STRING_setPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ffi.Void>, int)>();

  void ASN1_STRING_set0(
    ffi.Pointer<ASN1_STRING> str,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _ASN1_STRING_set0(
      str,
      data,
      len,
    );
  }

  late final _ASN1_STRING_set0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('ASN1_STRING_set0');
  late final _ASN1_STRING_set0 = _ASN1_STRING_set0Ptr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>, ffi.Pointer<ffi.Void>, int)>();

  int ASN1_STRING_length(
    ffi.Pointer<ASN1_STRING> x,
  ) {
    return _ASN1_STRING_length(
      x,
    );
  }

  late final _ASN1_STRING_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_STRING>)>>(
          'ASN1_STRING_length');
  late final _ASN1_STRING_length = _ASN1_STRING_lengthPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>)>();

  void ASN1_STRING_length_set(
    ffi.Pointer<ASN1_STRING> x,
    int n,
  ) {
    return _ASN1_STRING_length_set(
      x,
      n,
    );
  }

  late final _ASN1_STRING_length_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_STRING>, ffi.Int)>>('ASN1_STRING_length_set');
  late final _ASN1_STRING_length_set = _ASN1_STRING_length_setPtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>, int)>();

  int ASN1_STRING_type(
    ffi.Pointer<ASN1_STRING> x,
  ) {
    return _ASN1_STRING_type(
      x,
    );
  }

  late final _ASN1_STRING_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_STRING>)>>(
          'ASN1_STRING_type');
  late final _ASN1_STRING_type =
      _ASN1_STRING_typePtr.asFunction<int Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ffi.UnsignedChar> ASN1_STRING_data(
    ffi.Pointer<ASN1_STRING> x,
  ) {
    return _ASN1_STRING_data(
      x,
    );
  }

  late final _ASN1_STRING_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_data');
  late final _ASN1_STRING_data = _ASN1_STRING_dataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ffi.UnsignedChar> ASN1_STRING_get0_data(
    ffi.Pointer<ASN1_STRING> x,
  ) {
    return _ASN1_STRING_get0_data(
      x,
    );
  }

  late final _ASN1_STRING_get0_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_get0_data');
  late final _ASN1_STRING_get0_data = _ASN1_STRING_get0_dataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_BIT_STRING> ASN1_BIT_STRING_new() {
    return _ASN1_BIT_STRING_new();
  }

  late final _ASN1_BIT_STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_BIT_STRING> Function()>>(
          'ASN1_BIT_STRING_new');
  late final _ASN1_BIT_STRING_new = _ASN1_BIT_STRING_newPtr.asFunction<
      ffi.Pointer<ASN1_BIT_STRING> Function()>();

  void ASN1_BIT_STRING_free(
    ffi.Pointer<ASN1_BIT_STRING> a,
  ) {
    return _ASN1_BIT_STRING_free(
      a,
    );
  }

  late final _ASN1_BIT_STRING_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_BIT_STRING>)>>(
      'ASN1_BIT_STRING_free');
  late final _ASN1_BIT_STRING_free = _ASN1_BIT_STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_BIT_STRING>)>();

  ffi.Pointer<ASN1_BIT_STRING> d2i_ASN1_BIT_STRING(
    ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_BIT_STRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_BIT_STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_BIT_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_BIT_STRING');
  late final _d2i_ASN1_BIT_STRING = _d2i_ASN1_BIT_STRINGPtr.asFunction<
      ffi.Pointer<ASN1_BIT_STRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_BIT_STRING(
    ffi.Pointer<ASN1_BIT_STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_BIT_STRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_BIT_STRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_BIT_STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_BIT_STRING');
  late final _i2d_ASN1_BIT_STRING = _i2d_ASN1_BIT_STRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_BIT_STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_BIT_STRING_it =
      _lookup<ASN1_ITEM>('ASN1_BIT_STRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_BIT_STRING_it => _ASN1_BIT_STRING_it;

  int ASN1_BIT_STRING_set(
    ffi.Pointer<ASN1_BIT_STRING> a,
    ffi.Pointer<ffi.UnsignedChar> d,
    int length,
  ) {
    return _ASN1_BIT_STRING_set(
      a,
      d,
      length,
    );
  }

  late final _ASN1_BIT_STRING_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('ASN1_BIT_STRING_set');
  late final _ASN1_BIT_STRING_set = _ASN1_BIT_STRING_setPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_BIT_STRING>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_BIT_STRING_set_bit(
    ffi.Pointer<ASN1_BIT_STRING> a,
    int n,
    int value,
  ) {
    return _ASN1_BIT_STRING_set_bit(
      a,
      n,
      value,
    );
  }

  late final _ASN1_BIT_STRING_set_bitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_BIT_STRING>, ffi.Int,
              ffi.Int)>>('ASN1_BIT_STRING_set_bit');
  late final _ASN1_BIT_STRING_set_bit = _ASN1_BIT_STRING_set_bitPtr.asFunction<
      int Function(ffi.Pointer<ASN1_BIT_STRING>, int, int)>();

  int ASN1_BIT_STRING_get_bit(
    ffi.Pointer<ASN1_BIT_STRING> a,
    int n,
  ) {
    return _ASN1_BIT_STRING_get_bit(
      a,
      n,
    );
  }

  late final _ASN1_BIT_STRING_get_bitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Int)>>('ASN1_BIT_STRING_get_bit');
  late final _ASN1_BIT_STRING_get_bit = _ASN1_BIT_STRING_get_bitPtr.asFunction<
      int Function(ffi.Pointer<ASN1_BIT_STRING>, int)>();

  int ASN1_BIT_STRING_check(
    ffi.Pointer<ASN1_BIT_STRING> a,
    ffi.Pointer<ffi.UnsignedChar> flags,
    int flags_len,
  ) {
    return _ASN1_BIT_STRING_check(
      a,
      flags,
      flags_len,
    );
  }

  late final _ASN1_BIT_STRING_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_BIT_STRING_check');
  late final _ASN1_BIT_STRING_check = _ASN1_BIT_STRING_checkPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_BIT_STRING>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_BIT_STRING_name_print(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_BIT_STRING> bs,
    ffi.Pointer<BIT_STRING_BITNAME> tbl,
    int indent,
  ) {
    return _ASN1_BIT_STRING_name_print(
      out,
      bs,
      tbl,
      indent,
    );
  }

  late final _ASN1_BIT_STRING_name_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<BIT_STRING_BITNAME>,
              ffi.Int)>>('ASN1_BIT_STRING_name_print');
  late final _ASN1_BIT_STRING_name_print =
      _ASN1_BIT_STRING_name_printPtr.asFunction<
          int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<BIT_STRING_BITNAME>, int)>();

  int ASN1_BIT_STRING_num_asc(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<BIT_STRING_BITNAME> tbl,
  ) {
    return _ASN1_BIT_STRING_num_asc(
      name,
      tbl,
    );
  }

  late final _ASN1_BIT_STRING_num_ascPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<BIT_STRING_BITNAME>)>>('ASN1_BIT_STRING_num_asc');
  late final _ASN1_BIT_STRING_num_asc = _ASN1_BIT_STRING_num_ascPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<BIT_STRING_BITNAME>)>();

  int ASN1_BIT_STRING_set_asc(
    ffi.Pointer<ASN1_BIT_STRING> bs,
    ffi.Pointer<ffi.Char> name,
    int value,
    ffi.Pointer<BIT_STRING_BITNAME> tbl,
  ) {
    return _ASN1_BIT_STRING_set_asc(
      bs,
      name,
      value,
      tbl,
    );
  }

  late final _ASN1_BIT_STRING_set_ascPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<BIT_STRING_BITNAME>)>>('ASN1_BIT_STRING_set_asc');
  late final _ASN1_BIT_STRING_set_asc = _ASN1_BIT_STRING_set_ascPtr.asFunction<
      int Function(ffi.Pointer<ASN1_BIT_STRING>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<BIT_STRING_BITNAME>)>();

  ffi.Pointer<ASN1_INTEGER> ASN1_INTEGER_new() {
    return _ASN1_INTEGER_new();
  }

  late final _ASN1_INTEGER_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_INTEGER> Function()>>(
          'ASN1_INTEGER_new');
  late final _ASN1_INTEGER_new =
      _ASN1_INTEGER_newPtr.asFunction<ffi.Pointer<ASN1_INTEGER> Function()>();

  void ASN1_INTEGER_free(
    ffi.Pointer<ASN1_INTEGER> a,
  ) {
    return _ASN1_INTEGER_free(
      a,
    );
  }

  late final _ASN1_INTEGER_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_INTEGER>)>>(
          'ASN1_INTEGER_free');
  late final _ASN1_INTEGER_free = _ASN1_INTEGER_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_INTEGER>)>();

  ffi.Pointer<ASN1_INTEGER> d2i_ASN1_INTEGER(
    ffi.Pointer<ffi.Pointer<ASN1_INTEGER>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_INTEGER(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_INTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_INTEGER> Function(
              ffi.Pointer<ffi.Pointer<ASN1_INTEGER>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_INTEGER');
  late final _d2i_ASN1_INTEGER = _d2i_ASN1_INTEGERPtr.asFunction<
      ffi.Pointer<ASN1_INTEGER> Function(ffi.Pointer<ffi.Pointer<ASN1_INTEGER>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_INTEGER(
    ffi.Pointer<ASN1_INTEGER> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_INTEGER(
      a,
      out,
    );
  }

  late final _i2d_ASN1_INTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_INTEGER>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_INTEGER');
  late final _i2d_ASN1_INTEGER = _i2d_ASN1_INTEGERPtr.asFunction<
      int Function(ffi.Pointer<ASN1_INTEGER>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_INTEGER_it =
      _lookup<ASN1_ITEM>('ASN1_INTEGER_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_INTEGER_it => _ASN1_INTEGER_it;

  ffi.Pointer<ASN1_INTEGER> d2i_ASN1_UINTEGER(
    ffi.Pointer<ffi.Pointer<ASN1_INTEGER>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_ASN1_UINTEGER(
      a,
      pp,
      length,
    );
  }

  late final _d2i_ASN1_UINTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_INTEGER> Function(
              ffi.Pointer<ffi.Pointer<ASN1_INTEGER>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_UINTEGER');
  late final _d2i_ASN1_UINTEGER = _d2i_ASN1_UINTEGERPtr.asFunction<
      ffi.Pointer<ASN1_INTEGER> Function(ffi.Pointer<ffi.Pointer<ASN1_INTEGER>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  ffi.Pointer<ASN1_INTEGER> ASN1_INTEGER_dup(
    ffi.Pointer<ASN1_INTEGER> x,
  ) {
    return _ASN1_INTEGER_dup(
      x,
    );
  }

  late final _ASN1_INTEGER_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_INTEGER> Function(
              ffi.Pointer<ASN1_INTEGER>)>>('ASN1_INTEGER_dup');
  late final _ASN1_INTEGER_dup = _ASN1_INTEGER_dupPtr.asFunction<
      ffi.Pointer<ASN1_INTEGER> Function(ffi.Pointer<ASN1_INTEGER>)>();

  int ASN1_INTEGER_cmp(
    ffi.Pointer<ASN1_INTEGER> x,
    ffi.Pointer<ASN1_INTEGER> y,
  ) {
    return _ASN1_INTEGER_cmp(
      x,
      y,
    );
  }

  late final _ASN1_INTEGER_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_INTEGER>,
              ffi.Pointer<ASN1_INTEGER>)>>('ASN1_INTEGER_cmp');
  late final _ASN1_INTEGER_cmp = _ASN1_INTEGER_cmpPtr.asFunction<
      int Function(ffi.Pointer<ASN1_INTEGER>, ffi.Pointer<ASN1_INTEGER>)>();

  ffi.Pointer<ASN1_ENUMERATED> ASN1_ENUMERATED_new() {
    return _ASN1_ENUMERATED_new();
  }

  late final _ASN1_ENUMERATED_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ENUMERATED> Function()>>(
          'ASN1_ENUMERATED_new');
  late final _ASN1_ENUMERATED_new = _ASN1_ENUMERATED_newPtr.asFunction<
      ffi.Pointer<ASN1_ENUMERATED> Function()>();

  void ASN1_ENUMERATED_free(
    ffi.Pointer<ASN1_ENUMERATED> a,
  ) {
    return _ASN1_ENUMERATED_free(
      a,
    );
  }

  late final _ASN1_ENUMERATED_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_ENUMERATED>)>>(
      'ASN1_ENUMERATED_free');
  late final _ASN1_ENUMERATED_free = _ASN1_ENUMERATED_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_ENUMERATED>)>();

  ffi.Pointer<ASN1_ENUMERATED> d2i_ASN1_ENUMERATED(
    ffi.Pointer<ffi.Pointer<ASN1_ENUMERATED>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_ENUMERATED(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_ENUMERATEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_ENUMERATED> Function(
              ffi.Pointer<ffi.Pointer<ASN1_ENUMERATED>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_ENUMERATED');
  late final _d2i_ASN1_ENUMERATED = _d2i_ASN1_ENUMERATEDPtr.asFunction<
      ffi.Pointer<ASN1_ENUMERATED> Function(
          ffi.Pointer<ffi.Pointer<ASN1_ENUMERATED>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_ENUMERATED(
    ffi.Pointer<ASN1_ENUMERATED> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_ENUMERATED(
      a,
      out,
    );
  }

  late final _i2d_ASN1_ENUMERATEDPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_ENUMERATED>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_ENUMERATED');
  late final _i2d_ASN1_ENUMERATED = _i2d_ASN1_ENUMERATEDPtr.asFunction<
      int Function(ffi.Pointer<ASN1_ENUMERATED>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_ENUMERATED_it =
      _lookup<ASN1_ITEM>('ASN1_ENUMERATED_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_ENUMERATED_it => _ASN1_ENUMERATED_it;

  int ASN1_UTCTIME_check(
    ffi.Pointer<ASN1_UTCTIME> a,
  ) {
    return _ASN1_UTCTIME_check(
      a,
    );
  }

  late final _ASN1_UTCTIME_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_UTCTIME>)>>(
          'ASN1_UTCTIME_check');
  late final _ASN1_UTCTIME_check = _ASN1_UTCTIME_checkPtr.asFunction<
      int Function(ffi.Pointer<ASN1_UTCTIME>)>();

  ffi.Pointer<ASN1_UTCTIME> ASN1_UTCTIME_set(
    ffi.Pointer<ASN1_UTCTIME> s,
    int t,
  ) {
    return _ASN1_UTCTIME_set(
      s,
      t,
    );
  }

  late final _ASN1_UTCTIME_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_UTCTIME> Function(
              ffi.Pointer<ASN1_UTCTIME>, time_t)>>('ASN1_UTCTIME_set');
  late final _ASN1_UTCTIME_set = _ASN1_UTCTIME_setPtr.asFunction<
      ffi.Pointer<ASN1_UTCTIME> Function(ffi.Pointer<ASN1_UTCTIME>, int)>();

  ffi.Pointer<ASN1_UTCTIME> ASN1_UTCTIME_adj(
    ffi.Pointer<ASN1_UTCTIME> s,
    int t,
    int offset_day,
    int offset_sec,
  ) {
    return _ASN1_UTCTIME_adj(
      s,
      t,
      offset_day,
      offset_sec,
    );
  }

  late final _ASN1_UTCTIME_adjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_UTCTIME> Function(ffi.Pointer<ASN1_UTCTIME>, time_t,
              ffi.Int, ffi.Long)>>('ASN1_UTCTIME_adj');
  late final _ASN1_UTCTIME_adj = _ASN1_UTCTIME_adjPtr.asFunction<
      ffi.Pointer<ASN1_UTCTIME> Function(
          ffi.Pointer<ASN1_UTCTIME>, int, int, int)>();

  int ASN1_UTCTIME_set_string(
    ffi.Pointer<ASN1_UTCTIME> s,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _ASN1_UTCTIME_set_string(
      s,
      str,
    );
  }

  late final _ASN1_UTCTIME_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_UTCTIME>,
              ffi.Pointer<ffi.Char>)>>('ASN1_UTCTIME_set_string');
  late final _ASN1_UTCTIME_set_string = _ASN1_UTCTIME_set_stringPtr.asFunction<
      int Function(ffi.Pointer<ASN1_UTCTIME>, ffi.Pointer<ffi.Char>)>();

  int ASN1_UTCTIME_cmp_time_t(
    ffi.Pointer<ASN1_UTCTIME> s,
    int t,
  ) {
    return _ASN1_UTCTIME_cmp_time_t(
      s,
      t,
    );
  }

  late final _ASN1_UTCTIME_cmp_time_tPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_UTCTIME>, time_t)>>('ASN1_UTCTIME_cmp_time_t');
  late final _ASN1_UTCTIME_cmp_time_t = _ASN1_UTCTIME_cmp_time_tPtr.asFunction<
      int Function(ffi.Pointer<ASN1_UTCTIME>, int)>();

  int ASN1_GENERALIZEDTIME_check(
    ffi.Pointer<ASN1_GENERALIZEDTIME> a,
  ) {
    return _ASN1_GENERALIZEDTIME_check(
      a,
    );
  }

  late final _ASN1_GENERALIZEDTIME_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_GENERALIZEDTIME>)>>(
      'ASN1_GENERALIZEDTIME_check');
  late final _ASN1_GENERALIZEDTIME_check = _ASN1_GENERALIZEDTIME_checkPtr
      .asFunction<int Function(ffi.Pointer<ASN1_GENERALIZEDTIME>)>();

  ffi.Pointer<ASN1_GENERALIZEDTIME> ASN1_GENERALIZEDTIME_set(
    ffi.Pointer<ASN1_GENERALIZEDTIME> s,
    int t,
  ) {
    return _ASN1_GENERALIZEDTIME_set(
      s,
      t,
    );
  }

  late final _ASN1_GENERALIZEDTIME_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>,
              time_t)>>('ASN1_GENERALIZEDTIME_set');
  late final _ASN1_GENERALIZEDTIME_set =
      _ASN1_GENERALIZEDTIME_setPtr.asFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>, int)>();

  ffi.Pointer<ASN1_GENERALIZEDTIME> ASN1_GENERALIZEDTIME_adj(
    ffi.Pointer<ASN1_GENERALIZEDTIME> s,
    int t,
    int offset_day,
    int offset_sec,
  ) {
    return _ASN1_GENERALIZEDTIME_adj(
      s,
      t,
      offset_day,
      offset_sec,
    );
  }

  late final _ASN1_GENERALIZEDTIME_adjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>,
              time_t,
              ffi.Int,
              ffi.Long)>>('ASN1_GENERALIZEDTIME_adj');
  late final _ASN1_GENERALIZEDTIME_adj =
      _ASN1_GENERALIZEDTIME_adjPtr.asFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>, int, int, int)>();

  int ASN1_GENERALIZEDTIME_set_string(
    ffi.Pointer<ASN1_GENERALIZEDTIME> s,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _ASN1_GENERALIZEDTIME_set_string(
      s,
      str,
    );
  }

  late final _ASN1_GENERALIZEDTIME_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_GENERALIZEDTIME>,
              ffi.Pointer<ffi.Char>)>>('ASN1_GENERALIZEDTIME_set_string');
  late final _ASN1_GENERALIZEDTIME_set_string =
      _ASN1_GENERALIZEDTIME_set_stringPtr.asFunction<
          int Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>, ffi.Pointer<ffi.Char>)>();

  int ASN1_TIME_diff(
    ffi.Pointer<ffi.Int> pday,
    ffi.Pointer<ffi.Int> psec,
    ffi.Pointer<ASN1_TIME> from,
    ffi.Pointer<ASN1_TIME> to,
  ) {
    return _ASN1_TIME_diff(
      pday,
      psec,
      from,
      to,
    );
  }

  late final _ASN1_TIME_diffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ASN1_TIME>)>>('ASN1_TIME_diff');
  late final _ASN1_TIME_diff = _ASN1_TIME_diffPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ASN1_TIME>, ffi.Pointer<ASN1_TIME>)>();

  ffi.Pointer<ASN1_OCTET_STRING> ASN1_OCTET_STRING_new() {
    return _ASN1_OCTET_STRING_new();
  }

  late final _ASN1_OCTET_STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_OCTET_STRING> Function()>>(
          'ASN1_OCTET_STRING_new');
  late final _ASN1_OCTET_STRING_new = _ASN1_OCTET_STRING_newPtr.asFunction<
      ffi.Pointer<ASN1_OCTET_STRING> Function()>();

  void ASN1_OCTET_STRING_free(
    ffi.Pointer<ASN1_OCTET_STRING> a,
  ) {
    return _ASN1_OCTET_STRING_free(
      a,
    );
  }

  late final _ASN1_OCTET_STRING_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_OCTET_STRING>)>>('ASN1_OCTET_STRING_free');
  late final _ASN1_OCTET_STRING_free = _ASN1_OCTET_STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_OCTET_STRING>)>();

  ffi.Pointer<ASN1_OCTET_STRING> d2i_ASN1_OCTET_STRING(
    ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_OCTET_STRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_OCTET_STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OCTET_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_OCTET_STRING');
  late final _d2i_ASN1_OCTET_STRING = _d2i_ASN1_OCTET_STRINGPtr.asFunction<
      ffi.Pointer<ASN1_OCTET_STRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_OCTET_STRING(
    ffi.Pointer<ASN1_OCTET_STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_OCTET_STRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_OCTET_STRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_OCTET_STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_OCTET_STRING');
  late final _i2d_ASN1_OCTET_STRING = _i2d_ASN1_OCTET_STRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_OCTET_STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_OCTET_STRING_it =
      _lookup<ASN1_ITEM>('ASN1_OCTET_STRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_OCTET_STRING_it => _ASN1_OCTET_STRING_it;

  ffi.Pointer<ASN1_OCTET_STRING> ASN1_OCTET_STRING_dup(
    ffi.Pointer<ASN1_OCTET_STRING> a,
  ) {
    return _ASN1_OCTET_STRING_dup(
      a,
    );
  }

  late final _ASN1_OCTET_STRING_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OCTET_STRING> Function(
              ffi.Pointer<ASN1_OCTET_STRING>)>>('ASN1_OCTET_STRING_dup');
  late final _ASN1_OCTET_STRING_dup = _ASN1_OCTET_STRING_dupPtr.asFunction<
      ffi.Pointer<ASN1_OCTET_STRING> Function(
          ffi.Pointer<ASN1_OCTET_STRING>)>();

  int ASN1_OCTET_STRING_cmp(
    ffi.Pointer<ASN1_OCTET_STRING> a,
    ffi.Pointer<ASN1_OCTET_STRING> b,
  ) {
    return _ASN1_OCTET_STRING_cmp(
      a,
      b,
    );
  }

  late final _ASN1_OCTET_STRING_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_OCTET_STRING>,
              ffi.Pointer<ASN1_OCTET_STRING>)>>('ASN1_OCTET_STRING_cmp');
  late final _ASN1_OCTET_STRING_cmp = _ASN1_OCTET_STRING_cmpPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_OCTET_STRING>, ffi.Pointer<ASN1_OCTET_STRING>)>();

  int ASN1_OCTET_STRING_set(
    ffi.Pointer<ASN1_OCTET_STRING> str,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
  ) {
    return _ASN1_OCTET_STRING_set(
      str,
      data,
      len,
    );
  }

  late final _ASN1_OCTET_STRING_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_OCTET_STRING>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_OCTET_STRING_set');
  late final _ASN1_OCTET_STRING_set = _ASN1_OCTET_STRING_setPtr.asFunction<
      int Function(ffi.Pointer<ASN1_OCTET_STRING>,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ASN1_VISIBLESTRING> ASN1_VISIBLESTRING_new() {
    return _ASN1_VISIBLESTRING_new();
  }

  late final _ASN1_VISIBLESTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_VISIBLESTRING> Function()>>(
          'ASN1_VISIBLESTRING_new');
  late final _ASN1_VISIBLESTRING_new = _ASN1_VISIBLESTRING_newPtr.asFunction<
      ffi.Pointer<ASN1_VISIBLESTRING> Function()>();

  void ASN1_VISIBLESTRING_free(
    ffi.Pointer<ASN1_VISIBLESTRING> a,
  ) {
    return _ASN1_VISIBLESTRING_free(
      a,
    );
  }

  late final _ASN1_VISIBLESTRING_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_VISIBLESTRING>)>>('ASN1_VISIBLESTRING_free');
  late final _ASN1_VISIBLESTRING_free = _ASN1_VISIBLESTRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_VISIBLESTRING>)>();

  ffi.Pointer<ASN1_VISIBLESTRING> d2i_ASN1_VISIBLESTRING(
    ffi.Pointer<ffi.Pointer<ASN1_VISIBLESTRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_VISIBLESTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_VISIBLESTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_VISIBLESTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_VISIBLESTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_VISIBLESTRING');
  late final _d2i_ASN1_VISIBLESTRING = _d2i_ASN1_VISIBLESTRINGPtr.asFunction<
      ffi.Pointer<ASN1_VISIBLESTRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_VISIBLESTRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_VISIBLESTRING(
    ffi.Pointer<ASN1_VISIBLESTRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_VISIBLESTRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_VISIBLESTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_VISIBLESTRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_VISIBLESTRING');
  late final _i2d_ASN1_VISIBLESTRING = _i2d_ASN1_VISIBLESTRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_VISIBLESTRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_VISIBLESTRING_it =
      _lookup<ASN1_ITEM>('ASN1_VISIBLESTRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_VISIBLESTRING_it => _ASN1_VISIBLESTRING_it;

  ffi.Pointer<ASN1_UNIVERSALSTRING> ASN1_UNIVERSALSTRING_new() {
    return _ASN1_UNIVERSALSTRING_new();
  }

  late final _ASN1_UNIVERSALSTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_UNIVERSALSTRING> Function()>>(
          'ASN1_UNIVERSALSTRING_new');
  late final _ASN1_UNIVERSALSTRING_new = _ASN1_UNIVERSALSTRING_newPtr
      .asFunction<ffi.Pointer<ASN1_UNIVERSALSTRING> Function()>();

  void ASN1_UNIVERSALSTRING_free(
    ffi.Pointer<ASN1_UNIVERSALSTRING> a,
  ) {
    return _ASN1_UNIVERSALSTRING_free(
      a,
    );
  }

  late final _ASN1_UNIVERSALSTRING_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_UNIVERSALSTRING>)>>('ASN1_UNIVERSALSTRING_free');
  late final _ASN1_UNIVERSALSTRING_free = _ASN1_UNIVERSALSTRING_freePtr
      .asFunction<void Function(ffi.Pointer<ASN1_UNIVERSALSTRING>)>();

  ffi.Pointer<ASN1_UNIVERSALSTRING> d2i_ASN1_UNIVERSALSTRING(
    ffi.Pointer<ffi.Pointer<ASN1_UNIVERSALSTRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_UNIVERSALSTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_UNIVERSALSTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_UNIVERSALSTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_UNIVERSALSTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_UNIVERSALSTRING');
  late final _d2i_ASN1_UNIVERSALSTRING =
      _d2i_ASN1_UNIVERSALSTRINGPtr.asFunction<
          ffi.Pointer<ASN1_UNIVERSALSTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_UNIVERSALSTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              int)>();

  int i2d_ASN1_UNIVERSALSTRING(
    ffi.Pointer<ASN1_UNIVERSALSTRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_UNIVERSALSTRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_UNIVERSALSTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_UNIVERSALSTRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_UNIVERSALSTRING');
  late final _i2d_ASN1_UNIVERSALSTRING =
      _i2d_ASN1_UNIVERSALSTRINGPtr.asFunction<
          int Function(ffi.Pointer<ASN1_UNIVERSALSTRING>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_UNIVERSALSTRING_it =
      _lookup<ASN1_ITEM>('ASN1_UNIVERSALSTRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_UNIVERSALSTRING_it =>
      _ASN1_UNIVERSALSTRING_it;

  ffi.Pointer<ASN1_UTF8STRING> ASN1_UTF8STRING_new() {
    return _ASN1_UTF8STRING_new();
  }

  late final _ASN1_UTF8STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_UTF8STRING> Function()>>(
          'ASN1_UTF8STRING_new');
  late final _ASN1_UTF8STRING_new = _ASN1_UTF8STRING_newPtr.asFunction<
      ffi.Pointer<ASN1_UTF8STRING> Function()>();

  void ASN1_UTF8STRING_free(
    ffi.Pointer<ASN1_UTF8STRING> a,
  ) {
    return _ASN1_UTF8STRING_free(
      a,
    );
  }

  late final _ASN1_UTF8STRING_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_UTF8STRING>)>>(
      'ASN1_UTF8STRING_free');
  late final _ASN1_UTF8STRING_free = _ASN1_UTF8STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_UTF8STRING>)>();

  ffi.Pointer<ASN1_UTF8STRING> d2i_ASN1_UTF8STRING(
    ffi.Pointer<ffi.Pointer<ASN1_UTF8STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_UTF8STRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_UTF8STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_UTF8STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_UTF8STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_UTF8STRING');
  late final _d2i_ASN1_UTF8STRING = _d2i_ASN1_UTF8STRINGPtr.asFunction<
      ffi.Pointer<ASN1_UTF8STRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_UTF8STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_UTF8STRING(
    ffi.Pointer<ASN1_UTF8STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_UTF8STRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_UTF8STRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_UTF8STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_UTF8STRING');
  late final _i2d_ASN1_UTF8STRING = _i2d_ASN1_UTF8STRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_UTF8STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_UTF8STRING_it =
      _lookup<ASN1_ITEM>('ASN1_UTF8STRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_UTF8STRING_it => _ASN1_UTF8STRING_it;

  ffi.Pointer<ASN1_NULL> ASN1_NULL_new() {
    return _ASN1_NULL_new();
  }

  late final _ASN1_NULL_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_NULL> Function()>>(
          'ASN1_NULL_new');
  late final _ASN1_NULL_new =
      _ASN1_NULL_newPtr.asFunction<ffi.Pointer<ASN1_NULL> Function()>();

  void ASN1_NULL_free(
    ffi.Pointer<ASN1_NULL> a,
  ) {
    return _ASN1_NULL_free(
      a,
    );
  }

  late final _ASN1_NULL_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_NULL>)>>(
          'ASN1_NULL_free');
  late final _ASN1_NULL_free =
      _ASN1_NULL_freePtr.asFunction<void Function(ffi.Pointer<ASN1_NULL>)>();

  ffi.Pointer<ASN1_NULL> d2i_ASN1_NULL(
    ffi.Pointer<ffi.Pointer<ASN1_NULL>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_NULL(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_NULLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_NULL> Function(
              ffi.Pointer<ffi.Pointer<ASN1_NULL>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_NULL');
  late final _d2i_ASN1_NULL = _d2i_ASN1_NULLPtr.asFunction<
      ffi.Pointer<ASN1_NULL> Function(ffi.Pointer<ffi.Pointer<ASN1_NULL>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_NULL(
    ffi.Pointer<ASN1_NULL> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_NULL(
      a,
      out,
    );
  }

  late final _i2d_ASN1_NULLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_NULL>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_NULL');
  late final _i2d_ASN1_NULL = _i2d_ASN1_NULLPtr.asFunction<
      int Function(ffi.Pointer<ASN1_NULL>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_NULL_it =
      _lookup<ASN1_ITEM>('ASN1_NULL_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_NULL_it => _ASN1_NULL_it;

  ffi.Pointer<ASN1_BMPSTRING> ASN1_BMPSTRING_new() {
    return _ASN1_BMPSTRING_new();
  }

  late final _ASN1_BMPSTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_BMPSTRING> Function()>>(
          'ASN1_BMPSTRING_new');
  late final _ASN1_BMPSTRING_new = _ASN1_BMPSTRING_newPtr.asFunction<
      ffi.Pointer<ASN1_BMPSTRING> Function()>();

  void ASN1_BMPSTRING_free(
    ffi.Pointer<ASN1_BMPSTRING> a,
  ) {
    return _ASN1_BMPSTRING_free(
      a,
    );
  }

  late final _ASN1_BMPSTRING_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_BMPSTRING>)>>(
      'ASN1_BMPSTRING_free');
  late final _ASN1_BMPSTRING_free = _ASN1_BMPSTRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_BMPSTRING>)>();

  ffi.Pointer<ASN1_BMPSTRING> d2i_ASN1_BMPSTRING(
    ffi.Pointer<ffi.Pointer<ASN1_BMPSTRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_BMPSTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_BMPSTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_BMPSTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_BMPSTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_BMPSTRING');
  late final _d2i_ASN1_BMPSTRING = _d2i_ASN1_BMPSTRINGPtr.asFunction<
      ffi.Pointer<ASN1_BMPSTRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_BMPSTRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_BMPSTRING(
    ffi.Pointer<ASN1_BMPSTRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_BMPSTRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_BMPSTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_BMPSTRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_BMPSTRING');
  late final _i2d_ASN1_BMPSTRING = _i2d_ASN1_BMPSTRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_BMPSTRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_BMPSTRING_it =
      _lookup<ASN1_ITEM>('ASN1_BMPSTRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_BMPSTRING_it => _ASN1_BMPSTRING_it;

  int UTF8_getc(
    ffi.Pointer<ffi.UnsignedChar> str,
    int len,
    ffi.Pointer<ffi.UnsignedLong> val,
  ) {
    return _UTF8_getc(
      str,
      len,
      val,
    );
  }

  late final _UTF8_getcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.UnsignedLong>)>>('UTF8_getc');
  late final _UTF8_getc = _UTF8_getcPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.UnsignedLong>)>();

  int UTF8_putc(
    ffi.Pointer<ffi.UnsignedChar> str,
    int len,
    int value,
  ) {
    return _UTF8_putc(
      str,
      len,
      value,
    );
  }

  late final _UTF8_putcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.UnsignedLong)>>('UTF8_putc');
  late final _UTF8_putc = _UTF8_putcPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  ffi.Pointer<ASN1_STRING> ASN1_PRINTABLE_new() {
    return _ASN1_PRINTABLE_new();
  }

  late final _ASN1_PRINTABLE_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_STRING> Function()>>(
          'ASN1_PRINTABLE_new');
  late final _ASN1_PRINTABLE_new =
      _ASN1_PRINTABLE_newPtr.asFunction<ffi.Pointer<ASN1_STRING> Function()>();

  void ASN1_PRINTABLE_free(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _ASN1_PRINTABLE_free(
      a,
    );
  }

  late final _ASN1_PRINTABLE_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_STRING>)>>(
          'ASN1_PRINTABLE_free');
  late final _ASN1_PRINTABLE_free = _ASN1_PRINTABLE_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_STRING> d2i_ASN1_PRINTABLE(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_PRINTABLE(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_PRINTABLEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_PRINTABLE');
  late final _d2i_ASN1_PRINTABLE = _d2i_ASN1_PRINTABLEPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_PRINTABLE(
    ffi.Pointer<ASN1_STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_PRINTABLE(
      a,
      out,
    );
  }

  late final _i2d_ASN1_PRINTABLEPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_PRINTABLE');
  late final _i2d_ASN1_PRINTABLE = _i2d_ASN1_PRINTABLEPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_PRINTABLE_it =
      _lookup<ASN1_ITEM>('ASN1_PRINTABLE_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_PRINTABLE_it => _ASN1_PRINTABLE_it;

  ffi.Pointer<ASN1_STRING> DIRECTORYSTRING_new() {
    return _DIRECTORYSTRING_new();
  }

  late final _DIRECTORYSTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_STRING> Function()>>(
          'DIRECTORYSTRING_new');
  late final _DIRECTORYSTRING_new =
      _DIRECTORYSTRING_newPtr.asFunction<ffi.Pointer<ASN1_STRING> Function()>();

  void DIRECTORYSTRING_free(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _DIRECTORYSTRING_free(
      a,
    );
  }

  late final _DIRECTORYSTRING_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_STRING>)>>(
          'DIRECTORYSTRING_free');
  late final _DIRECTORYSTRING_free = _DIRECTORYSTRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_STRING> d2i_DIRECTORYSTRING(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_DIRECTORYSTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_DIRECTORYSTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_DIRECTORYSTRING');
  late final _d2i_DIRECTORYSTRING = _d2i_DIRECTORYSTRINGPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_DIRECTORYSTRING(
    ffi.Pointer<ASN1_STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_DIRECTORYSTRING(
      a,
      out,
    );
  }

  late final _i2d_DIRECTORYSTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_DIRECTORYSTRING');
  late final _i2d_DIRECTORYSTRING = _i2d_DIRECTORYSTRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _DIRECTORYSTRING_it =
      _lookup<ASN1_ITEM>('DIRECTORYSTRING_it');

  ffi.Pointer<ASN1_ITEM> get DIRECTORYSTRING_it => _DIRECTORYSTRING_it;

  ffi.Pointer<ASN1_STRING> DISPLAYTEXT_new() {
    return _DISPLAYTEXT_new();
  }

  late final _DISPLAYTEXT_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_STRING> Function()>>(
          'DISPLAYTEXT_new');
  late final _DISPLAYTEXT_new =
      _DISPLAYTEXT_newPtr.asFunction<ffi.Pointer<ASN1_STRING> Function()>();

  void DISPLAYTEXT_free(
    ffi.Pointer<ASN1_STRING> a,
  ) {
    return _DISPLAYTEXT_free(
      a,
    );
  }

  late final _DISPLAYTEXT_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_STRING>)>>(
          'DISPLAYTEXT_free');
  late final _DISPLAYTEXT_free = _DISPLAYTEXT_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ASN1_STRING> d2i_DISPLAYTEXT(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_DISPLAYTEXT(
      a,
      in1,
      len,
    );
  }

  late final _d2i_DISPLAYTEXTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_DISPLAYTEXT');
  late final _d2i_DISPLAYTEXT = _d2i_DISPLAYTEXTPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_DISPLAYTEXT(
    ffi.Pointer<ASN1_STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_DISPLAYTEXT(
      a,
      out,
    );
  }

  late final _i2d_DISPLAYTEXTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_STRING>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_DISPLAYTEXT');
  late final _i2d_DISPLAYTEXT = _i2d_DISPLAYTEXTPtr.asFunction<
      int Function(ffi.Pointer<ASN1_STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _DISPLAYTEXT_it =
      _lookup<ASN1_ITEM>('DISPLAYTEXT_it');

  ffi.Pointer<ASN1_ITEM> get DISPLAYTEXT_it => _DISPLAYTEXT_it;

  ffi.Pointer<ASN1_PRINTABLESTRING> ASN1_PRINTABLESTRING_new() {
    return _ASN1_PRINTABLESTRING_new();
  }

  late final _ASN1_PRINTABLESTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_PRINTABLESTRING> Function()>>(
          'ASN1_PRINTABLESTRING_new');
  late final _ASN1_PRINTABLESTRING_new = _ASN1_PRINTABLESTRING_newPtr
      .asFunction<ffi.Pointer<ASN1_PRINTABLESTRING> Function()>();

  void ASN1_PRINTABLESTRING_free(
    ffi.Pointer<ASN1_PRINTABLESTRING> a,
  ) {
    return _ASN1_PRINTABLESTRING_free(
      a,
    );
  }

  late final _ASN1_PRINTABLESTRING_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_PRINTABLESTRING>)>>('ASN1_PRINTABLESTRING_free');
  late final _ASN1_PRINTABLESTRING_free = _ASN1_PRINTABLESTRING_freePtr
      .asFunction<void Function(ffi.Pointer<ASN1_PRINTABLESTRING>)>();

  ffi.Pointer<ASN1_PRINTABLESTRING> d2i_ASN1_PRINTABLESTRING(
    ffi.Pointer<ffi.Pointer<ASN1_PRINTABLESTRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_PRINTABLESTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_PRINTABLESTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_PRINTABLESTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_PRINTABLESTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_PRINTABLESTRING');
  late final _d2i_ASN1_PRINTABLESTRING =
      _d2i_ASN1_PRINTABLESTRINGPtr.asFunction<
          ffi.Pointer<ASN1_PRINTABLESTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_PRINTABLESTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              int)>();

  int i2d_ASN1_PRINTABLESTRING(
    ffi.Pointer<ASN1_PRINTABLESTRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_PRINTABLESTRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_PRINTABLESTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_PRINTABLESTRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_PRINTABLESTRING');
  late final _i2d_ASN1_PRINTABLESTRING =
      _i2d_ASN1_PRINTABLESTRINGPtr.asFunction<
          int Function(ffi.Pointer<ASN1_PRINTABLESTRING>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_PRINTABLESTRING_it =
      _lookup<ASN1_ITEM>('ASN1_PRINTABLESTRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_PRINTABLESTRING_it =>
      _ASN1_PRINTABLESTRING_it;

  ffi.Pointer<ASN1_T61STRING> ASN1_T61STRING_new() {
    return _ASN1_T61STRING_new();
  }

  late final _ASN1_T61STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_T61STRING> Function()>>(
          'ASN1_T61STRING_new');
  late final _ASN1_T61STRING_new = _ASN1_T61STRING_newPtr.asFunction<
      ffi.Pointer<ASN1_T61STRING> Function()>();

  void ASN1_T61STRING_free(
    ffi.Pointer<ASN1_T61STRING> a,
  ) {
    return _ASN1_T61STRING_free(
      a,
    );
  }

  late final _ASN1_T61STRING_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_T61STRING>)>>(
      'ASN1_T61STRING_free');
  late final _ASN1_T61STRING_free = _ASN1_T61STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_T61STRING>)>();

  ffi.Pointer<ASN1_T61STRING> d2i_ASN1_T61STRING(
    ffi.Pointer<ffi.Pointer<ASN1_T61STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_T61STRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_T61STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_T61STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_T61STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_T61STRING');
  late final _d2i_ASN1_T61STRING = _d2i_ASN1_T61STRINGPtr.asFunction<
      ffi.Pointer<ASN1_T61STRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_T61STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_T61STRING(
    ffi.Pointer<ASN1_T61STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_T61STRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_T61STRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_T61STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_T61STRING');
  late final _i2d_ASN1_T61STRING = _i2d_ASN1_T61STRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_T61STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_T61STRING_it =
      _lookup<ASN1_ITEM>('ASN1_T61STRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_T61STRING_it => _ASN1_T61STRING_it;

  ffi.Pointer<ASN1_IA5STRING> ASN1_IA5STRING_new() {
    return _ASN1_IA5STRING_new();
  }

  late final _ASN1_IA5STRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_IA5STRING> Function()>>(
          'ASN1_IA5STRING_new');
  late final _ASN1_IA5STRING_new = _ASN1_IA5STRING_newPtr.asFunction<
      ffi.Pointer<ASN1_IA5STRING> Function()>();

  void ASN1_IA5STRING_free(
    ffi.Pointer<ASN1_IA5STRING> a,
  ) {
    return _ASN1_IA5STRING_free(
      a,
    );
  }

  late final _ASN1_IA5STRING_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_IA5STRING>)>>(
      'ASN1_IA5STRING_free');
  late final _ASN1_IA5STRING_free = _ASN1_IA5STRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_IA5STRING>)>();

  ffi.Pointer<ASN1_IA5STRING> d2i_ASN1_IA5STRING(
    ffi.Pointer<ffi.Pointer<ASN1_IA5STRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_IA5STRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_IA5STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_IA5STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_IA5STRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_IA5STRING');
  late final _d2i_ASN1_IA5STRING = _d2i_ASN1_IA5STRINGPtr.asFunction<
      ffi.Pointer<ASN1_IA5STRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_IA5STRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_IA5STRING(
    ffi.Pointer<ASN1_IA5STRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_IA5STRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_IA5STRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_IA5STRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_IA5STRING');
  late final _i2d_ASN1_IA5STRING = _i2d_ASN1_IA5STRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_IA5STRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_IA5STRING_it =
      _lookup<ASN1_ITEM>('ASN1_IA5STRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_IA5STRING_it => _ASN1_IA5STRING_it;

  ffi.Pointer<ASN1_GENERALSTRING> ASN1_GENERALSTRING_new() {
    return _ASN1_GENERALSTRING_new();
  }

  late final _ASN1_GENERALSTRING_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_GENERALSTRING> Function()>>(
          'ASN1_GENERALSTRING_new');
  late final _ASN1_GENERALSTRING_new = _ASN1_GENERALSTRING_newPtr.asFunction<
      ffi.Pointer<ASN1_GENERALSTRING> Function()>();

  void ASN1_GENERALSTRING_free(
    ffi.Pointer<ASN1_GENERALSTRING> a,
  ) {
    return _ASN1_GENERALSTRING_free(
      a,
    );
  }

  late final _ASN1_GENERALSTRING_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_GENERALSTRING>)>>('ASN1_GENERALSTRING_free');
  late final _ASN1_GENERALSTRING_free = _ASN1_GENERALSTRING_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_GENERALSTRING>)>();

  ffi.Pointer<ASN1_GENERALSTRING> d2i_ASN1_GENERALSTRING(
    ffi.Pointer<ffi.Pointer<ASN1_GENERALSTRING>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_GENERALSTRING(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_GENERALSTRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_GENERALSTRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_GENERALSTRING>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_GENERALSTRING');
  late final _d2i_ASN1_GENERALSTRING = _d2i_ASN1_GENERALSTRINGPtr.asFunction<
      ffi.Pointer<ASN1_GENERALSTRING> Function(
          ffi.Pointer<ffi.Pointer<ASN1_GENERALSTRING>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_ASN1_GENERALSTRING(
    ffi.Pointer<ASN1_GENERALSTRING> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_GENERALSTRING(
      a,
      out,
    );
  }

  late final _i2d_ASN1_GENERALSTRINGPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_GENERALSTRING>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_GENERALSTRING');
  late final _i2d_ASN1_GENERALSTRING = _i2d_ASN1_GENERALSTRINGPtr.asFunction<
      int Function(ffi.Pointer<ASN1_GENERALSTRING>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_GENERALSTRING_it =
      _lookup<ASN1_ITEM>('ASN1_GENERALSTRING_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_GENERALSTRING_it => _ASN1_GENERALSTRING_it;

  ffi.Pointer<ASN1_UTCTIME> ASN1_UTCTIME_new() {
    return _ASN1_UTCTIME_new();
  }

  late final _ASN1_UTCTIME_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_UTCTIME> Function()>>(
          'ASN1_UTCTIME_new');
  late final _ASN1_UTCTIME_new =
      _ASN1_UTCTIME_newPtr.asFunction<ffi.Pointer<ASN1_UTCTIME> Function()>();

  void ASN1_UTCTIME_free(
    ffi.Pointer<ASN1_UTCTIME> a,
  ) {
    return _ASN1_UTCTIME_free(
      a,
    );
  }

  late final _ASN1_UTCTIME_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_UTCTIME>)>>(
          'ASN1_UTCTIME_free');
  late final _ASN1_UTCTIME_free = _ASN1_UTCTIME_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_UTCTIME>)>();

  ffi.Pointer<ASN1_UTCTIME> d2i_ASN1_UTCTIME(
    ffi.Pointer<ffi.Pointer<ASN1_UTCTIME>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_UTCTIME(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_UTCTIMEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_UTCTIME> Function(
              ffi.Pointer<ffi.Pointer<ASN1_UTCTIME>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_UTCTIME');
  late final _d2i_ASN1_UTCTIME = _d2i_ASN1_UTCTIMEPtr.asFunction<
      ffi.Pointer<ASN1_UTCTIME> Function(ffi.Pointer<ffi.Pointer<ASN1_UTCTIME>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_UTCTIME(
    ffi.Pointer<ASN1_UTCTIME> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_UTCTIME(
      a,
      out,
    );
  }

  late final _i2d_ASN1_UTCTIMEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_UTCTIME>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_UTCTIME');
  late final _i2d_ASN1_UTCTIME = _i2d_ASN1_UTCTIMEPtr.asFunction<
      int Function(ffi.Pointer<ASN1_UTCTIME>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_UTCTIME_it =
      _lookup<ASN1_ITEM>('ASN1_UTCTIME_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_UTCTIME_it => _ASN1_UTCTIME_it;

  ffi.Pointer<ASN1_GENERALIZEDTIME> ASN1_GENERALIZEDTIME_new() {
    return _ASN1_GENERALIZEDTIME_new();
  }

  late final _ASN1_GENERALIZEDTIME_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_GENERALIZEDTIME> Function()>>(
          'ASN1_GENERALIZEDTIME_new');
  late final _ASN1_GENERALIZEDTIME_new = _ASN1_GENERALIZEDTIME_newPtr
      .asFunction<ffi.Pointer<ASN1_GENERALIZEDTIME> Function()>();

  void ASN1_GENERALIZEDTIME_free(
    ffi.Pointer<ASN1_GENERALIZEDTIME> a,
  ) {
    return _ASN1_GENERALIZEDTIME_free(
      a,
    );
  }

  late final _ASN1_GENERALIZEDTIME_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ASN1_GENERALIZEDTIME>)>>('ASN1_GENERALIZEDTIME_free');
  late final _ASN1_GENERALIZEDTIME_free = _ASN1_GENERALIZEDTIME_freePtr
      .asFunction<void Function(ffi.Pointer<ASN1_GENERALIZEDTIME>)>();

  ffi.Pointer<ASN1_GENERALIZEDTIME> d2i_ASN1_GENERALIZEDTIME(
    ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_GENERALIZEDTIME(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_GENERALIZEDTIMEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_GENERALIZEDTIME');
  late final _d2i_ASN1_GENERALIZEDTIME =
      _d2i_ASN1_GENERALIZEDTIMEPtr.asFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(
              ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              int)>();

  int i2d_ASN1_GENERALIZEDTIME(
    ffi.Pointer<ASN1_GENERALIZEDTIME> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_GENERALIZEDTIME(
      a,
      out,
    );
  }

  late final _i2d_ASN1_GENERALIZEDTIMEPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_GENERALIZEDTIME>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ASN1_GENERALIZEDTIME');
  late final _i2d_ASN1_GENERALIZEDTIME =
      _i2d_ASN1_GENERALIZEDTIMEPtr.asFunction<
          int Function(ffi.Pointer<ASN1_GENERALIZEDTIME>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_GENERALIZEDTIME_it =
      _lookup<ASN1_ITEM>('ASN1_GENERALIZEDTIME_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_GENERALIZEDTIME_it =>
      _ASN1_GENERALIZEDTIME_it;

  ffi.Pointer<ASN1_TIME> ASN1_TIME_new() {
    return _ASN1_TIME_new();
  }

  late final _ASN1_TIME_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_TIME> Function()>>(
          'ASN1_TIME_new');
  late final _ASN1_TIME_new =
      _ASN1_TIME_newPtr.asFunction<ffi.Pointer<ASN1_TIME> Function()>();

  void ASN1_TIME_free(
    ffi.Pointer<ASN1_TIME> a,
  ) {
    return _ASN1_TIME_free(
      a,
    );
  }

  late final _ASN1_TIME_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_TIME>)>>(
          'ASN1_TIME_free');
  late final _ASN1_TIME_free =
      _ASN1_TIME_freePtr.asFunction<void Function(ffi.Pointer<ASN1_TIME>)>();

  ffi.Pointer<ASN1_TIME> d2i_ASN1_TIME(
    ffi.Pointer<ffi.Pointer<ASN1_TIME>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ASN1_TIME(
      a,
      in1,
      len,
    );
  }

  late final _d2i_ASN1_TIMEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(
              ffi.Pointer<ffi.Pointer<ASN1_TIME>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ASN1_TIME');
  late final _d2i_ASN1_TIME = _d2i_ASN1_TIMEPtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<ffi.Pointer<ASN1_TIME>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ASN1_TIME(
    ffi.Pointer<ASN1_TIME> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ASN1_TIME(
      a,
      out,
    );
  }

  late final _i2d_ASN1_TIMEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ASN1_TIME');
  late final _i2d_ASN1_TIME = _i2d_ASN1_TIMEPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _ASN1_TIME_it =
      _lookup<ASN1_ITEM>('ASN1_TIME_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_TIME_it => _ASN1_TIME_it;

  late final ffi.Pointer<ASN1_ITEM> _ASN1_OCTET_STRING_NDEF_it =
      _lookup<ASN1_ITEM>('ASN1_OCTET_STRING_NDEF_it');

  ffi.Pointer<ASN1_ITEM> get ASN1_OCTET_STRING_NDEF_it =>
      _ASN1_OCTET_STRING_NDEF_it;

  ffi.Pointer<ASN1_TIME> ASN1_TIME_set(
    ffi.Pointer<ASN1_TIME> s,
    int t,
  ) {
    return _ASN1_TIME_set(
      s,
      t,
    );
  }

  late final _ASN1_TIME_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(
              ffi.Pointer<ASN1_TIME>, time_t)>>('ASN1_TIME_set');
  late final _ASN1_TIME_set = _ASN1_TIME_setPtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<ASN1_TIME>, int)>();

  ffi.Pointer<ASN1_TIME> ASN1_TIME_adj(
    ffi.Pointer<ASN1_TIME> s,
    int t,
    int offset_day,
    int offset_sec,
  ) {
    return _ASN1_TIME_adj(
      s,
      t,
      offset_day,
      offset_sec,
    );
  }

  late final _ASN1_TIME_adjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<ASN1_TIME>, time_t,
              ffi.Int, ffi.Long)>>('ASN1_TIME_adj');
  late final _ASN1_TIME_adj = _ASN1_TIME_adjPtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<ASN1_TIME>, int, int, int)>();

  int ASN1_TIME_check(
    ffi.Pointer<ASN1_TIME> t,
  ) {
    return _ASN1_TIME_check(
      t,
    );
  }

  late final _ASN1_TIME_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_TIME>)>>(
          'ASN1_TIME_check');
  late final _ASN1_TIME_check =
      _ASN1_TIME_checkPtr.asFunction<int Function(ffi.Pointer<ASN1_TIME>)>();

  ffi.Pointer<ASN1_GENERALIZEDTIME> ASN1_TIME_to_generalizedtime(
    ffi.Pointer<ASN1_TIME> t,
    ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>> out,
  ) {
    return _ASN1_TIME_to_generalizedtime(
      t,
      out,
    );
  }

  late final _ASN1_TIME_to_generalizedtimePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ASN1_GENERALIZEDTIME> Function(ffi.Pointer<ASN1_TIME>,
                  ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>>)>>(
      'ASN1_TIME_to_generalizedtime');
  late final _ASN1_TIME_to_generalizedtime =
      _ASN1_TIME_to_generalizedtimePtr.asFunction<
          ffi.Pointer<ASN1_GENERALIZEDTIME> Function(ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ffi.Pointer<ASN1_GENERALIZEDTIME>>)>();

  int ASN1_TIME_set_string(
    ffi.Pointer<ASN1_TIME> s,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _ASN1_TIME_set_string(
      s,
      str,
    );
  }

  late final _ASN1_TIME_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ffi.Char>)>>('ASN1_TIME_set_string');
  late final _ASN1_TIME_set_string = _ASN1_TIME_set_stringPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>, ffi.Pointer<ffi.Char>)>();

  int ASN1_TIME_set_string_X509(
    ffi.Pointer<ASN1_TIME> s,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _ASN1_TIME_set_string_X509(
      s,
      str,
    );
  }

  late final _ASN1_TIME_set_string_X509Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ffi.Char>)>>('ASN1_TIME_set_string_X509');
  late final _ASN1_TIME_set_string_X509 =
      _ASN1_TIME_set_string_X509Ptr.asFunction<
          int Function(ffi.Pointer<ASN1_TIME>, ffi.Pointer<ffi.Char>)>();

  int ASN1_TIME_to_tm(
    ffi.Pointer<ASN1_TIME> s,
    ffi.Pointer<tm> tm,
  ) {
    return _ASN1_TIME_to_tm(
      s,
      tm,
    );
  }

  late final _ASN1_TIME_to_tmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_TIME>, ffi.Pointer<tm>)>>('ASN1_TIME_to_tm');
  late final _ASN1_TIME_to_tm = _ASN1_TIME_to_tmPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>, ffi.Pointer<tm>)>();

  int ASN1_TIME_normalize(
    ffi.Pointer<ASN1_TIME> s,
  ) {
    return _ASN1_TIME_normalize(
      s,
    );
  }

  late final _ASN1_TIME_normalizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_TIME>)>>(
          'ASN1_TIME_normalize');
  late final _ASN1_TIME_normalize = _ASN1_TIME_normalizePtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>)>();

  int ASN1_TIME_cmp_time_t(
    ffi.Pointer<ASN1_TIME> s,
    int t,
  ) {
    return _ASN1_TIME_cmp_time_t(
      s,
      t,
    );
  }

  late final _ASN1_TIME_cmp_time_tPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_TIME>, time_t)>>(
      'ASN1_TIME_cmp_time_t');
  late final _ASN1_TIME_cmp_time_t = _ASN1_TIME_cmp_time_tPtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>, int)>();

  int ASN1_TIME_compare(
    ffi.Pointer<ASN1_TIME> a,
    ffi.Pointer<ASN1_TIME> b,
  ) {
    return _ASN1_TIME_compare(
      a,
      b,
    );
  }

  late final _ASN1_TIME_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_TIME>,
              ffi.Pointer<ASN1_TIME>)>>('ASN1_TIME_compare');
  late final _ASN1_TIME_compare = _ASN1_TIME_comparePtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>, ffi.Pointer<ASN1_TIME>)>();

  int i2a_ASN1_INTEGER(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_INTEGER> a,
  ) {
    return _i2a_ASN1_INTEGER(
      bp,
      a,
    );
  }

  late final _i2a_ASN1_INTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_INTEGER>)>>('i2a_ASN1_INTEGER');
  late final _i2a_ASN1_INTEGER = _i2a_ASN1_INTEGERPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_INTEGER>)>();

  int a2i_ASN1_INTEGER(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_INTEGER> bs,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _a2i_ASN1_INTEGER(
      bp,
      bs,
      buf,
      size,
    );
  }

  late final _a2i_ASN1_INTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_INTEGER>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('a2i_ASN1_INTEGER');
  late final _a2i_ASN1_INTEGER = _a2i_ASN1_INTEGERPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_INTEGER>,
          ffi.Pointer<ffi.Char>, int)>();

  int i2a_ASN1_ENUMERATED(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_ENUMERATED> a,
  ) {
    return _i2a_ASN1_ENUMERATED(
      bp,
      a,
    );
  }

  late final _i2a_ASN1_ENUMERATEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_ENUMERATED>)>>('i2a_ASN1_ENUMERATED');
  late final _i2a_ASN1_ENUMERATED = _i2a_ASN1_ENUMERATEDPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_ENUMERATED>)>();

  int a2i_ASN1_ENUMERATED(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_ENUMERATED> bs,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _a2i_ASN1_ENUMERATED(
      bp,
      bs,
      buf,
      size,
    );
  }

  late final _a2i_ASN1_ENUMERATEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_ENUMERATED>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('a2i_ASN1_ENUMERATED');
  late final _a2i_ASN1_ENUMERATED = _a2i_ASN1_ENUMERATEDPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_ENUMERATED>,
          ffi.Pointer<ffi.Char>, int)>();

  int i2a_ASN1_OBJECT(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_OBJECT> a,
  ) {
    return _i2a_ASN1_OBJECT(
      bp,
      a,
    );
  }

  late final _i2a_ASN1_OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ASN1_OBJECT>)>>('i2a_ASN1_OBJECT');
  late final _i2a_ASN1_OBJECT = _i2a_ASN1_OBJECTPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_OBJECT>)>();

  int a2i_ASN1_STRING(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_STRING> bs,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _a2i_ASN1_STRING(
      bp,
      bs,
      buf,
      size,
    );
  }

  late final _a2i_ASN1_STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('a2i_ASN1_STRING');
  late final _a2i_ASN1_STRING = _a2i_ASN1_STRINGPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>,
          ffi.Pointer<ffi.Char>, int)>();

  int i2a_ASN1_STRING(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_STRING> a,
    int type,
  ) {
    return _i2a_ASN1_STRING(
      bp,
      a,
      type,
    );
  }

  late final _i2a_ASN1_STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>,
              ffi.Int)>>('i2a_ASN1_STRING');
  late final _i2a_ASN1_STRING = _i2a_ASN1_STRINGPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>, int)>();

  int i2t_ASN1_OBJECT(
    ffi.Pointer<ffi.Char> buf,
    int buf_len,
    ffi.Pointer<ASN1_OBJECT> a,
  ) {
    return _i2t_ASN1_OBJECT(
      buf,
      buf_len,
      a,
    );
  }

  late final _i2t_ASN1_OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ASN1_OBJECT>)>>('i2t_ASN1_OBJECT');
  late final _i2t_ASN1_OBJECT = _i2t_ASN1_OBJECTPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ASN1_OBJECT>)>();

  int a2d_ASN1_OBJECT(
    ffi.Pointer<ffi.UnsignedChar> out,
    int olen,
    ffi.Pointer<ffi.Char> buf,
    int num,
  ) {
    return _a2d_ASN1_OBJECT(
      out,
      olen,
      buf,
      num,
    );
  }

  late final _a2d_ASN1_OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('a2d_ASN1_OBJECT');
  late final _a2d_ASN1_OBJECT = _a2d_ASN1_OBJECTPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ASN1_OBJECT> ASN1_OBJECT_create(
    int nid,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
    ffi.Pointer<ffi.Char> sn,
    ffi.Pointer<ffi.Char> ln,
  ) {
    return _ASN1_OBJECT_create(
      nid,
      data,
      len,
      sn,
      ln,
    );
  }

  late final _ASN1_OBJECT_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ASN1_OBJECT_create');
  late final _ASN1_OBJECT_create = _ASN1_OBJECT_createPtr.asFunction<
      ffi.Pointer<ASN1_OBJECT> Function(int, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int ASN1_INTEGER_get_int64(
    ffi.Pointer<ffi.Int64> pr,
    ffi.Pointer<ASN1_INTEGER> a,
  ) {
    return _ASN1_INTEGER_get_int64(
      pr,
      a,
    );
  }

  late final _ASN1_INTEGER_get_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ASN1_INTEGER>)>>('ASN1_INTEGER_get_int64');
  late final _ASN1_INTEGER_get_int64 = _ASN1_INTEGER_get_int64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int64>, ffi.Pointer<ASN1_INTEGER>)>();

  int ASN1_INTEGER_set_int64(
    ffi.Pointer<ASN1_INTEGER> a,
    int r,
  ) {
    return _ASN1_INTEGER_set_int64(
      a,
      r,
    );
  }

  late final _ASN1_INTEGER_set_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_INTEGER>, ffi.Int64)>>('ASN1_INTEGER_set_int64');
  late final _ASN1_INTEGER_set_int64 = _ASN1_INTEGER_set_int64Ptr.asFunction<
      int Function(ffi.Pointer<ASN1_INTEGER>, int)>();

  int ASN1_INTEGER_get_uint64(
    ffi.Pointer<ffi.Uint64> pr,
    ffi.Pointer<ASN1_INTEGER> a,
  ) {
    return _ASN1_INTEGER_get_uint64(
      pr,
      a,
    );
  }

  late final _ASN1_INTEGER_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ASN1_INTEGER>)>>('ASN1_INTEGER_get_uint64');
  late final _ASN1_INTEGER_get_uint64 = _ASN1_INTEGER_get_uint64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint64>, ffi.Pointer<ASN1_INTEGER>)>();

  int ASN1_INTEGER_set_uint64(
    ffi.Pointer<ASN1_INTEGER> a,
    int r,
  ) {
    return _ASN1_INTEGER_set_uint64(
      a,
      r,
    );
  }

  late final _ASN1_INTEGER_set_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_INTEGER>,
              ffi.Uint64)>>('ASN1_INTEGER_set_uint64');
  late final _ASN1_INTEGER_set_uint64 = _ASN1_INTEGER_set_uint64Ptr.asFunction<
      int Function(ffi.Pointer<ASN1_INTEGER>, int)>();

  int ASN1_INTEGER_set(
    ffi.Pointer<ASN1_INTEGER> a,
    int v,
  ) {
    return _ASN1_INTEGER_set(
      a,
      v,
    );
  }

  late final _ASN1_INTEGER_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_INTEGER>, ffi.Long)>>('ASN1_INTEGER_set');
  late final _ASN1_INTEGER_set = _ASN1_INTEGER_setPtr.asFunction<
      int Function(ffi.Pointer<ASN1_INTEGER>, int)>();

  int ASN1_INTEGER_get(
    ffi.Pointer<ASN1_INTEGER> a,
  ) {
    return _ASN1_INTEGER_get(
      a,
    );
  }

  late final _ASN1_INTEGER_getPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ASN1_INTEGER>)>>(
          'ASN1_INTEGER_get');
  late final _ASN1_INTEGER_get = _ASN1_INTEGER_getPtr.asFunction<
      int Function(ffi.Pointer<ASN1_INTEGER>)>();

  ffi.Pointer<ASN1_INTEGER> BN_to_ASN1_INTEGER(
    ffi.Pointer<BIGNUM> bn,
    ffi.Pointer<ASN1_INTEGER> ai,
  ) {
    return _BN_to_ASN1_INTEGER(
      bn,
      ai,
    );
  }

  late final _BN_to_ASN1_INTEGERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_INTEGER> Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<ASN1_INTEGER>)>>('BN_to_ASN1_INTEGER');
  late final _BN_to_ASN1_INTEGER = _BN_to_ASN1_INTEGERPtr.asFunction<
      ffi.Pointer<ASN1_INTEGER> Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<ASN1_INTEGER>)>();

  ffi.Pointer<BIGNUM> ASN1_INTEGER_to_BN(
    ffi.Pointer<ASN1_INTEGER> ai,
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _ASN1_INTEGER_to_BN(
      ai,
      bn,
    );
  }

  late final _ASN1_INTEGER_to_BNPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ASN1_INTEGER>,
              ffi.Pointer<BIGNUM>)>>('ASN1_INTEGER_to_BN');
  late final _ASN1_INTEGER_to_BN = _ASN1_INTEGER_to_BNPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ASN1_INTEGER>, ffi.Pointer<BIGNUM>)>();

  int ASN1_ENUMERATED_get_int64(
    ffi.Pointer<ffi.Int64> pr,
    ffi.Pointer<ASN1_ENUMERATED> a,
  ) {
    return _ASN1_ENUMERATED_get_int64(
      pr,
      a,
    );
  }

  late final _ASN1_ENUMERATED_get_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ASN1_ENUMERATED>)>>('ASN1_ENUMERATED_get_int64');
  late final _ASN1_ENUMERATED_get_int64 =
      _ASN1_ENUMERATED_get_int64Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Int64>, ffi.Pointer<ASN1_ENUMERATED>)>();

  int ASN1_ENUMERATED_set_int64(
    ffi.Pointer<ASN1_ENUMERATED> a,
    int r,
  ) {
    return _ASN1_ENUMERATED_set_int64(
      a,
      r,
    );
  }

  late final _ASN1_ENUMERATED_set_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_ENUMERATED>,
              ffi.Int64)>>('ASN1_ENUMERATED_set_int64');
  late final _ASN1_ENUMERATED_set_int64 = _ASN1_ENUMERATED_set_int64Ptr
      .asFunction<int Function(ffi.Pointer<ASN1_ENUMERATED>, int)>();

  int ASN1_ENUMERATED_set(
    ffi.Pointer<ASN1_ENUMERATED> a,
    int v,
  ) {
    return _ASN1_ENUMERATED_set(
      a,
      v,
    );
  }

  late final _ASN1_ENUMERATED_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_ENUMERATED>, ffi.Long)>>('ASN1_ENUMERATED_set');
  late final _ASN1_ENUMERATED_set = _ASN1_ENUMERATED_setPtr.asFunction<
      int Function(ffi.Pointer<ASN1_ENUMERATED>, int)>();

  int ASN1_ENUMERATED_get(
    ffi.Pointer<ASN1_ENUMERATED> a,
  ) {
    return _ASN1_ENUMERATED_get(
      a,
    );
  }

  late final _ASN1_ENUMERATED_getPtr = _lookup<
          ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ASN1_ENUMERATED>)>>(
      'ASN1_ENUMERATED_get');
  late final _ASN1_ENUMERATED_get = _ASN1_ENUMERATED_getPtr.asFunction<
      int Function(ffi.Pointer<ASN1_ENUMERATED>)>();

  ffi.Pointer<ASN1_ENUMERATED> BN_to_ASN1_ENUMERATED(
    ffi.Pointer<BIGNUM> bn,
    ffi.Pointer<ASN1_ENUMERATED> ai,
  ) {
    return _BN_to_ASN1_ENUMERATED(
      bn,
      ai,
    );
  }

  late final _BN_to_ASN1_ENUMERATEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_ENUMERATED> Function(ffi.Pointer<BIGNUM>,
              ffi.Pointer<ASN1_ENUMERATED>)>>('BN_to_ASN1_ENUMERATED');
  late final _BN_to_ASN1_ENUMERATED = _BN_to_ASN1_ENUMERATEDPtr.asFunction<
      ffi.Pointer<ASN1_ENUMERATED> Function(
          ffi.Pointer<BIGNUM>, ffi.Pointer<ASN1_ENUMERATED>)>();

  ffi.Pointer<BIGNUM> ASN1_ENUMERATED_to_BN(
    ffi.Pointer<ASN1_ENUMERATED> ai,
    ffi.Pointer<BIGNUM> bn,
  ) {
    return _ASN1_ENUMERATED_to_BN(
      ai,
      bn,
    );
  }

  late final _ASN1_ENUMERATED_to_BNPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(ffi.Pointer<ASN1_ENUMERATED>,
              ffi.Pointer<BIGNUM>)>>('ASN1_ENUMERATED_to_BN');
  late final _ASN1_ENUMERATED_to_BN = _ASN1_ENUMERATED_to_BNPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(
          ffi.Pointer<ASN1_ENUMERATED>, ffi.Pointer<BIGNUM>)>();

  int ASN1_PRINTABLE_type(
    ffi.Pointer<ffi.UnsignedChar> s,
    int max,
  ) {
    return _ASN1_PRINTABLE_type(
      s,
      max,
    );
  }

  late final _ASN1_PRINTABLE_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('ASN1_PRINTABLE_type');
  late final _ASN1_PRINTABLE_type = _ASN1_PRINTABLE_typePtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_tag2bit(
    int tag,
  ) {
    return _ASN1_tag2bit(
      tag,
    );
  }

  late final _ASN1_tag2bitPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Int)>>(
          'ASN1_tag2bit');
  late final _ASN1_tag2bit = _ASN1_tag2bitPtr.asFunction<int Function(int)>();

  int ASN1_get_object(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    ffi.Pointer<ffi.Long> plength,
    ffi.Pointer<ffi.Int> ptag,
    ffi.Pointer<ffi.Int> pclass,
    int omax,
  ) {
    return _ASN1_get_object(
      pp,
      plength,
      ptag,
      pclass,
      omax,
    );
  }

  late final _ASN1_get_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Long)>>('ASN1_get_object');
  late final _ASN1_get_object = _ASN1_get_objectPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Long>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          int)>();

  int ASN1_check_infinite_end(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> p,
    int len,
  ) {
    return _ASN1_check_infinite_end(
      p,
      len,
    );
  }

  late final _ASN1_check_infinite_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('ASN1_check_infinite_end');
  late final _ASN1_check_infinite_end = _ASN1_check_infinite_endPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int ASN1_const_check_infinite_end(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> p,
    int len,
  ) {
    return _ASN1_const_check_infinite_end(
      p,
      len,
    );
  }

  late final _ASN1_const_check_infinite_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('ASN1_const_check_infinite_end');
  late final _ASN1_const_check_infinite_end =
      _ASN1_const_check_infinite_endPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  void ASN1_put_object(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int constructed,
    int length,
    int tag,
    int xclass,
  ) {
    return _ASN1_put_object(
      pp,
      constructed,
      length,
      tag,
      xclass,
    );
  }

  late final _ASN1_put_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('ASN1_put_object');
  late final _ASN1_put_object = _ASN1_put_objectPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int, int, int, int)>();

  int ASN1_put_eoc(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _ASN1_put_eoc(
      pp,
    );
  }

  late final _ASN1_put_eocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('ASN1_put_eoc');
  late final _ASN1_put_eoc = _ASN1_put_eocPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int ASN1_object_size(
    int constructed,
    int length,
    int tag,
  ) {
    return _ASN1_object_size(
      constructed,
      length,
      tag,
    );
  }

  late final _ASN1_object_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'ASN1_object_size');
  late final _ASN1_object_size =
      _ASN1_object_sizePtr.asFunction<int Function(int, int, int)>();

  ffi.Pointer<ffi.Void> ASN1_dup(
    ffi.Pointer<i2d_of_void> i2d,
    ffi.Pointer<d2i_of_void> d2i,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_dup(
      i2d,
      d2i,
      x,
    );
  }

  late final _ASN1_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<i2d_of_void>,
              ffi.Pointer<d2i_of_void>, ffi.Pointer<ffi.Void>)>>('ASN1_dup');
  late final _ASN1_dup = _ASN1_dupPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<i2d_of_void>,
          ffi.Pointer<d2i_of_void>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> ASN1_item_dup(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_item_dup(
      it,
      x,
    );
  }

  late final _ASN1_item_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ASN1_ITEM>, ffi.Pointer<ffi.Void>)>>('ASN1_item_dup');
  late final _ASN1_item_dup = _ASN1_item_dupPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> ASN1_d2i_fp(
    ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>> xnew,
    ffi.Pointer<d2i_of_void> d2i,
    ffi.Pointer<FILE> in1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> x,
  ) {
    return _ASN1_d2i_fp(
      xnew,
      d2i,
      in1,
      x,
    );
  }

  late final _ASN1_d2i_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>,
              ffi.Pointer<d2i_of_void>,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ASN1_d2i_fp');
  late final _ASN1_d2i_fp = _ASN1_d2i_fpPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>,
          ffi.Pointer<d2i_of_void>,
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Void> ASN1_item_d2i_fp(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<FILE> in1,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_item_d2i_fp(
      it,
      in1,
      x,
    );
  }

  late final _ASN1_item_d2i_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Void>)>>('ASN1_item_d2i_fp');
  late final _ASN1_item_d2i_fp = _ASN1_item_d2i_fpPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<FILE>, ffi.Pointer<ffi.Void>)>();

  int ASN1_i2d_fp(
    ffi.Pointer<i2d_of_void> i2d,
    ffi.Pointer<FILE> out,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_i2d_fp(
      i2d,
      out,
      x,
    );
  }

  late final _ASN1_i2d_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<i2d_of_void>, ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Void>)>>('ASN1_i2d_fp');
  late final _ASN1_i2d_fp = _ASN1_i2d_fpPtr.asFunction<
      int Function(ffi.Pointer<i2d_of_void>, ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Void>)>();

  int ASN1_item_i2d_fp(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<FILE> out,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_item_i2d_fp(
      it,
      out,
      x,
    );
  }

  late final _ASN1_item_i2d_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_ITEM>, ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Void>)>>('ASN1_item_i2d_fp');
  late final _ASN1_item_i2d_fp = _ASN1_item_i2d_fpPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<FILE>, ffi.Pointer<ffi.Void>)>();

  int ASN1_STRING_print_ex_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ASN1_STRING> str,
    int flags,
  ) {
    return _ASN1_STRING_print_ex_fp(
      fp,
      str,
      flags,
    );
  }

  late final _ASN1_STRING_print_ex_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ASN1_STRING>,
              ffi.UnsignedLong)>>('ASN1_STRING_print_ex_fp');
  late final _ASN1_STRING_print_ex_fp = _ASN1_STRING_print_ex_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ASN1_STRING>, int)>();

  int ASN1_STRING_to_UTF8(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ASN1_STRING> in1,
  ) {
    return _ASN1_STRING_to_UTF8(
      out,
      in1,
    );
  }

  late final _ASN1_STRING_to_UTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_to_UTF8');
  late final _ASN1_STRING_to_UTF8 = _ASN1_STRING_to_UTF8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ASN1_STRING>)>();

  ffi.Pointer<ffi.Void> ASN1_d2i_bio(
    ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>> xnew,
    ffi.Pointer<d2i_of_void> d2i,
    ffi.Pointer<BIO> in1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> x,
  ) {
    return _ASN1_d2i_bio(
      xnew,
      d2i,
      in1,
      x,
    );
  }

  late final _ASN1_d2i_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>,
              ffi.Pointer<d2i_of_void>,
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ASN1_d2i_bio');
  late final _ASN1_d2i_bio = _ASN1_d2i_bioPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>,
          ffi.Pointer<d2i_of_void>,
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Void> ASN1_item_d2i_bio(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<BIO> in1,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_item_d2i_bio(
      it,
      in1,
      x,
    );
  }

  late final _ASN1_item_d2i_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)>>('ASN1_item_d2i_bio');
  late final _ASN1_item_d2i_bio = _ASN1_item_d2i_bioPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)>();

  int ASN1_i2d_bio(
    ffi.Pointer<i2d_of_void> i2d,
    ffi.Pointer<BIO> out,
    ffi.Pointer<ffi.UnsignedChar> x,
  ) {
    return _ASN1_i2d_bio(
      i2d,
      out,
      x,
    );
  }

  late final _ASN1_i2d_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<i2d_of_void>, ffi.Pointer<BIO>,
              ffi.Pointer<ffi.UnsignedChar>)>>('ASN1_i2d_bio');
  late final _ASN1_i2d_bio = _ASN1_i2d_bioPtr.asFunction<
      int Function(ffi.Pointer<i2d_of_void>, ffi.Pointer<BIO>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  int ASN1_item_i2d_bio(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<BIO> out,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _ASN1_item_i2d_bio(
      it,
      out,
      x,
    );
  }

  late final _ASN1_item_i2d_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ASN1_ITEM>, ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Void>)>>('ASN1_item_i2d_bio');
  late final _ASN1_item_i2d_bio = _ASN1_item_i2d_bioPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<BIO>, ffi.Pointer<ffi.Void>)>();

  int ASN1_UTCTIME_print(
    ffi.Pointer<BIO> fp,
    ffi.Pointer<ASN1_UTCTIME> a,
  ) {
    return _ASN1_UTCTIME_print(
      fp,
      a,
    );
  }

  late final _ASN1_UTCTIME_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_UTCTIME>)>>('ASN1_UTCTIME_print');
  late final _ASN1_UTCTIME_print = _ASN1_UTCTIME_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_UTCTIME>)>();

  int ASN1_GENERALIZEDTIME_print(
    ffi.Pointer<BIO> fp,
    ffi.Pointer<ASN1_GENERALIZEDTIME> a,
  ) {
    return _ASN1_GENERALIZEDTIME_print(
      fp,
      a,
    );
  }

  late final _ASN1_GENERALIZEDTIME_printPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO>, ffi.Pointer<ASN1_GENERALIZEDTIME>)>>(
      'ASN1_GENERALIZEDTIME_print');
  late final _ASN1_GENERALIZEDTIME_print =
      _ASN1_GENERALIZEDTIME_printPtr.asFunction<
          int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_GENERALIZEDTIME>)>();

  int ASN1_TIME_print(
    ffi.Pointer<BIO> fp,
    ffi.Pointer<ASN1_TIME> a,
  ) {
    return _ASN1_TIME_print(
      fp,
      a,
    );
  }

  late final _ASN1_TIME_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<ASN1_TIME>)>>('ASN1_TIME_print');
  late final _ASN1_TIME_print = _ASN1_TIME_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_TIME>)>();

  int ASN1_STRING_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_STRING> v,
  ) {
    return _ASN1_STRING_print(
      bp,
      v,
    );
  }

  late final _ASN1_STRING_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_STRING>)>>('ASN1_STRING_print');
  late final _ASN1_STRING_print = _ASN1_STRING_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>)>();

  int ASN1_STRING_print_ex(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_STRING> str,
    int flags,
  ) {
    return _ASN1_STRING_print_ex(
      out,
      str,
      flags,
    );
  }

  late final _ASN1_STRING_print_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>,
              ffi.UnsignedLong)>>('ASN1_STRING_print_ex');
  late final _ASN1_STRING_print_ex = _ASN1_STRING_print_exPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>, int)>();

  int ASN1_buf_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int buflen,
    int off,
  ) {
    return _ASN1_buf_print(
      bp,
      buf,
      buflen,
      off,
    );
  }

  late final _ASN1_buf_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int, ffi.Int)>>('ASN1_buf_print');
  late final _ASN1_buf_print = _ASN1_buf_printPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  int ASN1_bn_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Char> number,
    ffi.Pointer<BIGNUM> num,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int off,
  ) {
    return _ASN1_bn_print(
      bp,
      number,
      num,
      buf,
      off,
    );
  }

  late final _ASN1_bn_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_bn_print');
  late final _ASN1_bn_print = _ASN1_bn_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_parse(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.UnsignedChar> pp,
    int len,
    int indent,
  ) {
    return _ASN1_parse(
      bp,
      pp,
      len,
      indent,
    );
  }

  late final _ASN1_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long, ffi.Int)>>('ASN1_parse');
  late final _ASN1_parse = _ASN1_parsePtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  int ASN1_parse_dump(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.UnsignedChar> pp,
    int len,
    int indent,
    int dump,
  ) {
    return _ASN1_parse_dump(
      bp,
      pp,
      len,
      indent,
      dump,
    );
  }

  late final _ASN1_parse_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long, ffi.Int, ffi.Int)>>('ASN1_parse_dump');
  late final _ASN1_parse_dump = _ASN1_parse_dumpPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  ffi.Pointer<ffi.Char> ASN1_tag2str(
    int tag,
  ) {
    return _ASN1_tag2str(
      tag,
    );
  }

  late final _ASN1_tag2strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ASN1_tag2str');
  late final _ASN1_tag2str =
      _ASN1_tag2strPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ASN1_UNIVERSALSTRING_to_string(
    ffi.Pointer<ASN1_UNIVERSALSTRING> s,
  ) {
    return _ASN1_UNIVERSALSTRING_to_string(
      s,
    );
  }

  late final _ASN1_UNIVERSALSTRING_to_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ASN1_UNIVERSALSTRING>)>>(
      'ASN1_UNIVERSALSTRING_to_string');
  late final _ASN1_UNIVERSALSTRING_to_string =
      _ASN1_UNIVERSALSTRING_to_stringPtr.asFunction<
          int Function(ffi.Pointer<ASN1_UNIVERSALSTRING>)>();

  int ASN1_TYPE_set_octetstring(
    ffi.Pointer<ASN1_TYPE> a,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
  ) {
    return _ASN1_TYPE_set_octetstring(
      a,
      data,
      len,
    );
  }

  late final _ASN1_TYPE_set_octetstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_TYPE_set_octetstring');
  late final _ASN1_TYPE_set_octetstring =
      _ASN1_TYPE_set_octetstringPtr.asFunction<
          int Function(
              ffi.Pointer<ASN1_TYPE>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_TYPE_get_octetstring(
    ffi.Pointer<ASN1_TYPE> a,
    ffi.Pointer<ffi.UnsignedChar> data,
    int max_len,
  ) {
    return _ASN1_TYPE_get_octetstring(
      a,
      data,
      max_len,
    );
  }

  late final _ASN1_TYPE_get_octetstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_TYPE_get_octetstring');
  late final _ASN1_TYPE_get_octetstring =
      _ASN1_TYPE_get_octetstringPtr.asFunction<
          int Function(
              ffi.Pointer<ASN1_TYPE>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_TYPE_set_int_octetstring(
    ffi.Pointer<ASN1_TYPE> a,
    int num,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
  ) {
    return _ASN1_TYPE_set_int_octetstring(
      a,
      num,
      data,
      len,
    );
  }

  late final _ASN1_TYPE_set_int_octetstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_TYPE>,
              ffi.Long,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_TYPE_set_int_octetstring');
  late final _ASN1_TYPE_set_int_octetstring =
      _ASN1_TYPE_set_int_octetstringPtr.asFunction<
          int Function(ffi.Pointer<ASN1_TYPE>, int,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ASN1_TYPE_get_int_octetstring(
    ffi.Pointer<ASN1_TYPE> a,
    ffi.Pointer<ffi.Long> num,
    ffi.Pointer<ffi.UnsignedChar> data,
    int max_len,
  ) {
    return _ASN1_TYPE_get_int_octetstring(
      a,
      num,
      data,
      max_len,
    );
  }

  late final _ASN1_TYPE_get_int_octetstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('ASN1_TYPE_get_int_octetstring');
  late final _ASN1_TYPE_get_int_octetstring =
      _ASN1_TYPE_get_int_octetstringPtr.asFunction<
          int Function(ffi.Pointer<ASN1_TYPE>, ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ffi.Void> ASN1_item_unpack(
    ffi.Pointer<ASN1_STRING> oct,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_unpack(
      oct,
      it,
    );
  }

  late final _ASN1_item_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ASN1_STRING>,
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_unpack');
  late final _ASN1_item_unpack = _ASN1_item_unpackPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ASN1_STRING>, ffi.Pointer<ASN1_ITEM>)>();

  ffi.Pointer<ASN1_STRING> ASN1_item_pack(
    ffi.Pointer<ffi.Void> obj,
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>> oct,
  ) {
    return _ASN1_item_pack(
      obj,
      it,
      oct,
    );
  }

  late final _ASN1_item_packPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>>)>>('ASN1_item_pack');
  late final _ASN1_item_pack = _ASN1_item_packPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>>)>();

  void ASN1_STRING_set_default_mask(
    int mask,
  ) {
    return _ASN1_STRING_set_default_mask(
      mask,
    );
  }

  late final _ASN1_STRING_set_default_maskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedLong)>>(
          'ASN1_STRING_set_default_mask');
  late final _ASN1_STRING_set_default_mask =
      _ASN1_STRING_set_default_maskPtr.asFunction<void Function(int)>();

  int ASN1_STRING_set_default_mask_asc(
    ffi.Pointer<ffi.Char> p,
  ) {
    return _ASN1_STRING_set_default_mask_asc(
      p,
    );
  }

  late final _ASN1_STRING_set_default_mask_ascPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'ASN1_STRING_set_default_mask_asc');
  late final _ASN1_STRING_set_default_mask_asc =
      _ASN1_STRING_set_default_mask_ascPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>)>();

  int ASN1_STRING_get_default_mask() {
    return _ASN1_STRING_get_default_mask();
  }

  late final _ASN1_STRING_get_default_maskPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
          'ASN1_STRING_get_default_mask');
  late final _ASN1_STRING_get_default_mask =
      _ASN1_STRING_get_default_maskPtr.asFunction<int Function()>();

  int ASN1_mbstring_copy(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> out,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int len,
    int inform,
    int mask,
  ) {
    return _ASN1_mbstring_copy(
      out,
      in1,
      len,
      inform,
      mask,
    );
  }

  late final _ASN1_mbstring_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedLong)>>('ASN1_mbstring_copy');
  late final _ASN1_mbstring_copy = _ASN1_mbstring_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  int ASN1_mbstring_ncopy(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> out,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int len,
    int inform,
    int mask,
    int minsize,
    int maxsize,
  ) {
    return _ASN1_mbstring_ncopy(
      out,
      in1,
      len,
      inform,
      mask,
      minsize,
      maxsize,
    );
  }

  late final _ASN1_mbstring_ncopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedLong,
              ffi.Long,
              ffi.Long)>>('ASN1_mbstring_ncopy');
  late final _ASN1_mbstring_ncopy = _ASN1_mbstring_ncopyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.UnsignedChar>, int, int, int, int, int)>();

  ffi.Pointer<ASN1_STRING> ASN1_STRING_set_by_NID(
    ffi.Pointer<ffi.Pointer<ASN1_STRING>> out,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inlen,
    int inform,
    int nid,
  ) {
    return _ASN1_STRING_set_by_NID(
      out,
      in1,
      inlen,
      inform,
      nid,
    );
  }

  late final _ASN1_STRING_set_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('ASN1_STRING_set_by_NID');
  late final _ASN1_STRING_set_by_NID = _ASN1_STRING_set_by_NIDPtr.asFunction<
      ffi.Pointer<ASN1_STRING> Function(ffi.Pointer<ffi.Pointer<ASN1_STRING>>,
          ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  ffi.Pointer<ASN1_STRING_TABLE> ASN1_STRING_TABLE_get(
    int nid,
  ) {
    return _ASN1_STRING_TABLE_get(
      nid,
    );
  }

  late final _ASN1_STRING_TABLE_getPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ASN1_STRING_TABLE> Function(ffi.Int)>>(
      'ASN1_STRING_TABLE_get');
  late final _ASN1_STRING_TABLE_get = _ASN1_STRING_TABLE_getPtr.asFunction<
      ffi.Pointer<ASN1_STRING_TABLE> Function(int)>();

  int ASN1_STRING_TABLE_add(
    int arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _ASN1_STRING_TABLE_add(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _ASN1_STRING_TABLE_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Long, ffi.Long, ffi.UnsignedLong,
              ffi.UnsignedLong)>>('ASN1_STRING_TABLE_add');
  late final _ASN1_STRING_TABLE_add = _ASN1_STRING_TABLE_addPtr.asFunction<
      int Function(int, int, int, int, int)>();

  void ASN1_STRING_TABLE_cleanup() {
    return _ASN1_STRING_TABLE_cleanup();
  }

  late final _ASN1_STRING_TABLE_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ASN1_STRING_TABLE_cleanup');
  late final _ASN1_STRING_TABLE_cleanup =
      _ASN1_STRING_TABLE_cleanupPtr.asFunction<void Function()>();

  ffi.Pointer<ASN1_VALUE> ASN1_item_new(
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_new(
      it,
    );
  }

  late final _ASN1_item_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_VALUE> Function(
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_new');
  late final _ASN1_item_new = _ASN1_item_newPtr.asFunction<
      ffi.Pointer<ASN1_VALUE> Function(ffi.Pointer<ASN1_ITEM>)>();

  void ASN1_item_free(
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_free(
      val,
      it,
    );
  }

  late final _ASN1_item_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_free');
  late final _ASN1_item_free = _ASN1_item_freePtr.asFunction<
      void Function(ffi.Pointer<ASN1_VALUE>, ffi.Pointer<ASN1_ITEM>)>();

  ffi.Pointer<ASN1_VALUE> ASN1_item_d2i(
    ffi.Pointer<ffi.Pointer<ASN1_VALUE>> val,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_d2i(
      val,
      in1,
      len,
      it,
    );
  }

  late final _ASN1_item_d2iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_VALUE> Function(
              ffi.Pointer<ffi.Pointer<ASN1_VALUE>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long,
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_d2i');
  late final _ASN1_item_d2i = _ASN1_item_d2iPtr.asFunction<
      ffi.Pointer<ASN1_VALUE> Function(
          ffi.Pointer<ffi.Pointer<ASN1_VALUE>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int,
          ffi.Pointer<ASN1_ITEM>)>();

  int ASN1_item_i2d(
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_i2d(
      val,
      out,
      it,
    );
  }

  late final _ASN1_item_i2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_i2d');
  late final _ASN1_item_i2d = _ASN1_item_i2dPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_VALUE>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ASN1_ITEM>)>();

  int ASN1_item_ndef_i2d(
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _ASN1_item_ndef_i2d(
      val,
      out,
      it,
    );
  }

  late final _ASN1_item_ndef_i2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ASN1_ITEM>)>>('ASN1_item_ndef_i2d');
  late final _ASN1_item_ndef_i2d = _ASN1_item_ndef_i2dPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_VALUE>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ASN1_ITEM>)>();

  void ASN1_add_oid_module() {
    return _ASN1_add_oid_module();
  }

  late final _ASN1_add_oid_modulePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ASN1_add_oid_module');
  late final _ASN1_add_oid_module =
      _ASN1_add_oid_modulePtr.asFunction<void Function()>();

  void ASN1_add_stable_module() {
    return _ASN1_add_stable_module();
  }

  late final _ASN1_add_stable_modulePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ASN1_add_stable_module');
  late final _ASN1_add_stable_module =
      _ASN1_add_stable_modulePtr.asFunction<void Function()>();

  ffi.Pointer<ASN1_TYPE> ASN1_generate_nconf(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<CONF> nconf,
  ) {
    return _ASN1_generate_nconf(
      str,
      nconf,
    );
  }

  late final _ASN1_generate_nconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TYPE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<CONF>)>>('ASN1_generate_nconf');
  late final _ASN1_generate_nconf = _ASN1_generate_nconfPtr.asFunction<
      ffi.Pointer<ASN1_TYPE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<CONF>)>();

  ffi.Pointer<ASN1_TYPE> ASN1_generate_v3(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<X509V3_CTX> cnf,
  ) {
    return _ASN1_generate_v3(
      str,
      cnf,
    );
  }

  late final _ASN1_generate_v3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TYPE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<X509V3_CTX>)>>('ASN1_generate_v3');
  late final _ASN1_generate_v3 = _ASN1_generate_v3Ptr.asFunction<
      ffi.Pointer<ASN1_TYPE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<X509V3_CTX>)>();

  int ASN1_str2mask(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.UnsignedLong> pmask,
  ) {
    return _ASN1_str2mask(
      str,
      pmask,
    );
  }

  late final _ASN1_str2maskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedLong>)>>('ASN1_str2mask');
  late final _ASN1_str2mask = _ASN1_str2maskPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedLong>)>();

  int ASN1_item_print(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_VALUE> ifld,
    int indent,
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _ASN1_item_print(
      out,
      ifld,
      indent,
      it,
      pctx,
    );
  }

  late final _ASN1_item_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_VALUE>,
              ffi.Int,
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<ASN1_PCTX>)>>('ASN1_item_print');
  late final _ASN1_item_print = _ASN1_item_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_VALUE>, int,
          ffi.Pointer<ASN1_ITEM>, ffi.Pointer<ASN1_PCTX>)>();

  ffi.Pointer<ASN1_PCTX> ASN1_PCTX_new() {
    return _ASN1_PCTX_new();
  }

  late final _ASN1_PCTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_PCTX> Function()>>(
          'ASN1_PCTX_new');
  late final _ASN1_PCTX_new =
      _ASN1_PCTX_newPtr.asFunction<ffi.Pointer<ASN1_PCTX> Function()>();

  void ASN1_PCTX_free(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_free(
      p,
    );
  }

  late final _ASN1_PCTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_PCTX>)>>(
          'ASN1_PCTX_free');
  late final _ASN1_PCTX_free =
      _ASN1_PCTX_freePtr.asFunction<void Function(ffi.Pointer<ASN1_PCTX>)>();

  int ASN1_PCTX_get_flags(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_get_flags(
      p,
    );
  }

  late final _ASN1_PCTX_get_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ASN1_PCTX>)>>('ASN1_PCTX_get_flags');
  late final _ASN1_PCTX_get_flags = _ASN1_PCTX_get_flagsPtr.asFunction<
      int Function(ffi.Pointer<ASN1_PCTX>)>();

  void ASN1_PCTX_set_flags(
    ffi.Pointer<ASN1_PCTX> p,
    int flags,
  ) {
    return _ASN1_PCTX_set_flags(
      p,
      flags,
    );
  }

  late final _ASN1_PCTX_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_PCTX>,
              ffi.UnsignedLong)>>('ASN1_PCTX_set_flags');
  late final _ASN1_PCTX_set_flags = _ASN1_PCTX_set_flagsPtr.asFunction<
      void Function(ffi.Pointer<ASN1_PCTX>, int)>();

  int ASN1_PCTX_get_nm_flags(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_get_nm_flags(
      p,
    );
  }

  late final _ASN1_PCTX_get_nm_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ASN1_PCTX>)>>('ASN1_PCTX_get_nm_flags');
  late final _ASN1_PCTX_get_nm_flags = _ASN1_PCTX_get_nm_flagsPtr.asFunction<
      int Function(ffi.Pointer<ASN1_PCTX>)>();

  void ASN1_PCTX_set_nm_flags(
    ffi.Pointer<ASN1_PCTX> p,
    int flags,
  ) {
    return _ASN1_PCTX_set_nm_flags(
      p,
      flags,
    );
  }

  late final _ASN1_PCTX_set_nm_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_PCTX>,
              ffi.UnsignedLong)>>('ASN1_PCTX_set_nm_flags');
  late final _ASN1_PCTX_set_nm_flags = _ASN1_PCTX_set_nm_flagsPtr.asFunction<
      void Function(ffi.Pointer<ASN1_PCTX>, int)>();

  int ASN1_PCTX_get_cert_flags(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_get_cert_flags(
      p,
    );
  }

  late final _ASN1_PCTX_get_cert_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ASN1_PCTX>)>>('ASN1_PCTX_get_cert_flags');
  late final _ASN1_PCTX_get_cert_flags = _ASN1_PCTX_get_cert_flagsPtr
      .asFunction<int Function(ffi.Pointer<ASN1_PCTX>)>();

  void ASN1_PCTX_set_cert_flags(
    ffi.Pointer<ASN1_PCTX> p,
    int flags,
  ) {
    return _ASN1_PCTX_set_cert_flags(
      p,
      flags,
    );
  }

  late final _ASN1_PCTX_set_cert_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_PCTX>,
              ffi.UnsignedLong)>>('ASN1_PCTX_set_cert_flags');
  late final _ASN1_PCTX_set_cert_flags = _ASN1_PCTX_set_cert_flagsPtr
      .asFunction<void Function(ffi.Pointer<ASN1_PCTX>, int)>();

  int ASN1_PCTX_get_oid_flags(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_get_oid_flags(
      p,
    );
  }

  late final _ASN1_PCTX_get_oid_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ASN1_PCTX>)>>('ASN1_PCTX_get_oid_flags');
  late final _ASN1_PCTX_get_oid_flags = _ASN1_PCTX_get_oid_flagsPtr.asFunction<
      int Function(ffi.Pointer<ASN1_PCTX>)>();

  void ASN1_PCTX_set_oid_flags(
    ffi.Pointer<ASN1_PCTX> p,
    int flags,
  ) {
    return _ASN1_PCTX_set_oid_flags(
      p,
      flags,
    );
  }

  late final _ASN1_PCTX_set_oid_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_PCTX>,
              ffi.UnsignedLong)>>('ASN1_PCTX_set_oid_flags');
  late final _ASN1_PCTX_set_oid_flags = _ASN1_PCTX_set_oid_flagsPtr.asFunction<
      void Function(ffi.Pointer<ASN1_PCTX>, int)>();

  int ASN1_PCTX_get_str_flags(
    ffi.Pointer<ASN1_PCTX> p,
  ) {
    return _ASN1_PCTX_get_str_flags(
      p,
    );
  }

  late final _ASN1_PCTX_get_str_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ASN1_PCTX>)>>('ASN1_PCTX_get_str_flags');
  late final _ASN1_PCTX_get_str_flags = _ASN1_PCTX_get_str_flagsPtr.asFunction<
      int Function(ffi.Pointer<ASN1_PCTX>)>();

  void ASN1_PCTX_set_str_flags(
    ffi.Pointer<ASN1_PCTX> p,
    int flags,
  ) {
    return _ASN1_PCTX_set_str_flags(
      p,
      flags,
    );
  }

  late final _ASN1_PCTX_set_str_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_PCTX>,
              ffi.UnsignedLong)>>('ASN1_PCTX_set_str_flags');
  late final _ASN1_PCTX_set_str_flags = _ASN1_PCTX_set_str_flagsPtr.asFunction<
      void Function(ffi.Pointer<ASN1_PCTX>, int)>();

  ffi.Pointer<ASN1_SCTX> ASN1_SCTX_new(
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_SCTX>)>>
        scan_cb,
  ) {
    return _ASN1_SCTX_new(
      scan_cb,
    );
  }

  late final _ASN1_SCTX_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_SCTX> Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ASN1_SCTX>)>>)>>('ASN1_SCTX_new');
  late final _ASN1_SCTX_new = _ASN1_SCTX_newPtr.asFunction<
      ffi.Pointer<ASN1_SCTX> Function(
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_SCTX>)>>)>();

  void ASN1_SCTX_free(
    ffi.Pointer<ASN1_SCTX> p,
  ) {
    return _ASN1_SCTX_free(
      p,
    );
  }

  late final _ASN1_SCTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ASN1_SCTX>)>>(
          'ASN1_SCTX_free');
  late final _ASN1_SCTX_free =
      _ASN1_SCTX_freePtr.asFunction<void Function(ffi.Pointer<ASN1_SCTX>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_SCTX_get_item(
    ffi.Pointer<ASN1_SCTX> p,
  ) {
    return _ASN1_SCTX_get_item(
      p,
    );
  }

  late final _ASN1_SCTX_get_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_ITEM> Function(
              ffi.Pointer<ASN1_SCTX>)>>('ASN1_SCTX_get_item');
  late final _ASN1_SCTX_get_item = _ASN1_SCTX_get_itemPtr.asFunction<
      ffi.Pointer<ASN1_ITEM> Function(ffi.Pointer<ASN1_SCTX>)>();

  ffi.Pointer<ASN1_TEMPLATE> ASN1_SCTX_get_template(
    ffi.Pointer<ASN1_SCTX> p,
  ) {
    return _ASN1_SCTX_get_template(
      p,
    );
  }

  late final _ASN1_SCTX_get_templatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TEMPLATE> Function(
              ffi.Pointer<ASN1_SCTX>)>>('ASN1_SCTX_get_template');
  late final _ASN1_SCTX_get_template = _ASN1_SCTX_get_templatePtr.asFunction<
      ffi.Pointer<ASN1_TEMPLATE> Function(ffi.Pointer<ASN1_SCTX>)>();

  int ASN1_SCTX_get_flags(
    ffi.Pointer<ASN1_SCTX> p,
  ) {
    return _ASN1_SCTX_get_flags(
      p,
    );
  }

  late final _ASN1_SCTX_get_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ASN1_SCTX>)>>('ASN1_SCTX_get_flags');
  late final _ASN1_SCTX_get_flags = _ASN1_SCTX_get_flagsPtr.asFunction<
      int Function(ffi.Pointer<ASN1_SCTX>)>();

  void ASN1_SCTX_set_app_data(
    ffi.Pointer<ASN1_SCTX> p,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _ASN1_SCTX_set_app_data(
      p,
      data,
    );
  }

  late final _ASN1_SCTX_set_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ASN1_SCTX>,
              ffi.Pointer<ffi.Void>)>>('ASN1_SCTX_set_app_data');
  late final _ASN1_SCTX_set_app_data = _ASN1_SCTX_set_app_dataPtr.asFunction<
      void Function(ffi.Pointer<ASN1_SCTX>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> ASN1_SCTX_get_app_data(
    ffi.Pointer<ASN1_SCTX> p,
  ) {
    return _ASN1_SCTX_get_app_data(
      p,
    );
  }

  late final _ASN1_SCTX_get_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ASN1_SCTX>)>>('ASN1_SCTX_get_app_data');
  late final _ASN1_SCTX_get_app_data = _ASN1_SCTX_get_app_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ASN1_SCTX>)>();

  ffi.Pointer<BIO_METHOD1> BIO_f_asn1() {
    return _BIO_f_asn1();
  }

  late final _BIO_f_asn1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD1> Function()>>(
          'BIO_f_asn1');
  late final _BIO_f_asn1 =
      _BIO_f_asn1Ptr.asFunction<ffi.Pointer<BIO_METHOD1> Function()>();

  ffi.Pointer<BIO> BIO_new_NDEF(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _BIO_new_NDEF(
      out,
      val,
      it,
    );
  }

  late final _BIO_new_NDEFPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<ASN1_ITEM>)>>('BIO_new_NDEF');
  late final _BIO_new_NDEF = _BIO_new_NDEFPtr.asFunction<
      ffi.Pointer<BIO> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ASN1_VALUE>, ffi.Pointer<ASN1_ITEM>)>();

  int i2d_ASN1_bio_stream(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<BIO> in1,
    int flags,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _i2d_ASN1_bio_stream(
      out,
      val,
      in1,
      flags,
      it,
    );
  }

  late final _i2d_ASN1_bio_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<BIO>,
              ffi.Int,
              ffi.Pointer<ASN1_ITEM>)>>('i2d_ASN1_bio_stream');
  late final _i2d_ASN1_bio_stream = _i2d_ASN1_bio_streamPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_VALUE>, ffi.Pointer<BIO>,
          int, ffi.Pointer<ASN1_ITEM>)>();

  int PEM_write_bio_ASN1_stream(
    ffi.Pointer<BIO> out,
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<BIO> in1,
    int flags,
    ffi.Pointer<ffi.Char> hdr,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _PEM_write_bio_ASN1_stream(
      out,
      val,
      in1,
      flags,
      hdr,
      it,
    );
  }

  late final _PEM_write_bio_ASN1_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<BIO>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ASN1_ITEM>)>>('PEM_write_bio_ASN1_stream');
  late final _PEM_write_bio_ASN1_stream =
      _PEM_write_bio_ASN1_streamPtr.asFunction<
          int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<BIO>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ASN1_ITEM>)>();

  int SMIME_write_ASN1(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ASN1_VALUE> val,
    ffi.Pointer<BIO> data,
    int flags,
    int ctype_nid,
    int econt_nid,
    ffi.Pointer<stack_st_X509_ALGOR> mdalgs,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _SMIME_write_ASN1(
      bio,
      val,
      data,
      flags,
      ctype_nid,
      econt_nid,
      mdalgs,
      it,
    );
  }

  late final _SMIME_write_ASN1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ASN1_VALUE>,
              ffi.Pointer<BIO>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<stack_st_X509_ALGOR>,
              ffi.Pointer<ASN1_ITEM>)>>('SMIME_write_ASN1');
  late final _SMIME_write_ASN1 = _SMIME_write_ASN1Ptr.asFunction<
      int Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ASN1_VALUE>,
          ffi.Pointer<BIO>,
          int,
          int,
          int,
          ffi.Pointer<stack_st_X509_ALGOR>,
          ffi.Pointer<ASN1_ITEM>)>();

  ffi.Pointer<ASN1_VALUE> SMIME_read_ASN1(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<BIO>> bcont,
    ffi.Pointer<ASN1_ITEM> it,
  ) {
    return _SMIME_read_ASN1(
      bio,
      bcont,
      it,
    );
  }

  late final _SMIME_read_ASN1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_VALUE> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<BIO>>,
              ffi.Pointer<ASN1_ITEM>)>>('SMIME_read_ASN1');
  late final _SMIME_read_ASN1 = _SMIME_read_ASN1Ptr.asFunction<
      ffi.Pointer<ASN1_VALUE> Function(ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<BIO>>, ffi.Pointer<ASN1_ITEM>)>();

  int SMIME_crlf_copy(
    ffi.Pointer<BIO> in1,
    ffi.Pointer<BIO> out,
    int flags,
  ) {
    return _SMIME_crlf_copy(
      in1,
      out,
      flags,
    );
  }

  late final _SMIME_crlf_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<BIO>, ffi.Int)>>('SMIME_crlf_copy');
  late final _SMIME_crlf_copy = _SMIME_crlf_copyPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO>, int)>();

  int SMIME_text(
    ffi.Pointer<BIO> in1,
    ffi.Pointer<BIO> out,
  ) {
    return _SMIME_text(
      in1,
      out,
    );
  }

  late final _SMIME_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO>)>>('SMIME_text');
  late final _SMIME_text = _SMIME_textPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<BIO>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_ITEM_lookup(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ASN1_ITEM_lookup(
      name,
    );
  }

  late final _ASN1_ITEM_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_ITEM> Function(
              ffi.Pointer<ffi.Char>)>>('ASN1_ITEM_lookup');
  late final _ASN1_ITEM_lookup = _ASN1_ITEM_lookupPtr.asFunction<
      ffi.Pointer<ASN1_ITEM> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ASN1_ITEM> ASN1_ITEM_get(
    int i,
  ) {
    return _ASN1_ITEM_get(
      i,
    );
  }

  late final _ASN1_ITEM_getPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_ITEM> Function(ffi.Int)>>(
          'ASN1_ITEM_get');
  late final _ASN1_ITEM_get =
      _ASN1_ITEM_getPtr.asFunction<ffi.Pointer<ASN1_ITEM> Function(int)>();

  int ERR_load_OBJ_strings() {
    return _ERR_load_OBJ_strings();
  }

  late final _ERR_load_OBJ_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_OBJ_strings');
  late final _ERR_load_OBJ_strings =
      _ERR_load_OBJ_stringsPtr.asFunction<int Function()>();

  int OBJ_NAME_init() {
    return _OBJ_NAME_init();
  }

  late final _OBJ_NAME_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('OBJ_NAME_init');
  late final _OBJ_NAME_init = _OBJ_NAME_initPtr.asFunction<int Function()>();

  int OBJ_NAME_new_index(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>
        hash_func,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
        cmp_func,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Char>)>>
        free_func,
  ) {
    return _OBJ_NAME_new_index(
      hash_func,
      cmp_func,
      free_func,
    );
  }

  late final _OBJ_NAME_new_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int,
                          ffi.Pointer<ffi.Char>)>>)>>('OBJ_NAME_new_index');
  late final _OBJ_NAME_new_index = _OBJ_NAME_new_indexPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int,
                      ffi.Pointer<ffi.Char>)>>)>();

  ffi.Pointer<ffi.Char> OBJ_NAME_get(
    ffi.Pointer<ffi.Char> name,
    int type,
  ) {
    return _OBJ_NAME_get(
      name,
      type,
    );
  }

  late final _OBJ_NAME_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('OBJ_NAME_get');
  late final _OBJ_NAME_get = _OBJ_NAME_getPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int OBJ_NAME_add(
    ffi.Pointer<ffi.Char> name,
    int type,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _OBJ_NAME_add(
      name,
      type,
      data,
    );
  }

  late final _OBJ_NAME_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('OBJ_NAME_add');
  late final _OBJ_NAME_add = _OBJ_NAME_addPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int OBJ_NAME_remove(
    ffi.Pointer<ffi.Char> name,
    int type,
  ) {
    return _OBJ_NAME_remove(
      name,
      type,
    );
  }

  late final _OBJ_NAME_removePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'OBJ_NAME_remove');
  late final _OBJ_NAME_remove = _OBJ_NAME_removePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int)>();

  void OBJ_NAME_cleanup(
    int type,
  ) {
    return _OBJ_NAME_cleanup(
      type,
    );
  }

  late final _OBJ_NAME_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'OBJ_NAME_cleanup');
  late final _OBJ_NAME_cleanup =
      _OBJ_NAME_cleanupPtr.asFunction<void Function(int)>();

  void OBJ_NAME_do_all(
    int type,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _OBJ_NAME_do_all(
      type,
      fn,
      arg,
    );
  }

  late final _OBJ_NAME_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('OBJ_NAME_do_all');
  late final _OBJ_NAME_do_all = _OBJ_NAME_do_allPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void OBJ_NAME_do_all_sorted(
    int type,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _OBJ_NAME_do_all_sorted(
      type,
      fn,
      arg,
    );
  }

  late final _OBJ_NAME_do_all_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('OBJ_NAME_do_all_sorted');
  late final _OBJ_NAME_do_all_sorted = _OBJ_NAME_do_all_sortedPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<OBJ_NAME>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ASN1_OBJECT> OBJ_dup(
    ffi.Pointer<ASN1_OBJECT> o,
  ) {
    return _OBJ_dup(
      o,
    );
  }

  late final _OBJ_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(
              ffi.Pointer<ASN1_OBJECT>)>>('OBJ_dup');
  late final _OBJ_dup = _OBJ_dupPtr.asFunction<
      ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<ASN1_OBJECT>)>();

  ffi.Pointer<ASN1_OBJECT> OBJ_nid2obj(
    int n,
  ) {
    return _OBJ_nid2obj(
      n,
    );
  }

  late final _OBJ_nid2objPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ASN1_OBJECT> Function(ffi.Int)>>(
          'OBJ_nid2obj');
  late final _OBJ_nid2obj =
      _OBJ_nid2objPtr.asFunction<ffi.Pointer<ASN1_OBJECT> Function(int)>();

  ffi.Pointer<ffi.Char> OBJ_nid2ln(
    int n,
  ) {
    return _OBJ_nid2ln(
      n,
    );
  }

  late final _OBJ_nid2lnPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'OBJ_nid2ln');
  late final _OBJ_nid2ln =
      _OBJ_nid2lnPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> OBJ_nid2sn(
    int n,
  ) {
    return _OBJ_nid2sn(
      n,
    );
  }

  late final _OBJ_nid2snPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'OBJ_nid2sn');
  late final _OBJ_nid2sn =
      _OBJ_nid2snPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int OBJ_obj2nid(
    ffi.Pointer<ASN1_OBJECT> o,
  ) {
    return _OBJ_obj2nid(
      o,
    );
  }

  late final _OBJ_obj2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_OBJECT>)>>(
          'OBJ_obj2nid');
  late final _OBJ_obj2nid =
      _OBJ_obj2nidPtr.asFunction<int Function(ffi.Pointer<ASN1_OBJECT>)>();

  ffi.Pointer<ASN1_OBJECT> OBJ_txt2obj(
    ffi.Pointer<ffi.Char> s,
    int no_name,
  ) {
    return _OBJ_txt2obj(
      s,
      no_name,
    );
  }

  late final _OBJ_txt2objPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('OBJ_txt2obj');
  late final _OBJ_txt2obj = _OBJ_txt2objPtr.asFunction<
      ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<ffi.Char>, int)>();

  int OBJ_obj2txt(
    ffi.Pointer<ffi.Char> buf,
    int buf_len,
    ffi.Pointer<ASN1_OBJECT> a,
    int no_name,
  ) {
    return _OBJ_obj2txt(
      buf,
      buf_len,
      a,
      no_name,
    );
  }

  late final _OBJ_obj2txtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ASN1_OBJECT>, ffi.Int)>>('OBJ_obj2txt');
  late final _OBJ_obj2txt = _OBJ_obj2txtPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ASN1_OBJECT>, int)>();

  int OBJ_txt2nid(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _OBJ_txt2nid(
      s,
    );
  }

  late final _OBJ_txt2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'OBJ_txt2nid');
  late final _OBJ_txt2nid =
      _OBJ_txt2nidPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int OBJ_ln2nid(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _OBJ_ln2nid(
      s,
    );
  }

  late final _OBJ_ln2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'OBJ_ln2nid');
  late final _OBJ_ln2nid =
      _OBJ_ln2nidPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int OBJ_sn2nid(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _OBJ_sn2nid(
      s,
    );
  }

  late final _OBJ_sn2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'OBJ_sn2nid');
  late final _OBJ_sn2nid =
      _OBJ_sn2nidPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int OBJ_cmp(
    ffi.Pointer<ASN1_OBJECT> a,
    ffi.Pointer<ASN1_OBJECT> b,
  ) {
    return _OBJ_cmp(
      a,
      b,
    );
  }

  late final _OBJ_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_OBJECT>, ffi.Pointer<ASN1_OBJECT>)>>('OBJ_cmp');
  late final _OBJ_cmp = _OBJ_cmpPtr.asFunction<
      int Function(ffi.Pointer<ASN1_OBJECT>, ffi.Pointer<ASN1_OBJECT>)>();

  ffi.Pointer<ffi.Void> OBJ_bsearch_(
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> base,
    int num,
    int size,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        cmp,
  ) {
    return _OBJ_bsearch_(
      key,
      base,
      num,
      size,
      cmp,
    );
  }

  late final _OBJ_bsearch_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('OBJ_bsearch_');
  late final _OBJ_bsearch_ = _OBJ_bsearch_Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<ffi.Void> OBJ_bsearch_ex_(
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> base,
    int num,
    int size,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        cmp,
    int flags,
  ) {
    return _OBJ_bsearch_ex_(
      key,
      base,
      num,
      size,
      cmp,
      flags,
    );
  }

  late final _OBJ_bsearch_ex_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>,
              ffi.Int)>>('OBJ_bsearch_ex_');
  late final _OBJ_bsearch_ex_ = _OBJ_bsearch_ex_Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>,
          int)>();

  int OBJ_new_nid(
    int num,
  ) {
    return _OBJ_new_nid(
      num,
    );
  }

  late final _OBJ_new_nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('OBJ_new_nid');
  late final _OBJ_new_nid = _OBJ_new_nidPtr.asFunction<int Function(int)>();

  int OBJ_add_object(
    ffi.Pointer<ASN1_OBJECT> obj,
  ) {
    return _OBJ_add_object(
      obj,
    );
  }

  late final _OBJ_add_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_OBJECT>)>>(
          'OBJ_add_object');
  late final _OBJ_add_object =
      _OBJ_add_objectPtr.asFunction<int Function(ffi.Pointer<ASN1_OBJECT>)>();

  int OBJ_create(
    ffi.Pointer<ffi.Char> oid,
    ffi.Pointer<ffi.Char> sn,
    ffi.Pointer<ffi.Char> ln,
  ) {
    return _OBJ_create(
      oid,
      sn,
      ln,
    );
  }

  late final _OBJ_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('OBJ_create');
  late final _OBJ_create = _OBJ_createPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int OBJ_create_objects(
    ffi.Pointer<BIO> in1,
  ) {
    return _OBJ_create_objects(
      in1,
    );
  }

  late final _OBJ_create_objectsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>)>>(
          'OBJ_create_objects');
  late final _OBJ_create_objects =
      _OBJ_create_objectsPtr.asFunction<int Function(ffi.Pointer<BIO>)>();

  int OBJ_length(
    ffi.Pointer<ASN1_OBJECT> obj,
  ) {
    return _OBJ_length(
      obj,
    );
  }

  late final _OBJ_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_OBJECT>)>>(
          'OBJ_length');
  late final _OBJ_length =
      _OBJ_lengthPtr.asFunction<int Function(ffi.Pointer<ASN1_OBJECT>)>();

  ffi.Pointer<ffi.UnsignedChar> OBJ_get0_data(
    ffi.Pointer<ASN1_OBJECT> obj,
  ) {
    return _OBJ_get0_data(
      obj,
    );
  }

  late final _OBJ_get0_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ASN1_OBJECT>)>>('OBJ_get0_data');
  late final _OBJ_get0_data = _OBJ_get0_dataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ASN1_OBJECT>)>();

  int OBJ_find_sigid_algs(
    int signid,
    ffi.Pointer<ffi.Int> pdig_nid,
    ffi.Pointer<ffi.Int> ppkey_nid,
  ) {
    return _OBJ_find_sigid_algs(
      signid,
      pdig_nid,
      ppkey_nid,
    );
  }

  late final _OBJ_find_sigid_algsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('OBJ_find_sigid_algs');
  late final _OBJ_find_sigid_algs = _OBJ_find_sigid_algsPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int OBJ_find_sigid_by_algs(
    ffi.Pointer<ffi.Int> psignid,
    int dig_nid,
    int pkey_nid,
  ) {
    return _OBJ_find_sigid_by_algs(
      psignid,
      dig_nid,
      pkey_nid,
    );
  }

  late final _OBJ_find_sigid_by_algsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int,
              ffi.Int)>>('OBJ_find_sigid_by_algs');
  late final _OBJ_find_sigid_by_algs = _OBJ_find_sigid_by_algsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int, int)>();

  int OBJ_add_sigid(
    int signid,
    int dig_id,
    int pkey_id,
  ) {
    return _OBJ_add_sigid(
      signid,
      dig_id,
      pkey_id,
    );
  }

  late final _OBJ_add_sigidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'OBJ_add_sigid');
  late final _OBJ_add_sigid =
      _OBJ_add_sigidPtr.asFunction<int Function(int, int, int)>();

  void OBJ_sigid_free() {
    return _OBJ_sigid_free();
  }

  late final _OBJ_sigid_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('OBJ_sigid_free');
  late final _OBJ_sigid_free = _OBJ_sigid_freePtr.asFunction<void Function()>();

  ffi.Pointer<EVP_MD> EVP_MD_meth_new(
    int md_type,
    int pkey_type,
  ) {
    return _EVP_MD_meth_new(
      md_type,
      pkey_type,
    );
  }

  late final _EVP_MD_meth_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<EVP_MD> Function(ffi.Int, ffi.Int)>>(
      'EVP_MD_meth_new');
  late final _EVP_MD_meth_new =
      _EVP_MD_meth_newPtr.asFunction<ffi.Pointer<EVP_MD> Function(int, int)>();

  ffi.Pointer<EVP_MD> EVP_MD_meth_dup(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_dup(
      md,
    );
  }

  late final _EVP_MD_meth_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_MD> Function(
              ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_dup');
  late final _EVP_MD_meth_dup = _EVP_MD_meth_dupPtr.asFunction<
      ffi.Pointer<EVP_MD> Function(ffi.Pointer<EVP_MD>)>();

  void EVP_MD_meth_free(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_free(
      md,
    );
  }

  late final _EVP_MD_meth_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_meth_free');
  late final _EVP_MD_meth_free =
      _EVP_MD_meth_freePtr.asFunction<void Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_meth_set_input_blocksize(
    ffi.Pointer<EVP_MD> md,
    int blocksize,
  ) {
    return _EVP_MD_meth_set_input_blocksize(
      md,
      blocksize,
    );
  }

  late final _EVP_MD_meth_set_input_blocksizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>, ffi.Int)>>(
      'EVP_MD_meth_set_input_blocksize');
  late final _EVP_MD_meth_set_input_blocksize =
      _EVP_MD_meth_set_input_blocksizePtr.asFunction<
          int Function(ffi.Pointer<EVP_MD>, int)>();

  int EVP_MD_meth_set_result_size(
    ffi.Pointer<EVP_MD> md,
    int resultsize,
  ) {
    return _EVP_MD_meth_set_result_size(
      md,
      resultsize,
    );
  }

  late final _EVP_MD_meth_set_result_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>, ffi.Int)>>(
      'EVP_MD_meth_set_result_size');
  late final _EVP_MD_meth_set_result_size = _EVP_MD_meth_set_result_sizePtr
      .asFunction<int Function(ffi.Pointer<EVP_MD>, int)>();

  int EVP_MD_meth_set_app_datasize(
    ffi.Pointer<EVP_MD> md,
    int datasize,
  ) {
    return _EVP_MD_meth_set_app_datasize(
      md,
      datasize,
    );
  }

  late final _EVP_MD_meth_set_app_datasizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>, ffi.Int)>>(
      'EVP_MD_meth_set_app_datasize');
  late final _EVP_MD_meth_set_app_datasize = _EVP_MD_meth_set_app_datasizePtr
      .asFunction<int Function(ffi.Pointer<EVP_MD>, int)>();

  int EVP_MD_meth_set_flags(
    ffi.Pointer<EVP_MD> md,
    int flags,
  ) {
    return _EVP_MD_meth_set_flags(
      md,
      flags,
    );
  }

  late final _EVP_MD_meth_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD>, ffi.UnsignedLong)>>('EVP_MD_meth_set_flags');
  late final _EVP_MD_meth_set_flags = _EVP_MD_meth_set_flagsPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD>, int)>();

  int EVP_MD_meth_set_init(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
        init,
  ) {
    return _EVP_MD_meth_set_init(
      md,
      init,
    );
  }

  late final _EVP_MD_meth_set_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX>)>>)>>('EVP_MD_meth_set_init');
  late final _EVP_MD_meth_set_init = _EVP_MD_meth_set_initPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>)>();

  int EVP_MD_meth_set_update(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, ffi.Int)>>
        update,
  ) {
    return _EVP_MD_meth_set_update(
      md,
      update,
    );
  }

  late final _EVP_MD_meth_set_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Int)>>)>>('EVP_MD_meth_set_update');
  late final _EVP_MD_meth_set_update = _EVP_MD_meth_set_updatePtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                      ffi.Pointer<ffi.Void>, ffi.Int)>>)>();

  int EVP_MD_meth_set_final(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>)>>
        final1,
  ) {
    return _EVP_MD_meth_set_final(
      md,
      final1,
    );
  }

  late final _EVP_MD_meth_set_finalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>)>>)>>(
      'EVP_MD_meth_set_final');
  late final _EVP_MD_meth_set_final = _EVP_MD_meth_set_finalPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                      ffi.Pointer<ffi.UnsignedChar>)>>)>();

  int EVP_MD_meth_set_copy(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)>>
        copy,
  ) {
    return _EVP_MD_meth_set_copy(
      md,
      copy,
    );
  }

  late final _EVP_MD_meth_set_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                          ffi.Pointer<EVP_MD_CTX>)>>)>>('EVP_MD_meth_set_copy');
  late final _EVP_MD_meth_set_copy = _EVP_MD_meth_set_copyPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)>>)>();

  int EVP_MD_meth_set_cleanup(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
        cleanup,
  ) {
    return _EVP_MD_meth_set_cleanup(
      md,
      cleanup,
    );
  }

  late final _EVP_MD_meth_set_cleanupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>)>>(
      'EVP_MD_meth_set_cleanup');
  late final _EVP_MD_meth_set_cleanup = _EVP_MD_meth_set_cleanupPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>)>();

  int EVP_MD_meth_set_ctrl(
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int, ffi.Int,
                    ffi.Pointer<ffi.Void>)>>
        ctrl,
  ) {
    return _EVP_MD_meth_set_ctrl(
      md,
      ctrl,
    );
  }

  late final _EVP_MD_meth_set_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX>,
                          ffi.Int,
                          ffi.Int,
                          ffi.Pointer<ffi.Void>)>>)>>('EVP_MD_meth_set_ctrl');
  late final _EVP_MD_meth_set_ctrl = _EVP_MD_meth_set_ctrlPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int, ffi.Int,
                      ffi.Pointer<ffi.Void>)>>)>();

  int EVP_MD_meth_get_input_blocksize(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_input_blocksize(
      md,
    );
  }

  late final _EVP_MD_meth_get_input_blocksizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_meth_get_input_blocksize');
  late final _EVP_MD_meth_get_input_blocksize =
      _EVP_MD_meth_get_input_blocksizePtr.asFunction<
          int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_meth_get_result_size(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_result_size(
      md,
    );
  }

  late final _EVP_MD_meth_get_result_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_meth_get_result_size');
  late final _EVP_MD_meth_get_result_size = _EVP_MD_meth_get_result_sizePtr
      .asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_meth_get_app_datasize(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_app_datasize(
      md,
    );
  }

  late final _EVP_MD_meth_get_app_datasizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_meth_get_app_datasize');
  late final _EVP_MD_meth_get_app_datasize = _EVP_MD_meth_get_app_datasizePtr
      .asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_meth_get_flags(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_flags(
      md,
    );
  }

  late final _EVP_MD_meth_get_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<EVP_MD>)>>(
      'EVP_MD_meth_get_flags');
  late final _EVP_MD_meth_get_flags =
      _EVP_MD_meth_get_flagsPtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
      EVP_MD_meth_get_init(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_init(
      md,
    );
  }

  late final _EVP_MD_meth_get_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_init');
  late final _EVP_MD_meth_get_init = _EVP_MD_meth_get_initPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, ffi.Int)>>
      EVP_MD_meth_get_update(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_update(
      md,
    );
  }

  late final _EVP_MD_meth_get_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                          ffi.Pointer<ffi.Void>, ffi.Int)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_update');
  late final _EVP_MD_meth_get_update = _EVP_MD_meth_get_updatePtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, ffi.Int)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>)>>
      EVP_MD_meth_get_final(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_final(
      md,
    );
  }

  late final _EVP_MD_meth_get_finalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_final');
  late final _EVP_MD_meth_get_final = _EVP_MD_meth_get_finalPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)>>
      EVP_MD_meth_get_copy(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_copy(
      md,
    );
  }

  late final _EVP_MD_meth_get_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_copy');
  late final _EVP_MD_meth_get_copy = _EVP_MD_meth_get_copyPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
      EVP_MD_meth_get_cleanup(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_cleanup(
      md,
    );
  }

  late final _EVP_MD_meth_get_cleanupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_cleanup');
  late final _EVP_MD_meth_get_cleanup = _EVP_MD_meth_get_cleanupPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>> EVP_MD_meth_get_ctrl(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_meth_get_ctrl(
      md,
    );
  }

  late final _EVP_MD_meth_get_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int,
                          ffi.Int, ffi.Pointer<ffi.Void>)>>
              Function(ffi.Pointer<EVP_MD>)>>('EVP_MD_meth_get_ctrl');
  late final _EVP_MD_meth_get_ctrl = _EVP_MD_meth_get_ctrlPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int, ffi.Int,
                      ffi.Pointer<ffi.Void>)>>
          Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<EVP_CIPHER> EVP_CIPHER_meth_new(
    int cipher_type,
    int block_size,
    int key_len,
  ) {
    return _EVP_CIPHER_meth_new(
      cipher_type,
      block_size,
      key_len,
    );
  }

  late final _EVP_CIPHER_meth_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER> Function(
              ffi.Int, ffi.Int, ffi.Int)>>('EVP_CIPHER_meth_new');
  late final _EVP_CIPHER_meth_new = _EVP_CIPHER_meth_newPtr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function(int, int, int)>();

  ffi.Pointer<EVP_CIPHER> EVP_CIPHER_meth_dup(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_dup(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER> Function(
              ffi.Pointer<EVP_CIPHER>)>>('EVP_CIPHER_meth_dup');
  late final _EVP_CIPHER_meth_dup = _EVP_CIPHER_meth_dupPtr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function(ffi.Pointer<EVP_CIPHER>)>();

  void EVP_CIPHER_meth_free(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_free(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_meth_free');
  late final _EVP_CIPHER_meth_free = _EVP_CIPHER_meth_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_meth_set_iv_length(
    ffi.Pointer<EVP_CIPHER> cipher,
    int iv_len,
  ) {
    return _EVP_CIPHER_meth_set_iv_length(
      cipher,
      iv_len,
    );
  }

  late final _EVP_CIPHER_meth_set_iv_lengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER>,
              ffi.Int)>>('EVP_CIPHER_meth_set_iv_length');
  late final _EVP_CIPHER_meth_set_iv_length = _EVP_CIPHER_meth_set_iv_lengthPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER>, int)>();

  int EVP_CIPHER_meth_set_flags(
    ffi.Pointer<EVP_CIPHER> cipher,
    int flags,
  ) {
    return _EVP_CIPHER_meth_set_flags(
      cipher,
      flags,
    );
  }

  late final _EVP_CIPHER_meth_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER>,
              ffi.UnsignedLong)>>('EVP_CIPHER_meth_set_flags');
  late final _EVP_CIPHER_meth_set_flags = _EVP_CIPHER_meth_set_flagsPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER>, int)>();

  int EVP_CIPHER_meth_set_impl_ctx_size(
    ffi.Pointer<EVP_CIPHER> cipher,
    int ctx_size,
  ) {
    return _EVP_CIPHER_meth_set_impl_ctx_size(
      cipher,
      ctx_size,
    );
  }

  late final _EVP_CIPHER_meth_set_impl_ctx_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER>,
              ffi.Int)>>('EVP_CIPHER_meth_set_impl_ctx_size');
  late final _EVP_CIPHER_meth_set_impl_ctx_size =
      _EVP_CIPHER_meth_set_impl_ctx_sizePtr.asFunction<
          int Function(ffi.Pointer<EVP_CIPHER>, int)>();

  int EVP_CIPHER_meth_set_init(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_CIPHER_CTX>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Int)>>
        init,
  ) {
    return _EVP_CIPHER_meth_set_init(
      cipher,
      init,
    );
  }

  late final _EVP_CIPHER_meth_set_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>>('EVP_CIPHER_meth_set_init');
  late final _EVP_CIPHER_meth_set_init =
      _EVP_CIPHER_meth_set_initPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>();

  int EVP_CIPHER_meth_set_do_cipher(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_CIPHER_CTX>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Int)>>
        do_cipher,
  ) {
    return _EVP_CIPHER_meth_set_do_cipher(
      cipher,
      do_cipher,
    );
  }

  late final _EVP_CIPHER_meth_set_do_cipherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>>('EVP_CIPHER_meth_set_do_cipher');
  late final _EVP_CIPHER_meth_set_do_cipher =
      _EVP_CIPHER_meth_set_do_cipherPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>();

  int EVP_CIPHER_meth_set_cleanup(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>
        cleanup,
  ) {
    return _EVP_CIPHER_meth_set_cleanup(
      cipher,
      cleanup,
    );
  }

  late final _EVP_CIPHER_meth_set_cleanupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>)>>(
      'EVP_CIPHER_meth_set_cleanup');
  late final _EVP_CIPHER_meth_set_cleanup =
      _EVP_CIPHER_meth_set_cleanupPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>)>();

  int EVP_CIPHER_meth_set_set_asn1_params(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
        set_asn1_parameters,
  ) {
    return _EVP_CIPHER_meth_set_set_asn1_params(
      cipher,
      set_asn1_parameters,
    );
  }

  late final _EVP_CIPHER_meth_set_set_asn1_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                              ffi.Pointer<ASN1_TYPE>)>>)>>(
      'EVP_CIPHER_meth_set_set_asn1_params');
  late final _EVP_CIPHER_meth_set_set_asn1_params =
      _EVP_CIPHER_meth_set_set_asn1_paramsPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ASN1_TYPE>)>>)>();

  int EVP_CIPHER_meth_set_get_asn1_params(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
        get_asn1_parameters,
  ) {
    return _EVP_CIPHER_meth_set_get_asn1_params(
      cipher,
      get_asn1_parameters,
    );
  }

  late final _EVP_CIPHER_meth_set_get_asn1_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                              ffi.Pointer<ASN1_TYPE>)>>)>>(
      'EVP_CIPHER_meth_set_get_asn1_params');
  late final _EVP_CIPHER_meth_set_get_asn1_params =
      _EVP_CIPHER_meth_set_get_asn1_paramsPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ASN1_TYPE>)>>)>();

  int EVP_CIPHER_meth_set_ctrl(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int, ffi.Int,
                    ffi.Pointer<ffi.Void>)>>
        ctrl,
  ) {
    return _EVP_CIPHER_meth_set_ctrl(
      cipher,
      ctrl,
    );
  }

  late final _EVP_CIPHER_meth_set_ctrlPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int,
                              ffi.Int, ffi.Pointer<ffi.Void>)>>)>>(
      'EVP_CIPHER_meth_set_ctrl');
  late final _EVP_CIPHER_meth_set_ctrl =
      _EVP_CIPHER_meth_set_ctrlPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int,
                          ffi.Int, ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>> EVP_CIPHER_meth_get_init(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_init(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>
              Function(ffi.Pointer<EVP_CIPHER>)>>('EVP_CIPHER_meth_get_init');
  late final _EVP_CIPHER_meth_get_init =
      _EVP_CIPHER_meth_get_initPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>> EVP_CIPHER_meth_get_do_cipher(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_do_cipher(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_do_cipherPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_CIPHER_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int)>>
                  Function(ffi.Pointer<EVP_CIPHER>)>>(
      'EVP_CIPHER_meth_get_do_cipher');
  late final _EVP_CIPHER_meth_get_do_cipher =
      _EVP_CIPHER_meth_get_do_cipherPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>
      EVP_CIPHER_meth_get_cleanup(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_cleanup(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_cleanupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>
                  Function(ffi.Pointer<EVP_CIPHER>)>>(
      'EVP_CIPHER_meth_get_cleanup');
  late final _EVP_CIPHER_meth_get_cleanup =
      _EVP_CIPHER_meth_get_cleanupPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
      EVP_CIPHER_meth_get_set_asn1_params(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_set_asn1_params(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_set_asn1_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                              ffi.Pointer<ASN1_TYPE>)>>
                  Function(ffi.Pointer<EVP_CIPHER>)>>(
      'EVP_CIPHER_meth_get_set_asn1_params');
  late final _EVP_CIPHER_meth_get_set_asn1_params =
      _EVP_CIPHER_meth_get_set_asn1_paramsPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
      EVP_CIPHER_meth_get_get_asn1_params(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_get_asn1_params(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_get_asn1_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
                              ffi.Pointer<ASN1_TYPE>)>>
                  Function(ffi.Pointer<EVP_CIPHER>)>>(
      'EVP_CIPHER_meth_get_get_asn1_params');
  late final _EVP_CIPHER_meth_get_get_asn1_params =
      _EVP_CIPHER_meth_get_get_asn1_paramsPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>> EVP_CIPHER_meth_get_ctrl(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_meth_get_ctrl(
      cipher,
    );
  }

  late final _EVP_CIPHER_meth_get_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int,
                          ffi.Int, ffi.Pointer<ffi.Void>)>>
              Function(ffi.Pointer<EVP_CIPHER>)>>('EVP_CIPHER_meth_get_ctrl');
  late final _EVP_CIPHER_meth_get_ctrl =
      _EVP_CIPHER_meth_get_ctrlPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int,
                          ffi.Int, ffi.Pointer<ffi.Void>)>>
              Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_MD_type(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_type(
      md,
    );
  }

  late final _EVP_MD_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_type');
  late final _EVP_MD_type =
      _EVP_MD_typePtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_pkey_type(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_pkey_type(
      md,
    );
  }

  late final _EVP_MD_pkey_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_pkey_type');
  late final _EVP_MD_pkey_type =
      _EVP_MD_pkey_typePtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_size(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_size(
      md,
    );
  }

  late final _EVP_MD_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_size');
  late final _EVP_MD_size =
      _EVP_MD_sizePtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_block_size(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_block_size(
      md,
    );
  }

  late final _EVP_MD_block_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_MD_block_size');
  late final _EVP_MD_block_size =
      _EVP_MD_block_sizePtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  int EVP_MD_flags(
    ffi.Pointer<EVP_MD> md,
  ) {
    return _EVP_MD_flags(
      md,
    );
  }

  late final _EVP_MD_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<EVP_MD>)>>(
      'EVP_MD_flags');
  late final _EVP_MD_flags =
      _EVP_MD_flagsPtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<EVP_MD> EVP_MD_CTX_md(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_md(
      ctx,
    );
  }

  late final _EVP_MD_CTX_mdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_MD> Function(
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_md');
  late final _EVP_MD_CTX_md = _EVP_MD_CTX_mdPtr.asFunction<
      ffi.Pointer<EVP_MD> Function(ffi.Pointer<EVP_MD_CTX>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, ffi.Int)>>
      EVP_MD_CTX_update_fn(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_update_fn(
      ctx,
    );
  }

  late final _EVP_MD_CTX_update_fnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                          ffi.Pointer<ffi.Void>, ffi.Int)>>
              Function(ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_update_fn');
  late final _EVP_MD_CTX_update_fn = _EVP_MD_CTX_update_fnPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, ffi.Int)>>
          Function(ffi.Pointer<EVP_MD_CTX>)>();

  void EVP_MD_CTX_set_update_fn(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, ffi.Int)>>
        update,
  ) {
    return _EVP_MD_CTX_set_update_fn(
      ctx,
      update,
    );
  }

  late final _EVP_MD_CTX_set_update_fnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Int)>>)>>('EVP_MD_CTX_set_update_fn');
  late final _EVP_MD_CTX_set_update_fn =
      _EVP_MD_CTX_set_update_fnPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
                          ffi.Pointer<ffi.Void>, ffi.Int)>>)>();

  ffi.Pointer<EVP_PKEY_CTX> EVP_MD_CTX_pkey_ctx(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_pkey_ctx(
      ctx,
    );
  }

  late final _EVP_MD_CTX_pkey_ctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_pkey_ctx');
  late final _EVP_MD_CTX_pkey_ctx = _EVP_MD_CTX_pkey_ctxPtr.asFunction<
      ffi.Pointer<EVP_PKEY_CTX> Function(ffi.Pointer<EVP_MD_CTX>)>();

  void EVP_MD_CTX_set_pkey_ctx(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<EVP_PKEY_CTX> pctx,
  ) {
    return _EVP_MD_CTX_set_pkey_ctx(
      ctx,
      pctx,
    );
  }

  late final _EVP_MD_CTX_set_pkey_ctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_MD_CTX_set_pkey_ctx');
  late final _EVP_MD_CTX_set_pkey_ctx = _EVP_MD_CTX_set_pkey_ctxPtr.asFunction<
      void Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_PKEY_CTX>)>();

  ffi.Pointer<ffi.Void> EVP_MD_CTX_md_data(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_md_data(
      ctx,
    );
  }

  late final _EVP_MD_CTX_md_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_md_data');
  late final _EVP_MD_CTX_md_data = _EVP_MD_CTX_md_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_MD_CTX>)>();

  int EVP_CIPHER_nid(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_nid(
      cipher,
    );
  }

  late final _EVP_CIPHER_nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_nid');
  late final _EVP_CIPHER_nid =
      _EVP_CIPHER_nidPtr.asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_block_size(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_block_size(
      cipher,
    );
  }

  late final _EVP_CIPHER_block_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_block_size');
  late final _EVP_CIPHER_block_size = _EVP_CIPHER_block_sizePtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_impl_ctx_size(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_impl_ctx_size(
      cipher,
    );
  }

  late final _EVP_CIPHER_impl_ctx_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_impl_ctx_size');
  late final _EVP_CIPHER_impl_ctx_size = _EVP_CIPHER_impl_ctx_sizePtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_key_length(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_key_length(
      cipher,
    );
  }

  late final _EVP_CIPHER_key_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_key_length');
  late final _EVP_CIPHER_key_length = _EVP_CIPHER_key_lengthPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_iv_length(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_iv_length(
      cipher,
    );
  }

  late final _EVP_CIPHER_iv_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_iv_length');
  late final _EVP_CIPHER_iv_length = _EVP_CIPHER_iv_lengthPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_flags(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_CIPHER_flags(
      cipher,
    );
  }

  late final _EVP_CIPHER_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<EVP_CIPHER>)>>('EVP_CIPHER_flags');
  late final _EVP_CIPHER_flags =
      _EVP_CIPHER_flagsPtr.asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  ffi.Pointer<EVP_CIPHER> EVP_CIPHER_CTX_cipher(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_cipher(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_cipherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_cipher');
  late final _EVP_CIPHER_CTX_cipher = _EVP_CIPHER_CTX_cipherPtr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_encrypting(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_encrypting(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_encryptingPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_encrypting');
  late final _EVP_CIPHER_CTX_encrypting = _EVP_CIPHER_CTX_encryptingPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_nid(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_nid(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_nidPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_nid');
  late final _EVP_CIPHER_CTX_nid = _EVP_CIPHER_CTX_nidPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_block_size(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_block_size(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_block_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_block_size');
  late final _EVP_CIPHER_CTX_block_size = _EVP_CIPHER_CTX_block_sizePtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_key_length(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_key_length(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_key_lengthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_key_length');
  late final _EVP_CIPHER_CTX_key_length = _EVP_CIPHER_CTX_key_lengthPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_iv_length(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_iv_length(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_iv_lengthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_iv_length');
  late final _EVP_CIPHER_CTX_iv_length = _EVP_CIPHER_CTX_iv_lengthPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_CIPHER_CTX_iv(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_iv(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_iv');
  late final _EVP_CIPHER_CTX_iv = _EVP_CIPHER_CTX_ivPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_CIPHER_CTX_original_iv(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_original_iv(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_original_ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_original_iv');
  late final _EVP_CIPHER_CTX_original_iv =
      _EVP_CIPHER_CTX_original_ivPtr.asFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_CIPHER_CTX_iv_noconst(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_iv_noconst(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_iv_noconstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_iv_noconst');
  late final _EVP_CIPHER_CTX_iv_noconst =
      _EVP_CIPHER_CTX_iv_noconstPtr.asFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_CIPHER_CTX_buf_noconst(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_buf_noconst(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_buf_noconstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_buf_noconst');
  late final _EVP_CIPHER_CTX_buf_noconst =
      _EVP_CIPHER_CTX_buf_noconstPtr.asFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_num(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_num(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_numPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_num');
  late final _EVP_CIPHER_CTX_num = _EVP_CIPHER_CTX_numPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  void EVP_CIPHER_CTX_set_num(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int num,
  ) {
    return _EVP_CIPHER_CTX_set_num(
      ctx,
      num,
    );
  }

  late final _EVP_CIPHER_CTX_set_numPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int)>>('EVP_CIPHER_CTX_set_num');
  late final _EVP_CIPHER_CTX_set_num = _EVP_CIPHER_CTX_set_numPtr.asFunction<
      void Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  int EVP_CIPHER_CTX_copy(
    ffi.Pointer<EVP_CIPHER_CTX> out,
    ffi.Pointer<EVP_CIPHER_CTX> in1,
  ) {
    return _EVP_CIPHER_CTX_copy(
      out,
      in1,
    );
  }

  late final _EVP_CIPHER_CTX_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_copy');
  late final _EVP_CIPHER_CTX_copy = _EVP_CIPHER_CTX_copyPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<ffi.Void> EVP_CIPHER_CTX_get_app_data(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_get_app_data(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_get_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_get_app_data');
  late final _EVP_CIPHER_CTX_get_app_data =
      _EVP_CIPHER_CTX_get_app_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  void EVP_CIPHER_CTX_set_app_data(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_CIPHER_CTX_set_app_data(
      ctx,
      data,
    );
  }

  late final _EVP_CIPHER_CTX_set_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Void>)>>('EVP_CIPHER_CTX_set_app_data');
  late final _EVP_CIPHER_CTX_set_app_data =
      _EVP_CIPHER_CTX_set_app_dataPtr.asFunction<
          void Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> EVP_CIPHER_CTX_get_cipher_data(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
  ) {
    return _EVP_CIPHER_CTX_get_cipher_data(
      ctx,
    );
  }

  late final _EVP_CIPHER_CTX_get_cipher_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_CIPHER_CTX>)>>('EVP_CIPHER_CTX_get_cipher_data');
  late final _EVP_CIPHER_CTX_get_cipher_data =
      _EVP_CIPHER_CTX_get_cipher_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  ffi.Pointer<ffi.Void> EVP_CIPHER_CTX_set_cipher_data(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Void> cipher_data,
  ) {
    return _EVP_CIPHER_CTX_set_cipher_data(
      ctx,
      cipher_data,
    );
  }

  late final _EVP_CIPHER_CTX_set_cipher_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Void>)>>('EVP_CIPHER_CTX_set_cipher_data');
  late final _EVP_CIPHER_CTX_set_cipher_data =
      _EVP_CIPHER_CTX_set_cipher_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.Void>)>();

  int EVP_Cipher(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_Cipher(
      c,
      out,
      in1,
      inl,
    );
  }

  late final _EVP_CipherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt)>>('EVP_Cipher');
  late final _EVP_Cipher = _EVP_CipherPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_MD_CTX_ctrl(
    ffi.Pointer<EVP_MD_CTX> ctx,
    int cmd,
    int p1,
    ffi.Pointer<ffi.Void> p2,
  ) {
    return _EVP_MD_CTX_ctrl(
      ctx,
      cmd,
      p1,
      p2,
    );
  }

  late final _EVP_MD_CTX_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('EVP_MD_CTX_ctrl');
  late final _EVP_MD_CTX_ctrl = _EVP_MD_CTX_ctrlPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, int, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<EVP_MD_CTX> EVP_MD_CTX_new() {
    return _EVP_MD_CTX_new();
  }

  late final _EVP_MD_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD_CTX> Function()>>(
          'EVP_MD_CTX_new');
  late final _EVP_MD_CTX_new =
      _EVP_MD_CTX_newPtr.asFunction<ffi.Pointer<EVP_MD_CTX> Function()>();

  int EVP_MD_CTX_reset(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_reset(
      ctx,
    );
  }

  late final _EVP_MD_CTX_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD_CTX>)>>(
          'EVP_MD_CTX_reset');
  late final _EVP_MD_CTX_reset =
      _EVP_MD_CTX_resetPtr.asFunction<int Function(ffi.Pointer<EVP_MD_CTX>)>();

  void EVP_MD_CTX_free(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _EVP_MD_CTX_free(
      ctx,
    );
  }

  late final _EVP_MD_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_MD_CTX>)>>(
          'EVP_MD_CTX_free');
  late final _EVP_MD_CTX_free =
      _EVP_MD_CTX_freePtr.asFunction<void Function(ffi.Pointer<EVP_MD_CTX>)>();

  int EVP_MD_CTX_copy_ex(
    ffi.Pointer<EVP_MD_CTX> out,
    ffi.Pointer<EVP_MD_CTX> in1,
  ) {
    return _EVP_MD_CTX_copy_ex(
      out,
      in1,
    );
  }

  late final _EVP_MD_CTX_copy_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_copy_ex');
  late final _EVP_MD_CTX_copy_ex = _EVP_MD_CTX_copy_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)>();

  void EVP_MD_CTX_set_flags(
    ffi.Pointer<EVP_MD_CTX> ctx,
    int flags,
  ) {
    return _EVP_MD_CTX_set_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_MD_CTX_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_MD_CTX>, ffi.Int)>>('EVP_MD_CTX_set_flags');
  late final _EVP_MD_CTX_set_flags = _EVP_MD_CTX_set_flagsPtr.asFunction<
      void Function(ffi.Pointer<EVP_MD_CTX>, int)>();

  void EVP_MD_CTX_clear_flags(
    ffi.Pointer<EVP_MD_CTX> ctx,
    int flags,
  ) {
    return _EVP_MD_CTX_clear_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_MD_CTX_clear_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_MD_CTX>, ffi.Int)>>('EVP_MD_CTX_clear_flags');
  late final _EVP_MD_CTX_clear_flags = _EVP_MD_CTX_clear_flagsPtr.asFunction<
      void Function(ffi.Pointer<EVP_MD_CTX>, int)>();

  int EVP_MD_CTX_test_flags(
    ffi.Pointer<EVP_MD_CTX> ctx,
    int flags,
  ) {
    return _EVP_MD_CTX_test_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_MD_CTX_test_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>, ffi.Int)>>('EVP_MD_CTX_test_flags');
  late final _EVP_MD_CTX_test_flags = _EVP_MD_CTX_test_flagsPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, int)>();

  int EVP_DigestInit_ex(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> impl,
  ) {
    return _EVP_DigestInit_ex(
      ctx,
      type,
      impl,
    );
  }

  late final _EVP_DigestInit_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>,
              ffi.Pointer<ENGINE>)>>('EVP_DigestInit_ex');
  late final _EVP_DigestInit_ex = _EVP_DigestInit_exPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>, ffi.Pointer<ENGINE>)>();

  int EVP_DigestUpdate(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Void> d,
    int cnt,
  ) {
    return _EVP_DigestUpdate(
      ctx,
      d,
      cnt,
    );
  }

  late final _EVP_DigestUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('EVP_DigestUpdate');
  late final _EVP_DigestUpdate = _EVP_DigestUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.Void>, int)>();

  int EVP_DigestFinal_ex(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> s,
  ) {
    return _EVP_DigestFinal_ex(
      ctx,
      md,
      s,
    );
  }

  late final _EVP_DigestFinal_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>)>>('EVP_DigestFinal_ex');
  late final _EVP_DigestFinal_ex = _EVP_DigestFinal_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  int EVP_Digest(
    ffi.Pointer<ffi.Void> data,
    int count,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> size,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> impl,
  ) {
    return _EVP_Digest(
      data,
      count,
      md,
      size,
      type,
      impl,
    );
  }

  late final _EVP_DigestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ENGINE>)>>('EVP_Digest');
  late final _EVP_Digest = _EVP_DigestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ENGINE>)>();

  int EVP_MD_CTX_copy(
    ffi.Pointer<EVP_MD_CTX> out,
    ffi.Pointer<EVP_MD_CTX> in1,
  ) {
    return _EVP_MD_CTX_copy(
      out,
      in1,
    );
  }

  late final _EVP_MD_CTX_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<EVP_MD_CTX>)>>('EVP_MD_CTX_copy');
  late final _EVP_MD_CTX_copy = _EVP_MD_CTX_copyPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD_CTX>)>();

  int EVP_DigestInit(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<EVP_MD> type,
  ) {
    return _EVP_DigestInit(
      ctx,
      type,
    );
  }

  late final _EVP_DigestInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>)>>('EVP_DigestInit');
  late final _EVP_DigestInit = _EVP_DigestInitPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>)>();

  int EVP_DigestFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> s,
  ) {
    return _EVP_DigestFinal(
      ctx,
      md,
      s,
    );
  }

  late final _EVP_DigestFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>)>>('EVP_DigestFinal');
  late final _EVP_DigestFinal = _EVP_DigestFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  int EVP_DigestFinalXOF(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> md,
    int len,
  ) {
    return _EVP_DigestFinalXOF(
      ctx,
      md,
      len,
    );
  }

  late final _EVP_DigestFinalXOFPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('EVP_DigestFinalXOF');
  late final _EVP_DigestFinalXOF = _EVP_DigestFinalXOFPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_read_pw_string(
    ffi.Pointer<ffi.Char> buf,
    int length,
    ffi.Pointer<ffi.Char> prompt,
    int verify,
  ) {
    return _EVP_read_pw_string(
      buf,
      length,
      prompt,
      verify,
    );
  }

  late final _EVP_read_pw_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('EVP_read_pw_string');
  late final _EVP_read_pw_string = _EVP_read_pw_stringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int EVP_read_pw_string_min(
    ffi.Pointer<ffi.Char> buf,
    int minlen,
    int maxlen,
    ffi.Pointer<ffi.Char> prompt,
    int verify,
  ) {
    return _EVP_read_pw_string_min(
      buf,
      minlen,
      maxlen,
      prompt,
      verify,
    );
  }

  late final _EVP_read_pw_string_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('EVP_read_pw_string_min');
  late final _EVP_read_pw_string_min = _EVP_read_pw_string_minPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, int)>();

  void EVP_set_pw_prompt(
    ffi.Pointer<ffi.Char> prompt,
  ) {
    return _EVP_set_pw_prompt(
      prompt,
    );
  }

  late final _EVP_set_pw_promptPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'EVP_set_pw_prompt');
  late final _EVP_set_pw_prompt =
      _EVP_set_pw_promptPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> EVP_get_pw_prompt() {
    return _EVP_get_pw_prompt();
  }

  late final _EVP_get_pw_promptPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'EVP_get_pw_prompt');
  late final _EVP_get_pw_prompt =
      _EVP_get_pw_promptPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int EVP_BytesToKey(
    ffi.Pointer<EVP_CIPHER> type,
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<ffi.UnsignedChar> salt,
    ffi.Pointer<ffi.UnsignedChar> data,
    int datal,
    int count,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
  ) {
    return _EVP_BytesToKey(
      type,
      md,
      salt,
      data,
      datal,
      count,
      key,
      iv,
    );
  }

  late final _EVP_BytesToKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_BytesToKey');
  late final _EVP_BytesToKey = _EVP_BytesToKeyPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void EVP_CIPHER_CTX_set_flags(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int flags,
  ) {
    return _EVP_CIPHER_CTX_set_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_CIPHER_CTX_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_CIPHER_CTX_set_flags');
  late final _EVP_CIPHER_CTX_set_flags = _EVP_CIPHER_CTX_set_flagsPtr
      .asFunction<void Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  void EVP_CIPHER_CTX_clear_flags(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int flags,
  ) {
    return _EVP_CIPHER_CTX_clear_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_CIPHER_CTX_clear_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_CIPHER_CTX_clear_flags');
  late final _EVP_CIPHER_CTX_clear_flags = _EVP_CIPHER_CTX_clear_flagsPtr
      .asFunction<void Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  int EVP_CIPHER_CTX_test_flags(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int flags,
  ) {
    return _EVP_CIPHER_CTX_test_flags(
      ctx,
      flags,
    );
  }

  late final _EVP_CIPHER_CTX_test_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_CIPHER_CTX_test_flags');
  late final _EVP_CIPHER_CTX_test_flags = _EVP_CIPHER_CTX_test_flagsPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  int EVP_EncryptInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
  ) {
    return _EVP_EncryptInit(
      ctx,
      cipher,
      key,
      iv,
    );
  }

  late final _EVP_EncryptInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_EncryptInit');
  late final _EVP_EncryptInit = _EVP_EncryptInitPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>)>();

  int EVP_EncryptInit_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ENGINE> impl,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
  ) {
    return _EVP_EncryptInit_ex(
      ctx,
      cipher,
      impl,
      key,
      iv,
    );
  }

  late final _EVP_EncryptInit_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_EncryptInit_ex');
  late final _EVP_EncryptInit_ex = _EVP_EncryptInit_exPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  int EVP_EncryptUpdate(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_EncryptUpdate(
      ctx,
      out,
      outl,
      in1,
      inl,
    );
  }

  late final _EVP_EncryptUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_EncryptUpdate');
  late final _EVP_EncryptUpdate = _EVP_EncryptUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_EncryptFinal_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_EncryptFinal_ex(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_EncryptFinal_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_EncryptFinal_ex');
  late final _EVP_EncryptFinal_ex = _EVP_EncryptFinal_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_EncryptFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_EncryptFinal(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_EncryptFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_EncryptFinal');
  late final _EVP_EncryptFinal = _EVP_EncryptFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_DecryptInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
  ) {
    return _EVP_DecryptInit(
      ctx,
      cipher,
      key,
      iv,
    );
  }

  late final _EVP_DecryptInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_DecryptInit');
  late final _EVP_DecryptInit = _EVP_DecryptInitPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>)>();

  int EVP_DecryptInit_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ENGINE> impl,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
  ) {
    return _EVP_DecryptInit_ex(
      ctx,
      cipher,
      impl,
      key,
      iv,
    );
  }

  late final _EVP_DecryptInit_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_DecryptInit_ex');
  late final _EVP_DecryptInit_ex = _EVP_DecryptInit_exPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>)>();

  int EVP_DecryptUpdate(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_DecryptUpdate(
      ctx,
      out,
      outl,
      in1,
      inl,
    );
  }

  late final _EVP_DecryptUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_DecryptUpdate');
  late final _EVP_DecryptUpdate = _EVP_DecryptUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_DecryptFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> outm,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_DecryptFinal(
      ctx,
      outm,
      outl,
    );
  }

  late final _EVP_DecryptFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_DecryptFinal');
  late final _EVP_DecryptFinal = _EVP_DecryptFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_DecryptFinal_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> outm,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_DecryptFinal_ex(
      ctx,
      outm,
      outl,
    );
  }

  late final _EVP_DecryptFinal_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_DecryptFinal_ex');
  late final _EVP_DecryptFinal_ex = _EVP_DecryptFinal_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_CipherInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
    int enc,
  ) {
    return _EVP_CipherInit(
      ctx,
      cipher,
      key,
      iv,
      enc,
    );
  }

  late final _EVP_CipherInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_CipherInit');
  late final _EVP_CipherInit = _EVP_CipherInitPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_CipherInit_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ENGINE> impl,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.UnsignedChar> iv,
    int enc,
  ) {
    return _EVP_CipherInit_ex(
      ctx,
      cipher,
      impl,
      key,
      iv,
      enc,
    );
  }

  late final _EVP_CipherInit_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_CipherInit_ex');
  late final _EVP_CipherInit_ex = _EVP_CipherInit_exPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>,
          int)>();

  int EVP_CipherUpdate(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_CipherUpdate(
      ctx,
      out,
      outl,
      in1,
      inl,
    );
  }

  late final _EVP_CipherUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_CipherUpdate');
  late final _EVP_CipherUpdate = _EVP_CipherUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_CipherFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> outm,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_CipherFinal(
      ctx,
      outm,
      outl,
    );
  }

  late final _EVP_CipherFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_CipherFinal');
  late final _EVP_CipherFinal = _EVP_CipherFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_CipherFinal_ex(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> outm,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_CipherFinal_ex(
      ctx,
      outm,
      outl,
    );
  }

  late final _EVP_CipherFinal_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_CipherFinal_ex');
  late final _EVP_CipherFinal_ex = _EVP_CipherFinal_exPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_SignFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> s,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_SignFinal(
      ctx,
      md,
      s,
      pkey,
    );
  }

  late final _EVP_SignFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_SignFinal');
  late final _EVP_SignFinal = _EVP_SignFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<EVP_PKEY>)>();

  int EVP_DigestSign(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sigret,
    ffi.Pointer<ffi.Int> siglen,
    ffi.Pointer<ffi.UnsignedChar> tbs,
    int tbslen,
  ) {
    return _EVP_DigestSign(
      ctx,
      sigret,
      siglen,
      tbs,
      tbslen,
    );
  }

  late final _EVP_DigestSignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_DigestSign');
  late final _EVP_DigestSign = _EVP_DigestSignPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_VerifyFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sigbuf,
    int siglen,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_VerifyFinal(
      ctx,
      sigbuf,
      siglen,
      pkey,
    );
  }

  late final _EVP_VerifyFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.Pointer<EVP_PKEY>)>>('EVP_VerifyFinal');
  late final _EVP_VerifyFinal = _EVP_VerifyFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<EVP_PKEY>)>();

  int EVP_DigestVerify(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sigret,
    int siglen,
    ffi.Pointer<ffi.UnsignedChar> tbs,
    int tbslen,
  ) {
    return _EVP_DigestVerify(
      ctx,
      sigret,
      siglen,
      tbs,
      tbslen,
    );
  }

  late final _EVP_DigestVerifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_DigestVerify');
  late final _EVP_DigestVerify = _EVP_DigestVerifyPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_DigestSignInit(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>> pctx,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_DigestSignInit(
      ctx,
      pctx,
      type,
      e,
      pkey,
    );
  }

  late final _EVP_DigestSignInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_DigestSignInit');
  late final _EVP_DigestSignInit = _EVP_DigestSignInitPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<EVP_PKEY>)>();

  int EVP_DigestSignFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sigret,
    ffi.Pointer<ffi.Int> siglen,
  ) {
    return _EVP_DigestSignFinal(
      ctx,
      sigret,
      siglen,
    );
  }

  late final _EVP_DigestSignFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_DigestSignFinal');
  late final _EVP_DigestSignFinal = _EVP_DigestSignFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_DigestVerifyInit(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>> pctx,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_DigestVerifyInit(
      ctx,
      pctx,
      type,
      e,
      pkey,
    );
  }

  late final _EVP_DigestVerifyInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_DigestVerifyInit');
  late final _EVP_DigestVerifyInit = _EVP_DigestVerifyInitPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ENGINE>,
          ffi.Pointer<EVP_PKEY>)>();

  int EVP_DigestVerifyFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sig,
    int siglen,
  ) {
    return _EVP_DigestVerifyFinal(
      ctx,
      sig,
      siglen,
    );
  }

  late final _EVP_DigestVerifyFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_DigestVerifyFinal');
  late final _EVP_DigestVerifyFinal = _EVP_DigestVerifyFinalPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_OpenInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> type,
    ffi.Pointer<ffi.UnsignedChar> ek,
    int ekl,
    ffi.Pointer<ffi.UnsignedChar> iv,
    ffi.Pointer<EVP_PKEY> priv,
  ) {
    return _EVP_OpenInit(
      ctx,
      type,
      ek,
      ekl,
      iv,
      priv,
    );
  }

  late final _EVP_OpenInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_OpenInit');
  late final _EVP_OpenInit = _EVP_OpenInitPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<EVP_PKEY>)>();

  int EVP_OpenFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_OpenFinal(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_OpenFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_OpenFinal');
  late final _EVP_OpenFinal = _EVP_OpenFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_SealInit(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<EVP_CIPHER> type,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> ek,
    ffi.Pointer<ffi.Int> ekl,
    ffi.Pointer<ffi.UnsignedChar> iv,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> pubk,
    int npubk,
  ) {
    return _EVP_SealInit(
      ctx,
      type,
      ek,
      ekl,
      iv,
      pubk,
      npubk,
    );
  }

  late final _EVP_SealInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Int)>>('EVP_SealInit');
  late final _EVP_SealInit = _EVP_SealInitPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          int)>();

  int EVP_SealFinal(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_SealFinal(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_SealFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_SealFinal');
  late final _EVP_SealFinal = _EVP_SealFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<EVP_ENCODE_CTX> EVP_ENCODE_CTX_new() {
    return _EVP_ENCODE_CTX_new();
  }

  late final _EVP_ENCODE_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_ENCODE_CTX> Function()>>(
          'EVP_ENCODE_CTX_new');
  late final _EVP_ENCODE_CTX_new = _EVP_ENCODE_CTX_newPtr.asFunction<
      ffi.Pointer<EVP_ENCODE_CTX> Function()>();

  void EVP_ENCODE_CTX_free(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
  ) {
    return _EVP_ENCODE_CTX_free(
      ctx,
    );
  }

  late final _EVP_ENCODE_CTX_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_ENCODE_CTX>)>>(
      'EVP_ENCODE_CTX_free');
  late final _EVP_ENCODE_CTX_free = _EVP_ENCODE_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_ENCODE_CTX>)>();

  int EVP_ENCODE_CTX_copy(
    ffi.Pointer<EVP_ENCODE_CTX> dctx,
    ffi.Pointer<EVP_ENCODE_CTX> sctx,
  ) {
    return _EVP_ENCODE_CTX_copy(
      dctx,
      sctx,
    );
  }

  late final _EVP_ENCODE_CTX_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_ENCODE_CTX>,
              ffi.Pointer<EVP_ENCODE_CTX>)>>('EVP_ENCODE_CTX_copy');
  late final _EVP_ENCODE_CTX_copy = _EVP_ENCODE_CTX_copyPtr.asFunction<
      int Function(ffi.Pointer<EVP_ENCODE_CTX>, ffi.Pointer<EVP_ENCODE_CTX>)>();

  int EVP_ENCODE_CTX_num(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
  ) {
    return _EVP_ENCODE_CTX_num(
      ctx,
    );
  }

  late final _EVP_ENCODE_CTX_numPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_ENCODE_CTX>)>>(
      'EVP_ENCODE_CTX_num');
  late final _EVP_ENCODE_CTX_num = _EVP_ENCODE_CTX_numPtr.asFunction<
      int Function(ffi.Pointer<EVP_ENCODE_CTX>)>();

  void EVP_EncodeInit(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
  ) {
    return _EVP_EncodeInit(
      ctx,
    );
  }

  late final _EVP_EncodeInitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_ENCODE_CTX>)>>(
      'EVP_EncodeInit');
  late final _EVP_EncodeInit = _EVP_EncodeInitPtr.asFunction<
      void Function(ffi.Pointer<EVP_ENCODE_CTX>)>();

  int EVP_EncodeUpdate(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_EncodeUpdate(
      ctx,
      out,
      outl,
      in1,
      inl,
    );
  }

  late final _EVP_EncodeUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_ENCODE_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_EncodeUpdate');
  late final _EVP_EncodeUpdate = _EVP_EncodeUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_ENCODE_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  void EVP_EncodeFinal(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_EncodeFinal(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_EncodeFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_ENCODE_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_EncodeFinal');
  late final _EVP_EncodeFinal = _EVP_EncodeFinalPtr.asFunction<
      void Function(ffi.Pointer<EVP_ENCODE_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_EncodeBlock(
    ffi.Pointer<ffi.UnsignedChar> t,
    ffi.Pointer<ffi.UnsignedChar> f,
    int n,
  ) {
    return _EVP_EncodeBlock(
      t,
      f,
      n,
    );
  }

  late final _EVP_EncodeBlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('EVP_EncodeBlock');
  late final _EVP_EncodeBlock = _EVP_EncodeBlockPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  void EVP_DecodeInit(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
  ) {
    return _EVP_DecodeInit(
      ctx,
    );
  }

  late final _EVP_DecodeInitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_ENCODE_CTX>)>>(
      'EVP_DecodeInit');
  late final _EVP_DecodeInit = _EVP_DecodeInitPtr.asFunction<
      void Function(ffi.Pointer<EVP_ENCODE_CTX>)>();

  int EVP_DecodeUpdate(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inl,
  ) {
    return _EVP_DecodeUpdate(
      ctx,
      out,
      outl,
      in1,
      inl,
    );
  }

  late final _EVP_DecodeUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_ENCODE_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_DecodeUpdate');
  late final _EVP_DecodeUpdate = _EVP_DecodeUpdatePtr.asFunction<
      int Function(ffi.Pointer<EVP_ENCODE_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_DecodeFinal(
    ffi.Pointer<EVP_ENCODE_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outl,
  ) {
    return _EVP_DecodeFinal(
      ctx,
      out,
      outl,
    );
  }

  late final _EVP_DecodeFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_ENCODE_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_DecodeFinal');
  late final _EVP_DecodeFinal = _EVP_DecodeFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_ENCODE_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_DecodeBlock(
    ffi.Pointer<ffi.UnsignedChar> t,
    ffi.Pointer<ffi.UnsignedChar> f,
    int n,
  ) {
    return _EVP_DecodeBlock(
      t,
      f,
      n,
    );
  }

  late final _EVP_DecodeBlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('EVP_DecodeBlock');
  late final _EVP_DecodeBlock = _EVP_DecodeBlockPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<EVP_CIPHER_CTX> EVP_CIPHER_CTX_new() {
    return _EVP_CIPHER_CTX_new();
  }

  late final _EVP_CIPHER_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER_CTX> Function()>>(
          'EVP_CIPHER_CTX_new');
  late final _EVP_CIPHER_CTX_new = _EVP_CIPHER_CTX_newPtr.asFunction<
      ffi.Pointer<EVP_CIPHER_CTX> Function()>();

  int EVP_CIPHER_CTX_reset(
    ffi.Pointer<EVP_CIPHER_CTX> c,
  ) {
    return _EVP_CIPHER_CTX_reset(
      c,
    );
  }

  late final _EVP_CIPHER_CTX_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_reset');
  late final _EVP_CIPHER_CTX_reset = _EVP_CIPHER_CTX_resetPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  void EVP_CIPHER_CTX_free(
    ffi.Pointer<EVP_CIPHER_CTX> c,
  ) {
    return _EVP_CIPHER_CTX_free(
      c,
    );
  }

  late final _EVP_CIPHER_CTX_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_CIPHER_CTX>)>>(
      'EVP_CIPHER_CTX_free');
  late final _EVP_CIPHER_CTX_free = _EVP_CIPHER_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_CIPHER_CTX>)>();

  int EVP_CIPHER_CTX_set_key_length(
    ffi.Pointer<EVP_CIPHER_CTX> x,
    int keylen,
  ) {
    return _EVP_CIPHER_CTX_set_key_length(
      x,
      keylen,
    );
  }

  late final _EVP_CIPHER_CTX_set_key_lengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_CIPHER_CTX_set_key_length');
  late final _EVP_CIPHER_CTX_set_key_length = _EVP_CIPHER_CTX_set_key_lengthPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  int EVP_CIPHER_CTX_set_padding(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    int pad,
  ) {
    return _EVP_CIPHER_CTX_set_padding(
      c,
      pad,
    );
  }

  late final _EVP_CIPHER_CTX_set_paddingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_CIPHER_CTX_set_padding');
  late final _EVP_CIPHER_CTX_set_padding = _EVP_CIPHER_CTX_set_paddingPtr
      .asFunction<int Function(ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  int EVP_CIPHER_CTX_ctrl(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int type,
    int arg,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _EVP_CIPHER_CTX_ctrl(
      ctx,
      type,
      arg,
      ptr,
    );
  }

  late final _EVP_CIPHER_CTX_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('EVP_CIPHER_CTX_ctrl');
  late final _EVP_CIPHER_CTX_ctrl = _EVP_CIPHER_CTX_ctrlPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>, int, int, ffi.Pointer<ffi.Void>)>();

  int EVP_CIPHER_CTX_rand_key(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> key,
  ) {
    return _EVP_CIPHER_CTX_rand_key(
      ctx,
      key,
    );
  }

  late final _EVP_CIPHER_CTX_rand_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.UnsignedChar>)>>('EVP_CIPHER_CTX_rand_key');
  late final _EVP_CIPHER_CTX_rand_key = _EVP_CIPHER_CTX_rand_keyPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ffi.UnsignedChar>)>();

  ffi.Pointer<BIO_METHOD1> BIO_f_md() {
    return _BIO_f_md();
  }

  late final _BIO_f_mdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD1> Function()>>(
          'BIO_f_md');
  late final _BIO_f_md =
      _BIO_f_mdPtr.asFunction<ffi.Pointer<BIO_METHOD1> Function()>();

  ffi.Pointer<BIO_METHOD1> BIO_f_base64() {
    return _BIO_f_base64();
  }

  late final _BIO_f_base64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD1> Function()>>(
          'BIO_f_base64');
  late final _BIO_f_base64 =
      _BIO_f_base64Ptr.asFunction<ffi.Pointer<BIO_METHOD1> Function()>();

  ffi.Pointer<BIO_METHOD1> BIO_f_cipher() {
    return _BIO_f_cipher();
  }

  late final _BIO_f_cipherPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD1> Function()>>(
          'BIO_f_cipher');
  late final _BIO_f_cipher =
      _BIO_f_cipherPtr.asFunction<ffi.Pointer<BIO_METHOD1> Function()>();

  ffi.Pointer<BIO_METHOD1> BIO_f_reliable() {
    return _BIO_f_reliable();
  }

  late final _BIO_f_reliablePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BIO_METHOD1> Function()>>(
          'BIO_f_reliable');
  late final _BIO_f_reliable =
      _BIO_f_reliablePtr.asFunction<ffi.Pointer<BIO_METHOD1> Function()>();

  int BIO_set_cipher(
    ffi.Pointer<BIO> b,
    ffi.Pointer<EVP_CIPHER> c,
    ffi.Pointer<ffi.UnsignedChar> k,
    ffi.Pointer<ffi.UnsignedChar> i,
    int enc,
  ) {
    return _BIO_set_cipher(
      b,
      c,
      k,
      i,
      enc,
    );
  }

  late final _BIO_set_cipherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('BIO_set_cipher');
  late final _BIO_set_cipher = _BIO_set_cipherPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<EVP_MD> EVP_md_null() {
    return _EVP_md_null();
  }

  late final _EVP_md_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_md_null');
  late final _EVP_md_null =
      _EVP_md_nullPtr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_md4() {
    return _EVP_md4();
  }

  late final _EVP_md4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_md4');
  late final _EVP_md4 =
      _EVP_md4Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_md5() {
    return _EVP_md5();
  }

  late final _EVP_md5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_md5');
  late final _EVP_md5 =
      _EVP_md5Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_md5_sha1() {
    return _EVP_md5_sha1();
  }

  late final _EVP_md5_sha1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_md5_sha1');
  late final _EVP_md5_sha1 =
      _EVP_md5_sha1Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_blake2b512() {
    return _EVP_blake2b512();
  }

  late final _EVP_blake2b512Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_blake2b512');
  late final _EVP_blake2b512 =
      _EVP_blake2b512Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_blake2s256() {
    return _EVP_blake2s256();
  }

  late final _EVP_blake2s256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_blake2s256');
  late final _EVP_blake2s256 =
      _EVP_blake2s256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha1() {
    return _EVP_sha1();
  }

  late final _EVP_sha1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha1');
  late final _EVP_sha1 =
      _EVP_sha1Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha224() {
    return _EVP_sha224();
  }

  late final _EVP_sha224Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha224');
  late final _EVP_sha224 =
      _EVP_sha224Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha256() {
    return _EVP_sha256();
  }

  late final _EVP_sha256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha256');
  late final _EVP_sha256 =
      _EVP_sha256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha384() {
    return _EVP_sha384();
  }

  late final _EVP_sha384Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha384');
  late final _EVP_sha384 =
      _EVP_sha384Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha512() {
    return _EVP_sha512();
  }

  late final _EVP_sha512Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sha512');
  late final _EVP_sha512 =
      _EVP_sha512Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha512_224() {
    return _EVP_sha512_224();
  }

  late final _EVP_sha512_224Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha512_224');
  late final _EVP_sha512_224 =
      _EVP_sha512_224Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha512_256() {
    return _EVP_sha512_256();
  }

  late final _EVP_sha512_256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha512_256');
  late final _EVP_sha512_256 =
      _EVP_sha512_256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha3_224() {
    return _EVP_sha3_224();
  }

  late final _EVP_sha3_224Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha3_224');
  late final _EVP_sha3_224 =
      _EVP_sha3_224Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha3_256() {
    return _EVP_sha3_256();
  }

  late final _EVP_sha3_256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha3_256');
  late final _EVP_sha3_256 =
      _EVP_sha3_256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha3_384() {
    return _EVP_sha3_384();
  }

  late final _EVP_sha3_384Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha3_384');
  late final _EVP_sha3_384 =
      _EVP_sha3_384Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sha3_512() {
    return _EVP_sha3_512();
  }

  late final _EVP_sha3_512Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_sha3_512');
  late final _EVP_sha3_512 =
      _EVP_sha3_512Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_shake128() {
    return _EVP_shake128();
  }

  late final _EVP_shake128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_shake128');
  late final _EVP_shake128 =
      _EVP_shake128Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_shake256() {
    return _EVP_shake256();
  }

  late final _EVP_shake256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_shake256');
  late final _EVP_shake256 =
      _EVP_shake256Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_mdc2() {
    return _EVP_mdc2();
  }

  late final _EVP_mdc2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_mdc2');
  late final _EVP_mdc2 =
      _EVP_mdc2Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_ripemd160() {
    return _EVP_ripemd160();
  }

  late final _EVP_ripemd160Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_ripemd160');
  late final _EVP_ripemd160 =
      _EVP_ripemd160Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_whirlpool() {
    return _EVP_whirlpool();
  }

  late final _EVP_whirlpoolPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>(
          'EVP_whirlpool');
  late final _EVP_whirlpool =
      _EVP_whirlpoolPtr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_MD> EVP_sm3() {
    return _EVP_sm3();
  }

  late final _EVP_sm3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_MD> Function()>>('EVP_sm3');
  late final _EVP_sm3 =
      _EVP_sm3Ptr.asFunction<ffi.Pointer<EVP_MD> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_enc_null() {
    return _EVP_enc_null();
  }

  late final _EVP_enc_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_enc_null');
  late final _EVP_enc_null =
      _EVP_enc_nullPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ecb() {
    return _EVP_des_ecb();
  }

  late final _EVP_des_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ecb');
  late final _EVP_des_ecb =
      _EVP_des_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede() {
    return _EVP_des_ede();
  }

  late final _EVP_des_edePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede');
  late final _EVP_des_ede =
      _EVP_des_edePtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3() {
    return _EVP_des_ede3();
  }

  late final _EVP_des_ede3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3');
  late final _EVP_des_ede3 =
      _EVP_des_ede3Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede_ecb() {
    return _EVP_des_ede_ecb();
  }

  late final _EVP_des_ede_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede_ecb');
  late final _EVP_des_ede_ecb =
      _EVP_des_ede_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_ecb() {
    return _EVP_des_ede3_ecb();
  }

  late final _EVP_des_ede3_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_ecb');
  late final _EVP_des_ede3_ecb =
      _EVP_des_ede3_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_cfb64() {
    return _EVP_des_cfb64();
  }

  late final _EVP_des_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_cfb64');
  late final _EVP_des_cfb64 =
      _EVP_des_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_cfb1() {
    return _EVP_des_cfb1();
  }

  late final _EVP_des_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_cfb1');
  late final _EVP_des_cfb1 =
      _EVP_des_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_cfb8() {
    return _EVP_des_cfb8();
  }

  late final _EVP_des_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_cfb8');
  late final _EVP_des_cfb8 =
      _EVP_des_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede_cfb64() {
    return _EVP_des_ede_cfb64();
  }

  late final _EVP_des_ede_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede_cfb64');
  late final _EVP_des_ede_cfb64 =
      _EVP_des_ede_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_cfb64() {
    return _EVP_des_ede3_cfb64();
  }

  late final _EVP_des_ede3_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_cfb64');
  late final _EVP_des_ede3_cfb64 =
      _EVP_des_ede3_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_cfb1() {
    return _EVP_des_ede3_cfb1();
  }

  late final _EVP_des_ede3_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_cfb1');
  late final _EVP_des_ede3_cfb1 =
      _EVP_des_ede3_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_cfb8() {
    return _EVP_des_ede3_cfb8();
  }

  late final _EVP_des_ede3_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_cfb8');
  late final _EVP_des_ede3_cfb8 =
      _EVP_des_ede3_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ofb() {
    return _EVP_des_ofb();
  }

  late final _EVP_des_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ofb');
  late final _EVP_des_ofb =
      _EVP_des_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede_ofb() {
    return _EVP_des_ede_ofb();
  }

  late final _EVP_des_ede_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede_ofb');
  late final _EVP_des_ede_ofb =
      _EVP_des_ede_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_ofb() {
    return _EVP_des_ede3_ofb();
  }

  late final _EVP_des_ede3_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_ofb');
  late final _EVP_des_ede3_ofb =
      _EVP_des_ede3_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_cbc() {
    return _EVP_des_cbc();
  }

  late final _EVP_des_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_cbc');
  late final _EVP_des_cbc =
      _EVP_des_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede_cbc() {
    return _EVP_des_ede_cbc();
  }

  late final _EVP_des_ede_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede_cbc');
  late final _EVP_des_ede_cbc =
      _EVP_des_ede_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_cbc() {
    return _EVP_des_ede3_cbc();
  }

  late final _EVP_des_ede3_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_cbc');
  late final _EVP_des_ede3_cbc =
      _EVP_des_ede3_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_desx_cbc() {
    return _EVP_desx_cbc();
  }

  late final _EVP_desx_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_desx_cbc');
  late final _EVP_desx_cbc =
      _EVP_desx_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_des_ede3_wrap() {
    return _EVP_des_ede3_wrap();
  }

  late final _EVP_des_ede3_wrapPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_des_ede3_wrap');
  late final _EVP_des_ede3_wrap =
      _EVP_des_ede3_wrapPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc4() {
    return _EVP_rc4();
  }

  late final _EVP_rc4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc4');
  late final _EVP_rc4 =
      _EVP_rc4Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc4_40() {
    return _EVP_rc4_40();
  }

  late final _EVP_rc4_40Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc4_40');
  late final _EVP_rc4_40 =
      _EVP_rc4_40Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc4_hmac_md5() {
    return _EVP_rc4_hmac_md5();
  }

  late final _EVP_rc4_hmac_md5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc4_hmac_md5');
  late final _EVP_rc4_hmac_md5 =
      _EVP_rc4_hmac_md5Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_idea_ecb() {
    return _EVP_idea_ecb();
  }

  late final _EVP_idea_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_idea_ecb');
  late final _EVP_idea_ecb =
      _EVP_idea_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_idea_cfb64() {
    return _EVP_idea_cfb64();
  }

  late final _EVP_idea_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_idea_cfb64');
  late final _EVP_idea_cfb64 =
      _EVP_idea_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_idea_ofb() {
    return _EVP_idea_ofb();
  }

  late final _EVP_idea_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_idea_ofb');
  late final _EVP_idea_ofb =
      _EVP_idea_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_idea_cbc() {
    return _EVP_idea_cbc();
  }

  late final _EVP_idea_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_idea_cbc');
  late final _EVP_idea_cbc =
      _EVP_idea_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_ecb() {
    return _EVP_rc2_ecb();
  }

  late final _EVP_rc2_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_ecb');
  late final _EVP_rc2_ecb =
      _EVP_rc2_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_cbc() {
    return _EVP_rc2_cbc();
  }

  late final _EVP_rc2_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_cbc');
  late final _EVP_rc2_cbc =
      _EVP_rc2_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_40_cbc() {
    return _EVP_rc2_40_cbc();
  }

  late final _EVP_rc2_40_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_40_cbc');
  late final _EVP_rc2_40_cbc =
      _EVP_rc2_40_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_64_cbc() {
    return _EVP_rc2_64_cbc();
  }

  late final _EVP_rc2_64_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_64_cbc');
  late final _EVP_rc2_64_cbc =
      _EVP_rc2_64_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_cfb64() {
    return _EVP_rc2_cfb64();
  }

  late final _EVP_rc2_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_cfb64');
  late final _EVP_rc2_cfb64 =
      _EVP_rc2_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_rc2_ofb() {
    return _EVP_rc2_ofb();
  }

  late final _EVP_rc2_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_rc2_ofb');
  late final _EVP_rc2_ofb =
      _EVP_rc2_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_bf_ecb() {
    return _EVP_bf_ecb();
  }

  late final _EVP_bf_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_bf_ecb');
  late final _EVP_bf_ecb =
      _EVP_bf_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_bf_cbc() {
    return _EVP_bf_cbc();
  }

  late final _EVP_bf_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_bf_cbc');
  late final _EVP_bf_cbc =
      _EVP_bf_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_bf_cfb64() {
    return _EVP_bf_cfb64();
  }

  late final _EVP_bf_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_bf_cfb64');
  late final _EVP_bf_cfb64 =
      _EVP_bf_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_bf_ofb() {
    return _EVP_bf_ofb();
  }

  late final _EVP_bf_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_bf_ofb');
  late final _EVP_bf_ofb =
      _EVP_bf_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_cast5_ecb() {
    return _EVP_cast5_ecb();
  }

  late final _EVP_cast5_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_cast5_ecb');
  late final _EVP_cast5_ecb =
      _EVP_cast5_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_cast5_cbc() {
    return _EVP_cast5_cbc();
  }

  late final _EVP_cast5_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_cast5_cbc');
  late final _EVP_cast5_cbc =
      _EVP_cast5_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_cast5_cfb64() {
    return _EVP_cast5_cfb64();
  }

  late final _EVP_cast5_cfb64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_cast5_cfb64');
  late final _EVP_cast5_cfb64 =
      _EVP_cast5_cfb64Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_cast5_ofb() {
    return _EVP_cast5_ofb();
  }

  late final _EVP_cast5_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_cast5_ofb');
  late final _EVP_cast5_ofb =
      _EVP_cast5_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ecb() {
    return _EVP_aes_128_ecb();
  }

  late final _EVP_aes_128_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_ecb');
  late final _EVP_aes_128_ecb =
      _EVP_aes_128_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cbc() {
    return _EVP_aes_128_cbc();
  }

  late final _EVP_aes_128_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cbc');
  late final _EVP_aes_128_cbc =
      _EVP_aes_128_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cfb1() {
    return _EVP_aes_128_cfb1();
  }

  late final _EVP_aes_128_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cfb1');
  late final _EVP_aes_128_cfb1 =
      _EVP_aes_128_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cfb8() {
    return _EVP_aes_128_cfb8();
  }

  late final _EVP_aes_128_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cfb8');
  late final _EVP_aes_128_cfb8 =
      _EVP_aes_128_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cfb128() {
    return _EVP_aes_128_cfb128();
  }

  late final _EVP_aes_128_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cfb128');
  late final _EVP_aes_128_cfb128 =
      _EVP_aes_128_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ofb() {
    return _EVP_aes_128_ofb();
  }

  late final _EVP_aes_128_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_ofb');
  late final _EVP_aes_128_ofb =
      _EVP_aes_128_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ctr() {
    return _EVP_aes_128_ctr();
  }

  late final _EVP_aes_128_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_ctr');
  late final _EVP_aes_128_ctr =
      _EVP_aes_128_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ccm() {
    return _EVP_aes_128_ccm();
  }

  late final _EVP_aes_128_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_ccm');
  late final _EVP_aes_128_ccm =
      _EVP_aes_128_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_gcm() {
    return _EVP_aes_128_gcm();
  }

  late final _EVP_aes_128_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_gcm');
  late final _EVP_aes_128_gcm =
      _EVP_aes_128_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_xts() {
    return _EVP_aes_128_xts();
  }

  late final _EVP_aes_128_xtsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_xts');
  late final _EVP_aes_128_xts =
      _EVP_aes_128_xtsPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_wrap() {
    return _EVP_aes_128_wrap();
  }

  late final _EVP_aes_128_wrapPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_wrap');
  late final _EVP_aes_128_wrap =
      _EVP_aes_128_wrapPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_wrap_pad() {
    return _EVP_aes_128_wrap_pad();
  }

  late final _EVP_aes_128_wrap_padPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_wrap_pad');
  late final _EVP_aes_128_wrap_pad =
      _EVP_aes_128_wrap_padPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_ocb() {
    return _EVP_aes_128_ocb();
  }

  late final _EVP_aes_128_ocbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_ocb');
  late final _EVP_aes_128_ocb =
      _EVP_aes_128_ocbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ecb() {
    return _EVP_aes_192_ecb();
  }

  late final _EVP_aes_192_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_ecb');
  late final _EVP_aes_192_ecb =
      _EVP_aes_192_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_cbc() {
    return _EVP_aes_192_cbc();
  }

  late final _EVP_aes_192_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_cbc');
  late final _EVP_aes_192_cbc =
      _EVP_aes_192_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_cfb1() {
    return _EVP_aes_192_cfb1();
  }

  late final _EVP_aes_192_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_cfb1');
  late final _EVP_aes_192_cfb1 =
      _EVP_aes_192_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_cfb8() {
    return _EVP_aes_192_cfb8();
  }

  late final _EVP_aes_192_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_cfb8');
  late final _EVP_aes_192_cfb8 =
      _EVP_aes_192_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_cfb128() {
    return _EVP_aes_192_cfb128();
  }

  late final _EVP_aes_192_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_cfb128');
  late final _EVP_aes_192_cfb128 =
      _EVP_aes_192_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ofb() {
    return _EVP_aes_192_ofb();
  }

  late final _EVP_aes_192_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_ofb');
  late final _EVP_aes_192_ofb =
      _EVP_aes_192_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ctr() {
    return _EVP_aes_192_ctr();
  }

  late final _EVP_aes_192_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_ctr');
  late final _EVP_aes_192_ctr =
      _EVP_aes_192_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ccm() {
    return _EVP_aes_192_ccm();
  }

  late final _EVP_aes_192_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_ccm');
  late final _EVP_aes_192_ccm =
      _EVP_aes_192_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_gcm() {
    return _EVP_aes_192_gcm();
  }

  late final _EVP_aes_192_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_gcm');
  late final _EVP_aes_192_gcm =
      _EVP_aes_192_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_wrap() {
    return _EVP_aes_192_wrap();
  }

  late final _EVP_aes_192_wrapPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_wrap');
  late final _EVP_aes_192_wrap =
      _EVP_aes_192_wrapPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_wrap_pad() {
    return _EVP_aes_192_wrap_pad();
  }

  late final _EVP_aes_192_wrap_padPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_wrap_pad');
  late final _EVP_aes_192_wrap_pad =
      _EVP_aes_192_wrap_padPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_192_ocb() {
    return _EVP_aes_192_ocb();
  }

  late final _EVP_aes_192_ocbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_192_ocb');
  late final _EVP_aes_192_ocb =
      _EVP_aes_192_ocbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ecb() {
    return _EVP_aes_256_ecb();
  }

  late final _EVP_aes_256_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_ecb');
  late final _EVP_aes_256_ecb =
      _EVP_aes_256_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cbc() {
    return _EVP_aes_256_cbc();
  }

  late final _EVP_aes_256_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cbc');
  late final _EVP_aes_256_cbc =
      _EVP_aes_256_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cfb1() {
    return _EVP_aes_256_cfb1();
  }

  late final _EVP_aes_256_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cfb1');
  late final _EVP_aes_256_cfb1 =
      _EVP_aes_256_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cfb8() {
    return _EVP_aes_256_cfb8();
  }

  late final _EVP_aes_256_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cfb8');
  late final _EVP_aes_256_cfb8 =
      _EVP_aes_256_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cfb128() {
    return _EVP_aes_256_cfb128();
  }

  late final _EVP_aes_256_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cfb128');
  late final _EVP_aes_256_cfb128 =
      _EVP_aes_256_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ofb() {
    return _EVP_aes_256_ofb();
  }

  late final _EVP_aes_256_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_ofb');
  late final _EVP_aes_256_ofb =
      _EVP_aes_256_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ctr() {
    return _EVP_aes_256_ctr();
  }

  late final _EVP_aes_256_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_ctr');
  late final _EVP_aes_256_ctr =
      _EVP_aes_256_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ccm() {
    return _EVP_aes_256_ccm();
  }

  late final _EVP_aes_256_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_ccm');
  late final _EVP_aes_256_ccm =
      _EVP_aes_256_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_gcm() {
    return _EVP_aes_256_gcm();
  }

  late final _EVP_aes_256_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_gcm');
  late final _EVP_aes_256_gcm =
      _EVP_aes_256_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_xts() {
    return _EVP_aes_256_xts();
  }

  late final _EVP_aes_256_xtsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_xts');
  late final _EVP_aes_256_xts =
      _EVP_aes_256_xtsPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_wrap() {
    return _EVP_aes_256_wrap();
  }

  late final _EVP_aes_256_wrapPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_wrap');
  late final _EVP_aes_256_wrap =
      _EVP_aes_256_wrapPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_wrap_pad() {
    return _EVP_aes_256_wrap_pad();
  }

  late final _EVP_aes_256_wrap_padPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_wrap_pad');
  late final _EVP_aes_256_wrap_pad =
      _EVP_aes_256_wrap_padPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_ocb() {
    return _EVP_aes_256_ocb();
  }

  late final _EVP_aes_256_ocbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_ocb');
  late final _EVP_aes_256_ocb =
      _EVP_aes_256_ocbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cbc_hmac_sha1() {
    return _EVP_aes_128_cbc_hmac_sha1();
  }

  late final _EVP_aes_128_cbc_hmac_sha1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cbc_hmac_sha1');
  late final _EVP_aes_128_cbc_hmac_sha1 = _EVP_aes_128_cbc_hmac_sha1Ptr
      .asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cbc_hmac_sha1() {
    return _EVP_aes_256_cbc_hmac_sha1();
  }

  late final _EVP_aes_256_cbc_hmac_sha1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cbc_hmac_sha1');
  late final _EVP_aes_256_cbc_hmac_sha1 = _EVP_aes_256_cbc_hmac_sha1Ptr
      .asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_128_cbc_hmac_sha256() {
    return _EVP_aes_128_cbc_hmac_sha256();
  }

  late final _EVP_aes_128_cbc_hmac_sha256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_128_cbc_hmac_sha256');
  late final _EVP_aes_128_cbc_hmac_sha256 = _EVP_aes_128_cbc_hmac_sha256Ptr
      .asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aes_256_cbc_hmac_sha256() {
    return _EVP_aes_256_cbc_hmac_sha256();
  }

  late final _EVP_aes_256_cbc_hmac_sha256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aes_256_cbc_hmac_sha256');
  late final _EVP_aes_256_cbc_hmac_sha256 = _EVP_aes_256_cbc_hmac_sha256Ptr
      .asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_ecb() {
    return _EVP_aria_128_ecb();
  }

  late final _EVP_aria_128_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_ecb');
  late final _EVP_aria_128_ecb =
      _EVP_aria_128_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_cbc() {
    return _EVP_aria_128_cbc();
  }

  late final _EVP_aria_128_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_cbc');
  late final _EVP_aria_128_cbc =
      _EVP_aria_128_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_cfb1() {
    return _EVP_aria_128_cfb1();
  }

  late final _EVP_aria_128_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_cfb1');
  late final _EVP_aria_128_cfb1 =
      _EVP_aria_128_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_cfb8() {
    return _EVP_aria_128_cfb8();
  }

  late final _EVP_aria_128_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_cfb8');
  late final _EVP_aria_128_cfb8 =
      _EVP_aria_128_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_cfb128() {
    return _EVP_aria_128_cfb128();
  }

  late final _EVP_aria_128_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_cfb128');
  late final _EVP_aria_128_cfb128 =
      _EVP_aria_128_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_ctr() {
    return _EVP_aria_128_ctr();
  }

  late final _EVP_aria_128_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_ctr');
  late final _EVP_aria_128_ctr =
      _EVP_aria_128_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_ofb() {
    return _EVP_aria_128_ofb();
  }

  late final _EVP_aria_128_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_ofb');
  late final _EVP_aria_128_ofb =
      _EVP_aria_128_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_gcm() {
    return _EVP_aria_128_gcm();
  }

  late final _EVP_aria_128_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_gcm');
  late final _EVP_aria_128_gcm =
      _EVP_aria_128_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_128_ccm() {
    return _EVP_aria_128_ccm();
  }

  late final _EVP_aria_128_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_128_ccm');
  late final _EVP_aria_128_ccm =
      _EVP_aria_128_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_ecb() {
    return _EVP_aria_192_ecb();
  }

  late final _EVP_aria_192_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_ecb');
  late final _EVP_aria_192_ecb =
      _EVP_aria_192_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_cbc() {
    return _EVP_aria_192_cbc();
  }

  late final _EVP_aria_192_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_cbc');
  late final _EVP_aria_192_cbc =
      _EVP_aria_192_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_cfb1() {
    return _EVP_aria_192_cfb1();
  }

  late final _EVP_aria_192_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_cfb1');
  late final _EVP_aria_192_cfb1 =
      _EVP_aria_192_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_cfb8() {
    return _EVP_aria_192_cfb8();
  }

  late final _EVP_aria_192_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_cfb8');
  late final _EVP_aria_192_cfb8 =
      _EVP_aria_192_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_cfb128() {
    return _EVP_aria_192_cfb128();
  }

  late final _EVP_aria_192_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_cfb128');
  late final _EVP_aria_192_cfb128 =
      _EVP_aria_192_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_ctr() {
    return _EVP_aria_192_ctr();
  }

  late final _EVP_aria_192_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_ctr');
  late final _EVP_aria_192_ctr =
      _EVP_aria_192_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_ofb() {
    return _EVP_aria_192_ofb();
  }

  late final _EVP_aria_192_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_ofb');
  late final _EVP_aria_192_ofb =
      _EVP_aria_192_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_gcm() {
    return _EVP_aria_192_gcm();
  }

  late final _EVP_aria_192_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_gcm');
  late final _EVP_aria_192_gcm =
      _EVP_aria_192_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_192_ccm() {
    return _EVP_aria_192_ccm();
  }

  late final _EVP_aria_192_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_192_ccm');
  late final _EVP_aria_192_ccm =
      _EVP_aria_192_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_ecb() {
    return _EVP_aria_256_ecb();
  }

  late final _EVP_aria_256_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_ecb');
  late final _EVP_aria_256_ecb =
      _EVP_aria_256_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_cbc() {
    return _EVP_aria_256_cbc();
  }

  late final _EVP_aria_256_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_cbc');
  late final _EVP_aria_256_cbc =
      _EVP_aria_256_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_cfb1() {
    return _EVP_aria_256_cfb1();
  }

  late final _EVP_aria_256_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_cfb1');
  late final _EVP_aria_256_cfb1 =
      _EVP_aria_256_cfb1Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_cfb8() {
    return _EVP_aria_256_cfb8();
  }

  late final _EVP_aria_256_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_cfb8');
  late final _EVP_aria_256_cfb8 =
      _EVP_aria_256_cfb8Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_cfb128() {
    return _EVP_aria_256_cfb128();
  }

  late final _EVP_aria_256_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_cfb128');
  late final _EVP_aria_256_cfb128 =
      _EVP_aria_256_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_ctr() {
    return _EVP_aria_256_ctr();
  }

  late final _EVP_aria_256_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_ctr');
  late final _EVP_aria_256_ctr =
      _EVP_aria_256_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_ofb() {
    return _EVP_aria_256_ofb();
  }

  late final _EVP_aria_256_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_ofb');
  late final _EVP_aria_256_ofb =
      _EVP_aria_256_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_gcm() {
    return _EVP_aria_256_gcm();
  }

  late final _EVP_aria_256_gcmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_gcm');
  late final _EVP_aria_256_gcm =
      _EVP_aria_256_gcmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_aria_256_ccm() {
    return _EVP_aria_256_ccm();
  }

  late final _EVP_aria_256_ccmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_aria_256_ccm');
  late final _EVP_aria_256_ccm =
      _EVP_aria_256_ccmPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_ecb() {
    return _EVP_camellia_128_ecb();
  }

  late final _EVP_camellia_128_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_ecb');
  late final _EVP_camellia_128_ecb =
      _EVP_camellia_128_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_cbc() {
    return _EVP_camellia_128_cbc();
  }

  late final _EVP_camellia_128_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_cbc');
  late final _EVP_camellia_128_cbc =
      _EVP_camellia_128_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_cfb1() {
    return _EVP_camellia_128_cfb1();
  }

  late final _EVP_camellia_128_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_cfb1');
  late final _EVP_camellia_128_cfb1 = _EVP_camellia_128_cfb1Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_cfb8() {
    return _EVP_camellia_128_cfb8();
  }

  late final _EVP_camellia_128_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_cfb8');
  late final _EVP_camellia_128_cfb8 = _EVP_camellia_128_cfb8Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_cfb128() {
    return _EVP_camellia_128_cfb128();
  }

  late final _EVP_camellia_128_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_cfb128');
  late final _EVP_camellia_128_cfb128 = _EVP_camellia_128_cfb128Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_ofb() {
    return _EVP_camellia_128_ofb();
  }

  late final _EVP_camellia_128_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_ofb');
  late final _EVP_camellia_128_ofb =
      _EVP_camellia_128_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_128_ctr() {
    return _EVP_camellia_128_ctr();
  }

  late final _EVP_camellia_128_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_128_ctr');
  late final _EVP_camellia_128_ctr =
      _EVP_camellia_128_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_ecb() {
    return _EVP_camellia_192_ecb();
  }

  late final _EVP_camellia_192_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_ecb');
  late final _EVP_camellia_192_ecb =
      _EVP_camellia_192_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_cbc() {
    return _EVP_camellia_192_cbc();
  }

  late final _EVP_camellia_192_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_cbc');
  late final _EVP_camellia_192_cbc =
      _EVP_camellia_192_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_cfb1() {
    return _EVP_camellia_192_cfb1();
  }

  late final _EVP_camellia_192_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_cfb1');
  late final _EVP_camellia_192_cfb1 = _EVP_camellia_192_cfb1Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_cfb8() {
    return _EVP_camellia_192_cfb8();
  }

  late final _EVP_camellia_192_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_cfb8');
  late final _EVP_camellia_192_cfb8 = _EVP_camellia_192_cfb8Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_cfb128() {
    return _EVP_camellia_192_cfb128();
  }

  late final _EVP_camellia_192_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_cfb128');
  late final _EVP_camellia_192_cfb128 = _EVP_camellia_192_cfb128Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_ofb() {
    return _EVP_camellia_192_ofb();
  }

  late final _EVP_camellia_192_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_ofb');
  late final _EVP_camellia_192_ofb =
      _EVP_camellia_192_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_192_ctr() {
    return _EVP_camellia_192_ctr();
  }

  late final _EVP_camellia_192_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_192_ctr');
  late final _EVP_camellia_192_ctr =
      _EVP_camellia_192_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_ecb() {
    return _EVP_camellia_256_ecb();
  }

  late final _EVP_camellia_256_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_ecb');
  late final _EVP_camellia_256_ecb =
      _EVP_camellia_256_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_cbc() {
    return _EVP_camellia_256_cbc();
  }

  late final _EVP_camellia_256_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_cbc');
  late final _EVP_camellia_256_cbc =
      _EVP_camellia_256_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_cfb1() {
    return _EVP_camellia_256_cfb1();
  }

  late final _EVP_camellia_256_cfb1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_cfb1');
  late final _EVP_camellia_256_cfb1 = _EVP_camellia_256_cfb1Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_cfb8() {
    return _EVP_camellia_256_cfb8();
  }

  late final _EVP_camellia_256_cfb8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_cfb8');
  late final _EVP_camellia_256_cfb8 = _EVP_camellia_256_cfb8Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_cfb128() {
    return _EVP_camellia_256_cfb128();
  }

  late final _EVP_camellia_256_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_cfb128');
  late final _EVP_camellia_256_cfb128 = _EVP_camellia_256_cfb128Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_ofb() {
    return _EVP_camellia_256_ofb();
  }

  late final _EVP_camellia_256_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_ofb');
  late final _EVP_camellia_256_ofb =
      _EVP_camellia_256_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_camellia_256_ctr() {
    return _EVP_camellia_256_ctr();
  }

  late final _EVP_camellia_256_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_camellia_256_ctr');
  late final _EVP_camellia_256_ctr =
      _EVP_camellia_256_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_chacha20() {
    return _EVP_chacha20();
  }

  late final _EVP_chacha20Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_chacha20');
  late final _EVP_chacha20 =
      _EVP_chacha20Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_chacha20_poly1305() {
    return _EVP_chacha20_poly1305();
  }

  late final _EVP_chacha20_poly1305Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_chacha20_poly1305');
  late final _EVP_chacha20_poly1305 = _EVP_chacha20_poly1305Ptr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_seed_ecb() {
    return _EVP_seed_ecb();
  }

  late final _EVP_seed_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_seed_ecb');
  late final _EVP_seed_ecb =
      _EVP_seed_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_seed_cbc() {
    return _EVP_seed_cbc();
  }

  late final _EVP_seed_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_seed_cbc');
  late final _EVP_seed_cbc =
      _EVP_seed_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_seed_cfb128() {
    return _EVP_seed_cfb128();
  }

  late final _EVP_seed_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_seed_cfb128');
  late final _EVP_seed_cfb128 =
      _EVP_seed_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_seed_ofb() {
    return _EVP_seed_ofb();
  }

  late final _EVP_seed_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_seed_ofb');
  late final _EVP_seed_ofb =
      _EVP_seed_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_sm4_ecb() {
    return _EVP_sm4_ecb();
  }

  late final _EVP_sm4_ecbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_sm4_ecb');
  late final _EVP_sm4_ecb =
      _EVP_sm4_ecbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_sm4_cbc() {
    return _EVP_sm4_cbc();
  }

  late final _EVP_sm4_cbcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_sm4_cbc');
  late final _EVP_sm4_cbc =
      _EVP_sm4_cbcPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_sm4_cfb128() {
    return _EVP_sm4_cfb128();
  }

  late final _EVP_sm4_cfb128Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_sm4_cfb128');
  late final _EVP_sm4_cfb128 =
      _EVP_sm4_cfb128Ptr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_sm4_ofb() {
    return _EVP_sm4_ofb();
  }

  late final _EVP_sm4_ofbPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_sm4_ofb');
  late final _EVP_sm4_ofb =
      _EVP_sm4_ofbPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  ffi.Pointer<EVP_CIPHER> EVP_sm4_ctr() {
    return _EVP_sm4_ctr();
  }

  late final _EVP_sm4_ctrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_CIPHER> Function()>>(
          'EVP_sm4_ctr');
  late final _EVP_sm4_ctr =
      _EVP_sm4_ctrPtr.asFunction<ffi.Pointer<EVP_CIPHER> Function()>();

  int EVP_add_cipher(
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_add_cipher(
      cipher,
    );
  }

  late final _EVP_add_cipherPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_add_cipher');
  late final _EVP_add_cipher =
      _EVP_add_cipherPtr.asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_add_digest(
    ffi.Pointer<EVP_MD> digest,
  ) {
    return _EVP_add_digest(
      digest,
    );
  }

  late final _EVP_add_digestPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_MD>)>>(
          'EVP_add_digest');
  late final _EVP_add_digest =
      _EVP_add_digestPtr.asFunction<int Function(ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<EVP_CIPHER> EVP_get_cipherbyname(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_get_cipherbyname(
      name,
    );
  }

  late final _EVP_get_cipherbynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_CIPHER> Function(
              ffi.Pointer<ffi.Char>)>>('EVP_get_cipherbyname');
  late final _EVP_get_cipherbyname = _EVP_get_cipherbynamePtr.asFunction<
      ffi.Pointer<EVP_CIPHER> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<EVP_MD> EVP_get_digestbyname(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EVP_get_digestbyname(
      name,
    );
  }

  late final _EVP_get_digestbynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_MD> Function(
              ffi.Pointer<ffi.Char>)>>('EVP_get_digestbyname');
  late final _EVP_get_digestbyname = _EVP_get_digestbynamePtr.asFunction<
      ffi.Pointer<EVP_MD> Function(ffi.Pointer<ffi.Char>)>();

  void EVP_CIPHER_do_all(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<EVP_CIPHER>,
                    ffi.Pointer<ffi.Char>,
                    ffi.Pointer<ffi.Char>,
                    ffi.Pointer<ffi.Void>)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_CIPHER_do_all(
      fn,
      arg,
    );
  }

  late final _EVP_CIPHER_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<EVP_CIPHER>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_CIPHER_do_all');
  late final _EVP_CIPHER_do_all = _EVP_CIPHER_do_allPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<EVP_CIPHER>,
                      ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void EVP_CIPHER_do_all_sorted(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<EVP_CIPHER>,
                    ffi.Pointer<ffi.Char>,
                    ffi.Pointer<ffi.Char>,
                    ffi.Pointer<ffi.Void>)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_CIPHER_do_all_sorted(
      fn,
      arg,
    );
  }

  late final _EVP_CIPHER_do_all_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<EVP_CIPHER>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_CIPHER_do_all_sorted');
  late final _EVP_CIPHER_do_all_sorted =
      _EVP_CIPHER_do_all_sortedPtr.asFunction<
          void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<EVP_CIPHER>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  void EVP_MD_do_all(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<EVP_MD>, ffi.Pointer<ffi.Char>,
                    ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_MD_do_all(
      fn,
      arg,
    );
  }

  late final _EVP_MD_do_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<EVP_MD>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_MD_do_all');
  late final _EVP_MD_do_all = _EVP_MD_do_allPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<EVP_MD>, ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void EVP_MD_do_all_sorted(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<EVP_MD>, ffi.Pointer<ffi.Char>,
                    ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>
        fn,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EVP_MD_do_all_sorted(
      fn,
      arg,
    );
  }

  late final _EVP_MD_do_all_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<EVP_MD>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('EVP_MD_do_all_sorted');
  late final _EVP_MD_do_all_sorted = _EVP_MD_do_all_sortedPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<EVP_MD>, ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int EVP_PKEY_decrypt_old(
    ffi.Pointer<ffi.UnsignedChar> dec_key,
    ffi.Pointer<ffi.UnsignedChar> enc_key,
    int enc_key_len,
    ffi.Pointer<EVP_PKEY> private_key,
  ) {
    return _EVP_PKEY_decrypt_old(
      dec_key,
      enc_key,
      enc_key_len,
      private_key,
    );
  }

  late final _EVP_PKEY_decrypt_oldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_decrypt_old');
  late final _EVP_PKEY_decrypt_old = _EVP_PKEY_decrypt_oldPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>,
          int, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_encrypt_old(
    ffi.Pointer<ffi.UnsignedChar> enc_key,
    ffi.Pointer<ffi.UnsignedChar> key,
    int key_len,
    ffi.Pointer<EVP_PKEY> pub_key,
  ) {
    return _EVP_PKEY_encrypt_old(
      enc_key,
      key,
      key_len,
      pub_key,
    );
  }

  late final _EVP_PKEY_encrypt_oldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_encrypt_old');
  late final _EVP_PKEY_encrypt_old = _EVP_PKEY_encrypt_oldPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>,
          int, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_type(
    int type,
  ) {
    return _EVP_PKEY_type(
      type,
    );
  }

  late final _EVP_PKEY_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('EVP_PKEY_type');
  late final _EVP_PKEY_type = _EVP_PKEY_typePtr.asFunction<int Function(int)>();

  int EVP_PKEY_id(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_id(
      pkey,
    );
  }

  late final _EVP_PKEY_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_id');
  late final _EVP_PKEY_id =
      _EVP_PKEY_idPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_base_id(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_base_id(
      pkey,
    );
  }

  late final _EVP_PKEY_base_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_base_id');
  late final _EVP_PKEY_base_id =
      _EVP_PKEY_base_idPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_bits(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_bits(
      pkey,
    );
  }

  late final _EVP_PKEY_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_bits');
  late final _EVP_PKEY_bits =
      _EVP_PKEY_bitsPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_security_bits(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_security_bits(
      pkey,
    );
  }

  late final _EVP_PKEY_security_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_security_bits');
  late final _EVP_PKEY_security_bits = _EVP_PKEY_security_bitsPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_size(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_size(
      pkey,
    );
  }

  late final _EVP_PKEY_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_size');
  late final _EVP_PKEY_size =
      _EVP_PKEY_sizePtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_set_type(
    ffi.Pointer<EVP_PKEY> pkey,
    int type,
  ) {
    return _EVP_PKEY_set_type(
      pkey,
      type,
    );
  }

  late final _EVP_PKEY_set_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int)>>(
      'EVP_PKEY_set_type');
  late final _EVP_PKEY_set_type = _EVP_PKEY_set_typePtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, int)>();

  int EVP_PKEY_set_type_str(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _EVP_PKEY_set_type_str(
      pkey,
      str,
      len,
    );
  }

  late final _EVP_PKEY_set_type_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('EVP_PKEY_set_type_str');
  late final _EVP_PKEY_set_type_str = _EVP_PKEY_set_type_strPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>, int)>();

  int EVP_PKEY_set_alias_type(
    ffi.Pointer<EVP_PKEY> pkey,
    int type,
  ) {
    return _EVP_PKEY_set_alias_type(
      pkey,
      type,
    );
  }

  late final _EVP_PKEY_set_alias_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int)>>(
      'EVP_PKEY_set_alias_type');
  late final _EVP_PKEY_set_alias_type = _EVP_PKEY_set_alias_typePtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, int)>();

  int EVP_PKEY_set1_engine(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ENGINE> e,
  ) {
    return _EVP_PKEY_set1_engine(
      pkey,
      e,
    );
  }

  late final _EVP_PKEY_set1_enginePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ENGINE>)>>('EVP_PKEY_set1_engine');
  late final _EVP_PKEY_set1_engine = _EVP_PKEY_set1_enginePtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ENGINE>)>();

  ffi.Pointer<ENGINE> EVP_PKEY_get0_engine(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_engine(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_enginePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ENGINE> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0_engine');
  late final _EVP_PKEY_get0_engine = _EVP_PKEY_get0_enginePtr.asFunction<
      ffi.Pointer<ENGINE> Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_assign(
    ffi.Pointer<EVP_PKEY> pkey,
    int type,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _EVP_PKEY_assign(
      pkey,
      type,
      key,
    );
  }

  late final _EVP_PKEY_assignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('EVP_PKEY_assign');
  late final _EVP_PKEY_assign = _EVP_PKEY_assignPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> EVP_PKEY_get0(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0(
      pkey,
    );
  }

  late final _EVP_PKEY_get0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0');
  late final _EVP_PKEY_get0 = _EVP_PKEY_get0Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_PKEY_get0_hmac(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Int> len,
  ) {
    return _EVP_PKEY_get0_hmac(
      pkey,
      len,
    );
  }

  late final _EVP_PKEY_get0_hmacPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Int>)>>('EVP_PKEY_get0_hmac');
  late final _EVP_PKEY_get0_hmac = _EVP_PKEY_get0_hmacPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_PKEY_get0_poly1305(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Int> len,
  ) {
    return _EVP_PKEY_get0_poly1305(
      pkey,
      len,
    );
  }

  late final _EVP_PKEY_get0_poly1305Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Int>)>>('EVP_PKEY_get0_poly1305');
  late final _EVP_PKEY_get0_poly1305 = _EVP_PKEY_get0_poly1305Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.UnsignedChar> EVP_PKEY_get0_siphash(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Int> len,
  ) {
    return _EVP_PKEY_get0_siphash(
      pkey,
      len,
    );
  }

  late final _EVP_PKEY_get0_siphashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Int>)>>('EVP_PKEY_get0_siphash');
  late final _EVP_PKEY_get0_siphash = _EVP_PKEY_get0_siphashPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Int>)>();

  int EVP_PKEY_set1_RSA(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<rsa_st> key,
  ) {
    return _EVP_PKEY_set1_RSA(
      pkey,
      key,
    );
  }

  late final _EVP_PKEY_set1_RSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<rsa_st>)>>('EVP_PKEY_set1_RSA');
  late final _EVP_PKEY_set1_RSA = _EVP_PKEY_set1_RSAPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<rsa_st>)>();

  ffi.Pointer<rsa_st> EVP_PKEY_get0_RSA(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_RSA(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_RSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<rsa_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0_RSA');
  late final _EVP_PKEY_get0_RSA = _EVP_PKEY_get0_RSAPtr.asFunction<
      ffi.Pointer<rsa_st> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<rsa_st> EVP_PKEY_get1_RSA(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get1_RSA(
      pkey,
    );
  }

  late final _EVP_PKEY_get1_RSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<rsa_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get1_RSA');
  late final _EVP_PKEY_get1_RSA = _EVP_PKEY_get1_RSAPtr.asFunction<
      ffi.Pointer<rsa_st> Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_set1_DSA(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<dsa_st> key,
  ) {
    return _EVP_PKEY_set1_DSA(
      pkey,
      key,
    );
  }

  late final _EVP_PKEY_set1_DSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<dsa_st>)>>('EVP_PKEY_set1_DSA');
  late final _EVP_PKEY_set1_DSA = _EVP_PKEY_set1_DSAPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<dsa_st>)>();

  ffi.Pointer<dsa_st> EVP_PKEY_get0_DSA(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_DSA(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_DSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dsa_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0_DSA');
  late final _EVP_PKEY_get0_DSA = _EVP_PKEY_get0_DSAPtr.asFunction<
      ffi.Pointer<dsa_st> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<dsa_st> EVP_PKEY_get1_DSA(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get1_DSA(
      pkey,
    );
  }

  late final _EVP_PKEY_get1_DSAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dsa_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get1_DSA');
  late final _EVP_PKEY_get1_DSA = _EVP_PKEY_get1_DSAPtr.asFunction<
      ffi.Pointer<dsa_st> Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_set1_DH(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<dh_st> key,
  ) {
    return _EVP_PKEY_set1_DH(
      pkey,
      key,
    );
  }

  late final _EVP_PKEY_set1_DHPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY>, ffi.Pointer<dh_st>)>>('EVP_PKEY_set1_DH');
  late final _EVP_PKEY_set1_DH = _EVP_PKEY_set1_DHPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<dh_st>)>();

  ffi.Pointer<dh_st> EVP_PKEY_get0_DH(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_DH(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_DHPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dh_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0_DH');
  late final _EVP_PKEY_get0_DH = _EVP_PKEY_get0_DHPtr.asFunction<
      ffi.Pointer<dh_st> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<dh_st> EVP_PKEY_get1_DH(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get1_DH(
      pkey,
    );
  }

  late final _EVP_PKEY_get1_DHPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<dh_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get1_DH');
  late final _EVP_PKEY_get1_DH = _EVP_PKEY_get1_DHPtr.asFunction<
      ffi.Pointer<dh_st> Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_set1_EC_KEY(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ec_key_st> key,
  ) {
    return _EVP_PKEY_set1_EC_KEY(
      pkey,
      key,
    );
  }

  late final _EVP_PKEY_set1_EC_KEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ec_key_st>)>>('EVP_PKEY_set1_EC_KEY');
  late final _EVP_PKEY_set1_EC_KEY = _EVP_PKEY_set1_EC_KEYPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ec_key_st>)>();

  ffi.Pointer<ec_key_st> EVP_PKEY_get0_EC_KEY(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_EC_KEY(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_EC_KEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ec_key_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0_EC_KEY');
  late final _EVP_PKEY_get0_EC_KEY = _EVP_PKEY_get0_EC_KEYPtr.asFunction<
      ffi.Pointer<ec_key_st> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<ec_key_st> EVP_PKEY_get1_EC_KEY(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get1_EC_KEY(
      pkey,
    );
  }

  late final _EVP_PKEY_get1_EC_KEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ec_key_st> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get1_EC_KEY');
  late final _EVP_PKEY_get1_EC_KEY = _EVP_PKEY_get1_EC_KEYPtr.asFunction<
      ffi.Pointer<ec_key_st> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new() {
    return _EVP_PKEY_new();
  }

  late final _EVP_PKEY_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EVP_PKEY> Function()>>(
          'EVP_PKEY_new');
  late final _EVP_PKEY_new =
      _EVP_PKEY_newPtr.asFunction<ffi.Pointer<EVP_PKEY> Function()>();

  int EVP_PKEY_up_ref(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_up_ref(
      pkey,
    );
  }

  late final _EVP_PKEY_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_up_ref');
  late final _EVP_PKEY_up_ref =
      _EVP_PKEY_up_refPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  void EVP_PKEY_free(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_free(
      pkey,
    );
  }

  late final _EVP_PKEY_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_free');
  late final _EVP_PKEY_free =
      _EVP_PKEY_freePtr.asFunction<void Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY> d2i_PublicKey(
    int type,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_PublicKey(
      type,
      a,
      pp,
      length,
    );
  }

  late final _d2i_PublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Int,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PublicKey');
  late final _d2i_PublicKey = _d2i_PublicKeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(int, ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_PublicKey(
    ffi.Pointer<EVP_PKEY> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_PublicKey(
      a,
      pp,
    );
  }

  late final _i2d_PublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_PublicKey');
  late final _i2d_PublicKey = _i2d_PublicKeyPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<EVP_PKEY> d2i_PrivateKey(
    int type,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_PrivateKey(
      type,
      a,
      pp,
      length,
    );
  }

  late final _d2i_PrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Int,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PrivateKey');
  late final _d2i_PrivateKey = _d2i_PrivateKeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(int, ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  ffi.Pointer<EVP_PKEY> d2i_AutoPrivateKey(
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_AutoPrivateKey(
      a,
      pp,
      length,
    );
  }

  late final _d2i_AutoPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_AutoPrivateKey');
  late final _d2i_AutoPrivateKey = _d2i_AutoPrivateKeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_PrivateKey(
    ffi.Pointer<EVP_PKEY> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_PrivateKey(
      a,
      pp,
    );
  }

  late final _i2d_PrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_PrivateKey');
  late final _i2d_PrivateKey = _i2d_PrivateKeyPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int EVP_PKEY_copy_parameters(
    ffi.Pointer<EVP_PKEY> to,
    ffi.Pointer<EVP_PKEY> from,
  ) {
    return _EVP_PKEY_copy_parameters(
      to,
      from,
    );
  }

  late final _EVP_PKEY_copy_parametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_copy_parameters');
  late final _EVP_PKEY_copy_parameters = _EVP_PKEY_copy_parametersPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_missing_parameters(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_missing_parameters(
      pkey,
    );
  }

  late final _EVP_PKEY_missing_parametersPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_missing_parameters');
  late final _EVP_PKEY_missing_parameters = _EVP_PKEY_missing_parametersPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_save_parameters(
    ffi.Pointer<EVP_PKEY> pkey,
    int mode,
  ) {
    return _EVP_PKEY_save_parameters(
      pkey,
      mode,
    );
  }

  late final _EVP_PKEY_save_parametersPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int)>>(
      'EVP_PKEY_save_parameters');
  late final _EVP_PKEY_save_parameters = _EVP_PKEY_save_parametersPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY>, int)>();

  int EVP_PKEY_cmp_parameters(
    ffi.Pointer<EVP_PKEY> a,
    ffi.Pointer<EVP_PKEY> b,
  ) {
    return _EVP_PKEY_cmp_parameters(
      a,
      b,
    );
  }

  late final _EVP_PKEY_cmp_parametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_cmp_parameters');
  late final _EVP_PKEY_cmp_parameters = _EVP_PKEY_cmp_parametersPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_cmp(
    ffi.Pointer<EVP_PKEY> a,
    ffi.Pointer<EVP_PKEY> b,
  ) {
    return _EVP_PKEY_cmp(
      a,
      b,
    );
  }

  late final _EVP_PKEY_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_cmp');
  late final _EVP_PKEY_cmp = _EVP_PKEY_cmpPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_print_public(
    ffi.Pointer<BIO> out,
    ffi.Pointer<EVP_PKEY> pkey,
    int indent,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _EVP_PKEY_print_public(
      out,
      pkey,
      indent,
      pctx,
    );
  }

  late final _EVP_PKEY_print_publicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Pointer<ASN1_PCTX>)>>('EVP_PKEY_print_public');
  late final _EVP_PKEY_print_public = _EVP_PKEY_print_publicPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, int,
          ffi.Pointer<ASN1_PCTX>)>();

  int EVP_PKEY_print_private(
    ffi.Pointer<BIO> out,
    ffi.Pointer<EVP_PKEY> pkey,
    int indent,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _EVP_PKEY_print_private(
      out,
      pkey,
      indent,
      pctx,
    );
  }

  late final _EVP_PKEY_print_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Pointer<ASN1_PCTX>)>>('EVP_PKEY_print_private');
  late final _EVP_PKEY_print_private = _EVP_PKEY_print_privatePtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, int,
          ffi.Pointer<ASN1_PCTX>)>();

  int EVP_PKEY_print_params(
    ffi.Pointer<BIO> out,
    ffi.Pointer<EVP_PKEY> pkey,
    int indent,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _EVP_PKEY_print_params(
      out,
      pkey,
      indent,
      pctx,
    );
  }

  late final _EVP_PKEY_print_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Pointer<ASN1_PCTX>)>>('EVP_PKEY_print_params');
  late final _EVP_PKEY_print_params = _EVP_PKEY_print_paramsPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, int,
          ffi.Pointer<ASN1_PCTX>)>();

  int EVP_PKEY_get_default_digest_nid(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Int> pnid,
  ) {
    return _EVP_PKEY_get_default_digest_nid(
      pkey,
      pnid,
    );
  }

  late final _EVP_PKEY_get_default_digest_nidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Int>)>>('EVP_PKEY_get_default_digest_nid');
  late final _EVP_PKEY_get_default_digest_nid =
      _EVP_PKEY_get_default_digest_nidPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Int>)>();

  int EVP_PKEY_set1_tls_encodedpoint(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.UnsignedChar> pt,
    int ptlen,
  ) {
    return _EVP_PKEY_set1_tls_encodedpoint(
      pkey,
      pt,
      ptlen,
    );
  }

  late final _EVP_PKEY_set1_tls_encodedpointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_set1_tls_encodedpoint');
  late final _EVP_PKEY_set1_tls_encodedpoint =
      _EVP_PKEY_set1_tls_encodedpointPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_get1_tls_encodedpoint(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> ppt,
  ) {
    return _EVP_PKEY_get1_tls_encodedpoint(
      pkey,
      ppt,
    );
  }

  late final _EVP_PKEY_get1_tls_encodedpointPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<EVP_PKEY>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'EVP_PKEY_get1_tls_encodedpoint');
  late final _EVP_PKEY_get1_tls_encodedpoint =
      _EVP_PKEY_get1_tls_encodedpointPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int EVP_CIPHER_type(
    ffi.Pointer<EVP_CIPHER> ctx,
  ) {
    return _EVP_CIPHER_type(
      ctx,
    );
  }

  late final _EVP_CIPHER_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_CIPHER>)>>(
          'EVP_CIPHER_type');
  late final _EVP_CIPHER_type =
      _EVP_CIPHER_typePtr.asFunction<int Function(ffi.Pointer<EVP_CIPHER>)>();

  int EVP_CIPHER_param_to_asn1(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    ffi.Pointer<ASN1_TYPE> type,
  ) {
    return _EVP_CIPHER_param_to_asn1(
      c,
      type,
    );
  }

  late final _EVP_CIPHER_param_to_asn1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ASN1_TYPE>)>>('EVP_CIPHER_param_to_asn1');
  late final _EVP_CIPHER_param_to_asn1 =
      _EVP_CIPHER_param_to_asn1Ptr.asFunction<
          int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>();

  int EVP_CIPHER_asn1_to_param(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    ffi.Pointer<ASN1_TYPE> type,
  ) {
    return _EVP_CIPHER_asn1_to_param(
      c,
      type,
    );
  }

  late final _EVP_CIPHER_asn1_to_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ASN1_TYPE>)>>('EVP_CIPHER_asn1_to_param');
  late final _EVP_CIPHER_asn1_to_param =
      _EVP_CIPHER_asn1_to_paramPtr.asFunction<
          int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>();

  int EVP_CIPHER_set_asn1_iv(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    ffi.Pointer<ASN1_TYPE> type,
  ) {
    return _EVP_CIPHER_set_asn1_iv(
      c,
      type,
    );
  }

  late final _EVP_CIPHER_set_asn1_ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ASN1_TYPE>)>>('EVP_CIPHER_set_asn1_iv');
  late final _EVP_CIPHER_set_asn1_iv = _EVP_CIPHER_set_asn1_ivPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>();

  int EVP_CIPHER_get_asn1_iv(
    ffi.Pointer<EVP_CIPHER_CTX> c,
    ffi.Pointer<ASN1_TYPE> type,
  ) {
    return _EVP_CIPHER_get_asn1_iv(
      c,
      type,
    );
  }

  late final _EVP_CIPHER_get_asn1_ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ASN1_TYPE>)>>('EVP_CIPHER_get_asn1_iv');
  late final _EVP_CIPHER_get_asn1_iv = _EVP_CIPHER_get_asn1_ivPtr.asFunction<
      int Function(ffi.Pointer<EVP_CIPHER_CTX>, ffi.Pointer<ASN1_TYPE>)>();

  int PKCS5_PBE_keyivgen(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ASN1_TYPE> param,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<EVP_MD> md,
    int en_de,
  ) {
    return _PKCS5_PBE_keyivgen(
      ctx,
      pass,
      passlen,
      param,
      cipher,
      md,
      en_de,
    );
  }

  late final _PKCS5_PBE_keyivgenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Int)>>('PKCS5_PBE_keyivgen');
  late final _PKCS5_PBE_keyivgen = _PKCS5_PBE_keyivgenPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ASN1_TYPE>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<EVP_MD>,
          int)>();

  int PKCS5_PBKDF2_HMAC_SHA1(
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
    int iter,
    int keylen,
    ffi.Pointer<ffi.UnsignedChar> out,
  ) {
    return _PKCS5_PBKDF2_HMAC_SHA1(
      pass,
      passlen,
      salt,
      saltlen,
      iter,
      keylen,
      out,
    );
  }

  late final _PKCS5_PBKDF2_HMAC_SHA1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>)>>('PKCS5_PBKDF2_HMAC_SHA1');
  late final _PKCS5_PBKDF2_HMAC_SHA1 = _PKCS5_PBKDF2_HMAC_SHA1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.UnsignedChar>,
          int, int, int, ffi.Pointer<ffi.UnsignedChar>)>();

  int PKCS5_PBKDF2_HMAC(
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
    int iter,
    ffi.Pointer<EVP_MD> digest,
    int keylen,
    ffi.Pointer<ffi.UnsignedChar> out,
  ) {
    return _PKCS5_PBKDF2_HMAC(
      pass,
      passlen,
      salt,
      saltlen,
      iter,
      digest,
      keylen,
      out,
    );
  }

  late final _PKCS5_PBKDF2_HMACPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<EVP_MD>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>)>>('PKCS5_PBKDF2_HMAC');
  late final _PKCS5_PBKDF2_HMAC = _PKCS5_PBKDF2_HMACPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.UnsignedChar>,
          int, int, ffi.Pointer<EVP_MD>, int, ffi.Pointer<ffi.UnsignedChar>)>();

  int PKCS5_v2_PBE_keyivgen(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ASN1_TYPE> param,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<EVP_MD> md,
    int en_de,
  ) {
    return _PKCS5_v2_PBE_keyivgen(
      ctx,
      pass,
      passlen,
      param,
      cipher,
      md,
      en_de,
    );
  }

  late final _PKCS5_v2_PBE_keyivgenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Int)>>('PKCS5_v2_PBE_keyivgen');
  late final _PKCS5_v2_PBE_keyivgen = _PKCS5_v2_PBE_keyivgenPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_CTX>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ASN1_TYPE>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<EVP_MD>,
          int)>();

  int EVP_PBE_scrypt(
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
    int N,
    int r,
    int p,
    int maxmem,
    ffi.Pointer<ffi.UnsignedChar> key,
    int keylen,
  ) {
    return _EVP_PBE_scrypt(
      pass,
      passlen,
      salt,
      saltlen,
      N,
      r,
      p,
      maxmem,
      key,
      keylen,
    );
  }

  late final _EVP_PBE_scryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PBE_scrypt');
  late final _EVP_PBE_scrypt = _EVP_PBE_scryptPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.UnsignedChar>,
          int, int, int, int, int, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int PKCS5_v2_scrypt_keyivgen(
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ASN1_TYPE> param,
    ffi.Pointer<EVP_CIPHER> c,
    ffi.Pointer<EVP_MD> md,
    int en_de,
  ) {
    return _PKCS5_v2_scrypt_keyivgen(
      ctx,
      pass,
      passlen,
      param,
      c,
      md,
      en_de,
    );
  }

  late final _PKCS5_v2_scrypt_keyivgenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Int)>>('PKCS5_v2_scrypt_keyivgen');
  late final _PKCS5_v2_scrypt_keyivgen =
      _PKCS5_v2_scrypt_keyivgenPtr.asFunction<
          int Function(
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              int)>();

  void PKCS5_PBE_add() {
    return _PKCS5_PBE_add();
  }

  late final _PKCS5_PBE_addPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('PKCS5_PBE_add');
  late final _PKCS5_PBE_add = _PKCS5_PBE_addPtr.asFunction<void Function()>();

  int EVP_PBE_CipherInit(
    ffi.Pointer<ASN1_OBJECT> pbe_obj,
    ffi.Pointer<ffi.Char> pass,
    int passlen,
    ffi.Pointer<ASN1_TYPE> param,
    ffi.Pointer<EVP_CIPHER_CTX> ctx,
    int en_de,
  ) {
    return _EVP_PBE_CipherInit(
      pbe_obj,
      pass,
      passlen,
      param,
      ctx,
      en_de,
    );
  }

  late final _EVP_PBE_CipherInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_OBJECT>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ASN1_TYPE>,
              ffi.Pointer<EVP_CIPHER_CTX>,
              ffi.Int)>>('EVP_PBE_CipherInit');
  late final _EVP_PBE_CipherInit = _EVP_PBE_CipherInitPtr.asFunction<
      int Function(ffi.Pointer<ASN1_OBJECT>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ASN1_TYPE>, ffi.Pointer<EVP_CIPHER_CTX>, int)>();

  int EVP_PBE_alg_add_type(
    int pbe_type,
    int pbe_nid,
    int cipher_nid,
    int md_nid,
    ffi.Pointer<EVP_PBE_KEYGEN> keygen,
  ) {
    return _EVP_PBE_alg_add_type(
      pbe_type,
      pbe_nid,
      cipher_nid,
      md_nid,
      keygen,
    );
  }

  late final _EVP_PBE_alg_add_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<EVP_PBE_KEYGEN>)>>('EVP_PBE_alg_add_type');
  late final _EVP_PBE_alg_add_type = _EVP_PBE_alg_add_typePtr.asFunction<
      int Function(int, int, int, int, ffi.Pointer<EVP_PBE_KEYGEN>)>();

  int EVP_PBE_alg_add(
    int nid,
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<EVP_PBE_KEYGEN> keygen,
  ) {
    return _EVP_PBE_alg_add(
      nid,
      cipher,
      md,
      keygen,
    );
  }

  late final _EVP_PBE_alg_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<EVP_PBE_KEYGEN>)>>('EVP_PBE_alg_add');
  late final _EVP_PBE_alg_add = _EVP_PBE_alg_addPtr.asFunction<
      int Function(int, ffi.Pointer<EVP_CIPHER>, ffi.Pointer<EVP_MD>,
          ffi.Pointer<EVP_PBE_KEYGEN>)>();

  int EVP_PBE_find(
    int type,
    int pbe_nid,
    ffi.Pointer<ffi.Int> pcnid,
    ffi.Pointer<ffi.Int> pmnid,
    ffi.Pointer<ffi.Pointer<EVP_PBE_KEYGEN>> pkeygen,
  ) {
    return _EVP_PBE_find(
      type,
      pbe_nid,
      pcnid,
      pmnid,
      pkeygen,
    );
  }

  late final _EVP_PBE_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<EVP_PBE_KEYGEN>>)>>('EVP_PBE_find');
  late final _EVP_PBE_find = _EVP_PBE_findPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<EVP_PBE_KEYGEN>>)>();

  void EVP_PBE_cleanup() {
    return _EVP_PBE_cleanup();
  }

  late final _EVP_PBE_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EVP_PBE_cleanup');
  late final _EVP_PBE_cleanup =
      _EVP_PBE_cleanupPtr.asFunction<void Function()>();

  int EVP_PBE_get(
    ffi.Pointer<ffi.Int> ptype,
    ffi.Pointer<ffi.Int> ppbe_nid,
    int num,
  ) {
    return _EVP_PBE_get(
      ptype,
      ppbe_nid,
      num,
    );
  }

  late final _EVP_PBE_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('EVP_PBE_get');
  late final _EVP_PBE_get = _EVP_PBE_getPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, int)>();

  int EVP_PKEY_asn1_get_count() {
    return _EVP_PKEY_asn1_get_count();
  }

  late final _EVP_PKEY_asn1_get_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'EVP_PKEY_asn1_get_count');
  late final _EVP_PKEY_asn1_get_count =
      _EVP_PKEY_asn1_get_countPtr.asFunction<int Function()>();

  ffi.Pointer<EVP_PKEY_ASN1_METHOD> EVP_PKEY_asn1_get0(
    int idx,
  ) {
    return _EVP_PKEY_asn1_get0(
      idx,
    );
  }

  late final _EVP_PKEY_asn1_get0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
              ffi.Int)>>('EVP_PKEY_asn1_get0');
  late final _EVP_PKEY_asn1_get0 = _EVP_PKEY_asn1_get0Ptr.asFunction<
      ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(int)>();

  ffi.Pointer<EVP_PKEY_ASN1_METHOD> EVP_PKEY_asn1_find(
    ffi.Pointer<ffi.Pointer<ENGINE>> pe,
    int type,
  ) {
    return _EVP_PKEY_asn1_find(
      pe,
      type,
    );
  }

  late final _EVP_PKEY_asn1_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
              ffi.Pointer<ffi.Pointer<ENGINE>>,
              ffi.Int)>>('EVP_PKEY_asn1_find');
  late final _EVP_PKEY_asn1_find = _EVP_PKEY_asn1_findPtr.asFunction<
      ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
          ffi.Pointer<ffi.Pointer<ENGINE>>, int)>();

  ffi.Pointer<EVP_PKEY_ASN1_METHOD> EVP_PKEY_asn1_find_str(
    ffi.Pointer<ffi.Pointer<ENGINE>> pe,
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _EVP_PKEY_asn1_find_str(
      pe,
      str,
      len,
    );
  }

  late final _EVP_PKEY_asn1_find_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
              ffi.Pointer<ffi.Pointer<ENGINE>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('EVP_PKEY_asn1_find_str');
  late final _EVP_PKEY_asn1_find_str = _EVP_PKEY_asn1_find_strPtr.asFunction<
      ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
          ffi.Pointer<ffi.Pointer<ENGINE>>, ffi.Pointer<ffi.Char>, int)>();

  int EVP_PKEY_asn1_add0(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
  ) {
    return _EVP_PKEY_asn1_add0(
      ameth,
    );
  }

  late final _EVP_PKEY_asn1_add0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>>('EVP_PKEY_asn1_add0');
  late final _EVP_PKEY_asn1_add0 = _EVP_PKEY_asn1_add0Ptr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>();

  int EVP_PKEY_asn1_add_alias(
    int to,
    int from,
  ) {
    return _EVP_PKEY_asn1_add_alias(
      to,
      from,
    );
  }

  late final _EVP_PKEY_asn1_add_aliasPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'EVP_PKEY_asn1_add_alias');
  late final _EVP_PKEY_asn1_add_alias =
      _EVP_PKEY_asn1_add_aliasPtr.asFunction<int Function(int, int)>();

  int EVP_PKEY_asn1_get0_info(
    ffi.Pointer<ffi.Int> ppkey_id,
    ffi.Pointer<ffi.Int> pkey_base_id,
    ffi.Pointer<ffi.Int> ppkey_flags,
    ffi.Pointer<ffi.Pointer<ffi.Char>> pinfo,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ppem_str,
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
  ) {
    return _EVP_PKEY_asn1_get0_info(
      ppkey_id,
      pkey_base_id,
      ppkey_flags,
      pinfo,
      ppem_str,
      ameth,
    );
  }

  late final _EVP_PKEY_asn1_get0_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>>('EVP_PKEY_asn1_get0_info');
  late final _EVP_PKEY_asn1_get0_info = _EVP_PKEY_asn1_get0_infoPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>();

  ffi.Pointer<EVP_PKEY_ASN1_METHOD> EVP_PKEY_get0_asn1(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY_get0_asn1(
      pkey,
    );
  }

  late final _EVP_PKEY_get0_asn1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_get0_asn1');
  late final _EVP_PKEY_get0_asn1 = _EVP_PKEY_get0_asn1Ptr.asFunction<
      ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY_ASN1_METHOD> EVP_PKEY_asn1_new(
    int id,
    int flags,
    ffi.Pointer<ffi.Char> pem_str,
    ffi.Pointer<ffi.Char> info,
  ) {
    return _EVP_PKEY_asn1_new(
      id,
      flags,
      pem_str,
      info,
    );
  }

  late final _EVP_PKEY_asn1_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_asn1_new');
  late final _EVP_PKEY_asn1_new = _EVP_PKEY_asn1_newPtr.asFunction<
      ffi.Pointer<EVP_PKEY_ASN1_METHOD> Function(
          int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void EVP_PKEY_asn1_copy(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> dst,
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> src,
  ) {
    return _EVP_PKEY_asn1_copy(
      dst,
      src,
    );
  }

  late final _EVP_PKEY_asn1_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>>('EVP_PKEY_asn1_copy');
  late final _EVP_PKEY_asn1_copy = _EVP_PKEY_asn1_copyPtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>();

  void EVP_PKEY_asn1_free(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
  ) {
    return _EVP_PKEY_asn1_free(
      ameth,
    );
  }

  late final _EVP_PKEY_asn1_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>>('EVP_PKEY_asn1_free');
  late final _EVP_PKEY_asn1_free = _EVP_PKEY_asn1_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_ASN1_METHOD>)>();

  void EVP_PKEY_asn1_set_public(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY>, ffi.Pointer<X509_PUBKEY>)>>
        pub_decode,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<X509_PUBKEY>, ffi.Pointer<EVP_PKEY>)>>
        pub_encode,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>>
        pub_cmp,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>,
                    ffi.Int, ffi.Pointer<ASN1_PCTX>)>>
        pub_print,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>
        pkey_size,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>
        pkey_bits,
  ) {
    return _EVP_PKEY_asn1_set_public(
      ameth,
      pub_decode,
      pub_encode,
      pub_cmp,
      pub_print,
      pkey_size,
      pkey_bits,
    );
  }

  late final _EVP_PKEY_asn1_set_publicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY>, ffi.Pointer<X509_PUBKEY>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<X509_PUBKEY>, ffi.Pointer<EVP_PKEY>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>,
                          ffi.Int, ffi.Pointer<ASN1_PCTX>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY>)>>)>>('EVP_PKEY_asn1_set_public');
  late final _EVP_PKEY_asn1_set_public = _EVP_PKEY_asn1_set_publicPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY>, ffi.Pointer<X509_PUBKEY>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<X509_PUBKEY>, ffi.Pointer<EVP_PKEY>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>,
                      ffi.Int, ffi.Pointer<ASN1_PCTX>)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>)>();

  void EVP_PKEY_asn1_set_private(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY>, ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>>
        priv_decode,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<PKCS8_PRIV_KEY_INFO>, ffi.Pointer<EVP_PKEY>)>>
        priv_encode,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>,
                    ffi.Int, ffi.Pointer<ASN1_PCTX>)>>
        priv_print,
  ) {
    return _EVP_PKEY_asn1_set_private(
      ameth,
      priv_decode,
      priv_encode,
      priv_print,
    );
  }

  late final _EVP_PKEY_asn1_set_privatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
                              ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<PKCS8_PRIV_KEY_INFO>,
                              ffi.Pointer<EVP_PKEY>)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<BIO>,
                              ffi.Pointer<EVP_PKEY>,
                              ffi.Int,
                              ffi.Pointer<ASN1_PCTX>)>>)>>(
      'EVP_PKEY_asn1_set_private');
  late final _EVP_PKEY_asn1_set_private =
      _EVP_PKEY_asn1_set_privatePtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY>,
                          ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<PKCS8_PRIV_KEY_INFO>,
                          ffi.Pointer<EVP_PKEY>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>,
                          ffi.Int, ffi.Pointer<ASN1_PCTX>)>>)>();

  void EVP_PKEY_asn1_set_param(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY>,
                    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int)>>
        param_decode,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY>,
                    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>
        param_encode,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>
        param_missing,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>>
        param_copy,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>>
        param_cmp,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>,
                    ffi.Int, ffi.Pointer<ASN1_PCTX>)>>
        param_print,
  ) {
    return _EVP_PKEY_asn1_set_param(
      ameth,
      param_decode,
      param_encode,
      param_missing,
      param_copy,
      param_cmp,
      param_print,
    );
  }

  late final _EVP_PKEY_asn1_set_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY>,
                          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
                          ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY>,
                          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIO>,
                          ffi.Pointer<EVP_PKEY>,
                          ffi.Int,
                          ffi.Pointer<
                              ASN1_PCTX>)>>)>>('EVP_PKEY_asn1_set_param');
  late final _EVP_PKEY_asn1_set_param = _EVP_PKEY_asn1_set_paramPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY>,
                      ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY>,
                      ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_PKEY>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>,
                      ffi.Int, ffi.Pointer<ASN1_PCTX>)>>)>();

  void EVP_PKEY_asn1_set_free(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_PKEY>)>>
        pkey_free,
  ) {
    return _EVP_PKEY_asn1_set_free(
      ameth,
      pkey_free,
    );
  }

  late final _EVP_PKEY_asn1_set_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<EVP_PKEY>)>>)>>('EVP_PKEY_asn1_set_free');
  late final _EVP_PKEY_asn1_set_free = _EVP_PKEY_asn1_set_freePtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_PKEY>)>>)>();

  void EVP_PKEY_asn1_set_ctrl(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int, ffi.Long,
                    ffi.Pointer<ffi.Void>)>>
        pkey_ctrl,
  ) {
    return _EVP_PKEY_asn1_set_ctrl(
      ameth,
      pkey_ctrl,
    );
  }

  late final _EVP_PKEY_asn1_set_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int, ffi.Long,
                          ffi.Pointer<ffi.Void>)>>)>>('EVP_PKEY_asn1_set_ctrl');
  late final _EVP_PKEY_asn1_set_ctrl = _EVP_PKEY_asn1_set_ctrlPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int, ffi.Long,
                      ffi.Pointer<ffi.Void>)>>)>();

  void EVP_PKEY_asn1_set_item(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX>,
                    ffi.Pointer<ASN1_ITEM>,
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<X509_ALGOR>,
                    ffi.Pointer<ASN1_BIT_STRING>,
                    ffi.Pointer<EVP_PKEY>)>>
        item_verify,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX>,
                    ffi.Pointer<ASN1_ITEM>,
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<X509_ALGOR>,
                    ffi.Pointer<X509_ALGOR>,
                    ffi.Pointer<ASN1_BIT_STRING>)>>
        item_sign,
  ) {
    return _EVP_PKEY_asn1_set_item(
      ameth,
      item_verify,
      item_sign,
    );
  }

  late final _EVP_PKEY_asn1_set_itemPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX>,
                              ffi.Pointer<ASN1_ITEM>,
                              ffi.Pointer<ffi.Void>,
                              ffi.Pointer<X509_ALGOR>,
                              ffi.Pointer<ASN1_BIT_STRING>,
                              ffi.Pointer<EVP_PKEY>)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX>,
                              ffi.Pointer<ASN1_ITEM>,
                              ffi.Pointer<ffi.Void>,
                              ffi.Pointer<X509_ALGOR>,
                              ffi.Pointer<X509_ALGOR>,
                              ffi.Pointer<ASN1_BIT_STRING>)>>)>>(
      'EVP_PKEY_asn1_set_item');
  late final _EVP_PKEY_asn1_set_item = _EVP_PKEY_asn1_set_itemPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_MD_CTX>,
                      ffi.Pointer<ASN1_ITEM>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<X509_ALGOR>,
                      ffi.Pointer<ASN1_BIT_STRING>,
                      ffi.Pointer<EVP_PKEY>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_MD_CTX>,
                      ffi.Pointer<ASN1_ITEM>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<X509_ALGOR>,
                      ffi.Pointer<X509_ALGOR>,
                      ffi.Pointer<ASN1_BIT_STRING>)>>)>();

  void EVP_PKEY_asn1_set_siginf(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<X509_SIG_INFO>,
                    ffi.Pointer<X509_ALGOR>, ffi.Pointer<ASN1_STRING>)>>
        siginf_set,
  ) {
    return _EVP_PKEY_asn1_set_siginf(
      ameth,
      siginf_set,
    );
  }

  late final _EVP_PKEY_asn1_set_siginfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<X509_SIG_INFO>,
                              ffi.Pointer<X509_ALGOR>,
                              ffi.Pointer<ASN1_STRING>)>>)>>(
      'EVP_PKEY_asn1_set_siginf');
  late final _EVP_PKEY_asn1_set_siginf =
      _EVP_PKEY_asn1_set_siginfPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<X509_SIG_INFO>,
                          ffi.Pointer<X509_ALGOR>,
                          ffi.Pointer<ASN1_STRING>)>>)>();

  void EVP_PKEY_asn1_set_check(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>
        pkey_check,
  ) {
    return _EVP_PKEY_asn1_set_check(
      ameth,
      pkey_check,
    );
  }

  late final _EVP_PKEY_asn1_set_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>)>>(
      'EVP_PKEY_asn1_set_check');
  late final _EVP_PKEY_asn1_set_check = _EVP_PKEY_asn1_set_checkPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>)>();

  void EVP_PKEY_asn1_set_public_check(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>
        pkey_pub_check,
  ) {
    return _EVP_PKEY_asn1_set_public_check(
      ameth,
      pkey_pub_check,
    );
  }

  late final _EVP_PKEY_asn1_set_public_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>)>>(
      'EVP_PKEY_asn1_set_public_check');
  late final _EVP_PKEY_asn1_set_public_check =
      _EVP_PKEY_asn1_set_public_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>)>();

  void EVP_PKEY_asn1_set_param_check(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>
        pkey_param_check,
  ) {
    return _EVP_PKEY_asn1_set_param_check(
      ameth,
      pkey_param_check,
    );
  }

  late final _EVP_PKEY_asn1_set_param_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>)>>(
      'EVP_PKEY_asn1_set_param_check');
  late final _EVP_PKEY_asn1_set_param_check =
      _EVP_PKEY_asn1_set_param_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>)>();

  void EVP_PKEY_asn1_set_set_priv_key(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY>,
                    ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>
        set_priv_key,
  ) {
    return _EVP_PKEY_asn1_set_set_priv_key(
      ameth,
      set_priv_key,
    );
  }

  late final _EVP_PKEY_asn1_set_set_priv_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>>('EVP_PKEY_asn1_set_set_priv_key');
  late final _EVP_PKEY_asn1_set_set_priv_key =
      _EVP_PKEY_asn1_set_set_priv_keyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY>,
                          ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>)>();

  void EVP_PKEY_asn1_set_set_pub_key(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY>,
                    ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>
        set_pub_key,
  ) {
    return _EVP_PKEY_asn1_set_set_pub_key(
      ameth,
      set_pub_key,
    );
  }

  late final _EVP_PKEY_asn1_set_set_pub_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>>('EVP_PKEY_asn1_set_set_pub_key');
  late final _EVP_PKEY_asn1_set_set_pub_key =
      _EVP_PKEY_asn1_set_set_pub_keyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY>,
                          ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>)>();

  void EVP_PKEY_asn1_set_get_priv_key(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY>,
                    ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>>
        get_priv_key,
  ) {
    return _EVP_PKEY_asn1_set_get_priv_key(
      ameth,
      get_priv_key,
    );
  }

  late final _EVP_PKEY_asn1_set_get_priv_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Pointer<ffi.Int>)>>)>>(
      'EVP_PKEY_asn1_set_get_priv_key');
  late final _EVP_PKEY_asn1_set_get_priv_key =
      _EVP_PKEY_asn1_set_get_priv_keyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.Int>)>>)>();

  void EVP_PKEY_asn1_set_get_pub_key(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY>,
                    ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>>
        get_pub_key,
  ) {
    return _EVP_PKEY_asn1_set_get_pub_key(
      ameth,
      get_pub_key,
    );
  }

  late final _EVP_PKEY_asn1_set_get_pub_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Pointer<ffi.Int>)>>)>>(
      'EVP_PKEY_asn1_set_get_pub_key');
  late final _EVP_PKEY_asn1_set_get_pub_key =
      _EVP_PKEY_asn1_set_get_pub_keyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.Int>)>>)>();

  void EVP_PKEY_asn1_set_security_bits(
    ffi.Pointer<EVP_PKEY_ASN1_METHOD> ameth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>
        pkey_security_bits,
  ) {
    return _EVP_PKEY_asn1_set_security_bits(
      ameth,
      pkey_security_bits,
    );
  }

  late final _EVP_PKEY_asn1_set_security_bitsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>)>>(
      'EVP_PKEY_asn1_set_security_bits');
  late final _EVP_PKEY_asn1_set_security_bits =
      _EVP_PKEY_asn1_set_security_bitsPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_ASN1_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>)>();

  ffi.Pointer<EVP_PKEY_METHOD> EVP_PKEY_meth_find(
    int type,
  ) {
    return _EVP_PKEY_meth_find(
      type,
    );
  }

  late final _EVP_PKEY_meth_findPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<EVP_PKEY_METHOD> Function(ffi.Int)>>(
      'EVP_PKEY_meth_find');
  late final _EVP_PKEY_meth_find = _EVP_PKEY_meth_findPtr.asFunction<
      ffi.Pointer<EVP_PKEY_METHOD> Function(int)>();

  ffi.Pointer<EVP_PKEY_METHOD> EVP_PKEY_meth_new(
    int id,
    int flags,
  ) {
    return _EVP_PKEY_meth_new(
      id,
      flags,
    );
  }

  late final _EVP_PKEY_meth_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_METHOD> Function(
              ffi.Int, ffi.Int)>>('EVP_PKEY_meth_new');
  late final _EVP_PKEY_meth_new = _EVP_PKEY_meth_newPtr.asFunction<
      ffi.Pointer<EVP_PKEY_METHOD> Function(int, int)>();

  void EVP_PKEY_meth_get0_info(
    ffi.Pointer<ffi.Int> ppkey_id,
    ffi.Pointer<ffi.Int> pflags,
    ffi.Pointer<EVP_PKEY_METHOD> meth,
  ) {
    return _EVP_PKEY_meth_get0_info(
      ppkey_id,
      pflags,
      meth,
    );
  }

  late final _EVP_PKEY_meth_get0_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<EVP_PKEY_METHOD>)>>('EVP_PKEY_meth_get0_info');
  late final _EVP_PKEY_meth_get0_info = _EVP_PKEY_meth_get0_infoPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<EVP_PKEY_METHOD>)>();

  void EVP_PKEY_meth_copy(
    ffi.Pointer<EVP_PKEY_METHOD> dst,
    ffi.Pointer<EVP_PKEY_METHOD> src,
  ) {
    return _EVP_PKEY_meth_copy(
      dst,
      src,
    );
  }

  late final _EVP_PKEY_meth_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<EVP_PKEY_METHOD>)>>('EVP_PKEY_meth_copy');
  late final _EVP_PKEY_meth_copy = _EVP_PKEY_meth_copyPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>, ffi.Pointer<EVP_PKEY_METHOD>)>();

  void EVP_PKEY_meth_free(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
  ) {
    return _EVP_PKEY_meth_free(
      pmeth,
    );
  }

  late final _EVP_PKEY_meth_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_PKEY_METHOD>)>>(
      'EVP_PKEY_meth_free');
  late final _EVP_PKEY_meth_free = _EVP_PKEY_meth_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_METHOD>)>();

  int EVP_PKEY_meth_add0(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
  ) {
    return _EVP_PKEY_meth_add0(
      pmeth,
    );
  }

  late final _EVP_PKEY_meth_add0Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_METHOD>)>>(
      'EVP_PKEY_meth_add0');
  late final _EVP_PKEY_meth_add0 = _EVP_PKEY_meth_add0Ptr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_METHOD>)>();

  int EVP_PKEY_meth_remove(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
  ) {
    return _EVP_PKEY_meth_remove(
      pmeth,
    );
  }

  late final _EVP_PKEY_meth_removePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_METHOD>)>>(
      'EVP_PKEY_meth_remove');
  late final _EVP_PKEY_meth_remove = _EVP_PKEY_meth_removePtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_METHOD>)>();

  int EVP_PKEY_meth_get_count() {
    return _EVP_PKEY_meth_get_count();
  }

  late final _EVP_PKEY_meth_get_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'EVP_PKEY_meth_get_count');
  late final _EVP_PKEY_meth_get_count =
      _EVP_PKEY_meth_get_countPtr.asFunction<int Function()>();

  ffi.Pointer<EVP_PKEY_METHOD> EVP_PKEY_meth_get0(
    int idx,
  ) {
    return _EVP_PKEY_meth_get0(
      idx,
    );
  }

  late final _EVP_PKEY_meth_get0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<EVP_PKEY_METHOD> Function(ffi.Int)>>(
      'EVP_PKEY_meth_get0');
  late final _EVP_PKEY_meth_get0 = _EVP_PKEY_meth_get0Ptr.asFunction<
      ffi.Pointer<EVP_PKEY_METHOD> Function(int)>();

  ffi.Pointer<EVP_PKEY_CTX> EVP_PKEY_CTX_new(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ENGINE> e,
  ) {
    return _EVP_PKEY_CTX_new(
      pkey,
      e,
    );
  }

  late final _EVP_PKEY_CTX_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(
              ffi.Pointer<EVP_PKEY>, ffi.Pointer<ENGINE>)>>('EVP_PKEY_CTX_new');
  late final _EVP_PKEY_CTX_new = _EVP_PKEY_CTX_newPtr.asFunction<
      ffi.Pointer<EVP_PKEY_CTX> Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ENGINE>)>();

  ffi.Pointer<EVP_PKEY_CTX> EVP_PKEY_CTX_new_id(
    int id,
    ffi.Pointer<ENGINE> e,
  ) {
    return _EVP_PKEY_CTX_new_id(
      id,
      e,
    );
  }

  late final _EVP_PKEY_CTX_new_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(
              ffi.Int, ffi.Pointer<ENGINE>)>>('EVP_PKEY_CTX_new_id');
  late final _EVP_PKEY_CTX_new_id = _EVP_PKEY_CTX_new_idPtr.asFunction<
      ffi.Pointer<EVP_PKEY_CTX> Function(int, ffi.Pointer<ENGINE>)>();

  ffi.Pointer<EVP_PKEY_CTX> EVP_PKEY_CTX_dup(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_dup(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_CTX> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_dup');
  late final _EVP_PKEY_CTX_dup = _EVP_PKEY_CTX_dupPtr.asFunction<
      ffi.Pointer<EVP_PKEY_CTX> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  void EVP_PKEY_CTX_free(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_free(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_CTX_free');
  late final _EVP_PKEY_CTX_free = _EVP_PKEY_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_CTX_ctrl(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int keytype,
    int optype,
    int cmd,
    int p1,
    ffi.Pointer<ffi.Void> p2,
  ) {
    return _EVP_PKEY_CTX_ctrl(
      ctx,
      keytype,
      optype,
      cmd,
      p1,
      p2,
    );
  }

  late final _EVP_PKEY_CTX_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Pointer<ffi.Void>)>>('EVP_PKEY_CTX_ctrl');
  late final _EVP_PKEY_CTX_ctrl = _EVP_PKEY_CTX_ctrlPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, int, int, int, int,
          ffi.Pointer<ffi.Void>)>();

  int EVP_PKEY_CTX_ctrl_str(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _EVP_PKEY_CTX_ctrl_str(
      ctx,
      type,
      value,
    );
  }

  late final _EVP_PKEY_CTX_ctrl_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_CTX_ctrl_str');
  late final _EVP_PKEY_CTX_ctrl_str = _EVP_PKEY_CTX_ctrl_strPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_CTX_ctrl_uint64(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int keytype,
    int optype,
    int cmd,
    int value,
  ) {
    return _EVP_PKEY_CTX_ctrl_uint64(
      ctx,
      keytype,
      optype,
      cmd,
      value,
    );
  }

  late final _EVP_PKEY_CTX_ctrl_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Uint64)>>('EVP_PKEY_CTX_ctrl_uint64');
  late final _EVP_PKEY_CTX_ctrl_uint64 =
      _EVP_PKEY_CTX_ctrl_uint64Ptr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, int, int, int, int)>();

  int EVP_PKEY_CTX_str2ctrl(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int cmd,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _EVP_PKEY_CTX_str2ctrl(
      ctx,
      cmd,
      str,
    );
  }

  late final _EVP_PKEY_CTX_str2ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_CTX_str2ctrl');
  late final _EVP_PKEY_CTX_str2ctrl = _EVP_PKEY_CTX_str2ctrlPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, int, ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_CTX_hex2ctrl(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int cmd,
    ffi.Pointer<ffi.Char> hex,
  ) {
    return _EVP_PKEY_CTX_hex2ctrl(
      ctx,
      cmd,
      hex,
    );
  }

  late final _EVP_PKEY_CTX_hex2ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_CTX_hex2ctrl');
  late final _EVP_PKEY_CTX_hex2ctrl = _EVP_PKEY_CTX_hex2ctrlPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, int, ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_CTX_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int optype,
    int cmd,
    ffi.Pointer<ffi.Char> md,
  ) {
    return _EVP_PKEY_CTX_md(
      ctx,
      optype,
      cmd,
      md,
    );
  }

  late final _EVP_PKEY_CTX_mdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('EVP_PKEY_CTX_md');
  late final _EVP_PKEY_CTX_md = _EVP_PKEY_CTX_mdPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY_CTX>, int, int, ffi.Pointer<ffi.Char>)>();

  int EVP_PKEY_CTX_get_operation(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get_operation(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get_operationPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_CTX_get_operation');
  late final _EVP_PKEY_CTX_get_operation = _EVP_PKEY_CTX_get_operationPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  void EVP_PKEY_CTX_set0_keygen_info(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Int> dat,
    int datlen,
  ) {
    return _EVP_PKEY_CTX_set0_keygen_info(
      ctx,
      dat,
      datlen,
    );
  }

  late final _EVP_PKEY_CTX_set0_keygen_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('EVP_PKEY_CTX_set0_keygen_info');
  late final _EVP_PKEY_CTX_set0_keygen_info =
      _EVP_PKEY_CTX_set0_keygen_infoPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Int>, int)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new_mac_key(
    int type,
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<ffi.UnsignedChar> key,
    int keylen,
  ) {
    return _EVP_PKEY_new_mac_key(
      type,
      e,
      key,
      keylen,
    );
  }

  late final _EVP_PKEY_new_mac_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(ffi.Int, ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('EVP_PKEY_new_mac_key');
  late final _EVP_PKEY_new_mac_key = _EVP_PKEY_new_mac_keyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          int, ffi.Pointer<ENGINE>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new_raw_private_key(
    int type,
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<ffi.UnsignedChar> priv,
    int len,
  ) {
    return _EVP_PKEY_new_raw_private_key(
      type,
      e,
      priv,
      len,
    );
  }

  late final _EVP_PKEY_new_raw_private_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Int,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_new_raw_private_key');
  late final _EVP_PKEY_new_raw_private_key =
      _EVP_PKEY_new_raw_private_keyPtr.asFunction<
          ffi.Pointer<EVP_PKEY> Function(
              int, ffi.Pointer<ENGINE>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new_raw_public_key(
    int type,
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<ffi.UnsignedChar> pub,
    int len,
  ) {
    return _EVP_PKEY_new_raw_public_key(
      type,
      e,
      pub,
      len,
    );
  }

  late final _EVP_PKEY_new_raw_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Int,
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_new_raw_public_key');
  late final _EVP_PKEY_new_raw_public_key =
      _EVP_PKEY_new_raw_public_keyPtr.asFunction<
          ffi.Pointer<EVP_PKEY> Function(
              int, ffi.Pointer<ENGINE>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_get_raw_private_key(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.UnsignedChar> priv,
    ffi.Pointer<ffi.Int> len,
  ) {
    return _EVP_PKEY_get_raw_private_key(
      pkey,
      priv,
      len,
    );
  }

  late final _EVP_PKEY_get_raw_private_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_PKEY_get_raw_private_key');
  late final _EVP_PKEY_get_raw_private_key =
      _EVP_PKEY_get_raw_private_keyPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>();

  int EVP_PKEY_get_raw_public_key(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ffi.UnsignedChar> pub,
    ffi.Pointer<ffi.Int> len,
  ) {
    return _EVP_PKEY_get_raw_public_key(
      pkey,
      pub,
      len,
    );
  }

  late final _EVP_PKEY_get_raw_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_PKEY_get_raw_public_key');
  late final _EVP_PKEY_get_raw_public_key =
      _EVP_PKEY_get_raw_public_keyPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_new_CMAC_key(
    ffi.Pointer<ENGINE> e,
    ffi.Pointer<ffi.UnsignedChar> priv,
    int len,
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _EVP_PKEY_new_CMAC_key(
      e,
      priv,
      len,
      cipher,
    );
  }

  late final _EVP_PKEY_new_CMAC_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<ENGINE>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<EVP_CIPHER>)>>('EVP_PKEY_new_CMAC_key');
  late final _EVP_PKEY_new_CMAC_key = _EVP_PKEY_new_CMAC_keyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<ENGINE>,
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<EVP_CIPHER>)>();

  void EVP_PKEY_CTX_set_data(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_PKEY_CTX_set_data(
      ctx,
      data,
    );
  }

  late final _EVP_PKEY_CTX_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Void>)>>('EVP_PKEY_CTX_set_data');
  late final _EVP_PKEY_CTX_set_data = _EVP_PKEY_CTX_set_dataPtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> EVP_PKEY_CTX_get_data(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get_data(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get_data');
  late final _EVP_PKEY_CTX_get_data = _EVP_PKEY_CTX_get_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_CTX_get0_pkey(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get0_pkey(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get0_pkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get0_pkey');
  late final _EVP_PKEY_CTX_get0_pkey = _EVP_PKEY_CTX_get0_pkeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  ffi.Pointer<EVP_PKEY> EVP_PKEY_CTX_get0_peerkey(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get0_peerkey(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get0_peerkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get0_peerkey');
  late final _EVP_PKEY_CTX_get0_peerkey = _EVP_PKEY_CTX_get0_peerkeyPtr
      .asFunction<ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  void EVP_PKEY_CTX_set_app_data(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _EVP_PKEY_CTX_set_app_data(
      ctx,
      data,
    );
  }

  late final _EVP_PKEY_CTX_set_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Void>)>>('EVP_PKEY_CTX_set_app_data');
  late final _EVP_PKEY_CTX_set_app_data =
      _EVP_PKEY_CTX_set_app_dataPtr.asFunction<
          void Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> EVP_PKEY_CTX_get_app_data(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get_app_data(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get_app_data');
  late final _EVP_PKEY_CTX_get_app_data = _EVP_PKEY_CTX_get_app_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_sign_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_sign_init(
      ctx,
    );
  }

  late final _EVP_PKEY_sign_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_sign_init');
  late final _EVP_PKEY_sign_init = _EVP_PKEY_sign_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_sign(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.Int> siglen,
    ffi.Pointer<ffi.UnsignedChar> tbs,
    int tbslen,
  ) {
    return _EVP_PKEY_sign(
      ctx,
      sig,
      siglen,
      tbs,
      tbslen,
    );
  }

  late final _EVP_PKEY_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_sign');
  late final _EVP_PKEY_sign = _EVP_PKEY_signPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_verify_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_verify_init(
      ctx,
    );
  }

  late final _EVP_PKEY_verify_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_verify_init');
  late final _EVP_PKEY_verify_init = _EVP_PKEY_verify_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_verify(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sig,
    int siglen,
    ffi.Pointer<ffi.UnsignedChar> tbs,
    int tbslen,
  ) {
    return _EVP_PKEY_verify(
      ctx,
      sig,
      siglen,
      tbs,
      tbslen,
    );
  }

  late final _EVP_PKEY_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_verify');
  late final _EVP_PKEY_verify = _EVP_PKEY_verifyPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          int, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_verify_recover_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_verify_recover_init(
      ctx,
    );
  }

  late final _EVP_PKEY_verify_recover_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_verify_recover_init');
  late final _EVP_PKEY_verify_recover_init = _EVP_PKEY_verify_recover_initPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_verify_recover(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> rout,
    ffi.Pointer<ffi.Int> routlen,
    ffi.Pointer<ffi.UnsignedChar> sig,
    int siglen,
  ) {
    return _EVP_PKEY_verify_recover(
      ctx,
      rout,
      routlen,
      sig,
      siglen,
    );
  }

  late final _EVP_PKEY_verify_recoverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_verify_recover');
  late final _EVP_PKEY_verify_recover = _EVP_PKEY_verify_recoverPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_encrypt_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_encrypt_init(
      ctx,
    );
  }

  late final _EVP_PKEY_encrypt_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_encrypt_init');
  late final _EVP_PKEY_encrypt_init = _EVP_PKEY_encrypt_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_encrypt(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outlen,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inlen,
  ) {
    return _EVP_PKEY_encrypt(
      ctx,
      out,
      outlen,
      in1,
      inlen,
    );
  }

  late final _EVP_PKEY_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_encrypt');
  late final _EVP_PKEY_encrypt = _EVP_PKEY_encryptPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_decrypt_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_decrypt_init(
      ctx,
    );
  }

  late final _EVP_PKEY_decrypt_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_decrypt_init');
  late final _EVP_PKEY_decrypt_init = _EVP_PKEY_decrypt_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_decrypt(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outlen,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int inlen,
  ) {
    return _EVP_PKEY_decrypt(
      ctx,
      out,
      outlen,
      in1,
      inlen,
    );
  }

  late final _EVP_PKEY_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_decrypt');
  late final _EVP_PKEY_decrypt = _EVP_PKEY_decryptPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_derive_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_derive_init(
      ctx,
    );
  }

  late final _EVP_PKEY_derive_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_derive_init');
  late final _EVP_PKEY_derive_init = _EVP_PKEY_derive_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_derive_set_peer(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_PKEY> peer,
  ) {
    return _EVP_PKEY_derive_set_peer(
      ctx,
      peer,
    );
  }

  late final _EVP_PKEY_derive_set_peerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY_derive_set_peer');
  late final _EVP_PKEY_derive_set_peer =
      _EVP_PKEY_derive_set_peerPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_derive(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<ffi.Int> keylen,
  ) {
    return _EVP_PKEY_derive(
      ctx,
      key,
      keylen,
    );
  }

  late final _EVP_PKEY_derivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('EVP_PKEY_derive');
  late final _EVP_PKEY_derive = _EVP_PKEY_derivePtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Int>)>();

  int EVP_PKEY_paramgen_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_paramgen_init(
      ctx,
    );
  }

  late final _EVP_PKEY_paramgen_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_paramgen_init');
  late final _EVP_PKEY_paramgen_init = _EVP_PKEY_paramgen_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_paramgen(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> ppkey,
  ) {
    return _EVP_PKEY_paramgen(
      ctx,
      ppkey,
    );
  }

  late final _EVP_PKEY_paramgenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>>('EVP_PKEY_paramgen');
  late final _EVP_PKEY_paramgen = _EVP_PKEY_paramgenPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>();

  int EVP_PKEY_keygen_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_keygen_init(
      ctx,
    );
  }

  late final _EVP_PKEY_keygen_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_keygen_init');
  late final _EVP_PKEY_keygen_init = _EVP_PKEY_keygen_initPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_keygen(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> ppkey,
  ) {
    return _EVP_PKEY_keygen(
      ctx,
      ppkey,
    );
  }

  late final _EVP_PKEY_keygenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>>('EVP_PKEY_keygen');
  late final _EVP_PKEY_keygen = _EVP_PKEY_keygenPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>();

  int EVP_PKEY_check(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_check(
      ctx,
    );
  }

  late final _EVP_PKEY_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_check');
  late final _EVP_PKEY_check =
      _EVP_PKEY_checkPtr.asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_public_check(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_public_check(
      ctx,
    );
  }

  late final _EVP_PKEY_public_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_public_check');
  late final _EVP_PKEY_public_check = _EVP_PKEY_public_checkPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_param_check(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_param_check(
      ctx,
    );
  }

  late final _EVP_PKEY_param_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>(
          'EVP_PKEY_param_check');
  late final _EVP_PKEY_param_check = _EVP_PKEY_param_checkPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  void EVP_PKEY_CTX_set_cb(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_PKEY_gen_cb> cb,
  ) {
    return _EVP_PKEY_CTX_set_cb(
      ctx,
      cb,
    );
  }

  late final _EVP_PKEY_CTX_set_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Pointer<EVP_PKEY_gen_cb>)>>('EVP_PKEY_CTX_set_cb');
  late final _EVP_PKEY_CTX_set_cb = _EVP_PKEY_CTX_set_cbPtr.asFunction<
      void Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY_gen_cb>)>();

  ffi.Pointer<EVP_PKEY_gen_cb> EVP_PKEY_CTX_get_cb(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return _EVP_PKEY_CTX_get_cb(
      ctx,
    );
  }

  late final _EVP_PKEY_CTX_get_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY_gen_cb> Function(
              ffi.Pointer<EVP_PKEY_CTX>)>>('EVP_PKEY_CTX_get_cb');
  late final _EVP_PKEY_CTX_get_cb = _EVP_PKEY_CTX_get_cbPtr.asFunction<
      ffi.Pointer<EVP_PKEY_gen_cb> Function(ffi.Pointer<EVP_PKEY_CTX>)>();

  int EVP_PKEY_CTX_get_keygen_info(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int idx,
  ) {
    return _EVP_PKEY_CTX_get_keygen_info(
      ctx,
      idx,
    );
  }

  late final _EVP_PKEY_CTX_get_keygen_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
              ffi.Int)>>('EVP_PKEY_CTX_get_keygen_info');
  late final _EVP_PKEY_CTX_get_keygen_info = _EVP_PKEY_CTX_get_keygen_infoPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY_CTX>, int)>();

  void EVP_PKEY_meth_set_init(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>
        init,
  ) {
    return _EVP_PKEY_meth_set_init(
      pmeth,
      init,
    );
  }

  late final _EVP_PKEY_meth_set_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>)>>(
      'EVP_PKEY_meth_set_init');
  late final _EVP_PKEY_meth_set_init = _EVP_PKEY_meth_set_initPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>)>();

  void EVP_PKEY_meth_set_copy(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY_CTX>)>>
        copy,
  ) {
    return _EVP_PKEY_meth_set_copy(
      pmeth,
      copy,
    );
  }

  late final _EVP_PKEY_meth_set_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<EVP_PKEY_CTX>)>>)>>(
      'EVP_PKEY_meth_set_copy');
  late final _EVP_PKEY_meth_set_copy = _EVP_PKEY_meth_set_copyPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                      ffi.Pointer<EVP_PKEY_CTX>)>>)>();

  void EVP_PKEY_meth_set_cleanup(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>)>>
        cleanup,
  ) {
    return _EVP_PKEY_meth_set_cleanup(
      pmeth,
      cleanup,
    );
  }

  late final _EVP_PKEY_meth_set_cleanupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>)>>)>>(
      'EVP_PKEY_meth_set_cleanup');
  late final _EVP_PKEY_meth_set_cleanup =
      _EVP_PKEY_meth_set_cleanupPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>)>>)>();

  void EVP_PKEY_meth_set_paramgen(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>
        paramgen_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY>)>>
        paramgen,
  ) {
    return _EVP_PKEY_meth_set_paramgen(
      pmeth,
      paramgen_init,
      paramgen,
    );
  }

  late final _EVP_PKEY_meth_set_paramgenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<EVP_PKEY>)>>)>>(
      'EVP_PKEY_meth_set_paramgen');
  late final _EVP_PKEY_meth_set_paramgen =
      _EVP_PKEY_meth_set_paramgenPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<EVP_PKEY>)>>)>();

  void EVP_PKEY_meth_set_keygen(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>
        keygen_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY>)>>
        keygen,
  ) {
    return _EVP_PKEY_meth_set_keygen(
      pmeth,
      keygen_init,
      keygen,
    );
  }

  late final _EVP_PKEY_meth_set_keygenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<EVP_PKEY>)>>)>>(
      'EVP_PKEY_meth_set_keygen');
  late final _EVP_PKEY_meth_set_keygen =
      _EVP_PKEY_meth_set_keygenPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<EVP_PKEY>)>>)>();

  void EVP_PKEY_meth_set_sign(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>
        sign_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Pointer<ffi.Int>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Int)>>
        sign,
  ) {
    return _EVP_PKEY_meth_set_sign(
      pmeth,
      sign_init,
      sign,
    );
  }

  late final _EVP_PKEY_meth_set_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.Int>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>>('EVP_PKEY_meth_set_sign');
  late final _EVP_PKEY_meth_set_sign = _EVP_PKEY_meth_set_signPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EVP_PKEY_CTX>,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<ffi.Int>,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Int)>>)>();

  void EVP_PKEY_meth_set_verify(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>
        verify_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Int,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Int)>>
        verify,
  ) {
    return _EVP_PKEY_meth_set_verify(
      pmeth,
      verify_init,
      verify,
    );
  }

  late final _EVP_PKEY_meth_set_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>>('EVP_PKEY_meth_set_verify');
  late final _EVP_PKEY_meth_set_verify =
      _EVP_PKEY_meth_set_verifyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>();

  void EVP_PKEY_meth_set_verify_recover(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>
        verify_recover_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Pointer<ffi.Int>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Int)>>
        verify_recover,
  ) {
    return _EVP_PKEY_meth_set_verify_recover(
      pmeth,
      verify_recover_init,
      verify_recover,
    );
  }

  late final _EVP_PKEY_meth_set_verify_recoverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.Int>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>>('EVP_PKEY_meth_set_verify_recover');
  late final _EVP_PKEY_meth_set_verify_recover =
      _EVP_PKEY_meth_set_verify_recoverPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.Int>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>();

  void EVP_PKEY_meth_set_signctx(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD_CTX>)>>
        signctx_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Pointer<ffi.Int>,
                    ffi.Pointer<EVP_MD_CTX>)>>
        signctx,
  ) {
    return _EVP_PKEY_meth_set_signctx(
      pmeth,
      signctx_init,
      signctx,
    );
  }

  late final _EVP_PKEY_meth_set_signctxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<EVP_MD_CTX>)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Pointer<ffi.Int>,
                              ffi.Pointer<EVP_MD_CTX>)>>)>>(
      'EVP_PKEY_meth_set_signctx');
  late final _EVP_PKEY_meth_set_signctx =
      _EVP_PKEY_meth_set_signctxPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD_CTX>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.Int>,
                          ffi.Pointer<EVP_MD_CTX>)>>)>();

  void EVP_PKEY_meth_set_verifyctx(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD_CTX>)>>
        verifyctx_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Int,
                    ffi.Pointer<EVP_MD_CTX>)>>
        verifyctx,
  ) {
    return _EVP_PKEY_meth_set_verifyctx(
      pmeth,
      verifyctx_init,
      verifyctx,
    );
  }

  late final _EVP_PKEY_meth_set_verifyctxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<EVP_MD_CTX>)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int,
                              ffi.Pointer<EVP_MD_CTX>)>>)>>(
      'EVP_PKEY_meth_set_verifyctx');
  late final _EVP_PKEY_meth_set_verifyctx =
      _EVP_PKEY_meth_set_verifyctxPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD_CTX>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<EVP_MD_CTX>)>>)>();

  void EVP_PKEY_meth_set_encrypt(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>
        encrypt_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Pointer<ffi.Int>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Int)>>
        encryptfn,
  ) {
    return _EVP_PKEY_meth_set_encrypt(
      pmeth,
      encrypt_init,
      encryptfn,
    );
  }

  late final _EVP_PKEY_meth_set_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.Int>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>>('EVP_PKEY_meth_set_encrypt');
  late final _EVP_PKEY_meth_set_encrypt =
      _EVP_PKEY_meth_set_encryptPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.Int>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>();

  void EVP_PKEY_meth_set_decrypt(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>
        decrypt_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Pointer<ffi.Int>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Int)>>
        decrypt,
  ) {
    return _EVP_PKEY_meth_set_decrypt(
      pmeth,
      decrypt_init,
      decrypt,
    );
  }

  late final _EVP_PKEY_meth_set_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.Int>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>>('EVP_PKEY_meth_set_decrypt');
  late final _EVP_PKEY_meth_set_decrypt =
      _EVP_PKEY_meth_set_decryptPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.Int>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>();

  void EVP_PKEY_meth_set_derive(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>
        derive_init,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                    ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>>
        derive,
  ) {
    return _EVP_PKEY_meth_set_derive(
      pmeth,
      derive_init,
      derive,
    );
  }

  late final _EVP_PKEY_meth_set_derivePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Pointer<ffi.Int>)>>)>>(
      'EVP_PKEY_meth_set_derive');
  late final _EVP_PKEY_meth_set_derive =
      _EVP_PKEY_meth_set_derivePtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.Int>)>>)>();

  void EVP_PKEY_meth_set_ctrl(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int, ffi.Int,
                    ffi.Pointer<ffi.Void>)>>
        ctrl,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                    ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
        ctrl_str,
  ) {
    return _EVP_PKEY_meth_set_ctrl(
      pmeth,
      ctrl,
      ctrl_str,
    );
  }

  late final _EVP_PKEY_meth_set_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int,
                          ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Char>)>>)>>('EVP_PKEY_meth_set_ctrl');
  late final _EVP_PKEY_meth_set_ctrl = _EVP_PKEY_meth_set_ctrlPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int, ffi.Int,
                      ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                      ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>)>();

  void EVP_PKEY_meth_set_digestsign(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Pointer<ffi.Int>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Int)>>
        digestsign,
  ) {
    return _EVP_PKEY_meth_set_digestsign(
      pmeth,
      digestsign,
    );
  }

  late final _EVP_PKEY_meth_set_digestsignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.Int>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>>('EVP_PKEY_meth_set_digestsign');
  late final _EVP_PKEY_meth_set_digestsign =
      _EVP_PKEY_meth_set_digestsignPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.Int>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>();

  void EVP_PKEY_meth_set_digestverify(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_MD_CTX>,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Int,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Int)>>
        digestverify,
  ) {
    return _EVP_PKEY_meth_set_digestverify(
      pmeth,
      digestverify,
    );
  }

  late final _EVP_PKEY_meth_set_digestverifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>>('EVP_PKEY_meth_set_digestverify');
  late final _EVP_PKEY_meth_set_digestverify =
      _EVP_PKEY_meth_set_digestverifyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_MD_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>)>();

  void EVP_PKEY_meth_set_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>
        check,
  ) {
    return _EVP_PKEY_meth_set_check(
      pmeth,
      check,
    );
  }

  late final _EVP_PKEY_meth_set_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>)>>(
      'EVP_PKEY_meth_set_check');
  late final _EVP_PKEY_meth_set_check = _EVP_PKEY_meth_set_checkPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>)>();

  void EVP_PKEY_meth_set_public_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>
        check,
  ) {
    return _EVP_PKEY_meth_set_public_check(
      pmeth,
      check,
    );
  }

  late final _EVP_PKEY_meth_set_public_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>)>>(
      'EVP_PKEY_meth_set_public_check');
  late final _EVP_PKEY_meth_set_public_check =
      _EVP_PKEY_meth_set_public_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>)>();

  void EVP_PKEY_meth_set_param_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>
        check,
  ) {
    return _EVP_PKEY_meth_set_param_check(
      pmeth,
      check,
    );
  }

  late final _EVP_PKEY_meth_set_param_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>)>>(
      'EVP_PKEY_meth_set_param_check');
  late final _EVP_PKEY_meth_set_param_check =
      _EVP_PKEY_meth_set_param_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>)>();

  void EVP_PKEY_meth_set_digest_custom(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD_CTX>)>>
        digest_custom,
  ) {
    return _EVP_PKEY_meth_set_digest_custom(
      pmeth,
      digest_custom,
    );
  }

  late final _EVP_PKEY_meth_set_digest_customPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<EVP_MD_CTX>)>>)>>(
      'EVP_PKEY_meth_set_digest_custom');
  late final _EVP_PKEY_meth_set_digest_custom =
      _EVP_PKEY_meth_set_digest_customPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<EVP_MD_CTX>)>>)>();

  void EVP_PKEY_meth_get_init(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>
        pinit,
  ) {
    return _EVP_PKEY_meth_get_init(
      pmeth,
      pinit,
    );
  }

  late final _EVP_PKEY_meth_get_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>)>>(
      'EVP_PKEY_meth_get_init');
  late final _EVP_PKEY_meth_get_init = _EVP_PKEY_meth_get_initPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>)>();

  void EVP_PKEY_meth_get_copy(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY_CTX>)>>>
        pcopy,
  ) {
    return _EVP_PKEY_meth_get_copy(
      pmeth,
      pcopy,
    );
  }

  late final _EVP_PKEY_meth_get_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                                  ffi.Pointer<EVP_PKEY_CTX>)>>>)>>(
      'EVP_PKEY_meth_get_copy');
  late final _EVP_PKEY_meth_get_copy = _EVP_PKEY_meth_get_copyPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<EVP_PKEY_CTX>)>>>)>();

  void EVP_PKEY_meth_get_cleanup(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>)>>>
        pcleanup,
  ) {
    return _EVP_PKEY_meth_get_cleanup(
      pmeth,
      pcleanup,
    );
  }

  late final _EVP_PKEY_meth_get_cleanupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(
                                  ffi.Pointer<EVP_PKEY_CTX>)>>>)>>(
      'EVP_PKEY_meth_get_cleanup');
  late final _EVP_PKEY_meth_get_cleanup =
      _EVP_PKEY_meth_get_cleanupPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<EVP_PKEY_CTX>)>>>)>();

  void EVP_PKEY_meth_get_paramgen(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>
        pparamgen_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY>)>>>
        pparamgen,
  ) {
    return _EVP_PKEY_meth_get_paramgen(
      pmeth,
      pparamgen_init,
      pparamgen,
    );
  }

  late final _EVP_PKEY_meth_get_paramgenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                                  ffi.Pointer<EVP_PKEY>)>>>)>>(
      'EVP_PKEY_meth_get_paramgen');
  late final _EVP_PKEY_meth_get_paramgen =
      _EVP_PKEY_meth_get_paramgenPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<EVP_PKEY>)>>>)>();

  void EVP_PKEY_meth_get_keygen(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>
        pkeygen_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_PKEY>)>>>
        pkeygen,
  ) {
    return _EVP_PKEY_meth_get_keygen(
      pmeth,
      pkeygen_init,
      pkeygen,
    );
  }

  late final _EVP_PKEY_meth_get_keygenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                                  ffi.Pointer<EVP_PKEY>)>>>)>>(
      'EVP_PKEY_meth_get_keygen');
  late final _EVP_PKEY_meth_get_keygen =
      _EVP_PKEY_meth_get_keygenPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<EVP_PKEY>)>>>)>();

  void EVP_PKEY_meth_get_sign(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>
        psign_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX>,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Pointer<ffi.Int>,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Int)>>>
        psign,
  ) {
    return _EVP_PKEY_meth_get_sign(
      pmeth,
      psign_init,
      psign,
    );
  }

  late final _EVP_PKEY_meth_get_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Pointer<ffi.Int>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int)>>>)>>('EVP_PKEY_meth_get_sign');
  late final _EVP_PKEY_meth_get_sign = _EVP_PKEY_meth_get_signPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.Int>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int)>>>)>();

  void EVP_PKEY_meth_get_verify(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>
        pverify_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX>,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Int,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Int)>>>
        pverify,
  ) {
    return _EVP_PKEY_meth_get_verify(
      pmeth,
      pverify_init,
      pverify,
    );
  }

  late final _EVP_PKEY_meth_get_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int)>>>)>>('EVP_PKEY_meth_get_verify');
  late final _EVP_PKEY_meth_get_verify =
      _EVP_PKEY_meth_get_verifyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int)>>>)>();

  void EVP_PKEY_meth_get_verify_recover(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>
        pverify_recover_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX>,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Pointer<ffi.Int>,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Int)>>>
        pverify_recover,
  ) {
    return _EVP_PKEY_meth_get_verify_recover(
      pmeth,
      pverify_recover_init,
      pverify_recover,
    );
  }

  late final _EVP_PKEY_meth_get_verify_recoverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY_CTX>,
                                  ffi.Pointer<ffi.UnsignedChar>,
                                  ffi.Pointer<ffi.Int>,
                                  ffi.Pointer<ffi.UnsignedChar>,
                                  ffi.Int)>>>)>>(
      'EVP_PKEY_meth_get_verify_recover');
  late final _EVP_PKEY_meth_get_verify_recover =
      _EVP_PKEY_meth_get_verify_recoverPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Pointer<ffi.Int>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int)>>>)>();

  void EVP_PKEY_meth_get_signctx(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD_CTX>)>>>
        psignctx_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX>,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Pointer<ffi.Int>,
                        ffi.Pointer<EVP_MD_CTX>)>>>
        psignctx,
  ) {
    return _EVP_PKEY_meth_get_signctx(
      pmeth,
      psignctx_init,
      psignctx,
    );
  }

  late final _EVP_PKEY_meth_get_signctxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                                  ffi.Pointer<EVP_MD_CTX>)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY_CTX>,
                                  ffi.Pointer<ffi.UnsignedChar>,
                                  ffi.Pointer<ffi.Int>,
                                  ffi.Pointer<EVP_MD_CTX>)>>>)>>(
      'EVP_PKEY_meth_get_signctx');
  late final _EVP_PKEY_meth_get_signctx =
      _EVP_PKEY_meth_get_signctxPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<EVP_MD_CTX>)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Pointer<ffi.Int>,
                              ffi.Pointer<EVP_MD_CTX>)>>>)>();

  void EVP_PKEY_meth_get_verifyctx(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD_CTX>)>>>
        pverifyctx_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX>,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Int,
                        ffi.Pointer<EVP_MD_CTX>)>>>
        pverifyctx,
  ) {
    return _EVP_PKEY_meth_get_verifyctx(
      pmeth,
      pverifyctx_init,
      pverifyctx,
    );
  }

  late final _EVP_PKEY_meth_get_verifyctxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                                  ffi.Pointer<EVP_MD_CTX>)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY_CTX>,
                                  ffi.Pointer<ffi.UnsignedChar>,
                                  ffi.Int,
                                  ffi.Pointer<EVP_MD_CTX>)>>>)>>(
      'EVP_PKEY_meth_get_verifyctx');
  late final _EVP_PKEY_meth_get_verifyctx =
      _EVP_PKEY_meth_get_verifyctxPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<EVP_MD_CTX>)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int,
                              ffi.Pointer<EVP_MD_CTX>)>>>)>();

  void EVP_PKEY_meth_get_encrypt(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>
        pencrypt_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX>,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Pointer<ffi.Int>,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Int)>>>
        pencryptfn,
  ) {
    return _EVP_PKEY_meth_get_encrypt(
      pmeth,
      pencrypt_init,
      pencryptfn,
    );
  }

  late final _EVP_PKEY_meth_get_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Pointer<ffi.Int>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int)>>>)>>('EVP_PKEY_meth_get_encrypt');
  late final _EVP_PKEY_meth_get_encrypt =
      _EVP_PKEY_meth_get_encryptPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Pointer<ffi.Int>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int)>>>)>();

  void EVP_PKEY_meth_get_decrypt(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>
        pdecrypt_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX>,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Pointer<ffi.Int>,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Int)>>>
        pdecrypt,
  ) {
    return _EVP_PKEY_meth_get_decrypt(
      pmeth,
      pdecrypt_init,
      pdecrypt,
    );
  }

  late final _EVP_PKEY_meth_get_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Pointer<ffi.Int>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int)>>>)>>('EVP_PKEY_meth_get_decrypt');
  late final _EVP_PKEY_meth_get_decrypt =
      _EVP_PKEY_meth_get_decryptPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Pointer<ffi.Int>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int)>>>)>();

  void EVP_PKEY_meth_get_derive(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>
        pderive_init,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                        ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>>>
        pderive,
  ) {
    return _EVP_PKEY_meth_get_derive(
      pmeth,
      pderive_init,
      pderive,
    );
  }

  late final _EVP_PKEY_meth_get_derivePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EVP_PKEY_CTX>,
                                  ffi.Pointer<ffi.UnsignedChar>,
                                  ffi.Pointer<ffi.Int>)>>>)>>(
      'EVP_PKEY_meth_get_derive');
  late final _EVP_PKEY_meth_get_derive =
      _EVP_PKEY_meth_get_derivePtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Pointer<ffi.Int>)>>>)>();

  void EVP_PKEY_meth_get_ctrl(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int,
                        ffi.Int, ffi.Pointer<ffi.Void>)>>>
        pctrl,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>>
        pctrl_str,
  ) {
    return _EVP_PKEY_meth_get_ctrl(
      pmeth,
      pctrl,
      pctrl_str,
    );
  }

  late final _EVP_PKEY_meth_get_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int,
                              ffi.Int, ffi.Pointer<ffi.Void>)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<ffi.Char>,
                              ffi.Pointer<
                                  ffi.Char>)>>>)>>('EVP_PKEY_meth_get_ctrl');
  late final _EVP_PKEY_meth_get_ctrl = _EVP_PKEY_meth_get_ctrlPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int,
                          ffi.Int, ffi.Pointer<ffi.Void>)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>>)>();

  void EVP_PKEY_meth_get_digestsign(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_MD_CTX>,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Pointer<ffi.Int>,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Int)>>>
        digestsign,
  ) {
    return _EVP_PKEY_meth_get_digestsign(
      pmeth,
      digestsign,
    );
  }

  late final _EVP_PKEY_meth_get_digestsignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Pointer<ffi.Int>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int)>>>)>>('EVP_PKEY_meth_get_digestsign');
  late final _EVP_PKEY_meth_get_digestsign =
      _EVP_PKEY_meth_get_digestsignPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Pointer<ffi.Int>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int)>>>)>();

  void EVP_PKEY_meth_get_digestverify(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_MD_CTX>,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Int,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Int)>>>
        digestverify,
  ) {
    return _EVP_PKEY_meth_get_digestverify(
      pmeth,
      digestverify,
    );
  }

  late final _EVP_PKEY_meth_get_digestverifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int)>>>)>>('EVP_PKEY_meth_get_digestverify');
  late final _EVP_PKEY_meth_get_digestverify =
      _EVP_PKEY_meth_get_digestverifyPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<EVP_MD_CTX>,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int)>>>)>();

  void EVP_PKEY_meth_get_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>>
        pcheck,
  ) {
    return _EVP_PKEY_meth_get_check(
      pmeth,
      pcheck,
    );
  }

  late final _EVP_PKEY_meth_get_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>>)>>(
      'EVP_PKEY_meth_get_check');
  late final _EVP_PKEY_meth_get_check = _EVP_PKEY_meth_get_checkPtr.asFunction<
      void Function(
          ffi.Pointer<EVP_PKEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>>)>();

  void EVP_PKEY_meth_get_public_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>>
        pcheck,
  ) {
    return _EVP_PKEY_meth_get_public_check(
      pmeth,
      pcheck,
    );
  }

  late final _EVP_PKEY_meth_get_public_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>>)>>(
      'EVP_PKEY_meth_get_public_check');
  late final _EVP_PKEY_meth_get_public_check =
      _EVP_PKEY_meth_get_public_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>>)>();

  void EVP_PKEY_meth_get_param_check(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>>
        pcheck,
  ) {
    return _EVP_PKEY_meth_get_param_check(
      pmeth,
      pcheck,
    );
  }

  late final _EVP_PKEY_meth_get_param_checkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>>)>>(
      'EVP_PKEY_meth_get_param_check');
  late final _EVP_PKEY_meth_get_param_check =
      _EVP_PKEY_meth_get_param_checkPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>>)>();

  void EVP_PKEY_meth_get_digest_custom(
    ffi.Pointer<EVP_PKEY_METHOD> pmeth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EVP_PKEY_CTX>, ffi.Pointer<EVP_MD_CTX>)>>>
        pdigest_custom,
  ) {
    return _EVP_PKEY_meth_get_digest_custom(
      pmeth,
      pdigest_custom,
    );
  }

  late final _EVP_PKEY_meth_get_digest_customPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EVP_PKEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                                  ffi.Pointer<EVP_MD_CTX>)>>>)>>(
      'EVP_PKEY_meth_get_digest_custom');
  late final _EVP_PKEY_meth_get_digest_custom =
      _EVP_PKEY_meth_get_digest_customPtr.asFunction<
          void Function(
              ffi.Pointer<EVP_PKEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>,
                              ffi.Pointer<EVP_MD_CTX>)>>>)>();

  void EVP_add_alg_module() {
    return _EVP_add_alg_module();
  }

  late final _EVP_add_alg_modulePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EVP_add_alg_module');
  late final _EVP_add_alg_module =
      _EVP_add_alg_modulePtr.asFunction<void Function()>();

  int HMAC_size(
    ffi.Pointer<HMAC_CTX> e,
  ) {
    return _HMAC_size(
      e,
    );
  }

  late final _HMAC_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<HMAC_CTX>)>>(
          'HMAC_size');
  late final _HMAC_size =
      _HMAC_sizePtr.asFunction<int Function(ffi.Pointer<HMAC_CTX>)>();

  ffi.Pointer<HMAC_CTX> HMAC_CTX_new() {
    return _HMAC_CTX_new();
  }

  late final _HMAC_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<HMAC_CTX> Function()>>(
          'HMAC_CTX_new');
  late final _HMAC_CTX_new =
      _HMAC_CTX_newPtr.asFunction<ffi.Pointer<HMAC_CTX> Function()>();

  int HMAC_CTX_reset(
    ffi.Pointer<HMAC_CTX> ctx,
  ) {
    return _HMAC_CTX_reset(
      ctx,
    );
  }

  late final _HMAC_CTX_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<HMAC_CTX>)>>(
          'HMAC_CTX_reset');
  late final _HMAC_CTX_reset =
      _HMAC_CTX_resetPtr.asFunction<int Function(ffi.Pointer<HMAC_CTX>)>();

  void HMAC_CTX_free(
    ffi.Pointer<HMAC_CTX> ctx,
  ) {
    return _HMAC_CTX_free(
      ctx,
    );
  }

  late final _HMAC_CTX_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<HMAC_CTX>)>>(
          'HMAC_CTX_free');
  late final _HMAC_CTX_free =
      _HMAC_CTX_freePtr.asFunction<void Function(ffi.Pointer<HMAC_CTX>)>();

  int HMAC_Init(
    ffi.Pointer<HMAC_CTX> ctx,
    ffi.Pointer<ffi.Void> key,
    int len,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _HMAC_Init(
      ctx,
      key,
      len,
      md,
    );
  }

  late final _HMAC_InitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<HMAC_CTX>, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Pointer<EVP_MD>)>>('HMAC_Init');
  late final _HMAC_Init = _HMAC_InitPtr.asFunction<
      int Function(ffi.Pointer<HMAC_CTX>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<EVP_MD>)>();

  int HMAC_Init_ex(
    ffi.Pointer<HMAC_CTX> ctx,
    ffi.Pointer<ffi.Void> key,
    int len,
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<ENGINE> impl,
  ) {
    return _HMAC_Init_ex(
      ctx,
      key,
      len,
      md,
      impl,
    );
  }

  late final _HMAC_Init_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<HMAC_CTX>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ENGINE>)>>('HMAC_Init_ex');
  late final _HMAC_Init_ex = _HMAC_Init_exPtr.asFunction<
      int Function(ffi.Pointer<HMAC_CTX>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<EVP_MD>, ffi.Pointer<ENGINE>)>();

  int HMAC_Update(
    ffi.Pointer<HMAC_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
  ) {
    return _HMAC_Update(
      ctx,
      data,
      len,
    );
  }

  late final _HMAC_UpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<HMAC_CTX>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('HMAC_Update');
  late final _HMAC_Update = _HMAC_UpdatePtr.asFunction<
      int Function(
          ffi.Pointer<HMAC_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int HMAC_Final(
    ffi.Pointer<HMAC_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> len,
  ) {
    return _HMAC_Final(
      ctx,
      md,
      len,
    );
  }

  late final _HMAC_FinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<HMAC_CTX>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>)>>('HMAC_Final');
  late final _HMAC_Final = _HMAC_FinalPtr.asFunction<
      int Function(ffi.Pointer<HMAC_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.UnsignedChar> HMAC(
    ffi.Pointer<EVP_MD> evp_md,
    ffi.Pointer<ffi.Void> key,
    int key_len,
    ffi.Pointer<ffi.UnsignedChar> d,
    int n,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> md_len,
  ) {
    return _HMAC(
      evp_md,
      key,
      key_len,
      d,
      n,
      md,
      md_len,
    );
  }

  late final _HMACPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>)>>('HMAC');
  late final _HMAC = _HMACPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  int HMAC_CTX_copy(
    ffi.Pointer<HMAC_CTX> dctx,
    ffi.Pointer<HMAC_CTX> sctx,
  ) {
    return _HMAC_CTX_copy(
      dctx,
      sctx,
    );
  }

  late final _HMAC_CTX_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<HMAC_CTX>, ffi.Pointer<HMAC_CTX>)>>('HMAC_CTX_copy');
  late final _HMAC_CTX_copy = _HMAC_CTX_copyPtr.asFunction<
      int Function(ffi.Pointer<HMAC_CTX>, ffi.Pointer<HMAC_CTX>)>();

  void HMAC_CTX_set_flags(
    ffi.Pointer<HMAC_CTX> ctx,
    int flags,
  ) {
    return _HMAC_CTX_set_flags(
      ctx,
      flags,
    );
  }

  late final _HMAC_CTX_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<HMAC_CTX>, ffi.UnsignedLong)>>('HMAC_CTX_set_flags');
  late final _HMAC_CTX_set_flags = _HMAC_CTX_set_flagsPtr.asFunction<
      void Function(ffi.Pointer<HMAC_CTX>, int)>();

  ffi.Pointer<EVP_MD> HMAC_CTX_get_md(
    ffi.Pointer<HMAC_CTX> ctx,
  ) {
    return _HMAC_CTX_get_md(
      ctx,
    );
  }

  late final _HMAC_CTX_get_mdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_MD> Function(
              ffi.Pointer<HMAC_CTX>)>>('HMAC_CTX_get_md');
  late final _HMAC_CTX_get_md = _HMAC_CTX_get_mdPtr.asFunction<
      ffi.Pointer<EVP_MD> Function(ffi.Pointer<HMAC_CTX>)>();

  int ERR_load_BUF_strings() {
    return _ERR_load_BUF_strings();
  }

  late final _ERR_load_BUF_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_BUF_strings');
  late final _ERR_load_BUF_strings =
      _ERR_load_BUF_stringsPtr.asFunction<int Function()>();

  ffi.Pointer<BUF_MEM> BUF_MEM_new() {
    return _BUF_MEM_new();
  }

  late final _BUF_MEM_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BUF_MEM> Function()>>(
          'BUF_MEM_new');
  late final _BUF_MEM_new =
      _BUF_MEM_newPtr.asFunction<ffi.Pointer<BUF_MEM> Function()>();

  ffi.Pointer<BUF_MEM> BUF_MEM_new_ex(
    int flags,
  ) {
    return _BUF_MEM_new_ex(
      flags,
    );
  }

  late final _BUF_MEM_new_exPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BUF_MEM> Function(ffi.UnsignedLong)>>(
      'BUF_MEM_new_ex');
  late final _BUF_MEM_new_ex =
      _BUF_MEM_new_exPtr.asFunction<ffi.Pointer<BUF_MEM> Function(int)>();

  void BUF_MEM_free(
    ffi.Pointer<BUF_MEM> a,
  ) {
    return _BUF_MEM_free(
      a,
    );
  }

  late final _BUF_MEM_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<BUF_MEM>)>>(
          'BUF_MEM_free');
  late final _BUF_MEM_free =
      _BUF_MEM_freePtr.asFunction<void Function(ffi.Pointer<BUF_MEM>)>();

  int BUF_MEM_grow(
    ffi.Pointer<BUF_MEM> str,
    int len,
  ) {
    return _BUF_MEM_grow(
      str,
      len,
    );
  }

  late final _BUF_MEM_growPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BUF_MEM>, ffi.Int)>>(
      'BUF_MEM_grow');
  late final _BUF_MEM_grow =
      _BUF_MEM_growPtr.asFunction<int Function(ffi.Pointer<BUF_MEM>, int)>();

  int BUF_MEM_grow_clean(
    ffi.Pointer<BUF_MEM> str,
    int len,
  ) {
    return _BUF_MEM_grow_clean(
      str,
      len,
    );
  }

  late final _BUF_MEM_grow_cleanPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BUF_MEM>, ffi.Int)>>(
      'BUF_MEM_grow_clean');
  late final _BUF_MEM_grow_clean = _BUF_MEM_grow_cleanPtr.asFunction<
      int Function(ffi.Pointer<BUF_MEM>, int)>();

  void BUF_reverse(
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.UnsignedChar> in1,
    int siz,
  ) {
    return _BUF_reverse(
      out,
      in1,
      siz,
    );
  }

  late final _BUF_reversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('BUF_reverse');
  late final _BUF_reverse = _BUF_reversePtr.asFunction<
      void Function(
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int ERR_load_EC_strings() {
    return _ERR_load_EC_strings();
  }

  late final _ERR_load_EC_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_EC_strings');
  late final _ERR_load_EC_strings =
      _ERR_load_EC_stringsPtr.asFunction<int Function()>();

  ffi.Pointer<EC_METHOD> EC_GFp_simple_method() {
    return _EC_GFp_simple_method();
  }

  late final _EC_GFp_simple_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
          'EC_GFp_simple_method');
  late final _EC_GFp_simple_method =
      _EC_GFp_simple_methodPtr.asFunction<ffi.Pointer<EC_METHOD> Function()>();

  ffi.Pointer<EC_METHOD> EC_GFp_mont_method() {
    return _EC_GFp_mont_method();
  }

  late final _EC_GFp_mont_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
          'EC_GFp_mont_method');
  late final _EC_GFp_mont_method =
      _EC_GFp_mont_methodPtr.asFunction<ffi.Pointer<EC_METHOD> Function()>();

  ffi.Pointer<EC_METHOD> EC_GFp_nist_method() {
    return _EC_GFp_nist_method();
  }

  late final _EC_GFp_nist_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
          'EC_GFp_nist_method');
  late final _EC_GFp_nist_method =
      _EC_GFp_nist_methodPtr.asFunction<ffi.Pointer<EC_METHOD> Function()>();

  ffi.Pointer<EC_METHOD> EC_GFp_nistp224_method() {
    return _EC_GFp_nistp224_method();
  }

  late final _EC_GFp_nistp224_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
          'EC_GFp_nistp224_method');
  late final _EC_GFp_nistp224_method = _EC_GFp_nistp224_methodPtr.asFunction<
      ffi.Pointer<EC_METHOD> Function()>();

  ffi.Pointer<EC_METHOD> EC_GFp_nistp256_method() {
    return _EC_GFp_nistp256_method();
  }

  late final _EC_GFp_nistp256_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
          'EC_GFp_nistp256_method');
  late final _EC_GFp_nistp256_method = _EC_GFp_nistp256_methodPtr.asFunction<
      ffi.Pointer<EC_METHOD> Function()>();

  ffi.Pointer<EC_METHOD> EC_GFp_nistp521_method() {
    return _EC_GFp_nistp521_method();
  }

  late final _EC_GFp_nistp521_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
          'EC_GFp_nistp521_method');
  late final _EC_GFp_nistp521_method = _EC_GFp_nistp521_methodPtr.asFunction<
      ffi.Pointer<EC_METHOD> Function()>();

  ffi.Pointer<EC_METHOD> EC_GF2m_simple_method() {
    return _EC_GF2m_simple_method();
  }

  late final _EC_GF2m_simple_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_METHOD> Function()>>(
          'EC_GF2m_simple_method');
  late final _EC_GF2m_simple_method =
      _EC_GF2m_simple_methodPtr.asFunction<ffi.Pointer<EC_METHOD> Function()>();

  ffi.Pointer<EC_GROUP> EC_GROUP_new(
    ffi.Pointer<EC_METHOD> meth,
  ) {
    return _EC_GROUP_new(
      meth,
    );
  }

  late final _EC_GROUP_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<EC_METHOD>)>>('EC_GROUP_new');
  late final _EC_GROUP_new = _EC_GROUP_newPtr.asFunction<
      ffi.Pointer<EC_GROUP> Function(ffi.Pointer<EC_METHOD>)>();

  void EC_GROUP_free(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_free(
      group,
    );
  }

  late final _EC_GROUP_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_free');
  late final _EC_GROUP_free =
      _EC_GROUP_freePtr.asFunction<void Function(ffi.Pointer<EC_GROUP>)>();

  void EC_GROUP_clear_free(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_clear_free(
      group,
    );
  }

  late final _EC_GROUP_clear_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_clear_free');
  late final _EC_GROUP_clear_free = _EC_GROUP_clear_freePtr.asFunction<
      void Function(ffi.Pointer<EC_GROUP>)>();

  int EC_GROUP_copy(
    ffi.Pointer<EC_GROUP> dst,
    ffi.Pointer<EC_GROUP> src,
  ) {
    return _EC_GROUP_copy(
      dst,
      src,
    );
  }

  late final _EC_GROUP_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_GROUP>)>>('EC_GROUP_copy');
  late final _EC_GROUP_copy = _EC_GROUP_copyPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_GROUP>)>();

  ffi.Pointer<EC_GROUP> EC_GROUP_dup(
    ffi.Pointer<EC_GROUP> src,
  ) {
    return _EC_GROUP_dup(
      src,
    );
  }

  late final _EC_GROUP_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<EC_GROUP>)>>('EC_GROUP_dup');
  late final _EC_GROUP_dup = _EC_GROUP_dupPtr.asFunction<
      ffi.Pointer<EC_GROUP> Function(ffi.Pointer<EC_GROUP>)>();

  ffi.Pointer<EC_METHOD> EC_GROUP_method_of(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_method_of(
      group,
    );
  }

  late final _EC_GROUP_method_ofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_METHOD> Function(
              ffi.Pointer<EC_GROUP>)>>('EC_GROUP_method_of');
  late final _EC_GROUP_method_of = _EC_GROUP_method_ofPtr.asFunction<
      ffi.Pointer<EC_METHOD> Function(ffi.Pointer<EC_GROUP>)>();

  int EC_METHOD_get_field_type(
    ffi.Pointer<EC_METHOD> meth,
  ) {
    return _EC_METHOD_get_field_type(
      meth,
    );
  }

  late final _EC_METHOD_get_field_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_METHOD>)>>(
          'EC_METHOD_get_field_type');
  late final _EC_METHOD_get_field_type = _EC_METHOD_get_field_typePtr
      .asFunction<int Function(ffi.Pointer<EC_METHOD>)>();

  int EC_GROUP_set_generator(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> generator,
    ffi.Pointer<BIGNUM> order,
    ffi.Pointer<BIGNUM> cofactor,
  ) {
    return _EC_GROUP_set_generator(
      group,
      generator,
      order,
      cofactor,
    );
  }

  late final _EC_GROUP_set_generatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('EC_GROUP_set_generator');
  late final _EC_GROUP_set_generator = _EC_GROUP_set_generatorPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<EC_POINT> EC_GROUP_get0_generator(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_get0_generator(
      group,
    );
  }

  late final _EC_GROUP_get0_generatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_POINT> Function(
              ffi.Pointer<EC_GROUP>)>>('EC_GROUP_get0_generator');
  late final _EC_GROUP_get0_generator = _EC_GROUP_get0_generatorPtr.asFunction<
      ffi.Pointer<EC_POINT> Function(ffi.Pointer<EC_GROUP>)>();

  ffi.Pointer<BN_MONT_CTX> EC_GROUP_get_mont_data(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_get_mont_data(
      group,
    );
  }

  late final _EC_GROUP_get_mont_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BN_MONT_CTX> Function(
              ffi.Pointer<EC_GROUP>)>>('EC_GROUP_get_mont_data');
  late final _EC_GROUP_get_mont_data = _EC_GROUP_get_mont_dataPtr.asFunction<
      ffi.Pointer<BN_MONT_CTX> Function(ffi.Pointer<EC_GROUP>)>();

  int EC_GROUP_get_order(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> order,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_get_order(
      group,
      order,
      ctx,
    );
  }

  late final _EC_GROUP_get_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_get_order');
  late final _EC_GROUP_get_order = _EC_GROUP_get_orderPtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> EC_GROUP_get0_order(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_get0_order(
      group,
    );
  }

  late final _EC_GROUP_get0_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<EC_GROUP>)>>('EC_GROUP_get0_order');
  late final _EC_GROUP_get0_order = _EC_GROUP_get0_orderPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_GROUP>)>();

  int EC_GROUP_order_bits(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_order_bits(
      group,
    );
  }

  late final _EC_GROUP_order_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_order_bits');
  late final _EC_GROUP_order_bits =
      _EC_GROUP_order_bitsPtr.asFunction<int Function(ffi.Pointer<EC_GROUP>)>();

  int EC_GROUP_get_cofactor(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> cofactor,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_get_cofactor(
      group,
      cofactor,
      ctx,
    );
  }

  late final _EC_GROUP_get_cofactorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_get_cofactor');
  late final _EC_GROUP_get_cofactor = _EC_GROUP_get_cofactorPtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> EC_GROUP_get0_cofactor(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_get0_cofactor(
      group,
    );
  }

  late final _EC_GROUP_get0_cofactorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<EC_GROUP>)>>('EC_GROUP_get0_cofactor');
  late final _EC_GROUP_get0_cofactor = _EC_GROUP_get0_cofactorPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_GROUP>)>();

  void EC_GROUP_set_curve_name(
    ffi.Pointer<EC_GROUP> group,
    int nid,
  ) {
    return _EC_GROUP_set_curve_name(
      group,
      nid,
    );
  }

  late final _EC_GROUP_set_curve_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EC_GROUP>, ffi.Int)>>('EC_GROUP_set_curve_name');
  late final _EC_GROUP_set_curve_name = _EC_GROUP_set_curve_namePtr.asFunction<
      void Function(ffi.Pointer<EC_GROUP>, int)>();

  int EC_GROUP_get_curve_name(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_get_curve_name(
      group,
    );
  }

  late final _EC_GROUP_get_curve_namePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_get_curve_name');
  late final _EC_GROUP_get_curve_name = _EC_GROUP_get_curve_namePtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>)>();

  void EC_GROUP_set_asn1_flag(
    ffi.Pointer<EC_GROUP> group,
    int flag,
  ) {
    return _EC_GROUP_set_asn1_flag(
      group,
      flag,
    );
  }

  late final _EC_GROUP_set_asn1_flagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EC_GROUP>, ffi.Int)>>('EC_GROUP_set_asn1_flag');
  late final _EC_GROUP_set_asn1_flag = _EC_GROUP_set_asn1_flagPtr.asFunction<
      void Function(ffi.Pointer<EC_GROUP>, int)>();

  int EC_GROUP_get_asn1_flag(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_get_asn1_flag(
      group,
    );
  }

  late final _EC_GROUP_get_asn1_flagPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_get_asn1_flag');
  late final _EC_GROUP_get_asn1_flag = _EC_GROUP_get_asn1_flagPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>)>();

  void EC_GROUP_set_point_conversion_form(
    ffi.Pointer<EC_GROUP> group,
    int form,
  ) {
    return _EC_GROUP_set_point_conversion_form(
      group,
      form,
    );
  }

  late final _EC_GROUP_set_point_conversion_formPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EC_GROUP>,
              ffi.Int32)>>('EC_GROUP_set_point_conversion_form');
  late final _EC_GROUP_set_point_conversion_form =
      _EC_GROUP_set_point_conversion_formPtr.asFunction<
          void Function(ffi.Pointer<EC_GROUP>, int)>();

  int EC_GROUP_get_point_conversion_form(
    ffi.Pointer<EC_GROUP> arg0,
  ) {
    return _EC_GROUP_get_point_conversion_form(
      arg0,
    );
  }

  late final _EC_GROUP_get_point_conversion_formPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_get_point_conversion_form');
  late final _EC_GROUP_get_point_conversion_form =
      _EC_GROUP_get_point_conversion_formPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>)>();

  ffi.Pointer<ffi.UnsignedChar> EC_GROUP_get0_seed(
    ffi.Pointer<EC_GROUP> x,
  ) {
    return _EC_GROUP_get0_seed(
      x,
    );
  }

  late final _EC_GROUP_get0_seedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<EC_GROUP>)>>('EC_GROUP_get0_seed');
  late final _EC_GROUP_get0_seed = _EC_GROUP_get0_seedPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<EC_GROUP>)>();

  int EC_GROUP_get_seed_len(
    ffi.Pointer<EC_GROUP> arg0,
  ) {
    return _EC_GROUP_get_seed_len(
      arg0,
    );
  }

  late final _EC_GROUP_get_seed_lenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_get_seed_len');
  late final _EC_GROUP_get_seed_len = _EC_GROUP_get_seed_lenPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>)>();

  int EC_GROUP_set_seed(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
    int len,
  ) {
    return _EC_GROUP_set_seed(
      arg0,
      arg1,
      len,
    );
  }

  late final _EC_GROUP_set_seedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EC_GROUP_set_seed');
  late final _EC_GROUP_set_seed = _EC_GROUP_set_seedPtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EC_GROUP_set_curve(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_set_curve(
      group,
      p,
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_set_curvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_set_curve');
  late final _EC_GROUP_set_curve = _EC_GROUP_set_curvePtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int EC_GROUP_get_curve(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_get_curve(
      group,
      p,
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_get_curvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_get_curve');
  late final _EC_GROUP_get_curve = _EC_GROUP_get_curvePtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int EC_GROUP_set_curve_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_set_curve_GFp(
      group,
      p,
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_set_curve_GFpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_set_curve_GFp');
  late final _EC_GROUP_set_curve_GFp = _EC_GROUP_set_curve_GFpPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int EC_GROUP_get_curve_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_get_curve_GFp(
      group,
      p,
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_get_curve_GFpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_get_curve_GFp');
  late final _EC_GROUP_get_curve_GFp = _EC_GROUP_get_curve_GFpPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int EC_GROUP_set_curve_GF2m(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_set_curve_GF2m(
      group,
      p,
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_set_curve_GF2mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_set_curve_GF2m');
  late final _EC_GROUP_set_curve_GF2m = _EC_GROUP_set_curve_GF2mPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int EC_GROUP_get_curve_GF2m(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_get_curve_GF2m(
      group,
      p,
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_get_curve_GF2mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_get_curve_GF2m');
  late final _EC_GROUP_get_curve_GF2m = _EC_GROUP_get_curve_GF2mPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int EC_GROUP_get_degree(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_get_degree(
      group,
    );
  }

  late final _EC_GROUP_get_degreePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_get_degree');
  late final _EC_GROUP_get_degree =
      _EC_GROUP_get_degreePtr.asFunction<int Function(ffi.Pointer<EC_GROUP>)>();

  int EC_GROUP_check(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_check(
      group,
      ctx,
    );
  }

  late final _EC_GROUP_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>, ffi.Pointer<BN_CTX>)>>('EC_GROUP_check');
  late final _EC_GROUP_check = _EC_GROUP_checkPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BN_CTX>)>();

  int EC_GROUP_check_discriminant(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_check_discriminant(
      group,
      ctx,
    );
  }

  late final _EC_GROUP_check_discriminantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_check_discriminant');
  late final _EC_GROUP_check_discriminant = _EC_GROUP_check_discriminantPtr
      .asFunction<int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BN_CTX>)>();

  int EC_GROUP_cmp(
    ffi.Pointer<EC_GROUP> a,
    ffi.Pointer<EC_GROUP> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_cmp(
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_cmp');
  late final _EC_GROUP_cmp = _EC_GROUP_cmpPtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_GROUP>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<EC_GROUP> EC_GROUP_new_curve_GFp(
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_new_curve_GFp(
      p,
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_new_curve_GFpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_new_curve_GFp');
  late final _EC_GROUP_new_curve_GFp = _EC_GROUP_new_curve_GFpPtr.asFunction<
      ffi.Pointer<EC_GROUP> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<EC_GROUP> EC_GROUP_new_curve_GF2m(
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_new_curve_GF2m(
      p,
      a,
      b,
      ctx,
    );
  }

  late final _EC_GROUP_new_curve_GF2mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_new_curve_GF2m');
  late final _EC_GROUP_new_curve_GF2m = _EC_GROUP_new_curve_GF2mPtr.asFunction<
      ffi.Pointer<EC_GROUP> Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<EC_GROUP> EC_GROUP_new_by_curve_name(
    int nid,
  ) {
    return _EC_GROUP_new_by_curve_name(
      nid,
    );
  }

  late final _EC_GROUP_new_by_curve_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_GROUP> Function(ffi.Int)>>(
          'EC_GROUP_new_by_curve_name');
  late final _EC_GROUP_new_by_curve_name = _EC_GROUP_new_by_curve_namePtr
      .asFunction<ffi.Pointer<EC_GROUP> Function(int)>();

  ffi.Pointer<EC_GROUP> EC_GROUP_new_from_ecparameters(
    ffi.Pointer<ECPARAMETERS> params,
  ) {
    return _EC_GROUP_new_from_ecparameters(
      params,
    );
  }

  late final _EC_GROUP_new_from_ecparametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<ECPARAMETERS>)>>('EC_GROUP_new_from_ecparameters');
  late final _EC_GROUP_new_from_ecparameters =
      _EC_GROUP_new_from_ecparametersPtr.asFunction<
          ffi.Pointer<EC_GROUP> Function(ffi.Pointer<ECPARAMETERS>)>();

  ffi.Pointer<ECPARAMETERS> EC_GROUP_get_ecparameters(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<ECPARAMETERS> params,
  ) {
    return _EC_GROUP_get_ecparameters(
      group,
      params,
    );
  }

  late final _EC_GROUP_get_ecparametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ECPARAMETERS> Function(ffi.Pointer<EC_GROUP>,
              ffi.Pointer<ECPARAMETERS>)>>('EC_GROUP_get_ecparameters');
  late final _EC_GROUP_get_ecparameters =
      _EC_GROUP_get_ecparametersPtr.asFunction<
          ffi.Pointer<ECPARAMETERS> Function(
              ffi.Pointer<EC_GROUP>, ffi.Pointer<ECPARAMETERS>)>();

  ffi.Pointer<EC_GROUP> EC_GROUP_new_from_ecpkparameters(
    ffi.Pointer<ECPKPARAMETERS> params,
  ) {
    return _EC_GROUP_new_from_ecpkparameters(
      params,
    );
  }

  late final _EC_GROUP_new_from_ecpkparametersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EC_GROUP> Function(ffi.Pointer<ECPKPARAMETERS>)>>(
      'EC_GROUP_new_from_ecpkparameters');
  late final _EC_GROUP_new_from_ecpkparameters =
      _EC_GROUP_new_from_ecpkparametersPtr.asFunction<
          ffi.Pointer<EC_GROUP> Function(ffi.Pointer<ECPKPARAMETERS>)>();

  ffi.Pointer<ECPKPARAMETERS> EC_GROUP_get_ecpkparameters(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<ECPKPARAMETERS> params,
  ) {
    return _EC_GROUP_get_ecpkparameters(
      group,
      params,
    );
  }

  late final _EC_GROUP_get_ecpkparametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ECPKPARAMETERS> Function(ffi.Pointer<EC_GROUP>,
              ffi.Pointer<ECPKPARAMETERS>)>>('EC_GROUP_get_ecpkparameters');
  late final _EC_GROUP_get_ecpkparameters =
      _EC_GROUP_get_ecpkparametersPtr.asFunction<
          ffi.Pointer<ECPKPARAMETERS> Function(
              ffi.Pointer<EC_GROUP>, ffi.Pointer<ECPKPARAMETERS>)>();

  int EC_get_builtin_curves(
    ffi.Pointer<EC_builtin_curve> r,
    int nitems,
  ) {
    return _EC_get_builtin_curves(
      r,
      nitems,
    );
  }

  late final _EC_get_builtin_curvesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_builtin_curve>,
              ffi.Int)>>('EC_get_builtin_curves');
  late final _EC_get_builtin_curves = _EC_get_builtin_curvesPtr.asFunction<
      int Function(ffi.Pointer<EC_builtin_curve>, int)>();

  ffi.Pointer<ffi.Char> EC_curve_nid2nist(
    int nid,
  ) {
    return _EC_curve_nid2nist(
      nid,
    );
  }

  late final _EC_curve_nid2nistPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'EC_curve_nid2nist');
  late final _EC_curve_nid2nist =
      _EC_curve_nid2nistPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int EC_curve_nist2nid(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _EC_curve_nist2nid(
      name,
    );
  }

  late final _EC_curve_nist2nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'EC_curve_nist2nid');
  late final _EC_curve_nist2nid =
      _EC_curve_nist2nidPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<EC_POINT> EC_POINT_new(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_POINT_new(
      group,
    );
  }

  late final _EC_POINT_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_POINT> Function(
              ffi.Pointer<EC_GROUP>)>>('EC_POINT_new');
  late final _EC_POINT_new = _EC_POINT_newPtr.asFunction<
      ffi.Pointer<EC_POINT> Function(ffi.Pointer<EC_GROUP>)>();

  void EC_POINT_free(
    ffi.Pointer<EC_POINT> point,
  ) {
    return _EC_POINT_free(
      point,
    );
  }

  late final _EC_POINT_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_POINT>)>>(
          'EC_POINT_free');
  late final _EC_POINT_free =
      _EC_POINT_freePtr.asFunction<void Function(ffi.Pointer<EC_POINT>)>();

  void EC_POINT_clear_free(
    ffi.Pointer<EC_POINT> point,
  ) {
    return _EC_POINT_clear_free(
      point,
    );
  }

  late final _EC_POINT_clear_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_POINT>)>>(
          'EC_POINT_clear_free');
  late final _EC_POINT_clear_free = _EC_POINT_clear_freePtr.asFunction<
      void Function(ffi.Pointer<EC_POINT>)>();

  int EC_POINT_copy(
    ffi.Pointer<EC_POINT> dst,
    ffi.Pointer<EC_POINT> src,
  ) {
    return _EC_POINT_copy(
      dst,
      src,
    );
  }

  late final _EC_POINT_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_POINT>, ffi.Pointer<EC_POINT>)>>('EC_POINT_copy');
  late final _EC_POINT_copy = _EC_POINT_copyPtr.asFunction<
      int Function(ffi.Pointer<EC_POINT>, ffi.Pointer<EC_POINT>)>();

  ffi.Pointer<EC_POINT> EC_POINT_dup(
    ffi.Pointer<EC_POINT> src,
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_POINT_dup(
      src,
      group,
    );
  }

  late final _EC_POINT_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_POINT> Function(
              ffi.Pointer<EC_POINT>, ffi.Pointer<EC_GROUP>)>>('EC_POINT_dup');
  late final _EC_POINT_dup = _EC_POINT_dupPtr.asFunction<
      ffi.Pointer<EC_POINT> Function(
          ffi.Pointer<EC_POINT>, ffi.Pointer<EC_GROUP>)>();

  ffi.Pointer<EC_METHOD> EC_POINT_method_of(
    ffi.Pointer<EC_POINT> point,
  ) {
    return _EC_POINT_method_of(
      point,
    );
  }

  late final _EC_POINT_method_ofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_METHOD> Function(
              ffi.Pointer<EC_POINT>)>>('EC_POINT_method_of');
  late final _EC_POINT_method_of = _EC_POINT_method_ofPtr.asFunction<
      ffi.Pointer<EC_METHOD> Function(ffi.Pointer<EC_POINT>)>();

  int EC_POINT_set_to_infinity(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> point,
  ) {
    return _EC_POINT_set_to_infinity(
      group,
      point,
    );
  }

  late final _EC_POINT_set_to_infinityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>)>>('EC_POINT_set_to_infinity');
  late final _EC_POINT_set_to_infinity = _EC_POINT_set_to_infinityPtr
      .asFunction<int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>)>();

  int EC_POINT_set_Jprojective_coordinates_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BIGNUM> z,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_Jprojective_coordinates_GFp(
      group,
      p,
      x,
      y,
      z,
      ctx,
    );
  }

  late final _EC_POINT_set_Jprojective_coordinates_GFpPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EC_GROUP>,
                  ffi.Pointer<EC_POINT>,
                  ffi.Pointer<BIGNUM>,
                  ffi.Pointer<BIGNUM>,
                  ffi.Pointer<BIGNUM>,
                  ffi.Pointer<BN_CTX>)>>(
      'EC_POINT_set_Jprojective_coordinates_GFp');
  late final _EC_POINT_set_Jprojective_coordinates_GFp =
      _EC_POINT_set_Jprojective_coordinates_GFpPtr.asFunction<
          int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>();

  int EC_POINT_get_Jprojective_coordinates_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BIGNUM> z,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_get_Jprojective_coordinates_GFp(
      group,
      p,
      x,
      y,
      z,
      ctx,
    );
  }

  late final _EC_POINT_get_Jprojective_coordinates_GFpPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<EC_GROUP>,
                  ffi.Pointer<EC_POINT>,
                  ffi.Pointer<BIGNUM>,
                  ffi.Pointer<BIGNUM>,
                  ffi.Pointer<BIGNUM>,
                  ffi.Pointer<BN_CTX>)>>(
      'EC_POINT_get_Jprojective_coordinates_GFp');
  late final _EC_POINT_get_Jprojective_coordinates_GFp =
      _EC_POINT_get_Jprojective_coordinates_GFpPtr.asFunction<
          int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>();

  int EC_POINT_set_affine_coordinates(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_affine_coordinates(
      group,
      p,
      x,
      y,
      ctx,
    );
  }

  late final _EC_POINT_set_affine_coordinatesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_set_affine_coordinates');
  late final _EC_POINT_set_affine_coordinates =
      _EC_POINT_set_affine_coordinatesPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_get_affine_coordinates(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_get_affine_coordinates(
      group,
      p,
      x,
      y,
      ctx,
    );
  }

  late final _EC_POINT_get_affine_coordinatesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_get_affine_coordinates');
  late final _EC_POINT_get_affine_coordinates =
      _EC_POINT_get_affine_coordinatesPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_set_affine_coordinates_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_affine_coordinates_GFp(
      group,
      p,
      x,
      y,
      ctx,
    );
  }

  late final _EC_POINT_set_affine_coordinates_GFpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_set_affine_coordinates_GFp');
  late final _EC_POINT_set_affine_coordinates_GFp =
      _EC_POINT_set_affine_coordinates_GFpPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_get_affine_coordinates_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_get_affine_coordinates_GFp(
      group,
      p,
      x,
      y,
      ctx,
    );
  }

  late final _EC_POINT_get_affine_coordinates_GFpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_get_affine_coordinates_GFp');
  late final _EC_POINT_get_affine_coordinates_GFp =
      _EC_POINT_get_affine_coordinates_GFpPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_set_compressed_coordinates(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    int y_bit,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_compressed_coordinates(
      group,
      p,
      x,
      y_bit,
      ctx,
    );
  }

  late final _EC_POINT_set_compressed_coordinatesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_set_compressed_coordinates');
  late final _EC_POINT_set_compressed_coordinates =
      _EC_POINT_set_compressed_coordinatesPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, int, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_set_compressed_coordinates_GFp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    int y_bit,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_compressed_coordinates_GFp(
      group,
      p,
      x,
      y_bit,
      ctx,
    );
  }

  late final _EC_POINT_set_compressed_coordinates_GFpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_set_compressed_coordinates_GFp');
  late final _EC_POINT_set_compressed_coordinates_GFp =
      _EC_POINT_set_compressed_coordinates_GFpPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, int, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_set_affine_coordinates_GF2m(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_affine_coordinates_GF2m(
      group,
      p,
      x,
      y,
      ctx,
    );
  }

  late final _EC_POINT_set_affine_coordinates_GF2mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_set_affine_coordinates_GF2m');
  late final _EC_POINT_set_affine_coordinates_GF2m =
      _EC_POINT_set_affine_coordinates_GF2mPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_get_affine_coordinates_GF2m(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_get_affine_coordinates_GF2m(
      group,
      p,
      x,
      y,
      ctx,
    );
  }

  late final _EC_POINT_get_affine_coordinates_GF2mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_get_affine_coordinates_GF2m');
  late final _EC_POINT_get_affine_coordinates_GF2m =
      _EC_POINT_get_affine_coordinates_GF2mPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_set_compressed_coordinates_GF2m(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<BIGNUM> x,
    int y_bit,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_set_compressed_coordinates_GF2m(
      group,
      p,
      x,
      y_bit,
      ctx,
    );
  }

  late final _EC_POINT_set_compressed_coordinates_GF2mPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
                  ffi.Pointer<BIGNUM>, ffi.Int, ffi.Pointer<BN_CTX>)>>(
      'EC_POINT_set_compressed_coordinates_GF2m');
  late final _EC_POINT_set_compressed_coordinates_GF2m =
      _EC_POINT_set_compressed_coordinates_GF2mPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>, int, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_point2oct(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    int form,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int len,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_point2oct(
      group,
      p,
      form,
      buf,
      len,
      ctx,
    );
  }

  late final _EC_POINT_point2octPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Int32,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_point2oct');
  late final _EC_POINT_point2oct = _EC_POINT_point2octPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>, int,
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_oct2point(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int len,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_oct2point(
      group,
      p,
      buf,
      len,
      ctx,
    );
  }

  late final _EC_POINT_oct2pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_oct2point');
  late final _EC_POINT_oct2point = _EC_POINT_oct2pointPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_point2buf(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> point,
    int form,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pbuf,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_point2buf(
      group,
      point,
      form,
      pbuf,
      ctx,
    );
  }

  late final _EC_POINT_point2bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_point2buf');
  late final _EC_POINT_point2buf = _EC_POINT_point2bufPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>, int,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<BIGNUM> EC_POINT_point2bn(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<EC_POINT> arg1,
    int form,
    ffi.Pointer<BIGNUM> arg3,
    ffi.Pointer<BN_CTX> arg4,
  ) {
    return _EC_POINT_point2bn(
      arg0,
      arg1,
      form,
      arg3,
      arg4,
    );
  }

  late final _EC_POINT_point2bnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Int32,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_point2bn');
  late final _EC_POINT_point2bn = _EC_POINT_point2bnPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
          int, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<EC_POINT> EC_POINT_bn2point(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<BIGNUM> arg1,
    ffi.Pointer<EC_POINT> arg2,
    ffi.Pointer<BN_CTX> arg3,
  ) {
    return _EC_POINT_bn2point(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _EC_POINT_bn2pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_POINT> Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_bn2point');
  late final _EC_POINT_bn2point = _EC_POINT_bn2pointPtr.asFunction<
      ffi.Pointer<EC_POINT> Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<ffi.Char> EC_POINT_point2hex(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<EC_POINT> arg1,
    int form,
    ffi.Pointer<BN_CTX> arg3,
  ) {
    return _EC_POINT_point2hex(
      arg0,
      arg1,
      form,
      arg3,
    );
  }

  late final _EC_POINT_point2hexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Int32,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_point2hex');
  late final _EC_POINT_point2hex = _EC_POINT_point2hexPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>, int, ffi.Pointer<BN_CTX>)>();

  ffi.Pointer<EC_POINT> EC_POINT_hex2point(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<EC_POINT> arg2,
    ffi.Pointer<BN_CTX> arg3,
  ) {
    return _EC_POINT_hex2point(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _EC_POINT_hex2pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_POINT> Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_hex2point');
  late final _EC_POINT_hex2point = _EC_POINT_hex2pointPtr.asFunction<
      ffi.Pointer<EC_POINT> Function(ffi.Pointer<EC_GROUP>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_add(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> r,
    ffi.Pointer<EC_POINT> a,
    ffi.Pointer<EC_POINT> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_add(
      group,
      r,
      a,
      b,
      ctx,
    );
  }

  late final _EC_POINT_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_add');
  late final _EC_POINT_add = _EC_POINT_addPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
          ffi.Pointer<EC_POINT>, ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_dbl(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> r,
    ffi.Pointer<EC_POINT> a,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_dbl(
      group,
      r,
      a,
      ctx,
    );
  }

  late final _EC_POINT_dblPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>>('EC_POINT_dbl');
  late final _EC_POINT_dbl = _EC_POINT_dblPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
          ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_invert(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> a,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_invert(
      group,
      a,
      ctx,
    );
  }

  late final _EC_POINT_invertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_invert');
  late final _EC_POINT_invert = _EC_POINT_invertPtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_is_at_infinity(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> p,
  ) {
    return _EC_POINT_is_at_infinity(
      group,
      p,
    );
  }

  late final _EC_POINT_is_at_infinityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>)>>('EC_POINT_is_at_infinity');
  late final _EC_POINT_is_at_infinity = _EC_POINT_is_at_infinityPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>)>();

  int EC_POINT_is_on_curve(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> point,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_is_on_curve(
      group,
      point,
      ctx,
    );
  }

  late final _EC_POINT_is_on_curvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_is_on_curve');
  late final _EC_POINT_is_on_curve = _EC_POINT_is_on_curvePtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_cmp(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> a,
    ffi.Pointer<EC_POINT> b,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_cmp(
      group,
      a,
      b,
      ctx,
    );
  }

  late final _EC_POINT_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>>('EC_POINT_cmp');
  late final _EC_POINT_cmp = _EC_POINT_cmpPtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
          ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>();

  int EC_POINT_make_affine(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> point,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_make_affine(
      group,
      point,
      ctx,
    );
  }

  late final _EC_POINT_make_affinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_make_affine');
  late final _EC_POINT_make_affine = _EC_POINT_make_affinePtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>, ffi.Pointer<EC_POINT>, ffi.Pointer<BN_CTX>)>();

  int EC_POINTs_make_affine(
    ffi.Pointer<EC_GROUP> group,
    int num,
    ffi.Pointer<ffi.Pointer<EC_POINT>> points,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINTs_make_affine(
      group,
      num,
      points,
      ctx,
    );
  }

  late final _EC_POINTs_make_affinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<EC_POINT>>,
              ffi.Pointer<BN_CTX>)>>('EC_POINTs_make_affine');
  late final _EC_POINTs_make_affine = _EC_POINTs_make_affinePtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>, int,
          ffi.Pointer<ffi.Pointer<EC_POINT>>, ffi.Pointer<BN_CTX>)>();

  int EC_POINTs_mul(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> r,
    ffi.Pointer<BIGNUM> n,
    int num,
    ffi.Pointer<ffi.Pointer<EC_POINT>> p,
    ffi.Pointer<ffi.Pointer<BIGNUM>> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINTs_mul(
      group,
      r,
      n,
      num,
      p,
      m,
      ctx,
    );
  }

  late final _EC_POINTs_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<EC_POINT>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<BN_CTX>)>>('EC_POINTs_mul');
  late final _EC_POINTs_mul = _EC_POINTs_mulPtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          int,
          ffi.Pointer<ffi.Pointer<EC_POINT>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<BN_CTX>)>();

  int EC_POINT_mul(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<EC_POINT> r,
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<EC_POINT> q,
    ffi.Pointer<BIGNUM> m,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_POINT_mul(
      group,
      r,
      n,
      q,
      m,
      ctx,
    );
  }

  late final _EC_POINT_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>)>>('EC_POINT_mul');
  late final _EC_POINT_mul = _EC_POINT_mulPtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_CTX>)>();

  int EC_GROUP_precompute_mult(
    ffi.Pointer<EC_GROUP> group,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_GROUP_precompute_mult(
      group,
      ctx,
    );
  }

  late final _EC_GROUP_precompute_multPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>,
              ffi.Pointer<BN_CTX>)>>('EC_GROUP_precompute_mult');
  late final _EC_GROUP_precompute_mult = _EC_GROUP_precompute_multPtr
      .asFunction<int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<BN_CTX>)>();

  int EC_GROUP_have_precompute_mult(
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_GROUP_have_precompute_mult(
      group,
    );
  }

  late final _EC_GROUP_have_precompute_multPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_have_precompute_mult');
  late final _EC_GROUP_have_precompute_mult = _EC_GROUP_have_precompute_multPtr
      .asFunction<int Function(ffi.Pointer<EC_GROUP>)>();

  late final ffi.Pointer<ASN1_ITEM> _ECPKPARAMETERS_it =
      _lookup<ASN1_ITEM>('ECPKPARAMETERS_it');

  ffi.Pointer<ASN1_ITEM> get ECPKPARAMETERS_it => _ECPKPARAMETERS_it;

  ffi.Pointer<ECPKPARAMETERS> ECPKPARAMETERS_new() {
    return _ECPKPARAMETERS_new();
  }

  late final _ECPKPARAMETERS_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ECPKPARAMETERS> Function()>>(
          'ECPKPARAMETERS_new');
  late final _ECPKPARAMETERS_new = _ECPKPARAMETERS_newPtr.asFunction<
      ffi.Pointer<ECPKPARAMETERS> Function()>();

  void ECPKPARAMETERS_free(
    ffi.Pointer<ECPKPARAMETERS> a,
  ) {
    return _ECPKPARAMETERS_free(
      a,
    );
  }

  late final _ECPKPARAMETERS_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ECPKPARAMETERS>)>>(
      'ECPKPARAMETERS_free');
  late final _ECPKPARAMETERS_free = _ECPKPARAMETERS_freePtr.asFunction<
      void Function(ffi.Pointer<ECPKPARAMETERS>)>();

  late final ffi.Pointer<ASN1_ITEM> _ECPARAMETERS_it =
      _lookup<ASN1_ITEM>('ECPARAMETERS_it');

  ffi.Pointer<ASN1_ITEM> get ECPARAMETERS_it => _ECPARAMETERS_it;

  ffi.Pointer<ECPARAMETERS> ECPARAMETERS_new() {
    return _ECPARAMETERS_new();
  }

  late final _ECPARAMETERS_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ECPARAMETERS> Function()>>(
          'ECPARAMETERS_new');
  late final _ECPARAMETERS_new =
      _ECPARAMETERS_newPtr.asFunction<ffi.Pointer<ECPARAMETERS> Function()>();

  void ECPARAMETERS_free(
    ffi.Pointer<ECPARAMETERS> a,
  ) {
    return _ECPARAMETERS_free(
      a,
    );
  }

  late final _ECPARAMETERS_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ECPARAMETERS>)>>(
          'ECPARAMETERS_free');
  late final _ECPARAMETERS_free = _ECPARAMETERS_freePtr.asFunction<
      void Function(ffi.Pointer<ECPARAMETERS>)>();

  int EC_GROUP_get_basis_type(
    ffi.Pointer<EC_GROUP> arg0,
  ) {
    return _EC_GROUP_get_basis_type(
      arg0,
    );
  }

  late final _EC_GROUP_get_basis_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_GROUP>)>>(
          'EC_GROUP_get_basis_type');
  late final _EC_GROUP_get_basis_type = _EC_GROUP_get_basis_typePtr.asFunction<
      int Function(ffi.Pointer<EC_GROUP>)>();

  int EC_GROUP_get_trinomial_basis(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<ffi.UnsignedInt> k,
  ) {
    return _EC_GROUP_get_trinomial_basis(
      arg0,
      k,
    );
  }

  late final _EC_GROUP_get_trinomial_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_GROUP>,
              ffi.Pointer<ffi.UnsignedInt>)>>('EC_GROUP_get_trinomial_basis');
  late final _EC_GROUP_get_trinomial_basis =
      _EC_GROUP_get_trinomial_basisPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<ffi.UnsignedInt>)>();

  int EC_GROUP_get_pentanomial_basis(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<ffi.UnsignedInt> k1,
    ffi.Pointer<ffi.UnsignedInt> k2,
    ffi.Pointer<ffi.UnsignedInt> k3,
  ) {
    return _EC_GROUP_get_pentanomial_basis(
      arg0,
      k1,
      k2,
      k3,
    );
  }

  late final _EC_GROUP_get_pentanomial_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_GROUP>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>)>>('EC_GROUP_get_pentanomial_basis');
  late final _EC_GROUP_get_pentanomial_basis =
      _EC_GROUP_get_pentanomial_basisPtr.asFunction<
          int Function(ffi.Pointer<EC_GROUP>, ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<EC_GROUP> d2i_ECPKParameters(
    ffi.Pointer<ffi.Pointer<EC_GROUP>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ECPKParameters(
      arg0,
      in1,
      len,
    );
  }

  late final _d2i_ECPKParametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<ffi.Pointer<EC_GROUP>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ECPKParameters');
  late final _d2i_ECPKParameters = _d2i_ECPKParametersPtr.asFunction<
      ffi.Pointer<EC_GROUP> Function(ffi.Pointer<ffi.Pointer<EC_GROUP>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ECPKParameters(
    ffi.Pointer<EC_GROUP> arg0,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ECPKParameters(
      arg0,
      out,
    );
  }

  late final _i2d_ECPKParametersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<EC_GROUP>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_ECPKParameters');
  late final _i2d_ECPKParameters = _i2d_ECPKParametersPtr.asFunction<
      int Function(
          ffi.Pointer<EC_GROUP>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int ECPKParameters_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EC_GROUP> x,
    int off,
  ) {
    return _ECPKParameters_print(
      bp,
      x,
      off,
    );
  }

  late final _ECPKParameters_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_GROUP>,
              ffi.Int)>>('ECPKParameters_print');
  late final _ECPKParameters_print = _ECPKParameters_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_GROUP>, int)>();

  int ECPKParameters_print_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EC_GROUP> x,
    int off,
  ) {
    return _ECPKParameters_print_fp(
      fp,
      x,
      off,
    );
  }

  late final _ECPKParameters_print_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_GROUP>,
              ffi.Int)>>('ECPKParameters_print_fp');
  late final _ECPKParameters_print_fp = _ECPKParameters_print_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_GROUP>, int)>();

  ffi.Pointer<EC_KEY> EC_KEY_new() {
    return _EC_KEY_new();
  }

  late final _EC_KEY_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_KEY> Function()>>('EC_KEY_new');
  late final _EC_KEY_new =
      _EC_KEY_newPtr.asFunction<ffi.Pointer<EC_KEY> Function()>();

  int EC_KEY_get_flags(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_get_flags(
      key,
    );
  }

  late final _EC_KEY_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
          'EC_KEY_get_flags');
  late final _EC_KEY_get_flags =
      _EC_KEY_get_flagsPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  void EC_KEY_set_flags(
    ffi.Pointer<EC_KEY> key,
    int flags,
  ) {
    return _EC_KEY_set_flags(
      key,
      flags,
    );
  }

  late final _EC_KEY_set_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY>, ffi.Int)>>(
      'EC_KEY_set_flags');
  late final _EC_KEY_set_flags = _EC_KEY_set_flagsPtr.asFunction<
      void Function(ffi.Pointer<EC_KEY>, int)>();

  void EC_KEY_clear_flags(
    ffi.Pointer<EC_KEY> key,
    int flags,
  ) {
    return _EC_KEY_clear_flags(
      key,
      flags,
    );
  }

  late final _EC_KEY_clear_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY>, ffi.Int)>>(
      'EC_KEY_clear_flags');
  late final _EC_KEY_clear_flags = _EC_KEY_clear_flagsPtr.asFunction<
      void Function(ffi.Pointer<EC_KEY>, int)>();

  int EC_KEY_decoded_from_explicit_params(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_decoded_from_explicit_params(
      key,
    );
  }

  late final _EC_KEY_decoded_from_explicit_paramsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
          'EC_KEY_decoded_from_explicit_params');
  late final _EC_KEY_decoded_from_explicit_params =
      _EC_KEY_decoded_from_explicit_paramsPtr.asFunction<
          int Function(ffi.Pointer<EC_KEY>)>();

  ffi.Pointer<EC_KEY> EC_KEY_new_by_curve_name(
    int nid,
  ) {
    return _EC_KEY_new_by_curve_name(
      nid,
    );
  }

  late final _EC_KEY_new_by_curve_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_KEY> Function(ffi.Int)>>(
          'EC_KEY_new_by_curve_name');
  late final _EC_KEY_new_by_curve_name = _EC_KEY_new_by_curve_namePtr
      .asFunction<ffi.Pointer<EC_KEY> Function(int)>();

  void EC_KEY_free(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_free(
      key,
    );
  }

  late final _EC_KEY_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY>)>>(
          'EC_KEY_free');
  late final _EC_KEY_free =
      _EC_KEY_freePtr.asFunction<void Function(ffi.Pointer<EC_KEY>)>();

  ffi.Pointer<EC_KEY> EC_KEY_copy(
    ffi.Pointer<EC_KEY> dst,
    ffi.Pointer<EC_KEY> src,
  ) {
    return _EC_KEY_copy(
      dst,
      src,
    );
  }

  late final _EC_KEY_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(
              ffi.Pointer<EC_KEY>, ffi.Pointer<EC_KEY>)>>('EC_KEY_copy');
  late final _EC_KEY_copy = _EC_KEY_copyPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_KEY>)>();

  ffi.Pointer<EC_KEY> EC_KEY_dup(
    ffi.Pointer<EC_KEY> src,
  ) {
    return _EC_KEY_dup(
      src,
    );
  }

  late final _EC_KEY_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(ffi.Pointer<EC_KEY>)>>('EC_KEY_dup');
  late final _EC_KEY_dup = _EC_KEY_dupPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(ffi.Pointer<EC_KEY>)>();

  int EC_KEY_up_ref(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_up_ref(
      key,
    );
  }

  late final _EC_KEY_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
          'EC_KEY_up_ref');
  late final _EC_KEY_up_ref =
      _EC_KEY_up_refPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  ffi.Pointer<ENGINE> EC_KEY_get0_engine(
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _EC_KEY_get0_engine(
      eckey,
    );
  }

  late final _EC_KEY_get0_enginePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ENGINE> Function(
              ffi.Pointer<EC_KEY>)>>('EC_KEY_get0_engine');
  late final _EC_KEY_get0_engine = _EC_KEY_get0_enginePtr.asFunction<
      ffi.Pointer<ENGINE> Function(ffi.Pointer<EC_KEY>)>();

  ffi.Pointer<EC_GROUP> EC_KEY_get0_group(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_get0_group(
      key,
    );
  }

  late final _EC_KEY_get0_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<EC_KEY>)>>('EC_KEY_get0_group');
  late final _EC_KEY_get0_group = _EC_KEY_get0_groupPtr.asFunction<
      ffi.Pointer<EC_GROUP> Function(ffi.Pointer<EC_KEY>)>();

  int EC_KEY_set_group(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<EC_GROUP> group,
  ) {
    return _EC_KEY_set_group(
      key,
      group,
    );
  }

  late final _EC_KEY_set_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_KEY>, ffi.Pointer<EC_GROUP>)>>('EC_KEY_set_group');
  late final _EC_KEY_set_group = _EC_KEY_set_groupPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_GROUP>)>();

  ffi.Pointer<BIGNUM> EC_KEY_get0_private_key(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_get0_private_key(
      key,
    );
  }

  late final _EC_KEY_get0_private_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<EC_KEY>)>>('EC_KEY_get0_private_key');
  late final _EC_KEY_get0_private_key = _EC_KEY_get0_private_keyPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<EC_KEY>)>();

  int EC_KEY_set_private_key(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<BIGNUM> prv,
  ) {
    return _EC_KEY_set_private_key(
      key,
      prv,
    );
  }

  late final _EC_KEY_set_private_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>,
              ffi.Pointer<BIGNUM>)>>('EC_KEY_set_private_key');
  late final _EC_KEY_set_private_key = _EC_KEY_set_private_keyPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<EC_POINT> EC_KEY_get0_public_key(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_get0_public_key(
      key,
    );
  }

  late final _EC_KEY_get0_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_POINT> Function(
              ffi.Pointer<EC_KEY>)>>('EC_KEY_get0_public_key');
  late final _EC_KEY_get0_public_key = _EC_KEY_get0_public_keyPtr.asFunction<
      ffi.Pointer<EC_POINT> Function(ffi.Pointer<EC_KEY>)>();

  int EC_KEY_set_public_key(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<EC_POINT> pub,
  ) {
    return _EC_KEY_set_public_key(
      key,
      pub,
    );
  }

  late final _EC_KEY_set_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>,
              ffi.Pointer<EC_POINT>)>>('EC_KEY_set_public_key');
  late final _EC_KEY_set_public_key = _EC_KEY_set_public_keyPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_POINT>)>();

  int EC_KEY_get_enc_flags(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_get_enc_flags(
      key,
    );
  }

  late final _EC_KEY_get_enc_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<EC_KEY>)>>(
      'EC_KEY_get_enc_flags');
  late final _EC_KEY_get_enc_flags =
      _EC_KEY_get_enc_flagsPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  void EC_KEY_set_enc_flags(
    ffi.Pointer<EC_KEY> eckey,
    int flags,
  ) {
    return _EC_KEY_set_enc_flags(
      eckey,
      flags,
    );
  }

  late final _EC_KEY_set_enc_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EC_KEY>, ffi.UnsignedInt)>>('EC_KEY_set_enc_flags');
  late final _EC_KEY_set_enc_flags = _EC_KEY_set_enc_flagsPtr.asFunction<
      void Function(ffi.Pointer<EC_KEY>, int)>();

  int EC_KEY_get_conv_form(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_get_conv_form(
      key,
    );
  }

  late final _EC_KEY_get_conv_formPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<EC_KEY>)>>(
          'EC_KEY_get_conv_form');
  late final _EC_KEY_get_conv_form =
      _EC_KEY_get_conv_formPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  void EC_KEY_set_conv_form(
    ffi.Pointer<EC_KEY> eckey,
    int cform,
  ) {
    return _EC_KEY_set_conv_form(
      eckey,
      cform,
    );
  }

  late final _EC_KEY_set_conv_formPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EC_KEY>, ffi.Int32)>>('EC_KEY_set_conv_form');
  late final _EC_KEY_set_conv_form = _EC_KEY_set_conv_formPtr.asFunction<
      void Function(ffi.Pointer<EC_KEY>, int)>();

  int EC_KEY_set_ex_data(
    ffi.Pointer<EC_KEY> key,
    int idx,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _EC_KEY_set_ex_data(
      key,
      idx,
      arg,
    );
  }

  late final _EC_KEY_set_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('EC_KEY_set_ex_data');
  late final _EC_KEY_set_ex_data = _EC_KEY_set_ex_dataPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> EC_KEY_get_ex_data(
    ffi.Pointer<EC_KEY> key,
    int idx,
  ) {
    return _EC_KEY_get_ex_data(
      key,
      idx,
    );
  }

  late final _EC_KEY_get_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EC_KEY>, ffi.Int)>>('EC_KEY_get_ex_data');
  late final _EC_KEY_get_ex_data = _EC_KEY_get_ex_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<EC_KEY>, int)>();

  void EC_KEY_set_asn1_flag(
    ffi.Pointer<EC_KEY> eckey,
    int asn1_flag,
  ) {
    return _EC_KEY_set_asn1_flag(
      eckey,
      asn1_flag,
    );
  }

  late final _EC_KEY_set_asn1_flagPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY>, ffi.Int)>>(
      'EC_KEY_set_asn1_flag');
  late final _EC_KEY_set_asn1_flag = _EC_KEY_set_asn1_flagPtr.asFunction<
      void Function(ffi.Pointer<EC_KEY>, int)>();

  int EC_KEY_precompute_mult(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_KEY_precompute_mult(
      key,
      ctx,
    );
  }

  late final _EC_KEY_precompute_multPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>,
              ffi.Pointer<BN_CTX>)>>('EC_KEY_precompute_mult');
  late final _EC_KEY_precompute_mult = _EC_KEY_precompute_multPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<BN_CTX>)>();

  int EC_KEY_generate_key(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_generate_key(
      key,
    );
  }

  late final _EC_KEY_generate_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
          'EC_KEY_generate_key');
  late final _EC_KEY_generate_key =
      _EC_KEY_generate_keyPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  int EC_KEY_check_key(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_check_key(
      key,
    );
  }

  late final _EC_KEY_check_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
          'EC_KEY_check_key');
  late final _EC_KEY_check_key =
      _EC_KEY_check_keyPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  int EC_KEY_can_sign(
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _EC_KEY_can_sign(
      eckey,
    );
  }

  late final _EC_KEY_can_signPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
          'EC_KEY_can_sign');
  late final _EC_KEY_can_sign =
      _EC_KEY_can_signPtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  int EC_KEY_set_public_key_affine_coordinates(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
  ) {
    return _EC_KEY_set_public_key_affine_coordinates(
      key,
      x,
      y,
    );
  }

  late final _EC_KEY_set_public_key_affine_coordinatesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<BIGNUM>,
                  ffi.Pointer<BIGNUM>)>>(
      'EC_KEY_set_public_key_affine_coordinates');
  late final _EC_KEY_set_public_key_affine_coordinates =
      _EC_KEY_set_public_key_affine_coordinatesPtr.asFunction<
          int Function(
              ffi.Pointer<EC_KEY>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int EC_KEY_key2buf(
    ffi.Pointer<EC_KEY> key,
    int form,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pbuf,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_KEY_key2buf(
      key,
      form,
      pbuf,
      ctx,
    );
  }

  late final _EC_KEY_key2bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_KEY>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<BN_CTX>)>>('EC_KEY_key2buf');
  late final _EC_KEY_key2buf = _EC_KEY_key2bufPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, int,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Pointer<BN_CTX>)>();

  int EC_KEY_oct2key(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int len,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _EC_KEY_oct2key(
      key,
      buf,
      len,
      ctx,
    );
  }

  late final _EC_KEY_oct2keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int, ffi.Pointer<BN_CTX>)>>('EC_KEY_oct2key');
  late final _EC_KEY_oct2key = _EC_KEY_oct2keyPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<BN_CTX>)>();

  int EC_KEY_oct2priv(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int len,
  ) {
    return _EC_KEY_oct2priv(
      key,
      buf,
      len,
    );
  }

  late final _EC_KEY_oct2privPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EC_KEY_oct2priv');
  late final _EC_KEY_oct2priv = _EC_KEY_oct2privPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EC_KEY_priv2oct(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int len,
  ) {
    return _EC_KEY_priv2oct(
      key,
      buf,
      len,
    );
  }

  late final _EC_KEY_priv2octPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EC_KEY_priv2oct');
  late final _EC_KEY_priv2oct = _EC_KEY_priv2octPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EC_KEY_priv2buf(
    ffi.Pointer<EC_KEY> eckey,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pbuf,
  ) {
    return _EC_KEY_priv2buf(
      eckey,
      pbuf,
    );
  }

  late final _EC_KEY_priv2bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('EC_KEY_priv2buf');
  late final _EC_KEY_priv2buf = _EC_KEY_priv2bufPtr.asFunction<
      int Function(
          ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<EC_KEY> d2i_ECPrivateKey(
    ffi.Pointer<ffi.Pointer<EC_KEY>> key,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ECPrivateKey(
      key,
      in1,
      len,
    );
  }

  late final _d2i_ECPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(
              ffi.Pointer<ffi.Pointer<EC_KEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ECPrivateKey');
  late final _d2i_ECPrivateKey = _d2i_ECPrivateKeyPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(ffi.Pointer<ffi.Pointer<EC_KEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ECPrivateKey(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ECPrivateKey(
      key,
      out,
    );
  }

  late final _i2d_ECPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ECPrivateKey');
  late final _i2d_ECPrivateKey = _i2d_ECPrivateKeyPtr.asFunction<
      int Function(
          ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<EC_KEY> d2i_ECParameters(
    ffi.Pointer<ffi.Pointer<EC_KEY>> key,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_ECParameters(
      key,
      in1,
      len,
    );
  }

  late final _d2i_ECParametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(
              ffi.Pointer<ffi.Pointer<EC_KEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ECParameters');
  late final _d2i_ECParameters = _d2i_ECParametersPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(ffi.Pointer<ffi.Pointer<EC_KEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_ECParameters(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_ECParameters(
      key,
      out,
    );
  }

  late final _i2d_ECParametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ECParameters');
  late final _i2d_ECParameters = _i2d_ECParametersPtr.asFunction<
      int Function(
          ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<EC_KEY> o2i_ECPublicKey(
    ffi.Pointer<ffi.Pointer<EC_KEY>> key,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _o2i_ECPublicKey(
      key,
      in1,
      len,
    );
  }

  late final _o2i_ECPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(
              ffi.Pointer<ffi.Pointer<EC_KEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('o2i_ECPublicKey');
  late final _o2i_ECPublicKey = _o2i_ECPublicKeyPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(ffi.Pointer<ffi.Pointer<EC_KEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2o_ECPublicKey(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2o_ECPublicKey(
      key,
      out,
    );
  }

  late final _i2o_ECPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2o_ECPublicKey');
  late final _i2o_ECPublicKey = _i2o_ECPublicKeyPtr.asFunction<
      int Function(
          ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int ECParameters_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EC_KEY> key,
  ) {
    return _ECParameters_print(
      bp,
      key,
    );
  }

  late final _ECParameters_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<EC_KEY>)>>('ECParameters_print');
  late final _ECParameters_print = _ECParameters_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_KEY>)>();

  int EC_KEY_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EC_KEY> key,
    int off,
  ) {
    return _EC_KEY_print(
      bp,
      key,
      off,
    );
  }

  late final _EC_KEY_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<EC_KEY>, ffi.Int)>>('EC_KEY_print');
  late final _EC_KEY_print = _EC_KEY_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_KEY>, int)>();

  int ECParameters_print_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EC_KEY> key,
  ) {
    return _ECParameters_print_fp(
      fp,
      key,
    );
  }

  late final _ECParameters_print_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>,
              ffi.Pointer<EC_KEY>)>>('ECParameters_print_fp');
  late final _ECParameters_print_fp = _ECParameters_print_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_KEY>)>();

  int EC_KEY_print_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EC_KEY> key,
    int off,
  ) {
    return _EC_KEY_print_fp(
      fp,
      key,
      off,
    );
  }

  late final _EC_KEY_print_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_KEY>,
              ffi.Int)>>('EC_KEY_print_fp');
  late final _EC_KEY_print_fp = _EC_KEY_print_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_KEY>, int)>();

  ffi.Pointer<EC_KEY_METHOD> EC_KEY_OpenSSL() {
    return _EC_KEY_OpenSSL();
  }

  late final _EC_KEY_OpenSSLPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_KEY_METHOD> Function()>>(
          'EC_KEY_OpenSSL');
  late final _EC_KEY_OpenSSL =
      _EC_KEY_OpenSSLPtr.asFunction<ffi.Pointer<EC_KEY_METHOD> Function()>();

  ffi.Pointer<EC_KEY_METHOD> EC_KEY_get_default_method() {
    return _EC_KEY_get_default_method();
  }

  late final _EC_KEY_get_default_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EC_KEY_METHOD> Function()>>(
          'EC_KEY_get_default_method');
  late final _EC_KEY_get_default_method = _EC_KEY_get_default_methodPtr
      .asFunction<ffi.Pointer<EC_KEY_METHOD> Function()>();

  void EC_KEY_set_default_method(
    ffi.Pointer<EC_KEY_METHOD> meth,
  ) {
    return _EC_KEY_set_default_method(
      meth,
    );
  }

  late final _EC_KEY_set_default_methodPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY_METHOD>)>>(
      'EC_KEY_set_default_method');
  late final _EC_KEY_set_default_method = _EC_KEY_set_default_methodPtr
      .asFunction<void Function(ffi.Pointer<EC_KEY_METHOD>)>();

  ffi.Pointer<EC_KEY_METHOD> EC_KEY_get_method(
    ffi.Pointer<EC_KEY> key,
  ) {
    return _EC_KEY_get_method(
      key,
    );
  }

  late final _EC_KEY_get_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY_METHOD> Function(
              ffi.Pointer<EC_KEY>)>>('EC_KEY_get_method');
  late final _EC_KEY_get_method = _EC_KEY_get_methodPtr.asFunction<
      ffi.Pointer<EC_KEY_METHOD> Function(ffi.Pointer<EC_KEY>)>();

  int EC_KEY_set_method(
    ffi.Pointer<EC_KEY> key,
    ffi.Pointer<EC_KEY_METHOD> meth,
  ) {
    return _EC_KEY_set_method(
      key,
      meth,
    );
  }

  late final _EC_KEY_set_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>,
              ffi.Pointer<EC_KEY_METHOD>)>>('EC_KEY_set_method');
  late final _EC_KEY_set_method = _EC_KEY_set_methodPtr.asFunction<
      int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_KEY_METHOD>)>();

  ffi.Pointer<EC_KEY> EC_KEY_new_method(
    ffi.Pointer<ENGINE> engine,
  ) {
    return _EC_KEY_new_method(
      engine,
    );
  }

  late final _EC_KEY_new_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(
              ffi.Pointer<ENGINE>)>>('EC_KEY_new_method');
  late final _EC_KEY_new_method = _EC_KEY_new_methodPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(ffi.Pointer<ENGINE>)>();

  int ECDH_KDF_X9_62(
    ffi.Pointer<ffi.UnsignedChar> out,
    int outlen,
    ffi.Pointer<ffi.UnsignedChar> Z,
    int Zlen,
    ffi.Pointer<ffi.UnsignedChar> sinfo,
    int sinfolen,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _ECDH_KDF_X9_62(
      out,
      outlen,
      Z,
      Zlen,
      sinfo,
      sinfolen,
      md,
    );
  }

  late final _ECDH_KDF_X9_62Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<EVP_MD>)>>('ECDH_KDF_X9_62');
  late final _ECDH_KDF_X9_62 = _ECDH_KDF_X9_62Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<EVP_MD>)>();

  int ECDH_compute_key(
    ffi.Pointer<ffi.Void> out,
    int outlen,
    ffi.Pointer<EC_POINT> pub_key,
    ffi.Pointer<EC_KEY> ecdh,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int,
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>>
        KDF,
  ) {
    return _ECDH_compute_key(
      out,
      outlen,
      pub_key,
      ecdh,
      KDF,
    );
  }

  late final _ECDH_compute_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<EC_POINT>,
              ffi.Pointer<EC_KEY>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Int,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Int>)>>)>>('ECDH_compute_key');
  late final _ECDH_compute_key = _ECDH_compute_keyPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<EC_POINT>,
          ffi.Pointer<EC_KEY>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>>)>();

  ffi.Pointer<ECDSA_SIG> ECDSA_SIG_new() {
    return _ECDSA_SIG_new();
  }

  late final _ECDSA_SIG_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ECDSA_SIG> Function()>>(
          'ECDSA_SIG_new');
  late final _ECDSA_SIG_new =
      _ECDSA_SIG_newPtr.asFunction<ffi.Pointer<ECDSA_SIG> Function()>();

  void ECDSA_SIG_free(
    ffi.Pointer<ECDSA_SIG> sig,
  ) {
    return _ECDSA_SIG_free(
      sig,
    );
  }

  late final _ECDSA_SIG_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ECDSA_SIG>)>>(
          'ECDSA_SIG_free');
  late final _ECDSA_SIG_free =
      _ECDSA_SIG_freePtr.asFunction<void Function(ffi.Pointer<ECDSA_SIG>)>();

  int i2d_ECDSA_SIG(
    ffi.Pointer<ECDSA_SIG> sig,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_ECDSA_SIG(
      sig,
      pp,
    );
  }

  late final _i2d_ECDSA_SIGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ECDSA_SIG>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_ECDSA_SIG');
  late final _i2d_ECDSA_SIG = _i2d_ECDSA_SIGPtr.asFunction<
      int Function(ffi.Pointer<ECDSA_SIG>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ECDSA_SIG> d2i_ECDSA_SIG(
    ffi.Pointer<ffi.Pointer<ECDSA_SIG>> sig,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int len,
  ) {
    return _d2i_ECDSA_SIG(
      sig,
      pp,
      len,
    );
  }

  late final _d2i_ECDSA_SIGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ECDSA_SIG> Function(
              ffi.Pointer<ffi.Pointer<ECDSA_SIG>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_ECDSA_SIG');
  late final _d2i_ECDSA_SIG = _d2i_ECDSA_SIGPtr.asFunction<
      ffi.Pointer<ECDSA_SIG> Function(ffi.Pointer<ffi.Pointer<ECDSA_SIG>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  void ECDSA_SIG_get0(
    ffi.Pointer<ECDSA_SIG> sig,
    ffi.Pointer<ffi.Pointer<BIGNUM>> pr,
    ffi.Pointer<ffi.Pointer<BIGNUM>> ps,
  ) {
    return _ECDSA_SIG_get0(
      sig,
      pr,
      ps,
    );
  }

  late final _ECDSA_SIG_get0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ECDSA_SIG>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>)>>('ECDSA_SIG_get0');
  late final _ECDSA_SIG_get0 = _ECDSA_SIG_get0Ptr.asFunction<
      void Function(ffi.Pointer<ECDSA_SIG>, ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>)>();

  ffi.Pointer<BIGNUM> ECDSA_SIG_get0_r(
    ffi.Pointer<ECDSA_SIG> sig,
  ) {
    return _ECDSA_SIG_get0_r(
      sig,
    );
  }

  late final _ECDSA_SIG_get0_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<ECDSA_SIG>)>>('ECDSA_SIG_get0_r');
  late final _ECDSA_SIG_get0_r = _ECDSA_SIG_get0_rPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<ECDSA_SIG>)>();

  ffi.Pointer<BIGNUM> ECDSA_SIG_get0_s(
    ffi.Pointer<ECDSA_SIG> sig,
  ) {
    return _ECDSA_SIG_get0_s(
      sig,
    );
  }

  late final _ECDSA_SIG_get0_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIGNUM> Function(
              ffi.Pointer<ECDSA_SIG>)>>('ECDSA_SIG_get0_s');
  late final _ECDSA_SIG_get0_s = _ECDSA_SIG_get0_sPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<ECDSA_SIG>)>();

  int ECDSA_SIG_set0(
    ffi.Pointer<ECDSA_SIG> sig,
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> s,
  ) {
    return _ECDSA_SIG_set0(
      sig,
      r,
      s,
    );
  }

  late final _ECDSA_SIG_set0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ECDSA_SIG>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('ECDSA_SIG_set0');
  late final _ECDSA_SIG_set0 = _ECDSA_SIG_set0Ptr.asFunction<
      int Function(
          ffi.Pointer<ECDSA_SIG>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<ECDSA_SIG> ECDSA_do_sign(
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgst_len,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_do_sign(
      dgst,
      dgst_len,
      eckey,
    );
  }

  late final _ECDSA_do_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ECDSA_SIG> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int, ffi.Pointer<EC_KEY>)>>('ECDSA_do_sign');
  late final _ECDSA_do_sign = _ECDSA_do_signPtr.asFunction<
      ffi.Pointer<ECDSA_SIG> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<EC_KEY>)>();

  ffi.Pointer<ECDSA_SIG> ECDSA_do_sign_ex(
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgstlen,
    ffi.Pointer<BIGNUM> kinv,
    ffi.Pointer<BIGNUM> rp,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_do_sign_ex(
      dgst,
      dgstlen,
      kinv,
      rp,
      eckey,
    );
  }

  late final _ECDSA_do_sign_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ECDSA_SIG> Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<EC_KEY>)>>('ECDSA_do_sign_ex');
  late final _ECDSA_do_sign_ex = _ECDSA_do_sign_exPtr.asFunction<
      ffi.Pointer<ECDSA_SIG> Function(ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>, ffi.Pointer<EC_KEY>)>();

  int ECDSA_do_verify(
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgst_len,
    ffi.Pointer<ECDSA_SIG> sig,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_do_verify(
      dgst,
      dgst_len,
      sig,
      eckey,
    );
  }

  late final _ECDSA_do_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ECDSA_SIG>, ffi.Pointer<EC_KEY>)>>('ECDSA_do_verify');
  late final _ECDSA_do_verify = _ECDSA_do_verifyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ECDSA_SIG>,
          ffi.Pointer<EC_KEY>)>();

  int ECDSA_sign_setup(
    ffi.Pointer<EC_KEY> eckey,
    ffi.Pointer<BN_CTX> ctx,
    ffi.Pointer<ffi.Pointer<BIGNUM>> kinv,
    ffi.Pointer<ffi.Pointer<BIGNUM>> rp,
  ) {
    return _ECDSA_sign_setup(
      eckey,
      ctx,
      kinv,
      rp,
    );
  }

  late final _ECDSA_sign_setupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EC_KEY>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>)>>('ECDSA_sign_setup');
  late final _ECDSA_sign_setup = _ECDSA_sign_setupPtr.asFunction<
      int Function(
          ffi.Pointer<EC_KEY>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>)>();

  int ECDSA_sign(
    int type,
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgstlen,
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.UnsignedInt> siglen,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_sign(
      type,
      dgst,
      dgstlen,
      sig,
      siglen,
      eckey,
    );
  }

  late final _ECDSA_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<EC_KEY>)>>('ECDSA_sign');
  late final _ECDSA_sign = _ECDSA_signPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<EC_KEY>)>();

  int ECDSA_sign_ex(
    int type,
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgstlen,
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.UnsignedInt> siglen,
    ffi.Pointer<BIGNUM> kinv,
    ffi.Pointer<BIGNUM> rp,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_sign_ex(
      type,
      dgst,
      dgstlen,
      sig,
      siglen,
      kinv,
      rp,
      eckey,
    );
  }

  late final _ECDSA_sign_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<EC_KEY>)>>('ECDSA_sign_ex');
  late final _ECDSA_sign_ex = _ECDSA_sign_exPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<EC_KEY>)>();

  int ECDSA_verify(
    int type,
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgstlen,
    ffi.Pointer<ffi.UnsignedChar> sig,
    int siglen,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_verify(
      type,
      dgst,
      dgstlen,
      sig,
      siglen,
      eckey,
    );
  }

  late final _ECDSA_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<EC_KEY>)>>('ECDSA_verify');
  late final _ECDSA_verify = _ECDSA_verifyPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<EC_KEY>)>();

  int ECDSA_size(
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _ECDSA_size(
      eckey,
    );
  }

  late final _ECDSA_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>(
          'ECDSA_size');
  late final _ECDSA_size =
      _ECDSA_sizePtr.asFunction<int Function(ffi.Pointer<EC_KEY>)>();

  ffi.Pointer<EC_KEY_METHOD> EC_KEY_METHOD_new(
    ffi.Pointer<EC_KEY_METHOD> meth,
  ) {
    return _EC_KEY_METHOD_new(
      meth,
    );
  }

  late final _EC_KEY_METHOD_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY_METHOD> Function(
              ffi.Pointer<EC_KEY_METHOD>)>>('EC_KEY_METHOD_new');
  late final _EC_KEY_METHOD_new = _EC_KEY_METHOD_newPtr.asFunction<
      ffi.Pointer<EC_KEY_METHOD> Function(ffi.Pointer<EC_KEY_METHOD>)>();

  void EC_KEY_METHOD_free(
    ffi.Pointer<EC_KEY_METHOD> meth,
  ) {
    return _EC_KEY_METHOD_free(
      meth,
    );
  }

  late final _EC_KEY_METHOD_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY_METHOD>)>>(
      'EC_KEY_METHOD_free');
  late final _EC_KEY_METHOD_free = _EC_KEY_METHOD_freePtr.asFunction<
      void Function(ffi.Pointer<EC_KEY_METHOD>)>();

  void EC_KEY_METHOD_set_init(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>> init,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY>)>>
        finish,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_KEY>)>>
        copy,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_GROUP>)>>
        set_group,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<BIGNUM>)>>
        set_private,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_POINT>)>>
        set_public,
  ) {
    return _EC_KEY_METHOD_set_init(
      meth,
      init,
      finish,
      copy,
      set_group,
      set_private,
      set_public,
    );
  }

  late final _EC_KEY_METHOD_set_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EC_KEY>, ffi.Pointer<EC_KEY>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EC_KEY>, ffi.Pointer<EC_GROUP>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EC_KEY>, ffi.Pointer<BIGNUM>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EC_KEY>,
                          ffi.Pointer<EC_POINT>)>>)>>('EC_KEY_METHOD_set_init');
  late final _EC_KEY_METHOD_set_init = _EC_KEY_METHOD_set_initPtr.asFunction<
      void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_KEY>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EC_KEY>, ffi.Pointer<EC_GROUP>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<BIGNUM>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EC_KEY>, ffi.Pointer<EC_POINT>)>>)>();

  void EC_KEY_METHOD_set_keygen(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>
        keygen,
  ) {
    return _EC_KEY_METHOD_set_keygen(
      meth,
      keygen,
    );
  }

  late final _EC_KEY_METHOD_set_keygenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EC_KEY>)>>)>>('EC_KEY_METHOD_set_keygen');
  late final _EC_KEY_METHOD_set_keygen =
      _EC_KEY_METHOD_set_keygenPtr.asFunction<
          void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<EC_KEY>)>>)>();

  void EC_KEY_METHOD_set_compute_key(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
                    ffi.Pointer<ffi.Int>,
                    ffi.Pointer<EC_POINT>,
                    ffi.Pointer<EC_KEY>)>>
        ckey,
  ) {
    return _EC_KEY_METHOD_set_compute_key(
      meth,
      ckey,
    );
  }

  late final _EC_KEY_METHOD_set_compute_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EC_KEY_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
                              ffi.Pointer<ffi.Int>,
                              ffi.Pointer<EC_POINT>,
                              ffi.Pointer<EC_KEY>)>>)>>(
      'EC_KEY_METHOD_set_compute_key');
  late final _EC_KEY_METHOD_set_compute_key =
      _EC_KEY_METHOD_set_compute_keyPtr.asFunction<
          void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
                          ffi.Pointer<ffi.Int>,
                          ffi.Pointer<EC_POINT>,
                          ffi.Pointer<EC_KEY>)>>)>();

  void EC_KEY_METHOD_set_sign(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Int,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Int,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Pointer<ffi.UnsignedInt>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<EC_KEY>)>>
        sign,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<EC_KEY>,
                    ffi.Pointer<BN_CTX>,
                    ffi.Pointer<ffi.Pointer<BIGNUM>>,
                    ffi.Pointer<ffi.Pointer<BIGNUM>>)>>
        sign_setup,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ECDSA_SIG> Function(
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Int,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<EC_KEY>)>>
        sign_sig,
  ) {
    return _EC_KEY_METHOD_set_sign(
      meth,
      sign,
      sign_setup,
      sign_sig,
    );
  }

  late final _EC_KEY_METHOD_set_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedInt>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<EC_KEY>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EC_KEY>,
                          ffi.Pointer<BN_CTX>,
                          ffi.Pointer<ffi.Pointer<BIGNUM>>,
                          ffi.Pointer<ffi.Pointer<BIGNUM>>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ECDSA_SIG> Function(
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<EC_KEY>)>>)>>('EC_KEY_METHOD_set_sign');
  late final _EC_KEY_METHOD_set_sign = _EC_KEY_METHOD_set_signPtr.asFunction<
      void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Int,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Int,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<ffi.UnsignedInt>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<EC_KEY>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<EC_KEY>,
                      ffi.Pointer<BN_CTX>,
                      ffi.Pointer<ffi.Pointer<BIGNUM>>,
                      ffi.Pointer<ffi.Pointer<BIGNUM>>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ECDSA_SIG> Function(
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Int,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<EC_KEY>)>>)>();

  void EC_KEY_METHOD_set_verify(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Int,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Int,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Int,
                    ffi.Pointer<EC_KEY>)>>
        verify,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
                    ffi.Pointer<ECDSA_SIG>, ffi.Pointer<EC_KEY>)>>
        verify_sig,
  ) {
    return _EC_KEY_METHOD_set_verify(
      meth,
      verify,
      verify_sig,
    );
  }

  late final _EC_KEY_METHOD_set_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<EC_KEY>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<ECDSA_SIG>,
                          ffi.Pointer<EC_KEY>)>>)>>('EC_KEY_METHOD_set_verify');
  late final _EC_KEY_METHOD_set_verify =
      _EC_KEY_METHOD_set_verifyPtr.asFunction<
          void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<EC_KEY>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
                          ffi.Pointer<ECDSA_SIG>, ffi.Pointer<EC_KEY>)>>)>();

  void EC_KEY_METHOD_get_init(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>>
        pinit,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY>)>>>
        pfinish,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EC_KEY>, ffi.Pointer<EC_KEY>)>>>
        pcopy,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EC_KEY>, ffi.Pointer<EC_GROUP>)>>>
        pset_group,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EC_KEY>, ffi.Pointer<BIGNUM>)>>>
        pset_private,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EC_KEY>, ffi.Pointer<EC_POINT>)>>>
        pset_public,
  ) {
    return _EC_KEY_METHOD_get_init(
      meth,
      pinit,
      pfinish,
      pcopy,
      pset_group,
      pset_private,
      pset_public,
    );
  }

  late final _EC_KEY_METHOD_get_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EC_KEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EC_KEY>)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Void Function(ffi.Pointer<EC_KEY>)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EC_KEY>, ffi.Pointer<EC_KEY>)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EC_KEY>, ffi.Pointer<EC_GROUP>)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EC_KEY>, ffi.Pointer<BIGNUM>)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>, ffi.Pointer<EC_POINT>)>>>)>>(
      'EC_KEY_METHOD_get_init');
  late final _EC_KEY_METHOD_get_init = _EC_KEY_METHOD_get_initPtr.asFunction<
      void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EC_KEY>)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EC_KEY>, ffi.Pointer<EC_KEY>)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EC_KEY>, ffi.Pointer<EC_GROUP>)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EC_KEY>, ffi.Pointer<BIGNUM>)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EC_KEY>, ffi.Pointer<EC_POINT>)>>>)>();

  void EC_KEY_METHOD_get_keygen(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EC_KEY>)>>>
        pkeygen,
  ) {
    return _EC_KEY_METHOD_get_keygen(
      meth,
      pkeygen,
    );
  }

  late final _EC_KEY_METHOD_get_keygenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EC_KEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(ffi.Pointer<EC_KEY>)>>>)>>(
      'EC_KEY_METHOD_get_keygen');
  late final _EC_KEY_METHOD_get_keygen =
      _EC_KEY_METHOD_get_keygenPtr.asFunction<
          void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<EC_KEY>)>>>)>();

  void EC_KEY_METHOD_get_compute_key(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
                        ffi.Pointer<ffi.Int>,
                        ffi.Pointer<EC_POINT>,
                        ffi.Pointer<EC_KEY>)>>>
        pck,
  ) {
    return _EC_KEY_METHOD_get_compute_key(
      meth,
      pck,
    );
  }

  late final _EC_KEY_METHOD_get_compute_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EC_KEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
                                  ffi.Pointer<ffi.Int>,
                                  ffi.Pointer<EC_POINT>,
                                  ffi.Pointer<EC_KEY>)>>>)>>(
      'EC_KEY_METHOD_get_compute_key');
  late final _EC_KEY_METHOD_get_compute_key =
      _EC_KEY_METHOD_get_compute_keyPtr.asFunction<
          void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
                              ffi.Pointer<ffi.Int>,
                              ffi.Pointer<EC_POINT>,
                              ffi.Pointer<EC_KEY>)>>>)>();

  void EC_KEY_METHOD_get_sign(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Int,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Int,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Pointer<ffi.UnsignedInt>,
                        ffi.Pointer<BIGNUM>,
                        ffi.Pointer<BIGNUM>,
                        ffi.Pointer<EC_KEY>)>>>
        psign,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Pointer<EC_KEY>,
                        ffi.Pointer<BN_CTX>,
                        ffi.Pointer<ffi.Pointer<BIGNUM>>,
                        ffi.Pointer<ffi.Pointer<BIGNUM>>)>>>
        psign_setup,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Pointer<ECDSA_SIG> Function(
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Int,
                        ffi.Pointer<BIGNUM>,
                        ffi.Pointer<BIGNUM>,
                        ffi.Pointer<EC_KEY>)>>>
        psign_sig,
  ) {
    return _EC_KEY_METHOD_get_sign(
      meth,
      psign,
      psign_setup,
      psign_sig,
    );
  }

  late final _EC_KEY_METHOD_get_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EC_KEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Int,
                                  ffi.Pointer<ffi.UnsignedChar>,
                                  ffi.Int,
                                  ffi.Pointer<ffi.UnsignedChar>,
                                  ffi.Pointer<ffi.UnsignedInt>,
                                  ffi.Pointer<BIGNUM>,
                                  ffi.Pointer<BIGNUM>,
                                  ffi.Pointer<EC_KEY>)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<EC_KEY>,
                                  ffi.Pointer<BN_CTX>,
                                  ffi.Pointer<ffi.Pointer<BIGNUM>>,
                                  ffi.Pointer<ffi.Pointer<BIGNUM>>)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Pointer<ECDSA_SIG> Function(
                                  ffi.Pointer<ffi.UnsignedChar>,
                                  ffi.Int,
                                  ffi.Pointer<BIGNUM>,
                                  ffi.Pointer<BIGNUM>,
                                  ffi.Pointer<EC_KEY>)>>>)>>(
      'EC_KEY_METHOD_get_sign');
  late final _EC_KEY_METHOD_get_sign = _EC_KEY_METHOD_get_signPtr.asFunction<
      void Function(
          ffi.Pointer<EC_KEY_METHOD>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedInt>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<EC_KEY>)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<EC_KEY>,
                          ffi.Pointer<BN_CTX>,
                          ffi.Pointer<ffi.Pointer<BIGNUM>>,
                          ffi.Pointer<ffi.Pointer<BIGNUM>>)>>>,
          ffi.Pointer<
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ECDSA_SIG> Function(
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<EC_KEY>)>>>)>();

  void EC_KEY_METHOD_get_verify(
    ffi.Pointer<EC_KEY_METHOD> meth,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(
                        ffi.Int,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Int,
                        ffi.Pointer<ffi.UnsignedChar>,
                        ffi.Int,
                        ffi.Pointer<EC_KEY>)>>>
        pverify,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
                        ffi.Pointer<ECDSA_SIG>, ffi.Pointer<EC_KEY>)>>>
        pverify_sig,
  ) {
    return _EC_KEY_METHOD_get_verify(
      meth,
      pverify,
      pverify_sig,
    );
  }

  late final _EC_KEY_METHOD_get_verifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EC_KEY_METHOD>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Int,
                                  ffi.Pointer<ffi.UnsignedChar>,
                                  ffi.Int,
                                  ffi.Pointer<ffi.UnsignedChar>,
                                  ffi.Int,
                                  ffi.Pointer<EC_KEY>)>>>,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int Function(
                                  ffi.Pointer<ffi.UnsignedChar>,
                                  ffi.Int,
                                  ffi.Pointer<ECDSA_SIG>,
                                  ffi.Pointer<EC_KEY>)>>>)>>(
      'EC_KEY_METHOD_get_verify');
  late final _EC_KEY_METHOD_get_verify =
      _EC_KEY_METHOD_get_verifyPtr.asFunction<
          void Function(
              ffi.Pointer<EC_KEY_METHOD>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Int,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int,
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int,
                              ffi.Pointer<EC_KEY>)>>>,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<ffi.UnsignedChar>,
                              ffi.Int,
                              ffi.Pointer<ECDSA_SIG>,
                              ffi.Pointer<EC_KEY>)>>>)>();

  int ERR_load_RSA_strings() {
    return _ERR_load_RSA_strings();
  }

  late final _ERR_load_RSA_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_RSA_strings');
  late final _ERR_load_RSA_strings =
      _ERR_load_RSA_stringsPtr.asFunction<int Function()>();

  ffi.Pointer<RSA> RSA_new() {
    return _RSA_new();
  }

  late final _RSA_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RSA> Function()>>('RSA_new');
  late final _RSA_new = _RSA_newPtr.asFunction<ffi.Pointer<RSA> Function()>();

  ffi.Pointer<RSA> RSA_new_method(
    ffi.Pointer<ENGINE> engine,
  ) {
    return _RSA_new_method(
      engine,
    );
  }

  late final _RSA_new_methodPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<RSA> Function(ffi.Pointer<ENGINE>)>>(
      'RSA_new_method');
  late final _RSA_new_method = _RSA_new_methodPtr.asFunction<
      ffi.Pointer<RSA> Function(ffi.Pointer<ENGINE>)>();

  int RSA_bits(
    ffi.Pointer<RSA> rsa,
  ) {
    return _RSA_bits(
      rsa,
    );
  }

  late final _RSA_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>(
          'RSA_bits');
  late final _RSA_bits =
      _RSA_bitsPtr.asFunction<int Function(ffi.Pointer<RSA>)>();

  int RSA_size(
    ffi.Pointer<RSA> rsa,
  ) {
    return _RSA_size(
      rsa,
    );
  }

  late final _RSA_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>(
          'RSA_size');
  late final _RSA_size =
      _RSA_sizePtr.asFunction<int Function(ffi.Pointer<RSA>)>();

  int RSA_security_bits(
    ffi.Pointer<RSA> rsa,
  ) {
    return _RSA_security_bits(
      rsa,
    );
  }

  late final _RSA_security_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>(
          'RSA_security_bits');
  late final _RSA_security_bits =
      _RSA_security_bitsPtr.asFunction<int Function(ffi.Pointer<RSA>)>();

  int RSA_set0_key(
    ffi.Pointer<RSA> r,
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BIGNUM> d,
  ) {
    return _RSA_set0_key(
      r,
      n,
      e,
      d,
    );
  }

  late final _RSA_set0_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<RSA>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('RSA_set0_key');
  late final _RSA_set0_key = _RSA_set0_keyPtr.asFunction<
      int Function(ffi.Pointer<RSA>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>)>();

  int RSA_set0_factors(
    ffi.Pointer<RSA> r,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> q,
  ) {
    return _RSA_set0_factors(
      r,
      p,
      q,
    );
  }

  late final _RSA_set0_factorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<RSA>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('RSA_set0_factors');
  late final _RSA_set0_factors = _RSA_set0_factorsPtr.asFunction<
      int Function(
          ffi.Pointer<RSA>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  int RSA_set0_crt_params(
    ffi.Pointer<RSA> r,
    ffi.Pointer<BIGNUM> dmp1,
    ffi.Pointer<BIGNUM> dmq1,
    ffi.Pointer<BIGNUM> iqmp,
  ) {
    return _RSA_set0_crt_params(
      r,
      dmp1,
      dmq1,
      iqmp,
    );
  }

  late final _RSA_set0_crt_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('RSA_set0_crt_params');
  late final _RSA_set0_crt_params = _RSA_set0_crt_paramsPtr.asFunction<
      int Function(ffi.Pointer<RSA>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>)>();

  int RSA_set0_multi_prime_params(
    ffi.Pointer<RSA> r,
    ffi.Pointer<ffi.Pointer<BIGNUM>> primes,
    ffi.Pointer<ffi.Pointer<BIGNUM>> exps,
    ffi.Pointer<ffi.Pointer<BIGNUM>> coeffs,
    int pnum,
  ) {
    return _RSA_set0_multi_prime_params(
      r,
      primes,
      exps,
      coeffs,
      pnum,
    );
  }

  late final _RSA_set0_multi_prime_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Int)>>('RSA_set0_multi_prime_params');
  late final _RSA_set0_multi_prime_params =
      _RSA_set0_multi_prime_paramsPtr.asFunction<
          int Function(
              ffi.Pointer<RSA>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              int)>();

  void RSA_get0_key(
    ffi.Pointer<RSA> r,
    ffi.Pointer<ffi.Pointer<BIGNUM>> n,
    ffi.Pointer<ffi.Pointer<BIGNUM>> e,
    ffi.Pointer<ffi.Pointer<BIGNUM>> d,
  ) {
    return _RSA_get0_key(
      r,
      n,
      e,
      d,
    );
  }

  late final _RSA_get0_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<RSA>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>)>>('RSA_get0_key');
  late final _RSA_get0_key = _RSA_get0_keyPtr.asFunction<
      void Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>)>();

  void RSA_get0_factors(
    ffi.Pointer<RSA> r,
    ffi.Pointer<ffi.Pointer<BIGNUM>> p,
    ffi.Pointer<ffi.Pointer<BIGNUM>> q,
  ) {
    return _RSA_get0_factors(
      r,
      p,
      q,
    );
  }

  late final _RSA_get0_factorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RSA>, ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>)>>('RSA_get0_factors');
  late final _RSA_get0_factors = _RSA_get0_factorsPtr.asFunction<
      void Function(ffi.Pointer<RSA>, ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>)>();

  int RSA_get_multi_prime_extra_count(
    ffi.Pointer<RSA> r,
  ) {
    return _RSA_get_multi_prime_extra_count(
      r,
    );
  }

  late final _RSA_get_multi_prime_extra_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>(
          'RSA_get_multi_prime_extra_count');
  late final _RSA_get_multi_prime_extra_count =
      _RSA_get_multi_prime_extra_countPtr.asFunction<
          int Function(ffi.Pointer<RSA>)>();

  int RSA_get0_multi_prime_factors(
    ffi.Pointer<RSA> r,
    ffi.Pointer<ffi.Pointer<BIGNUM>> primes,
  ) {
    return _RSA_get0_multi_prime_factors(
      r,
      primes,
    );
  }

  late final _RSA_get0_multi_prime_factorsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<RSA>, ffi.Pointer<ffi.Pointer<BIGNUM>>)>>(
      'RSA_get0_multi_prime_factors');
  late final _RSA_get0_multi_prime_factors =
      _RSA_get0_multi_prime_factorsPtr.asFunction<
          int Function(ffi.Pointer<RSA>, ffi.Pointer<ffi.Pointer<BIGNUM>>)>();

  void RSA_get0_crt_params(
    ffi.Pointer<RSA> r,
    ffi.Pointer<ffi.Pointer<BIGNUM>> dmp1,
    ffi.Pointer<ffi.Pointer<BIGNUM>> dmq1,
    ffi.Pointer<ffi.Pointer<BIGNUM>> iqmp,
  ) {
    return _RSA_get0_crt_params(
      r,
      dmp1,
      dmq1,
      iqmp,
    );
  }

  late final _RSA_get0_crt_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<RSA>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>)>>('RSA_get0_crt_params');
  late final _RSA_get0_crt_params = _RSA_get0_crt_paramsPtr.asFunction<
      void Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>)>();

  int RSA_get0_multi_prime_crt_params(
    ffi.Pointer<RSA> r,
    ffi.Pointer<ffi.Pointer<BIGNUM>> exps,
    ffi.Pointer<ffi.Pointer<BIGNUM>> coeffs,
  ) {
    return _RSA_get0_multi_prime_crt_params(
      r,
      exps,
      coeffs,
    );
  }

  late final _RSA_get0_multi_prime_crt_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<RSA>,
                  ffi.Pointer<ffi.Pointer<BIGNUM>>,
                  ffi.Pointer<ffi.Pointer<BIGNUM>>)>>(
      'RSA_get0_multi_prime_crt_params');
  late final _RSA_get0_multi_prime_crt_params =
      _RSA_get0_multi_prime_crt_paramsPtr.asFunction<
          int Function(ffi.Pointer<RSA>, ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>)>();

  ffi.Pointer<BIGNUM> RSA_get0_n(
    ffi.Pointer<RSA> d,
  ) {
    return _RSA_get0_n(
      d,
    );
  }

  late final _RSA_get0_nPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>>(
      'RSA_get0_n');
  late final _RSA_get0_n = _RSA_get0_nPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>();

  ffi.Pointer<BIGNUM> RSA_get0_e(
    ffi.Pointer<RSA> d,
  ) {
    return _RSA_get0_e(
      d,
    );
  }

  late final _RSA_get0_ePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>>(
      'RSA_get0_e');
  late final _RSA_get0_e = _RSA_get0_ePtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>();

  ffi.Pointer<BIGNUM> RSA_get0_d(
    ffi.Pointer<RSA> d,
  ) {
    return _RSA_get0_d(
      d,
    );
  }

  late final _RSA_get0_dPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>>(
      'RSA_get0_d');
  late final _RSA_get0_d = _RSA_get0_dPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>();

  ffi.Pointer<BIGNUM> RSA_get0_p(
    ffi.Pointer<RSA> d,
  ) {
    return _RSA_get0_p(
      d,
    );
  }

  late final _RSA_get0_pPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>>(
      'RSA_get0_p');
  late final _RSA_get0_p = _RSA_get0_pPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>();

  ffi.Pointer<BIGNUM> RSA_get0_q(
    ffi.Pointer<RSA> d,
  ) {
    return _RSA_get0_q(
      d,
    );
  }

  late final _RSA_get0_qPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>>(
      'RSA_get0_q');
  late final _RSA_get0_q = _RSA_get0_qPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>();

  ffi.Pointer<BIGNUM> RSA_get0_dmp1(
    ffi.Pointer<RSA> r,
  ) {
    return _RSA_get0_dmp1(
      r,
    );
  }

  late final _RSA_get0_dmp1Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>>(
      'RSA_get0_dmp1');
  late final _RSA_get0_dmp1 = _RSA_get0_dmp1Ptr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>();

  ffi.Pointer<BIGNUM> RSA_get0_dmq1(
    ffi.Pointer<RSA> r,
  ) {
    return _RSA_get0_dmq1(
      r,
    );
  }

  late final _RSA_get0_dmq1Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>>(
      'RSA_get0_dmq1');
  late final _RSA_get0_dmq1 = _RSA_get0_dmq1Ptr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>();

  ffi.Pointer<BIGNUM> RSA_get0_iqmp(
    ffi.Pointer<RSA> r,
  ) {
    return _RSA_get0_iqmp(
      r,
    );
  }

  late final _RSA_get0_iqmpPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>>(
      'RSA_get0_iqmp');
  late final _RSA_get0_iqmp = _RSA_get0_iqmpPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<RSA>)>();

  ffi.Pointer<RSA_PSS_PARAMS> RSA_get0_pss_params(
    ffi.Pointer<RSA> r,
  ) {
    return _RSA_get0_pss_params(
      r,
    );
  }

  late final _RSA_get0_pss_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA_PSS_PARAMS> Function(
              ffi.Pointer<RSA>)>>('RSA_get0_pss_params');
  late final _RSA_get0_pss_params = _RSA_get0_pss_paramsPtr.asFunction<
      ffi.Pointer<RSA_PSS_PARAMS> Function(ffi.Pointer<RSA>)>();

  void RSA_clear_flags(
    ffi.Pointer<RSA> r,
    int flags,
  ) {
    return _RSA_clear_flags(
      r,
      flags,
    );
  }

  late final _RSA_clear_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RSA>, ffi.Int)>>(
          'RSA_clear_flags');
  late final _RSA_clear_flags =
      _RSA_clear_flagsPtr.asFunction<void Function(ffi.Pointer<RSA>, int)>();

  int RSA_test_flags(
    ffi.Pointer<RSA> r,
    int flags,
  ) {
    return _RSA_test_flags(
      r,
      flags,
    );
  }

  late final _RSA_test_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>, ffi.Int)>>(
          'RSA_test_flags');
  late final _RSA_test_flags =
      _RSA_test_flagsPtr.asFunction<int Function(ffi.Pointer<RSA>, int)>();

  void RSA_set_flags(
    ffi.Pointer<RSA> r,
    int flags,
  ) {
    return _RSA_set_flags(
      r,
      flags,
    );
  }

  late final _RSA_set_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RSA>, ffi.Int)>>(
          'RSA_set_flags');
  late final _RSA_set_flags =
      _RSA_set_flagsPtr.asFunction<void Function(ffi.Pointer<RSA>, int)>();

  int RSA_get_version(
    ffi.Pointer<RSA> r,
  ) {
    return _RSA_get_version(
      r,
    );
  }

  late final _RSA_get_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>(
          'RSA_get_version');
  late final _RSA_get_version =
      _RSA_get_versionPtr.asFunction<int Function(ffi.Pointer<RSA>)>();

  ffi.Pointer<ENGINE> RSA_get0_engine(
    ffi.Pointer<RSA> r,
  ) {
    return _RSA_get0_engine(
      r,
    );
  }

  late final _RSA_get0_enginePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ENGINE> Function(ffi.Pointer<RSA>)>>(
      'RSA_get0_engine');
  late final _RSA_get0_engine = _RSA_get0_enginePtr.asFunction<
      ffi.Pointer<ENGINE> Function(ffi.Pointer<RSA>)>();

  ffi.Pointer<RSA> RSA_generate_key(
    int bits,
    int e,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _RSA_generate_key(
      bits,
      e,
      callback,
      cb_arg,
    );
  }

  late final _RSA_generate_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA> Function(
              ffi.Int,
              ffi.UnsignedLong,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('RSA_generate_key');
  late final _RSA_generate_key = _RSA_generate_keyPtr.asFunction<
      ffi.Pointer<RSA> Function(
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int RSA_generate_key_ex(
    ffi.Pointer<RSA> rsa,
    int bits,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _RSA_generate_key_ex(
      rsa,
      bits,
      e,
      cb,
    );
  }

  late final _RSA_generate_key_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<RSA>, ffi.Int, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_GENCB>)>>('RSA_generate_key_ex');
  late final _RSA_generate_key_ex = _RSA_generate_key_exPtr.asFunction<
      int Function(
          ffi.Pointer<RSA>, int, ffi.Pointer<BIGNUM>, ffi.Pointer<BN_GENCB>)>();

  int RSA_generate_multi_prime_key(
    ffi.Pointer<RSA> rsa,
    int bits,
    int primes,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _RSA_generate_multi_prime_key(
      rsa,
      bits,
      primes,
      e,
      cb,
    );
  }

  late final _RSA_generate_multi_prime_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_GENCB>)>>('RSA_generate_multi_prime_key');
  late final _RSA_generate_multi_prime_key =
      _RSA_generate_multi_prime_keyPtr.asFunction<
          int Function(ffi.Pointer<RSA>, int, int, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_GENCB>)>();

  int RSA_X931_derive_ex(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<BIGNUM> p1,
    ffi.Pointer<BIGNUM> p2,
    ffi.Pointer<BIGNUM> q1,
    ffi.Pointer<BIGNUM> q2,
    ffi.Pointer<BIGNUM> Xp1,
    ffi.Pointer<BIGNUM> Xp2,
    ffi.Pointer<BIGNUM> Xp,
    ffi.Pointer<BIGNUM> Xq1,
    ffi.Pointer<BIGNUM> Xq2,
    ffi.Pointer<BIGNUM> Xq,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _RSA_X931_derive_ex(
      rsa,
      p1,
      p2,
      q1,
      q2,
      Xp1,
      Xp2,
      Xp,
      Xq1,
      Xq2,
      Xq,
      e,
      cb,
    );
  }

  late final _RSA_X931_derive_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_GENCB>)>>('RSA_X931_derive_ex');
  late final _RSA_X931_derive_ex = _RSA_X931_derive_exPtr.asFunction<
      int Function(
          ffi.Pointer<RSA>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>,
          ffi.Pointer<BN_GENCB>)>();

  int RSA_X931_generate_key_ex(
    ffi.Pointer<RSA> rsa,
    int bits,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _RSA_X931_generate_key_ex(
      rsa,
      bits,
      e,
      cb,
    );
  }

  late final _RSA_X931_generate_key_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<RSA>, ffi.Int, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_GENCB>)>>('RSA_X931_generate_key_ex');
  late final _RSA_X931_generate_key_ex =
      _RSA_X931_generate_key_exPtr.asFunction<
          int Function(ffi.Pointer<RSA>, int, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_GENCB>)>();

  int RSA_check_key(
    ffi.Pointer<RSA> arg0,
  ) {
    return _RSA_check_key(
      arg0,
    );
  }

  late final _RSA_check_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>(
          'RSA_check_key');
  late final _RSA_check_key =
      _RSA_check_keyPtr.asFunction<int Function(ffi.Pointer<RSA>)>();

  int RSA_check_key_ex(
    ffi.Pointer<RSA> arg0,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _RSA_check_key_ex(
      arg0,
      cb,
    );
  }

  late final _RSA_check_key_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA>, ffi.Pointer<BN_GENCB>)>>('RSA_check_key_ex');
  late final _RSA_check_key_ex = _RSA_check_key_exPtr.asFunction<
      int Function(ffi.Pointer<RSA>, ffi.Pointer<BN_GENCB>)>();

  int RSA_public_encrypt(
    int flen,
    ffi.Pointer<ffi.UnsignedChar> from,
    ffi.Pointer<ffi.UnsignedChar> to,
    ffi.Pointer<RSA> rsa,
    int padding,
  ) {
    return _RSA_public_encrypt(
      flen,
      from,
      to,
      rsa,
      padding,
    );
  }

  late final _RSA_public_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<RSA>,
              ffi.Int)>>('RSA_public_encrypt');
  late final _RSA_public_encrypt = _RSA_public_encryptPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<RSA>, int)>();

  int RSA_private_encrypt(
    int flen,
    ffi.Pointer<ffi.UnsignedChar> from,
    ffi.Pointer<ffi.UnsignedChar> to,
    ffi.Pointer<RSA> rsa,
    int padding,
  ) {
    return _RSA_private_encrypt(
      flen,
      from,
      to,
      rsa,
      padding,
    );
  }

  late final _RSA_private_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<RSA>,
              ffi.Int)>>('RSA_private_encrypt');
  late final _RSA_private_encrypt = _RSA_private_encryptPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<RSA>, int)>();

  int RSA_public_decrypt(
    int flen,
    ffi.Pointer<ffi.UnsignedChar> from,
    ffi.Pointer<ffi.UnsignedChar> to,
    ffi.Pointer<RSA> rsa,
    int padding,
  ) {
    return _RSA_public_decrypt(
      flen,
      from,
      to,
      rsa,
      padding,
    );
  }

  late final _RSA_public_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<RSA>,
              ffi.Int)>>('RSA_public_decrypt');
  late final _RSA_public_decrypt = _RSA_public_decryptPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<RSA>, int)>();

  int RSA_private_decrypt(
    int flen,
    ffi.Pointer<ffi.UnsignedChar> from,
    ffi.Pointer<ffi.UnsignedChar> to,
    ffi.Pointer<RSA> rsa,
    int padding,
  ) {
    return _RSA_private_decrypt(
      flen,
      from,
      to,
      rsa,
      padding,
    );
  }

  late final _RSA_private_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<RSA>,
              ffi.Int)>>('RSA_private_decrypt');
  late final _RSA_private_decrypt = _RSA_private_decryptPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<RSA>, int)>();

  void RSA_free(
    ffi.Pointer<RSA> r,
  ) {
    return _RSA_free(
      r,
    );
  }

  late final _RSA_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RSA>)>>(
          'RSA_free');
  late final _RSA_free =
      _RSA_freePtr.asFunction<void Function(ffi.Pointer<RSA>)>();

  int RSA_up_ref(
    ffi.Pointer<RSA> r,
  ) {
    return _RSA_up_ref(
      r,
    );
  }

  late final _RSA_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>(
          'RSA_up_ref');
  late final _RSA_up_ref =
      _RSA_up_refPtr.asFunction<int Function(ffi.Pointer<RSA>)>();

  int RSA_flags(
    ffi.Pointer<RSA> r,
  ) {
    return _RSA_flags(
      r,
    );
  }

  late final _RSA_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>(
          'RSA_flags');
  late final _RSA_flags =
      _RSA_flagsPtr.asFunction<int Function(ffi.Pointer<RSA>)>();

  void RSA_set_default_method(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_set_default_method(
      meth,
    );
  }

  late final _RSA_set_default_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RSA_METHOD>)>>(
          'RSA_set_default_method');
  late final _RSA_set_default_method = _RSA_set_default_methodPtr.asFunction<
      void Function(ffi.Pointer<RSA_METHOD>)>();

  ffi.Pointer<RSA_METHOD> RSA_get_default_method() {
    return _RSA_get_default_method();
  }

  late final _RSA_get_default_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RSA_METHOD> Function()>>(
          'RSA_get_default_method');
  late final _RSA_get_default_method = _RSA_get_default_methodPtr.asFunction<
      ffi.Pointer<RSA_METHOD> Function()>();

  ffi.Pointer<RSA_METHOD> RSA_null_method() {
    return _RSA_null_method();
  }

  late final _RSA_null_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RSA_METHOD> Function()>>(
          'RSA_null_method');
  late final _RSA_null_method =
      _RSA_null_methodPtr.asFunction<ffi.Pointer<RSA_METHOD> Function()>();

  ffi.Pointer<RSA_METHOD> RSA_get_method(
    ffi.Pointer<RSA> rsa,
  ) {
    return _RSA_get_method(
      rsa,
    );
  }

  late final _RSA_get_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA_METHOD> Function(
              ffi.Pointer<RSA>)>>('RSA_get_method');
  late final _RSA_get_method = _RSA_get_methodPtr.asFunction<
      ffi.Pointer<RSA_METHOD> Function(ffi.Pointer<RSA>)>();

  int RSA_set_method(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_set_method(
      rsa,
      meth,
    );
  }

  late final _RSA_set_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA>, ffi.Pointer<RSA_METHOD>)>>('RSA_set_method');
  late final _RSA_set_method = _RSA_set_methodPtr.asFunction<
      int Function(ffi.Pointer<RSA>, ffi.Pointer<RSA_METHOD>)>();

  ffi.Pointer<RSA_METHOD> RSA_PKCS1_OpenSSL() {
    return _RSA_PKCS1_OpenSSL();
  }

  late final _RSA_PKCS1_OpenSSLPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RSA_METHOD> Function()>>(
          'RSA_PKCS1_OpenSSL');
  late final _RSA_PKCS1_OpenSSL =
      _RSA_PKCS1_OpenSSLPtr.asFunction<ffi.Pointer<RSA_METHOD> Function()>();

  int RSA_pkey_ctx_ctrl(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int optype,
    int cmd,
    int p1,
    ffi.Pointer<ffi.Void> p2,
  ) {
    return _RSA_pkey_ctx_ctrl(
      ctx,
      optype,
      cmd,
      p1,
      p2,
    );
  }

  late final _RSA_pkey_ctx_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('RSA_pkey_ctx_ctrl');
  late final _RSA_pkey_ctx_ctrl = _RSA_pkey_ctx_ctrlPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY_CTX>, int, int, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<RSA> d2i_RSAPublicKey(
    ffi.Pointer<ffi.Pointer<RSA>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_RSAPublicKey(
      a,
      in1,
      len,
    );
  }

  late final _d2i_RSAPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA> Function(
              ffi.Pointer<ffi.Pointer<RSA>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_RSAPublicKey');
  late final _d2i_RSAPublicKey = _d2i_RSAPublicKeyPtr.asFunction<
      ffi.Pointer<RSA> Function(ffi.Pointer<ffi.Pointer<RSA>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_RSAPublicKey(
    ffi.Pointer<RSA> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_RSAPublicKey(
      a,
      out,
    );
  }

  late final _i2d_RSAPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<RSA>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_RSAPublicKey');
  late final _i2d_RSAPublicKey = _i2d_RSAPublicKeyPtr.asFunction<
      int Function(
          ffi.Pointer<RSA>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _RSAPublicKey_it =
      _lookup<ASN1_ITEM>('RSAPublicKey_it');

  ffi.Pointer<ASN1_ITEM> get RSAPublicKey_it => _RSAPublicKey_it;

  ffi.Pointer<RSA> d2i_RSAPrivateKey(
    ffi.Pointer<ffi.Pointer<RSA>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_RSAPrivateKey(
      a,
      in1,
      len,
    );
  }

  late final _d2i_RSAPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA> Function(
              ffi.Pointer<ffi.Pointer<RSA>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_RSAPrivateKey');
  late final _d2i_RSAPrivateKey = _d2i_RSAPrivateKeyPtr.asFunction<
      ffi.Pointer<RSA> Function(ffi.Pointer<ffi.Pointer<RSA>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_RSAPrivateKey(
    ffi.Pointer<RSA> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_RSAPrivateKey(
      a,
      out,
    );
  }

  late final _i2d_RSAPrivateKeyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<RSA>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_RSAPrivateKey');
  late final _i2d_RSAPrivateKey = _i2d_RSAPrivateKeyPtr.asFunction<
      int Function(
          ffi.Pointer<RSA>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _RSAPrivateKey_it =
      _lookup<ASN1_ITEM>('RSAPrivateKey_it');

  ffi.Pointer<ASN1_ITEM> get RSAPrivateKey_it => _RSAPrivateKey_it;

  ffi.Pointer<RSA_PSS_PARAMS> RSA_PSS_PARAMS_new() {
    return _RSA_PSS_PARAMS_new();
  }

  late final _RSA_PSS_PARAMS_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RSA_PSS_PARAMS> Function()>>(
          'RSA_PSS_PARAMS_new');
  late final _RSA_PSS_PARAMS_new = _RSA_PSS_PARAMS_newPtr.asFunction<
      ffi.Pointer<RSA_PSS_PARAMS> Function()>();

  void RSA_PSS_PARAMS_free(
    ffi.Pointer<RSA_PSS_PARAMS> a,
  ) {
    return _RSA_PSS_PARAMS_free(
      a,
    );
  }

  late final _RSA_PSS_PARAMS_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RSA_PSS_PARAMS>)>>(
      'RSA_PSS_PARAMS_free');
  late final _RSA_PSS_PARAMS_free = _RSA_PSS_PARAMS_freePtr.asFunction<
      void Function(ffi.Pointer<RSA_PSS_PARAMS>)>();

  ffi.Pointer<RSA_PSS_PARAMS> d2i_RSA_PSS_PARAMS(
    ffi.Pointer<ffi.Pointer<RSA_PSS_PARAMS>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_RSA_PSS_PARAMS(
      a,
      in1,
      len,
    );
  }

  late final _d2i_RSA_PSS_PARAMSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA_PSS_PARAMS> Function(
              ffi.Pointer<ffi.Pointer<RSA_PSS_PARAMS>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_RSA_PSS_PARAMS');
  late final _d2i_RSA_PSS_PARAMS = _d2i_RSA_PSS_PARAMSPtr.asFunction<
      ffi.Pointer<RSA_PSS_PARAMS> Function(
          ffi.Pointer<ffi.Pointer<RSA_PSS_PARAMS>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_RSA_PSS_PARAMS(
    ffi.Pointer<RSA_PSS_PARAMS> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_RSA_PSS_PARAMS(
      a,
      out,
    );
  }

  late final _i2d_RSA_PSS_PARAMSPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<RSA_PSS_PARAMS>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_RSA_PSS_PARAMS');
  late final _i2d_RSA_PSS_PARAMS = _i2d_RSA_PSS_PARAMSPtr.asFunction<
      int Function(ffi.Pointer<RSA_PSS_PARAMS>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _RSA_PSS_PARAMS_it =
      _lookup<ASN1_ITEM>('RSA_PSS_PARAMS_it');

  ffi.Pointer<ASN1_ITEM> get RSA_PSS_PARAMS_it => _RSA_PSS_PARAMS_it;

  ffi.Pointer<RSA_OAEP_PARAMS> RSA_OAEP_PARAMS_new() {
    return _RSA_OAEP_PARAMS_new();
  }

  late final _RSA_OAEP_PARAMS_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RSA_OAEP_PARAMS> Function()>>(
          'RSA_OAEP_PARAMS_new');
  late final _RSA_OAEP_PARAMS_new = _RSA_OAEP_PARAMS_newPtr.asFunction<
      ffi.Pointer<RSA_OAEP_PARAMS> Function()>();

  void RSA_OAEP_PARAMS_free(
    ffi.Pointer<RSA_OAEP_PARAMS> a,
  ) {
    return _RSA_OAEP_PARAMS_free(
      a,
    );
  }

  late final _RSA_OAEP_PARAMS_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RSA_OAEP_PARAMS>)>>(
      'RSA_OAEP_PARAMS_free');
  late final _RSA_OAEP_PARAMS_free = _RSA_OAEP_PARAMS_freePtr.asFunction<
      void Function(ffi.Pointer<RSA_OAEP_PARAMS>)>();

  ffi.Pointer<RSA_OAEP_PARAMS> d2i_RSA_OAEP_PARAMS(
    ffi.Pointer<ffi.Pointer<RSA_OAEP_PARAMS>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_RSA_OAEP_PARAMS(
      a,
      in1,
      len,
    );
  }

  late final _d2i_RSA_OAEP_PARAMSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA_OAEP_PARAMS> Function(
              ffi.Pointer<ffi.Pointer<RSA_OAEP_PARAMS>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_RSA_OAEP_PARAMS');
  late final _d2i_RSA_OAEP_PARAMS = _d2i_RSA_OAEP_PARAMSPtr.asFunction<
      ffi.Pointer<RSA_OAEP_PARAMS> Function(
          ffi.Pointer<ffi.Pointer<RSA_OAEP_PARAMS>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_RSA_OAEP_PARAMS(
    ffi.Pointer<RSA_OAEP_PARAMS> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_RSA_OAEP_PARAMS(
      a,
      out,
    );
  }

  late final _i2d_RSA_OAEP_PARAMSPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<RSA_OAEP_PARAMS>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_RSA_OAEP_PARAMS');
  late final _i2d_RSA_OAEP_PARAMS = _i2d_RSA_OAEP_PARAMSPtr.asFunction<
      int Function(ffi.Pointer<RSA_OAEP_PARAMS>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _RSA_OAEP_PARAMS_it =
      _lookup<ASN1_ITEM>('RSA_OAEP_PARAMS_it');

  ffi.Pointer<ASN1_ITEM> get RSA_OAEP_PARAMS_it => _RSA_OAEP_PARAMS_it;

  int RSA_print_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<RSA> r,
    int offset,
  ) {
    return _RSA_print_fp(
      fp,
      r,
      offset,
    );
  }

  late final _RSA_print_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<RSA>, ffi.Int)>>('RSA_print_fp');
  late final _RSA_print_fp = _RSA_print_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<RSA>, int)>();

  int RSA_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<RSA> r,
    int offset,
  ) {
    return _RSA_print(
      bp,
      r,
      offset,
    );
  }

  late final _RSA_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<RSA>, ffi.Int)>>('RSA_print');
  late final _RSA_print = _RSA_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<RSA>, int)>();

  int RSA_sign(
    int type,
    ffi.Pointer<ffi.UnsignedChar> m,
    int m_length,
    ffi.Pointer<ffi.UnsignedChar> sigret,
    ffi.Pointer<ffi.UnsignedInt> siglen,
    ffi.Pointer<RSA> rsa,
  ) {
    return _RSA_sign(
      type,
      m,
      m_length,
      sigret,
      siglen,
      rsa,
    );
  }

  late final _RSA_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<RSA>)>>('RSA_sign');
  late final _RSA_sign = _RSA_signPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<RSA>)>();

  int RSA_verify(
    int type,
    ffi.Pointer<ffi.UnsignedChar> m,
    int m_length,
    ffi.Pointer<ffi.UnsignedChar> sigbuf,
    int siglen,
    ffi.Pointer<RSA> rsa,
  ) {
    return _RSA_verify(
      type,
      m,
      m_length,
      sigbuf,
      siglen,
      rsa,
    );
  }

  late final _RSA_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.Pointer<RSA>)>>('RSA_verify');
  late final _RSA_verify = _RSA_verifyPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<RSA>)>();

  int RSA_sign_ASN1_OCTET_STRING(
    int type,
    ffi.Pointer<ffi.UnsignedChar> m,
    int m_length,
    ffi.Pointer<ffi.UnsignedChar> sigret,
    ffi.Pointer<ffi.UnsignedInt> siglen,
    ffi.Pointer<RSA> rsa,
  ) {
    return _RSA_sign_ASN1_OCTET_STRING(
      type,
      m,
      m_length,
      sigret,
      siglen,
      rsa,
    );
  }

  late final _RSA_sign_ASN1_OCTET_STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<RSA>)>>('RSA_sign_ASN1_OCTET_STRING');
  late final _RSA_sign_ASN1_OCTET_STRING =
      _RSA_sign_ASN1_OCTET_STRINGPtr.asFunction<
          int Function(
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<RSA>)>();

  int RSA_verify_ASN1_OCTET_STRING(
    int type,
    ffi.Pointer<ffi.UnsignedChar> m,
    int m_length,
    ffi.Pointer<ffi.UnsignedChar> sigbuf,
    int siglen,
    ffi.Pointer<RSA> rsa,
  ) {
    return _RSA_verify_ASN1_OCTET_STRING(
      type,
      m,
      m_length,
      sigbuf,
      siglen,
      rsa,
    );
  }

  late final _RSA_verify_ASN1_OCTET_STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.Pointer<RSA>)>>('RSA_verify_ASN1_OCTET_STRING');
  late final _RSA_verify_ASN1_OCTET_STRING =
      _RSA_verify_ASN1_OCTET_STRINGPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.UnsignedChar>, int,
              ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<RSA>)>();

  int RSA_blinding_on(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _RSA_blinding_on(
      rsa,
      ctx,
    );
  }

  late final _RSA_blinding_onPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA>, ffi.Pointer<BN_CTX>)>>('RSA_blinding_on');
  late final _RSA_blinding_on = _RSA_blinding_onPtr.asFunction<
      int Function(ffi.Pointer<RSA>, ffi.Pointer<BN_CTX>)>();

  void RSA_blinding_off(
    ffi.Pointer<RSA> rsa,
  ) {
    return _RSA_blinding_off(
      rsa,
    );
  }

  late final _RSA_blinding_offPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RSA>)>>(
          'RSA_blinding_off');
  late final _RSA_blinding_off =
      _RSA_blinding_offPtr.asFunction<void Function(ffi.Pointer<RSA>)>();

  ffi.Pointer<BN_BLINDING> RSA_setup_blinding(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<BN_CTX> ctx,
  ) {
    return _RSA_setup_blinding(
      rsa,
      ctx,
    );
  }

  late final _RSA_setup_blindingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BN_BLINDING> Function(
              ffi.Pointer<RSA>, ffi.Pointer<BN_CTX>)>>('RSA_setup_blinding');
  late final _RSA_setup_blinding = _RSA_setup_blindingPtr.asFunction<
      ffi.Pointer<BN_BLINDING> Function(
          ffi.Pointer<RSA>, ffi.Pointer<BN_CTX>)>();

  int RSA_padding_add_PKCS1_type_1(
    ffi.Pointer<ffi.UnsignedChar> to,
    int tlen,
    ffi.Pointer<ffi.UnsignedChar> f,
    int fl,
  ) {
    return _RSA_padding_add_PKCS1_type_1(
      to,
      tlen,
      f,
      fl,
    );
  }

  late final _RSA_padding_add_PKCS1_type_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('RSA_padding_add_PKCS1_type_1');
  late final _RSA_padding_add_PKCS1_type_1 =
      _RSA_padding_add_PKCS1_type_1Ptr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, int,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int RSA_padding_check_PKCS1_type_1(
    ffi.Pointer<ffi.UnsignedChar> to,
    int tlen,
    ffi.Pointer<ffi.UnsignedChar> f,
    int fl,
    int rsa_len,
  ) {
    return _RSA_padding_check_PKCS1_type_1(
      to,
      tlen,
      f,
      fl,
      rsa_len,
    );
  }

  late final _RSA_padding_check_PKCS1_type_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int)>>('RSA_padding_check_PKCS1_type_1');
  late final _RSA_padding_check_PKCS1_type_1 =
      _RSA_padding_check_PKCS1_type_1Ptr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, int,
              ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  int RSA_padding_add_PKCS1_type_2(
    ffi.Pointer<ffi.UnsignedChar> to,
    int tlen,
    ffi.Pointer<ffi.UnsignedChar> f,
    int fl,
  ) {
    return _RSA_padding_add_PKCS1_type_2(
      to,
      tlen,
      f,
      fl,
    );
  }

  late final _RSA_padding_add_PKCS1_type_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('RSA_padding_add_PKCS1_type_2');
  late final _RSA_padding_add_PKCS1_type_2 =
      _RSA_padding_add_PKCS1_type_2Ptr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, int,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int RSA_padding_check_PKCS1_type_2(
    ffi.Pointer<ffi.UnsignedChar> to,
    int tlen,
    ffi.Pointer<ffi.UnsignedChar> f,
    int fl,
    int rsa_len,
  ) {
    return _RSA_padding_check_PKCS1_type_2(
      to,
      tlen,
      f,
      fl,
      rsa_len,
    );
  }

  late final _RSA_padding_check_PKCS1_type_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int)>>('RSA_padding_check_PKCS1_type_2');
  late final _RSA_padding_check_PKCS1_type_2 =
      _RSA_padding_check_PKCS1_type_2Ptr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, int,
              ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  int PKCS1_MGF1(
    ffi.Pointer<ffi.UnsignedChar> mask,
    int len,
    ffi.Pointer<ffi.UnsignedChar> seed,
    int seedlen,
    ffi.Pointer<EVP_MD> dgst,
  ) {
    return _PKCS1_MGF1(
      mask,
      len,
      seed,
      seedlen,
      dgst,
    );
  }

  late final _PKCS1_MGF1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long,
              ffi.Pointer<EVP_MD>)>>('PKCS1_MGF1');
  late final _PKCS1_MGF1 = _PKCS1_MGF1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<EVP_MD>)>();

  int RSA_padding_add_PKCS1_OAEP(
    ffi.Pointer<ffi.UnsignedChar> to,
    int tlen,
    ffi.Pointer<ffi.UnsignedChar> f,
    int fl,
    ffi.Pointer<ffi.UnsignedChar> p,
    int pl,
  ) {
    return _RSA_padding_add_PKCS1_OAEP(
      to,
      tlen,
      f,
      fl,
      p,
      pl,
    );
  }

  late final _RSA_padding_add_PKCS1_OAEPPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('RSA_padding_add_PKCS1_OAEP');
  late final _RSA_padding_add_PKCS1_OAEP =
      _RSA_padding_add_PKCS1_OAEPPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              int)>();

  int RSA_padding_check_PKCS1_OAEP(
    ffi.Pointer<ffi.UnsignedChar> to,
    int tlen,
    ffi.Pointer<ffi.UnsignedChar> f,
    int fl,
    int rsa_len,
    ffi.Pointer<ffi.UnsignedChar> p,
    int pl,
  ) {
    return _RSA_padding_check_PKCS1_OAEP(
      to,
      tlen,
      f,
      fl,
      rsa_len,
      p,
      pl,
    );
  }

  late final _RSA_padding_check_PKCS1_OAEPPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('RSA_padding_check_PKCS1_OAEP');
  late final _RSA_padding_check_PKCS1_OAEP =
      _RSA_padding_check_PKCS1_OAEPPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              int)>();

  int RSA_padding_add_PKCS1_OAEP_mgf1(
    ffi.Pointer<ffi.UnsignedChar> to,
    int tlen,
    ffi.Pointer<ffi.UnsignedChar> from,
    int flen,
    ffi.Pointer<ffi.UnsignedChar> param,
    int plen,
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<EVP_MD> mgf1md,
  ) {
    return _RSA_padding_add_PKCS1_OAEP_mgf1(
      to,
      tlen,
      from,
      flen,
      param,
      plen,
      md,
      mgf1md,
    );
  }

  late final _RSA_padding_add_PKCS1_OAEP_mgf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<EVP_MD>)>>('RSA_padding_add_PKCS1_OAEP_mgf1');
  late final _RSA_padding_add_PKCS1_OAEP_mgf1 =
      _RSA_padding_add_PKCS1_OAEP_mgf1Ptr.asFunction<
          int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<EVP_MD>)>();

  int RSA_padding_check_PKCS1_OAEP_mgf1(
    ffi.Pointer<ffi.UnsignedChar> to,
    int tlen,
    ffi.Pointer<ffi.UnsignedChar> from,
    int flen,
    int num,
    ffi.Pointer<ffi.UnsignedChar> param,
    int plen,
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<EVP_MD> mgf1md,
  ) {
    return _RSA_padding_check_PKCS1_OAEP_mgf1(
      to,
      tlen,
      from,
      flen,
      num,
      param,
      plen,
      md,
      mgf1md,
    );
  }

  late final _RSA_padding_check_PKCS1_OAEP_mgf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<EVP_MD>)>>('RSA_padding_check_PKCS1_OAEP_mgf1');
  late final _RSA_padding_check_PKCS1_OAEP_mgf1 =
      _RSA_padding_check_PKCS1_OAEP_mgf1Ptr.asFunction<
          int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<EVP_MD>)>();

  int RSA_padding_add_SSLv23(
    ffi.Pointer<ffi.UnsignedChar> to,
    int tlen,
    ffi.Pointer<ffi.UnsignedChar> f,
    int fl,
  ) {
    return _RSA_padding_add_SSLv23(
      to,
      tlen,
      f,
      fl,
    );
  }

  late final _RSA_padding_add_SSLv23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('RSA_padding_add_SSLv23');
  late final _RSA_padding_add_SSLv23 = _RSA_padding_add_SSLv23Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int RSA_padding_check_SSLv23(
    ffi.Pointer<ffi.UnsignedChar> to,
    int tlen,
    ffi.Pointer<ffi.UnsignedChar> f,
    int fl,
    int rsa_len,
  ) {
    return _RSA_padding_check_SSLv23(
      to,
      tlen,
      f,
      fl,
      rsa_len,
    );
  }

  late final _RSA_padding_check_SSLv23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int)>>('RSA_padding_check_SSLv23');
  late final _RSA_padding_check_SSLv23 =
      _RSA_padding_check_SSLv23Ptr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedChar>, int,
              ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  int RSA_padding_add_none(
    ffi.Pointer<ffi.UnsignedChar> to,
    int tlen,
    ffi.Pointer<ffi.UnsignedChar> f,
    int fl,
  ) {
    return _RSA_padding_add_none(
      to,
      tlen,
      f,
      fl,
    );
  }

  late final _RSA_padding_add_nonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('RSA_padding_add_none');
  late final _RSA_padding_add_none = _RSA_padding_add_nonePtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int RSA_padding_check_none(
    ffi.Pointer<ffi.UnsignedChar> to,
    int tlen,
    ffi.Pointer<ffi.UnsignedChar> f,
    int fl,
    int rsa_len,
  ) {
    return _RSA_padding_check_none(
      to,
      tlen,
      f,
      fl,
      rsa_len,
    );
  }

  late final _RSA_padding_check_nonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int)>>('RSA_padding_check_none');
  late final _RSA_padding_check_none = _RSA_padding_check_nonePtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  int RSA_padding_add_X931(
    ffi.Pointer<ffi.UnsignedChar> to,
    int tlen,
    ffi.Pointer<ffi.UnsignedChar> f,
    int fl,
  ) {
    return _RSA_padding_add_X931(
      to,
      tlen,
      f,
      fl,
    );
  }

  late final _RSA_padding_add_X931Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('RSA_padding_add_X931');
  late final _RSA_padding_add_X931 = _RSA_padding_add_X931Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int RSA_padding_check_X931(
    ffi.Pointer<ffi.UnsignedChar> to,
    int tlen,
    ffi.Pointer<ffi.UnsignedChar> f,
    int fl,
    int rsa_len,
  ) {
    return _RSA_padding_check_X931(
      to,
      tlen,
      f,
      fl,
      rsa_len,
    );
  }

  late final _RSA_padding_check_X931Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int)>>('RSA_padding_check_X931');
  late final _RSA_padding_check_X931 = _RSA_padding_check_X931Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.UnsignedChar>, int, int)>();

  int RSA_X931_hash_id(
    int nid,
  ) {
    return _RSA_X931_hash_id(
      nid,
    );
  }

  late final _RSA_X931_hash_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'RSA_X931_hash_id');
  late final _RSA_X931_hash_id =
      _RSA_X931_hash_idPtr.asFunction<int Function(int)>();

  int RSA_verify_PKCS1_PSS(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.UnsignedChar> mHash,
    ffi.Pointer<EVP_MD> Hash,
    ffi.Pointer<ffi.UnsignedChar> EM,
    int sLen,
  ) {
    return _RSA_verify_PKCS1_PSS(
      rsa,
      mHash,
      Hash,
      EM,
      sLen,
    );
  }

  late final _RSA_verify_PKCS1_PSSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('RSA_verify_PKCS1_PSS');
  late final _RSA_verify_PKCS1_PSS = _RSA_verify_PKCS1_PSSPtr.asFunction<
      int Function(ffi.Pointer<RSA>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<EVP_MD>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int RSA_padding_add_PKCS1_PSS(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.UnsignedChar> EM,
    ffi.Pointer<ffi.UnsignedChar> mHash,
    ffi.Pointer<EVP_MD> Hash,
    int sLen,
  ) {
    return _RSA_padding_add_PKCS1_PSS(
      rsa,
      EM,
      mHash,
      Hash,
      sLen,
    );
  }

  late final _RSA_padding_add_PKCS1_PSSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<EVP_MD>,
              ffi.Int)>>('RSA_padding_add_PKCS1_PSS');
  late final _RSA_padding_add_PKCS1_PSS =
      _RSA_padding_add_PKCS1_PSSPtr.asFunction<
          int Function(ffi.Pointer<RSA>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<EVP_MD>, int)>();

  int RSA_verify_PKCS1_PSS_mgf1(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.UnsignedChar> mHash,
    ffi.Pointer<EVP_MD> Hash,
    ffi.Pointer<EVP_MD> mgf1Hash,
    ffi.Pointer<ffi.UnsignedChar> EM,
    int sLen,
  ) {
    return _RSA_verify_PKCS1_PSS_mgf1(
      rsa,
      mHash,
      Hash,
      mgf1Hash,
      EM,
      sLen,
    );
  }

  late final _RSA_verify_PKCS1_PSS_mgf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('RSA_verify_PKCS1_PSS_mgf1');
  late final _RSA_verify_PKCS1_PSS_mgf1 =
      _RSA_verify_PKCS1_PSS_mgf1Ptr.asFunction<
          int Function(
              ffi.Pointer<RSA>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ffi.UnsignedChar>,
              int)>();

  int RSA_padding_add_PKCS1_PSS_mgf1(
    ffi.Pointer<RSA> rsa,
    ffi.Pointer<ffi.UnsignedChar> EM,
    ffi.Pointer<ffi.UnsignedChar> mHash,
    ffi.Pointer<EVP_MD> Hash,
    ffi.Pointer<EVP_MD> mgf1Hash,
    int sLen,
  ) {
    return _RSA_padding_add_PKCS1_PSS_mgf1(
      rsa,
      EM,
      mHash,
      Hash,
      mgf1Hash,
      sLen,
    );
  }

  late final _RSA_padding_add_PKCS1_PSS_mgf1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<EVP_MD>,
              ffi.Int)>>('RSA_padding_add_PKCS1_PSS_mgf1');
  late final _RSA_padding_add_PKCS1_PSS_mgf1 =
      _RSA_padding_add_PKCS1_PSS_mgf1Ptr.asFunction<
          int Function(
              ffi.Pointer<RSA>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<EVP_MD>,
              int)>();

  int RSA_set_ex_data(
    ffi.Pointer<RSA> r,
    int idx,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _RSA_set_ex_data(
      r,
      idx,
      arg,
    );
  }

  late final _RSA_set_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<RSA>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('RSA_set_ex_data');
  late final _RSA_set_ex_data = _RSA_set_ex_dataPtr.asFunction<
      int Function(ffi.Pointer<RSA>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> RSA_get_ex_data(
    ffi.Pointer<RSA> r,
    int idx,
  ) {
    return _RSA_get_ex_data(
      r,
      idx,
    );
  }

  late final _RSA_get_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<RSA>, ffi.Int)>>('RSA_get_ex_data');
  late final _RSA_get_ex_data = _RSA_get_ex_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<RSA>, int)>();

  ffi.Pointer<RSA> RSAPublicKey_dup(
    ffi.Pointer<RSA> rsa,
  ) {
    return _RSAPublicKey_dup(
      rsa,
    );
  }

  late final _RSAPublicKey_dupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RSA> Function(ffi.Pointer<RSA>)>>(
          'RSAPublicKey_dup');
  late final _RSAPublicKey_dup = _RSAPublicKey_dupPtr.asFunction<
      ffi.Pointer<RSA> Function(ffi.Pointer<RSA>)>();

  ffi.Pointer<RSA> RSAPrivateKey_dup(
    ffi.Pointer<RSA> rsa,
  ) {
    return _RSAPrivateKey_dup(
      rsa,
    );
  }

  late final _RSAPrivateKey_dupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RSA> Function(ffi.Pointer<RSA>)>>(
          'RSAPrivateKey_dup');
  late final _RSAPrivateKey_dup = _RSAPrivateKey_dupPtr.asFunction<
      ffi.Pointer<RSA> Function(ffi.Pointer<RSA>)>();

  ffi.Pointer<RSA_METHOD> RSA_meth_new(
    ffi.Pointer<ffi.Char> name,
    int flags,
  ) {
    return _RSA_meth_new(
      name,
      flags,
    );
  }

  late final _RSA_meth_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA_METHOD> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('RSA_meth_new');
  late final _RSA_meth_new = _RSA_meth_newPtr.asFunction<
      ffi.Pointer<RSA_METHOD> Function(ffi.Pointer<ffi.Char>, int)>();

  void RSA_meth_free(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_meth_free(
      meth,
    );
  }

  late final _RSA_meth_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<RSA_METHOD>)>>(
          'RSA_meth_free');
  late final _RSA_meth_free =
      _RSA_meth_freePtr.asFunction<void Function(ffi.Pointer<RSA_METHOD>)>();

  ffi.Pointer<RSA_METHOD> RSA_meth_dup(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_meth_dup(
      meth,
    );
  }

  late final _RSA_meth_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA_METHOD> Function(
              ffi.Pointer<RSA_METHOD>)>>('RSA_meth_dup');
  late final _RSA_meth_dup = _RSA_meth_dupPtr.asFunction<
      ffi.Pointer<RSA_METHOD> Function(ffi.Pointer<RSA_METHOD>)>();

  ffi.Pointer<ffi.Char> RSA_meth_get0_name(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_meth_get0_name(
      meth,
    );
  }

  late final _RSA_meth_get0_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<RSA_METHOD>)>>('RSA_meth_get0_name');
  late final _RSA_meth_get0_name = _RSA_meth_get0_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<RSA_METHOD>)>();

  int RSA_meth_set1_name(
    ffi.Pointer<RSA_METHOD> meth,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _RSA_meth_set1_name(
      meth,
      name,
    );
  }

  late final _RSA_meth_set1_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<RSA_METHOD>,
              ffi.Pointer<ffi.Char>)>>('RSA_meth_set1_name');
  late final _RSA_meth_set1_name = _RSA_meth_set1_namePtr.asFunction<
      int Function(ffi.Pointer<RSA_METHOD>, ffi.Pointer<ffi.Char>)>();

  int RSA_meth_get_flags(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_meth_get_flags(
      meth,
    );
  }

  late final _RSA_meth_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA_METHOD>)>>(
          'RSA_meth_get_flags');
  late final _RSA_meth_get_flags = _RSA_meth_get_flagsPtr.asFunction<
      int Function(ffi.Pointer<RSA_METHOD>)>();

  int RSA_meth_set_flags(
    ffi.Pointer<RSA_METHOD> meth,
    int flags,
  ) {
    return _RSA_meth_set_flags(
      meth,
      flags,
    );
  }

  late final _RSA_meth_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA_METHOD>, ffi.Int)>>('RSA_meth_set_flags');
  late final _RSA_meth_set_flags = _RSA_meth_set_flagsPtr.asFunction<
      int Function(ffi.Pointer<RSA_METHOD>, int)>();

  ffi.Pointer<ffi.Void> RSA_meth_get0_app_data(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_meth_get0_app_data(
      meth,
    );
  }

  late final _RSA_meth_get0_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<RSA_METHOD>)>>('RSA_meth_get0_app_data');
  late final _RSA_meth_get0_app_data = _RSA_meth_get0_app_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<RSA_METHOD>)>();

  int RSA_meth_set0_app_data(
    ffi.Pointer<RSA_METHOD> meth,
    ffi.Pointer<ffi.Void> app_data,
  ) {
    return _RSA_meth_set0_app_data(
      meth,
      app_data,
    );
  }

  late final _RSA_meth_set0_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<RSA_METHOD>,
              ffi.Pointer<ffi.Void>)>>('RSA_meth_set0_app_data');
  late final _RSA_meth_set0_app_data = _RSA_meth_set0_app_dataPtr.asFunction<
      int Function(ffi.Pointer<RSA_METHOD>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<RSA>,
              ffi.Int)>> RSA_meth_get_pub_enc(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_meth_get_pub_enc(
      meth,
    );
  }

  late final _RSA_meth_get_pub_encPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<RSA>,
                          ffi.Int)>>
              Function(ffi.Pointer<RSA_METHOD>)>>('RSA_meth_get_pub_enc');
  late final _RSA_meth_get_pub_enc = _RSA_meth_get_pub_encPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Int,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<RSA>,
                      ffi.Int)>>
          Function(ffi.Pointer<RSA_METHOD>)>();

  int RSA_meth_set_pub_enc(
    ffi.Pointer<RSA_METHOD> rsa,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Int, ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<RSA>, ffi.Int)>>
        pub_enc,
  ) {
    return _RSA_meth_set_pub_enc(
      rsa,
      pub_enc,
    );
  }

  late final _RSA_meth_set_pub_encPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<RSA>,
                          ffi.Int)>>)>>('RSA_meth_set_pub_enc');
  late final _RSA_meth_set_pub_enc = _RSA_meth_set_pub_encPtr.asFunction<
      int Function(
          ffi.Pointer<RSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Int,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<RSA>,
                      ffi.Int)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<RSA>,
              ffi.Int)>> RSA_meth_get_pub_dec(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_meth_get_pub_dec(
      meth,
    );
  }

  late final _RSA_meth_get_pub_decPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<RSA>,
                          ffi.Int)>>
              Function(ffi.Pointer<RSA_METHOD>)>>('RSA_meth_get_pub_dec');
  late final _RSA_meth_get_pub_dec = _RSA_meth_get_pub_decPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Int,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<RSA>,
                      ffi.Int)>>
          Function(ffi.Pointer<RSA_METHOD>)>();

  int RSA_meth_set_pub_dec(
    ffi.Pointer<RSA_METHOD> rsa,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Int, ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<RSA>, ffi.Int)>>
        pub_dec,
  ) {
    return _RSA_meth_set_pub_dec(
      rsa,
      pub_dec,
    );
  }

  late final _RSA_meth_set_pub_decPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<RSA>,
                          ffi.Int)>>)>>('RSA_meth_set_pub_dec');
  late final _RSA_meth_set_pub_dec = _RSA_meth_set_pub_decPtr.asFunction<
      int Function(
          ffi.Pointer<RSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Int,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<RSA>,
                      ffi.Int)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<RSA>,
              ffi.Int)>> RSA_meth_get_priv_enc(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_meth_get_priv_enc(
      meth,
    );
  }

  late final _RSA_meth_get_priv_encPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<RSA>,
                          ffi.Int)>>
              Function(ffi.Pointer<RSA_METHOD>)>>('RSA_meth_get_priv_enc');
  late final _RSA_meth_get_priv_enc = _RSA_meth_get_priv_encPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Int,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<RSA>,
                      ffi.Int)>>
          Function(ffi.Pointer<RSA_METHOD>)>();

  int RSA_meth_set_priv_enc(
    ffi.Pointer<RSA_METHOD> rsa,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Int, ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<RSA>, ffi.Int)>>
        priv_enc,
  ) {
    return _RSA_meth_set_priv_enc(
      rsa,
      priv_enc,
    );
  }

  late final _RSA_meth_set_priv_encPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<RSA>,
                          ffi.Int)>>)>>('RSA_meth_set_priv_enc');
  late final _RSA_meth_set_priv_enc = _RSA_meth_set_priv_encPtr.asFunction<
      int Function(
          ffi.Pointer<RSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Int,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<RSA>,
                      ffi.Int)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<RSA>,
              ffi.Int)>> RSA_meth_get_priv_dec(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_meth_get_priv_dec(
      meth,
    );
  }

  late final _RSA_meth_get_priv_decPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<RSA>,
                          ffi.Int)>>
              Function(ffi.Pointer<RSA_METHOD>)>>('RSA_meth_get_priv_dec');
  late final _RSA_meth_get_priv_dec = _RSA_meth_get_priv_decPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Int,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<RSA>,
                      ffi.Int)>>
          Function(ffi.Pointer<RSA_METHOD>)>();

  int RSA_meth_set_priv_dec(
    ffi.Pointer<RSA_METHOD> rsa,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Int, ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<RSA>, ffi.Int)>>
        priv_dec,
  ) {
    return _RSA_meth_set_priv_dec(
      rsa,
      priv_dec,
    );
  }

  late final _RSA_meth_set_priv_decPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<RSA>,
                          ffi.Int)>>)>>('RSA_meth_set_priv_dec');
  late final _RSA_meth_set_priv_dec = _RSA_meth_set_priv_decPtr.asFunction<
      int Function(
          ffi.Pointer<RSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Int,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<RSA>,
                      ffi.Int)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<RSA>, ffi.Pointer<BN_CTX>)>> RSA_meth_get_mod_exp(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_meth_get_mod_exp(
      meth,
    );
  }

  late final _RSA_meth_get_mod_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
                          ffi.Pointer<RSA>, ffi.Pointer<BN_CTX>)>>
              Function(ffi.Pointer<RSA_METHOD>)>>('RSA_meth_get_mod_exp');
  late final _RSA_meth_get_mod_exp = _RSA_meth_get_mod_expPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
                      ffi.Pointer<RSA>, ffi.Pointer<BN_CTX>)>>
          Function(ffi.Pointer<RSA_METHOD>)>();

  int RSA_meth_set_mod_exp(
    ffi.Pointer<RSA_METHOD> rsa,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
                    ffi.Pointer<RSA>, ffi.Pointer<BN_CTX>)>>
        mod_exp,
  ) {
    return _RSA_meth_set_mod_exp(
      rsa,
      mod_exp,
    );
  }

  late final _RSA_meth_set_mod_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<RSA>,
                          ffi.Pointer<BN_CTX>)>>)>>('RSA_meth_set_mod_exp');
  late final _RSA_meth_set_mod_exp = _RSA_meth_set_mod_expPtr.asFunction<
      int Function(
          ffi.Pointer<RSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
                      ffi.Pointer<RSA>, ffi.Pointer<BN_CTX>)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>> RSA_meth_get_bn_mod_exp(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_meth_get_bn_mod_exp(
      meth,
    );
  }

  late final _RSA_meth_get_bn_mod_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BN_CTX>,
                          ffi.Pointer<BN_MONT_CTX>)>>
              Function(ffi.Pointer<RSA_METHOD>)>>('RSA_meth_get_bn_mod_exp');
  late final _RSA_meth_get_bn_mod_exp = _RSA_meth_get_bn_mod_expPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BN_CTX>,
                      ffi.Pointer<BN_MONT_CTX>)>>
          Function(ffi.Pointer<RSA_METHOD>)>();

  int RSA_meth_set_bn_mod_exp(
    ffi.Pointer<RSA_METHOD> rsa,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BN_CTX>,
                    ffi.Pointer<BN_MONT_CTX>)>>
        bn_mod_exp,
  ) {
    return _RSA_meth_set_bn_mod_exp(
      rsa,
      bn_mod_exp,
    );
  }

  late final _RSA_meth_set_bn_mod_expPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<RSA_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BN_CTX>,
                              ffi.Pointer<BN_MONT_CTX>)>>)>>(
      'RSA_meth_set_bn_mod_exp');
  late final _RSA_meth_set_bn_mod_exp = _RSA_meth_set_bn_mod_expPtr.asFunction<
      int Function(
          ffi.Pointer<RSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BN_CTX>,
                      ffi.Pointer<BN_MONT_CTX>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>
      RSA_meth_get_init(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_meth_get_init(
      meth,
    );
  }

  late final _RSA_meth_get_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>
              Function(ffi.Pointer<RSA_METHOD>)>>('RSA_meth_get_init');
  late final _RSA_meth_get_init = _RSA_meth_get_initPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>
          Function(ffi.Pointer<RSA_METHOD>)>();

  int RSA_meth_set_init(
    ffi.Pointer<RSA_METHOD> rsa,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>> init,
  ) {
    return _RSA_meth_set_init(
      rsa,
      init,
    );
  }

  late final _RSA_meth_set_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<RSA>)>>)>>('RSA_meth_set_init');
  late final _RSA_meth_set_init = _RSA_meth_set_initPtr.asFunction<
      int Function(
          ffi.Pointer<RSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>
      RSA_meth_get_finish(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_meth_get_finish(
      meth,
    );
  }

  late final _RSA_meth_get_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>
              Function(ffi.Pointer<RSA_METHOD>)>>('RSA_meth_get_finish');
  late final _RSA_meth_get_finish = _RSA_meth_get_finishPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>
          Function(ffi.Pointer<RSA_METHOD>)>();

  int RSA_meth_set_finish(
    ffi.Pointer<RSA_METHOD> rsa,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>> finish,
  ) {
    return _RSA_meth_set_finish(
      rsa,
      finish,
    );
  }

  late final _RSA_meth_set_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<RSA>)>>)>>('RSA_meth_set_finish');
  late final _RSA_meth_set_finish = _RSA_meth_set_finishPtr.asFunction<
      int Function(
          ffi.Pointer<RSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<RSA>)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<RSA>)>> RSA_meth_get_sign(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_meth_get_sign(
      meth,
    );
  }

  late final _RSA_meth_get_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.UnsignedInt,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedInt>,
                          ffi.Pointer<RSA>)>>
              Function(ffi.Pointer<RSA_METHOD>)>>('RSA_meth_get_sign');
  late final _RSA_meth_get_sign = _RSA_meth_get_signPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Int,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.UnsignedInt,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<ffi.UnsignedInt>,
                      ffi.Pointer<RSA>)>>
          Function(ffi.Pointer<RSA_METHOD>)>();

  int RSA_meth_set_sign(
    ffi.Pointer<RSA_METHOD> rsa,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Int,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.UnsignedInt,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Pointer<ffi.UnsignedInt>,
                    ffi.Pointer<RSA>)>>
        sign,
  ) {
    return _RSA_meth_set_sign(
      rsa,
      sign,
    );
  }

  late final _RSA_meth_set_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.UnsignedInt,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<ffi.UnsignedInt>,
                          ffi.Pointer<RSA>)>>)>>('RSA_meth_set_sign');
  late final _RSA_meth_set_sign = _RSA_meth_set_signPtr.asFunction<
      int Function(
          ffi.Pointer<RSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Int,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.UnsignedInt,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<ffi.UnsignedInt>,
                      ffi.Pointer<RSA>)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt,
              ffi.Pointer<RSA>)>> RSA_meth_get_verify(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_meth_get_verify(
      meth,
    );
  }

  late final _RSA_meth_get_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.UnsignedInt,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.UnsignedInt,
                          ffi.Pointer<RSA>)>>
              Function(ffi.Pointer<RSA_METHOD>)>>('RSA_meth_get_verify');
  late final _RSA_meth_get_verify = _RSA_meth_get_verifyPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Int,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.UnsignedInt,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.UnsignedInt,
                      ffi.Pointer<RSA>)>>
          Function(ffi.Pointer<RSA_METHOD>)>();

  int RSA_meth_set_verify(
    ffi.Pointer<RSA_METHOD> rsa,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Int,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.UnsignedInt,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.UnsignedInt,
                    ffi.Pointer<RSA>)>>
        verify,
  ) {
    return _RSA_meth_set_verify(
      rsa,
      verify,
    );
  }

  late final _RSA_meth_set_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.UnsignedInt,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.UnsignedInt,
                          ffi.Pointer<RSA>)>>)>>('RSA_meth_set_verify');
  late final _RSA_meth_set_verify = _RSA_meth_set_verifyPtr.asFunction<
      int Function(
          ffi.Pointer<RSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Int,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.UnsignedInt,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.UnsignedInt,
                      ffi.Pointer<RSA>)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<RSA>, ffi.Int, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_GENCB>)>> RSA_meth_get_keygen(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_meth_get_keygen(
      meth,
    );
  }

  late final _RSA_meth_get_keygenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<RSA>, ffi.Int,
                          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_GENCB>)>>
              Function(ffi.Pointer<RSA_METHOD>)>>('RSA_meth_get_keygen');
  late final _RSA_meth_get_keygen = _RSA_meth_get_keygenPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<RSA>, ffi.Int,
                      ffi.Pointer<BIGNUM>, ffi.Pointer<BN_GENCB>)>>
          Function(ffi.Pointer<RSA_METHOD>)>();

  int RSA_meth_set_keygen(
    ffi.Pointer<RSA_METHOD> rsa,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<RSA>, ffi.Int, ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BN_GENCB>)>>
        keygen,
  ) {
    return _RSA_meth_set_keygen(
      rsa,
      keygen,
    );
  }

  late final _RSA_meth_set_keygenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<RSA>,
                          ffi.Int,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BN_GENCB>)>>)>>('RSA_meth_set_keygen');
  late final _RSA_meth_set_keygen = _RSA_meth_set_keygenPtr.asFunction<
      int Function(
          ffi.Pointer<RSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<RSA>, ffi.Int,
                      ffi.Pointer<BIGNUM>, ffi.Pointer<BN_GENCB>)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<RSA>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_GENCB>)>> RSA_meth_get_multi_prime_keygen(
    ffi.Pointer<RSA_METHOD> meth,
  ) {
    return _RSA_meth_get_multi_prime_keygen(
      meth,
    );
  }

  late final _RSA_meth_get_multi_prime_keygenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<RSA>, ffi.Int, ffi.Int,
                              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_GENCB>)>>
                  Function(ffi.Pointer<RSA_METHOD>)>>(
      'RSA_meth_get_multi_prime_keygen');
  late final _RSA_meth_get_multi_prime_keygen =
      _RSA_meth_get_multi_prime_keygenPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<RSA>, ffi.Int, ffi.Int,
                          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_GENCB>)>>
              Function(ffi.Pointer<RSA_METHOD>)>();

  int RSA_meth_set_multi_prime_keygen(
    ffi.Pointer<RSA_METHOD> meth,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<RSA>, ffi.Int, ffi.Int,
                    ffi.Pointer<BIGNUM>, ffi.Pointer<BN_GENCB>)>>
        keygen,
  ) {
    return _RSA_meth_set_multi_prime_keygen(
      meth,
      keygen,
    );
  }

  late final _RSA_meth_set_multi_prime_keygenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<RSA_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<RSA>, ffi.Int, ffi.Int,
                              ffi.Pointer<BIGNUM>, ffi.Pointer<BN_GENCB>)>>)>>(
      'RSA_meth_set_multi_prime_keygen');
  late final _RSA_meth_set_multi_prime_keygen =
      _RSA_meth_set_multi_prime_keygenPtr.asFunction<
          int Function(
              ffi.Pointer<RSA_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<RSA>, ffi.Int, ffi.Int,
                          ffi.Pointer<BIGNUM>, ffi.Pointer<BN_GENCB>)>>)>();

  int ERR_load_DH_strings() {
    return _ERR_load_DH_strings();
  }

  late final _ERR_load_DH_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_DH_strings');
  late final _ERR_load_DH_strings =
      _ERR_load_DH_stringsPtr.asFunction<int Function()>();

  late final ffi.Pointer<ASN1_ITEM> _DHparams_it =
      _lookup<ASN1_ITEM>('DHparams_it');

  ffi.Pointer<ASN1_ITEM> get DHparams_it => _DHparams_it;

  ffi.Pointer<DH> DHparams_dup(
    ffi.Pointer<DH> arg0,
  ) {
    return _DHparams_dup(
      arg0,
    );
  }

  late final _DHparams_dupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DH> Function(ffi.Pointer<DH>)>>(
          'DHparams_dup');
  late final _DHparams_dup =
      _DHparams_dupPtr.asFunction<ffi.Pointer<DH> Function(ffi.Pointer<DH>)>();

  ffi.Pointer<DH_METHOD> DH_OpenSSL() {
    return _DH_OpenSSL();
  }

  late final _DH_OpenSSLPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DH_METHOD> Function()>>(
          'DH_OpenSSL');
  late final _DH_OpenSSL =
      _DH_OpenSSLPtr.asFunction<ffi.Pointer<DH_METHOD> Function()>();

  void DH_set_default_method(
    ffi.Pointer<DH_METHOD> meth,
  ) {
    return _DH_set_default_method(
      meth,
    );
  }

  late final _DH_set_default_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DH_METHOD>)>>(
          'DH_set_default_method');
  late final _DH_set_default_method = _DH_set_default_methodPtr.asFunction<
      void Function(ffi.Pointer<DH_METHOD>)>();

  ffi.Pointer<DH_METHOD> DH_get_default_method() {
    return _DH_get_default_method();
  }

  late final _DH_get_default_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DH_METHOD> Function()>>(
          'DH_get_default_method');
  late final _DH_get_default_method =
      _DH_get_default_methodPtr.asFunction<ffi.Pointer<DH_METHOD> Function()>();

  int DH_set_method(
    ffi.Pointer<DH> dh,
    ffi.Pointer<DH_METHOD> meth,
  ) {
    return _DH_set_method(
      dh,
      meth,
    );
  }

  late final _DH_set_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DH>, ffi.Pointer<DH_METHOD>)>>('DH_set_method');
  late final _DH_set_method = _DH_set_methodPtr.asFunction<
      int Function(ffi.Pointer<DH>, ffi.Pointer<DH_METHOD>)>();

  ffi.Pointer<DH> DH_new_method(
    ffi.Pointer<ENGINE> engine,
  ) {
    return _DH_new_method(
      engine,
    );
  }

  late final _DH_new_methodPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<DH> Function(ffi.Pointer<ENGINE>)>>(
      'DH_new_method');
  late final _DH_new_method = _DH_new_methodPtr.asFunction<
      ffi.Pointer<DH> Function(ffi.Pointer<ENGINE>)>();

  ffi.Pointer<DH> DH_new() {
    return _DH_new();
  }

  late final _DH_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DH> Function()>>('DH_new');
  late final _DH_new = _DH_newPtr.asFunction<ffi.Pointer<DH> Function()>();

  void DH_free(
    ffi.Pointer<DH> dh,
  ) {
    return _DH_free(
      dh,
    );
  }

  late final _DH_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DH>)>>(
          'DH_free');
  late final _DH_free =
      _DH_freePtr.asFunction<void Function(ffi.Pointer<DH>)>();

  int DH_up_ref(
    ffi.Pointer<DH> dh,
  ) {
    return _DH_up_ref(
      dh,
    );
  }

  late final _DH_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>(
          'DH_up_ref');
  late final _DH_up_ref =
      _DH_up_refPtr.asFunction<int Function(ffi.Pointer<DH>)>();

  int DH_bits(
    ffi.Pointer<DH> dh,
  ) {
    return _DH_bits(
      dh,
    );
  }

  late final _DH_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>('DH_bits');
  late final _DH_bits = _DH_bitsPtr.asFunction<int Function(ffi.Pointer<DH>)>();

  int DH_size(
    ffi.Pointer<DH> dh,
  ) {
    return _DH_size(
      dh,
    );
  }

  late final _DH_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>('DH_size');
  late final _DH_size = _DH_sizePtr.asFunction<int Function(ffi.Pointer<DH>)>();

  int DH_security_bits(
    ffi.Pointer<DH> dh,
  ) {
    return _DH_security_bits(
      dh,
    );
  }

  late final _DH_security_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>(
          'DH_security_bits');
  late final _DH_security_bits =
      _DH_security_bitsPtr.asFunction<int Function(ffi.Pointer<DH>)>();

  int DH_set_ex_data(
    ffi.Pointer<DH> d,
    int idx,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _DH_set_ex_data(
      d,
      idx,
      arg,
    );
  }

  late final _DH_set_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DH>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('DH_set_ex_data');
  late final _DH_set_ex_data = _DH_set_ex_dataPtr.asFunction<
      int Function(ffi.Pointer<DH>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> DH_get_ex_data(
    ffi.Pointer<DH> d,
    int idx,
  ) {
    return _DH_get_ex_data(
      d,
      idx,
    );
  }

  late final _DH_get_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<DH>, ffi.Int)>>('DH_get_ex_data');
  late final _DH_get_ex_data = _DH_get_ex_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<DH>, int)>();

  ffi.Pointer<DH> DH_generate_parameters(
    int prime_len,
    int generator,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _DH_generate_parameters(
      prime_len,
      generator,
      callback,
      cb_arg,
    );
  }

  late final _DH_generate_parametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DH> Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('DH_generate_parameters');
  late final _DH_generate_parameters = _DH_generate_parametersPtr.asFunction<
      ffi.Pointer<DH> Function(
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int DH_generate_parameters_ex(
    ffi.Pointer<DH> dh,
    int prime_len,
    int generator,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _DH_generate_parameters_ex(
      dh,
      prime_len,
      generator,
      cb,
    );
  }

  late final _DH_generate_parameters_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DH>, ffi.Int, ffi.Int,
              ffi.Pointer<BN_GENCB>)>>('DH_generate_parameters_ex');
  late final _DH_generate_parameters_ex =
      _DH_generate_parameters_exPtr.asFunction<
          int Function(ffi.Pointer<DH>, int, int, ffi.Pointer<BN_GENCB>)>();

  int DH_check_params_ex(
    ffi.Pointer<DH> dh,
  ) {
    return _DH_check_params_ex(
      dh,
    );
  }

  late final _DH_check_params_exPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>(
          'DH_check_params_ex');
  late final _DH_check_params_ex =
      _DH_check_params_exPtr.asFunction<int Function(ffi.Pointer<DH>)>();

  int DH_check_ex(
    ffi.Pointer<DH> dh,
  ) {
    return _DH_check_ex(
      dh,
    );
  }

  late final _DH_check_exPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>(
          'DH_check_ex');
  late final _DH_check_ex =
      _DH_check_exPtr.asFunction<int Function(ffi.Pointer<DH>)>();

  int DH_check_pub_key_ex(
    ffi.Pointer<DH> dh,
    ffi.Pointer<BIGNUM> pub_key,
  ) {
    return _DH_check_pub_key_ex(
      dh,
      pub_key,
    );
  }

  late final _DH_check_pub_key_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DH>, ffi.Pointer<BIGNUM>)>>('DH_check_pub_key_ex');
  late final _DH_check_pub_key_ex = _DH_check_pub_key_exPtr.asFunction<
      int Function(ffi.Pointer<DH>, ffi.Pointer<BIGNUM>)>();

  int DH_check_params(
    ffi.Pointer<DH> dh,
    ffi.Pointer<ffi.Int> ret,
  ) {
    return _DH_check_params(
      dh,
      ret,
    );
  }

  late final _DH_check_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DH>, ffi.Pointer<ffi.Int>)>>('DH_check_params');
  late final _DH_check_params = _DH_check_paramsPtr.asFunction<
      int Function(ffi.Pointer<DH>, ffi.Pointer<ffi.Int>)>();

  int DH_check(
    ffi.Pointer<DH> dh,
    ffi.Pointer<ffi.Int> codes,
  ) {
    return _DH_check(
      dh,
      codes,
    );
  }

  late final _DH_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DH>, ffi.Pointer<ffi.Int>)>>('DH_check');
  late final _DH_check = _DH_checkPtr.asFunction<
      int Function(ffi.Pointer<DH>, ffi.Pointer<ffi.Int>)>();

  int DH_check_pub_key(
    ffi.Pointer<DH> dh,
    ffi.Pointer<BIGNUM> pub_key,
    ffi.Pointer<ffi.Int> codes,
  ) {
    return _DH_check_pub_key(
      dh,
      pub_key,
      codes,
    );
  }

  late final _DH_check_pub_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DH>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<ffi.Int>)>>('DH_check_pub_key');
  late final _DH_check_pub_key = _DH_check_pub_keyPtr.asFunction<
      int Function(
          ffi.Pointer<DH>, ffi.Pointer<BIGNUM>, ffi.Pointer<ffi.Int>)>();

  int DH_generate_key(
    ffi.Pointer<DH> dh,
  ) {
    return _DH_generate_key(
      dh,
    );
  }

  late final _DH_generate_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>(
          'DH_generate_key');
  late final _DH_generate_key =
      _DH_generate_keyPtr.asFunction<int Function(ffi.Pointer<DH>)>();

  int DH_compute_key(
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<BIGNUM> pub_key,
    ffi.Pointer<DH> dh,
  ) {
    return _DH_compute_key(
      key,
      pub_key,
      dh,
    );
  }

  late final _DH_compute_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<DH>)>>('DH_compute_key');
  late final _DH_compute_key = _DH_compute_keyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<DH>)>();

  int DH_compute_key_padded(
    ffi.Pointer<ffi.UnsignedChar> key,
    ffi.Pointer<BIGNUM> pub_key,
    ffi.Pointer<DH> dh,
  ) {
    return _DH_compute_key_padded(
      key,
      pub_key,
      dh,
    );
  }

  late final _DH_compute_key_paddedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<DH>)>>('DH_compute_key_padded');
  late final _DH_compute_key_padded = _DH_compute_key_paddedPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<DH>)>();

  ffi.Pointer<DH> d2i_DHparams(
    ffi.Pointer<ffi.Pointer<DH>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_DHparams(
      a,
      pp,
      length,
    );
  }

  late final _d2i_DHparamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DH> Function(
              ffi.Pointer<ffi.Pointer<DH>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_DHparams');
  late final _d2i_DHparams = _d2i_DHparamsPtr.asFunction<
      ffi.Pointer<DH> Function(ffi.Pointer<ffi.Pointer<DH>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_DHparams(
    ffi.Pointer<DH> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_DHparams(
      a,
      pp,
    );
  }

  late final _i2d_DHparamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DH>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_DHparams');
  late final _i2d_DHparams = _i2d_DHparamsPtr.asFunction<
      int Function(
          ffi.Pointer<DH>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<DH> d2i_DHxparams(
    ffi.Pointer<ffi.Pointer<DH>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_DHxparams(
      a,
      pp,
      length,
    );
  }

  late final _d2i_DHxparamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DH> Function(
              ffi.Pointer<ffi.Pointer<DH>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_DHxparams');
  late final _d2i_DHxparams = _d2i_DHxparamsPtr.asFunction<
      ffi.Pointer<DH> Function(ffi.Pointer<ffi.Pointer<DH>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_DHxparams(
    ffi.Pointer<DH> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_DHxparams(
      a,
      pp,
    );
  }

  late final _i2d_DHxparamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DH>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_DHxparams');
  late final _i2d_DHxparams = _i2d_DHxparamsPtr.asFunction<
      int Function(
          ffi.Pointer<DH>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int DHparams_print_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<DH> x,
  ) {
    return _DHparams_print_fp(
      fp,
      x,
    );
  }

  late final _DHparams_print_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<DH>)>>('DHparams_print_fp');
  late final _DHparams_print_fp = _DHparams_print_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<DH>)>();

  int DHparams_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<DH> x,
  ) {
    return _DHparams_print(
      bp,
      x,
    );
  }

  late final _DHparams_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<DH>)>>('DHparams_print');
  late final _DHparams_print = _DHparams_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<DH>)>();

  ffi.Pointer<DH> DH_get_1024_160() {
    return _DH_get_1024_160();
  }

  late final _DH_get_1024_160Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DH> Function()>>(
          'DH_get_1024_160');
  late final _DH_get_1024_160 =
      _DH_get_1024_160Ptr.asFunction<ffi.Pointer<DH> Function()>();

  ffi.Pointer<DH> DH_get_2048_224() {
    return _DH_get_2048_224();
  }

  late final _DH_get_2048_224Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DH> Function()>>(
          'DH_get_2048_224');
  late final _DH_get_2048_224 =
      _DH_get_2048_224Ptr.asFunction<ffi.Pointer<DH> Function()>();

  ffi.Pointer<DH> DH_get_2048_256() {
    return _DH_get_2048_256();
  }

  late final _DH_get_2048_256Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DH> Function()>>(
          'DH_get_2048_256');
  late final _DH_get_2048_256 =
      _DH_get_2048_256Ptr.asFunction<ffi.Pointer<DH> Function()>();

  ffi.Pointer<DH> DH_new_by_nid(
    int nid,
  ) {
    return _DH_new_by_nid(
      nid,
    );
  }

  late final _DH_new_by_nidPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DH> Function(ffi.Int)>>(
          'DH_new_by_nid');
  late final _DH_new_by_nid =
      _DH_new_by_nidPtr.asFunction<ffi.Pointer<DH> Function(int)>();

  int DH_get_nid(
    ffi.Pointer<DH> dh,
  ) {
    return _DH_get_nid(
      dh,
    );
  }

  late final _DH_get_nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>(
          'DH_get_nid');
  late final _DH_get_nid =
      _DH_get_nidPtr.asFunction<int Function(ffi.Pointer<DH>)>();

  int DH_KDF_X9_42(
    ffi.Pointer<ffi.UnsignedChar> out,
    int outlen,
    ffi.Pointer<ffi.UnsignedChar> Z,
    int Zlen,
    ffi.Pointer<ASN1_OBJECT> key_oid,
    ffi.Pointer<ffi.UnsignedChar> ukm,
    int ukmlen,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _DH_KDF_X9_42(
      out,
      outlen,
      Z,
      Zlen,
      key_oid,
      ukm,
      ukmlen,
      md,
    );
  }

  late final _DH_KDF_X9_42Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ASN1_OBJECT>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<EVP_MD>)>>('DH_KDF_X9_42');
  late final _DH_KDF_X9_42 = _DH_KDF_X9_42Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ASN1_OBJECT>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<EVP_MD>)>();

  void DH_get0_pqg(
    ffi.Pointer<DH> dh,
    ffi.Pointer<ffi.Pointer<BIGNUM>> p,
    ffi.Pointer<ffi.Pointer<BIGNUM>> q,
    ffi.Pointer<ffi.Pointer<BIGNUM>> g,
  ) {
    return _DH_get0_pqg(
      dh,
      p,
      q,
      g,
    );
  }

  late final _DH_get0_pqgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DH>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>)>>('DH_get0_pqg');
  late final _DH_get0_pqg = _DH_get0_pqgPtr.asFunction<
      void Function(
          ffi.Pointer<DH>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>)>();

  int DH_set0_pqg(
    ffi.Pointer<DH> dh,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> q,
    ffi.Pointer<BIGNUM> g,
  ) {
    return _DH_set0_pqg(
      dh,
      p,
      q,
      g,
    );
  }

  late final _DH_set0_pqgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DH>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('DH_set0_pqg');
  late final _DH_set0_pqg = _DH_set0_pqgPtr.asFunction<
      int Function(ffi.Pointer<DH>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>)>();

  void DH_get0_key(
    ffi.Pointer<DH> dh,
    ffi.Pointer<ffi.Pointer<BIGNUM>> pub_key,
    ffi.Pointer<ffi.Pointer<BIGNUM>> priv_key,
  ) {
    return _DH_get0_key(
      dh,
      pub_key,
      priv_key,
    );
  }

  late final _DH_get0_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DH>, ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>)>>('DH_get0_key');
  late final _DH_get0_key = _DH_get0_keyPtr.asFunction<
      void Function(ffi.Pointer<DH>, ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>)>();

  int DH_set0_key(
    ffi.Pointer<DH> dh,
    ffi.Pointer<BIGNUM> pub_key,
    ffi.Pointer<BIGNUM> priv_key,
  ) {
    return _DH_set0_key(
      dh,
      pub_key,
      priv_key,
    );
  }

  late final _DH_set0_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DH>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('DH_set0_key');
  late final _DH_set0_key = _DH_set0_keyPtr.asFunction<
      int Function(
          ffi.Pointer<DH>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> DH_get0_p(
    ffi.Pointer<DH> dh,
  ) {
    return _DH_get0_p(
      dh,
    );
  }

  late final _DH_get0_pPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>>(
      'DH_get0_p');
  late final _DH_get0_p =
      _DH_get0_pPtr.asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>();

  ffi.Pointer<BIGNUM> DH_get0_q(
    ffi.Pointer<DH> dh,
  ) {
    return _DH_get0_q(
      dh,
    );
  }

  late final _DH_get0_qPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>>(
      'DH_get0_q');
  late final _DH_get0_q =
      _DH_get0_qPtr.asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>();

  ffi.Pointer<BIGNUM> DH_get0_g(
    ffi.Pointer<DH> dh,
  ) {
    return _DH_get0_g(
      dh,
    );
  }

  late final _DH_get0_gPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>>(
      'DH_get0_g');
  late final _DH_get0_g =
      _DH_get0_gPtr.asFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>();

  ffi.Pointer<BIGNUM> DH_get0_priv_key(
    ffi.Pointer<DH> dh,
  ) {
    return _DH_get0_priv_key(
      dh,
    );
  }

  late final _DH_get0_priv_keyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>>(
      'DH_get0_priv_key');
  late final _DH_get0_priv_key = _DH_get0_priv_keyPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>();

  ffi.Pointer<BIGNUM> DH_get0_pub_key(
    ffi.Pointer<DH> dh,
  ) {
    return _DH_get0_pub_key(
      dh,
    );
  }

  late final _DH_get0_pub_keyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>>(
      'DH_get0_pub_key');
  late final _DH_get0_pub_key = _DH_get0_pub_keyPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<DH>)>();

  void DH_clear_flags(
    ffi.Pointer<DH> dh,
    int flags,
  ) {
    return _DH_clear_flags(
      dh,
      flags,
    );
  }

  late final _DH_clear_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DH>, ffi.Int)>>(
          'DH_clear_flags');
  late final _DH_clear_flags =
      _DH_clear_flagsPtr.asFunction<void Function(ffi.Pointer<DH>, int)>();

  int DH_test_flags(
    ffi.Pointer<DH> dh,
    int flags,
  ) {
    return _DH_test_flags(
      dh,
      flags,
    );
  }

  late final _DH_test_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>, ffi.Int)>>(
          'DH_test_flags');
  late final _DH_test_flags =
      _DH_test_flagsPtr.asFunction<int Function(ffi.Pointer<DH>, int)>();

  void DH_set_flags(
    ffi.Pointer<DH> dh,
    int flags,
  ) {
    return _DH_set_flags(
      dh,
      flags,
    );
  }

  late final _DH_set_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DH>, ffi.Int)>>(
          'DH_set_flags');
  late final _DH_set_flags =
      _DH_set_flagsPtr.asFunction<void Function(ffi.Pointer<DH>, int)>();

  ffi.Pointer<ENGINE> DH_get0_engine(
    ffi.Pointer<DH> d,
  ) {
    return _DH_get0_engine(
      d,
    );
  }

  late final _DH_get0_enginePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ENGINE> Function(ffi.Pointer<DH>)>>(
      'DH_get0_engine');
  late final _DH_get0_engine = _DH_get0_enginePtr.asFunction<
      ffi.Pointer<ENGINE> Function(ffi.Pointer<DH>)>();

  int DH_get_length(
    ffi.Pointer<DH> dh,
  ) {
    return _DH_get_length(
      dh,
    );
  }

  late final _DH_get_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<DH>)>>(
          'DH_get_length');
  late final _DH_get_length =
      _DH_get_lengthPtr.asFunction<int Function(ffi.Pointer<DH>)>();

  int DH_set_length(
    ffi.Pointer<DH> dh,
    int length,
  ) {
    return _DH_set_length(
      dh,
      length,
    );
  }

  late final _DH_set_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>, ffi.Long)>>(
          'DH_set_length');
  late final _DH_set_length =
      _DH_set_lengthPtr.asFunction<int Function(ffi.Pointer<DH>, int)>();

  ffi.Pointer<DH_METHOD> DH_meth_new(
    ffi.Pointer<ffi.Char> name,
    int flags,
  ) {
    return _DH_meth_new(
      name,
      flags,
    );
  }

  late final _DH_meth_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DH_METHOD> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('DH_meth_new');
  late final _DH_meth_new = _DH_meth_newPtr.asFunction<
      ffi.Pointer<DH_METHOD> Function(ffi.Pointer<ffi.Char>, int)>();

  void DH_meth_free(
    ffi.Pointer<DH_METHOD> dhm,
  ) {
    return _DH_meth_free(
      dhm,
    );
  }

  late final _DH_meth_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DH_METHOD>)>>(
          'DH_meth_free');
  late final _DH_meth_free =
      _DH_meth_freePtr.asFunction<void Function(ffi.Pointer<DH_METHOD>)>();

  ffi.Pointer<DH_METHOD> DH_meth_dup(
    ffi.Pointer<DH_METHOD> dhm,
  ) {
    return _DH_meth_dup(
      dhm,
    );
  }

  late final _DH_meth_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DH_METHOD> Function(
              ffi.Pointer<DH_METHOD>)>>('DH_meth_dup');
  late final _DH_meth_dup = _DH_meth_dupPtr.asFunction<
      ffi.Pointer<DH_METHOD> Function(ffi.Pointer<DH_METHOD>)>();

  ffi.Pointer<ffi.Char> DH_meth_get0_name(
    ffi.Pointer<DH_METHOD> dhm,
  ) {
    return _DH_meth_get0_name(
      dhm,
    );
  }

  late final _DH_meth_get0_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DH_METHOD>)>>('DH_meth_get0_name');
  late final _DH_meth_get0_name = _DH_meth_get0_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<DH_METHOD>)>();

  int DH_meth_set1_name(
    ffi.Pointer<DH_METHOD> dhm,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _DH_meth_set1_name(
      dhm,
      name,
    );
  }

  late final _DH_meth_set1_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DH_METHOD>,
              ffi.Pointer<ffi.Char>)>>('DH_meth_set1_name');
  late final _DH_meth_set1_name = _DH_meth_set1_namePtr.asFunction<
      int Function(ffi.Pointer<DH_METHOD>, ffi.Pointer<ffi.Char>)>();

  int DH_meth_get_flags(
    ffi.Pointer<DH_METHOD> dhm,
  ) {
    return _DH_meth_get_flags(
      dhm,
    );
  }

  late final _DH_meth_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH_METHOD>)>>(
          'DH_meth_get_flags');
  late final _DH_meth_get_flags =
      _DH_meth_get_flagsPtr.asFunction<int Function(ffi.Pointer<DH_METHOD>)>();

  int DH_meth_set_flags(
    ffi.Pointer<DH_METHOD> dhm,
    int flags,
  ) {
    return _DH_meth_set_flags(
      dhm,
      flags,
    );
  }

  late final _DH_meth_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DH_METHOD>, ffi.Int)>>('DH_meth_set_flags');
  late final _DH_meth_set_flags = _DH_meth_set_flagsPtr.asFunction<
      int Function(ffi.Pointer<DH_METHOD>, int)>();

  ffi.Pointer<ffi.Void> DH_meth_get0_app_data(
    ffi.Pointer<DH_METHOD> dhm,
  ) {
    return _DH_meth_get0_app_data(
      dhm,
    );
  }

  late final _DH_meth_get0_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<DH_METHOD>)>>('DH_meth_get0_app_data');
  late final _DH_meth_get0_app_data = _DH_meth_get0_app_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<DH_METHOD>)>();

  int DH_meth_set0_app_data(
    ffi.Pointer<DH_METHOD> dhm,
    ffi.Pointer<ffi.Void> app_data,
  ) {
    return _DH_meth_set0_app_data(
      dhm,
      app_data,
    );
  }

  late final _DH_meth_set0_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DH_METHOD>,
              ffi.Pointer<ffi.Void>)>>('DH_meth_set0_app_data');
  late final _DH_meth_set0_app_data = _DH_meth_set0_app_dataPtr.asFunction<
      int Function(ffi.Pointer<DH_METHOD>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>
      DH_meth_get_generate_key(
    ffi.Pointer<DH_METHOD> dhm,
  ) {
    return _DH_meth_get_generate_key(
      dhm,
    );
  }

  late final _DH_meth_get_generate_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>
              Function(ffi.Pointer<DH_METHOD>)>>('DH_meth_get_generate_key');
  late final _DH_meth_get_generate_key =
      _DH_meth_get_generate_keyPtr.asFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>
              Function(ffi.Pointer<DH_METHOD>)>();

  int DH_meth_set_generate_key(
    ffi.Pointer<DH_METHOD> dhm,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>
        generate_key,
  ) {
    return _DH_meth_set_generate_key(
      dhm,
      generate_key,
    );
  }

  late final _DH_meth_set_generate_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<DH_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>)>>(
      'DH_meth_set_generate_key');
  late final _DH_meth_set_generate_key =
      _DH_meth_set_generate_keyPtr.asFunction<
          int Function(
              ffi.Pointer<DH_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<DH>)>> DH_meth_get_compute_key(
    ffi.Pointer<DH_METHOD> dhm,
  ) {
    return _DH_meth_get_compute_key(
      dhm,
    );
  }

  late final _DH_meth_get_compute_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<BIGNUM>, ffi.Pointer<DH>)>>
              Function(ffi.Pointer<DH_METHOD>)>>('DH_meth_get_compute_key');
  late final _DH_meth_get_compute_key = _DH_meth_get_compute_keyPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<BIGNUM>, ffi.Pointer<DH>)>>
          Function(ffi.Pointer<DH_METHOD>)>();

  int DH_meth_set_compute_key(
    ffi.Pointer<DH_METHOD> dhm,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Pointer<BIGNUM>, ffi.Pointer<DH>)>>
        compute_key,
  ) {
    return _DH_meth_set_compute_key(
      dhm,
      compute_key,
    );
  }

  late final _DH_meth_set_compute_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DH_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<DH>)>>)>>('DH_meth_set_compute_key');
  late final _DH_meth_set_compute_key = _DH_meth_set_compute_keyPtr.asFunction<
      int Function(
          ffi.Pointer<DH_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Pointer<BIGNUM>, ffi.Pointer<DH>)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DH>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>> DH_meth_get_bn_mod_exp(
    ffi.Pointer<DH_METHOD> dhm,
  ) {
    return _DH_meth_get_bn_mod_exp(
      dhm,
    );
  }

  late final _DH_meth_get_bn_mod_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<DH>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BN_CTX>,
                          ffi.Pointer<BN_MONT_CTX>)>>
              Function(ffi.Pointer<DH_METHOD>)>>('DH_meth_get_bn_mod_exp');
  late final _DH_meth_get_bn_mod_exp = _DH_meth_get_bn_mod_expPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<DH>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BN_CTX>,
                      ffi.Pointer<BN_MONT_CTX>)>>
          Function(ffi.Pointer<DH_METHOD>)>();

  int DH_meth_set_bn_mod_exp(
    ffi.Pointer<DH_METHOD> dhm,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<DH>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BN_CTX>,
                    ffi.Pointer<BN_MONT_CTX>)>>
        bn_mod_exp,
  ) {
    return _DH_meth_set_bn_mod_exp(
      dhm,
      bn_mod_exp,
    );
  }

  late final _DH_meth_set_bn_mod_expPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<DH_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<DH>,
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BN_CTX>,
                              ffi.Pointer<BN_MONT_CTX>)>>)>>(
      'DH_meth_set_bn_mod_exp');
  late final _DH_meth_set_bn_mod_exp = _DH_meth_set_bn_mod_expPtr.asFunction<
      int Function(
          ffi.Pointer<DH_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<DH>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BN_CTX>,
                      ffi.Pointer<BN_MONT_CTX>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>
      DH_meth_get_init(
    ffi.Pointer<DH_METHOD> dhm,
  ) {
    return _DH_meth_get_init(
      dhm,
    );
  }

  late final _DH_meth_get_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>
              Function(ffi.Pointer<DH_METHOD>)>>('DH_meth_get_init');
  late final _DH_meth_get_init = _DH_meth_get_initPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>
          Function(ffi.Pointer<DH_METHOD>)>();

  int DH_meth_set_init(
    ffi.Pointer<DH_METHOD> dhm,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>> init,
  ) {
    return _DH_meth_set_init(
      dhm,
      init,
    );
  }

  late final _DH_meth_set_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<DH_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>)>>(
      'DH_meth_set_init');
  late final _DH_meth_set_init = _DH_meth_set_initPtr.asFunction<
      int Function(
          ffi.Pointer<DH_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>
      DH_meth_get_finish(
    ffi.Pointer<DH_METHOD> dhm,
  ) {
    return _DH_meth_get_finish(
      dhm,
    );
  }

  late final _DH_meth_get_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>
              Function(ffi.Pointer<DH_METHOD>)>>('DH_meth_get_finish');
  late final _DH_meth_get_finish = _DH_meth_get_finishPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>
          Function(ffi.Pointer<DH_METHOD>)>();

  int DH_meth_set_finish(
    ffi.Pointer<DH_METHOD> dhm,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>> finish,
  ) {
    return _DH_meth_set_finish(
      dhm,
      finish,
    );
  }

  late final _DH_meth_set_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<DH_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>)>>(
      'DH_meth_set_finish');
  late final _DH_meth_set_finish = _DH_meth_set_finishPtr.asFunction<
      int Function(
          ffi.Pointer<DH_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DH>)>>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<DH>, ffi.Int, ffi.Int, ffi.Pointer<BN_GENCB>)>>
      DH_meth_get_generate_params(
    ffi.Pointer<DH_METHOD> dhm,
  ) {
    return _DH_meth_get_generate_params(
      dhm,
    );
  }

  late final _DH_meth_get_generate_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<DH>, ffi.Int, ffi.Int,
                          ffi.Pointer<BN_GENCB>)>>
              Function(ffi.Pointer<DH_METHOD>)>>('DH_meth_get_generate_params');
  late final _DH_meth_get_generate_params =
      _DH_meth_get_generate_paramsPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<DH>, ffi.Int, ffi.Int,
                          ffi.Pointer<BN_GENCB>)>>
              Function(ffi.Pointer<DH_METHOD>)>();

  int DH_meth_set_generate_params(
    ffi.Pointer<DH_METHOD> dhm,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<DH>, ffi.Int, ffi.Int, ffi.Pointer<BN_GENCB>)>>
        generate_params,
  ) {
    return _DH_meth_set_generate_params(
      dhm,
      generate_params,
    );
  }

  late final _DH_meth_set_generate_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<DH_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<DH>, ffi.Int, ffi.Int,
                              ffi.Pointer<BN_GENCB>)>>)>>(
      'DH_meth_set_generate_params');
  late final _DH_meth_set_generate_params =
      _DH_meth_set_generate_paramsPtr.asFunction<
          int Function(
              ffi.Pointer<DH_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<DH>, ffi.Int, ffi.Int,
                          ffi.Pointer<BN_GENCB>)>>)>();

  int ERR_load_DSA_strings() {
    return _ERR_load_DSA_strings();
  }

  late final _ERR_load_DSA_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_DSA_strings');
  late final _ERR_load_DSA_strings =
      _ERR_load_DSA_stringsPtr.asFunction<int Function()>();

  ffi.Pointer<DSA> DSAparams_dup(
    ffi.Pointer<DSA> x,
  ) {
    return _DSAparams_dup(
      x,
    );
  }

  late final _DSAparams_dupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DSA> Function(ffi.Pointer<DSA>)>>(
          'DSAparams_dup');
  late final _DSAparams_dup = _DSAparams_dupPtr.asFunction<
      ffi.Pointer<DSA> Function(ffi.Pointer<DSA>)>();

  ffi.Pointer<DSA_SIG> DSA_SIG_new() {
    return _DSA_SIG_new();
  }

  late final _DSA_SIG_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DSA_SIG> Function()>>(
          'DSA_SIG_new');
  late final _DSA_SIG_new =
      _DSA_SIG_newPtr.asFunction<ffi.Pointer<DSA_SIG> Function()>();

  void DSA_SIG_free(
    ffi.Pointer<DSA_SIG> a,
  ) {
    return _DSA_SIG_free(
      a,
    );
  }

  late final _DSA_SIG_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DSA_SIG>)>>(
          'DSA_SIG_free');
  late final _DSA_SIG_free =
      _DSA_SIG_freePtr.asFunction<void Function(ffi.Pointer<DSA_SIG>)>();

  int i2d_DSA_SIG(
    ffi.Pointer<DSA_SIG> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_DSA_SIG(
      a,
      pp,
    );
  }

  late final _i2d_DSA_SIGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DSA_SIG>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_DSA_SIG');
  late final _i2d_DSA_SIG = _i2d_DSA_SIGPtr.asFunction<
      int Function(
          ffi.Pointer<DSA_SIG>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<DSA_SIG> d2i_DSA_SIG(
    ffi.Pointer<ffi.Pointer<DSA_SIG>> v,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_DSA_SIG(
      v,
      pp,
      length,
    );
  }

  late final _d2i_DSA_SIGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA_SIG> Function(
              ffi.Pointer<ffi.Pointer<DSA_SIG>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_DSA_SIG');
  late final _d2i_DSA_SIG = _d2i_DSA_SIGPtr.asFunction<
      ffi.Pointer<DSA_SIG> Function(ffi.Pointer<ffi.Pointer<DSA_SIG>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  void DSA_SIG_get0(
    ffi.Pointer<DSA_SIG> sig,
    ffi.Pointer<ffi.Pointer<BIGNUM>> pr,
    ffi.Pointer<ffi.Pointer<BIGNUM>> ps,
  ) {
    return _DSA_SIG_get0(
      sig,
      pr,
      ps,
    );
  }

  late final _DSA_SIG_get0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DSA_SIG>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>)>>('DSA_SIG_get0');
  late final _DSA_SIG_get0 = _DSA_SIG_get0Ptr.asFunction<
      void Function(ffi.Pointer<DSA_SIG>, ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>)>();

  int DSA_SIG_set0(
    ffi.Pointer<DSA_SIG> sig,
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> s,
  ) {
    return _DSA_SIG_set0(
      sig,
      r,
      s,
    );
  }

  late final _DSA_SIG_set0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DSA_SIG>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('DSA_SIG_set0');
  late final _DSA_SIG_set0 = _DSA_SIG_set0Ptr.asFunction<
      int Function(
          ffi.Pointer<DSA_SIG>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<DSA_SIG> DSA_do_sign(
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dlen,
    ffi.Pointer<DSA> dsa,
  ) {
    return _DSA_do_sign(
      dgst,
      dlen,
      dsa,
    );
  }

  late final _DSA_do_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA_SIG> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<DSA>)>>('DSA_do_sign');
  late final _DSA_do_sign = _DSA_do_signPtr.asFunction<
      ffi.Pointer<DSA_SIG> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<DSA>)>();

  int DSA_do_verify(
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgst_len,
    ffi.Pointer<DSA_SIG> sig,
    ffi.Pointer<DSA> dsa,
  ) {
    return _DSA_do_verify(
      dgst,
      dgst_len,
      sig,
      dsa,
    );
  }

  late final _DSA_do_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<DSA_SIG>, ffi.Pointer<DSA>)>>('DSA_do_verify');
  late final _DSA_do_verify = _DSA_do_verifyPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<DSA_SIG>,
          ffi.Pointer<DSA>)>();

  ffi.Pointer<DSA_METHOD> DSA_OpenSSL() {
    return _DSA_OpenSSL();
  }

  late final _DSA_OpenSSLPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DSA_METHOD> Function()>>(
          'DSA_OpenSSL');
  late final _DSA_OpenSSL =
      _DSA_OpenSSLPtr.asFunction<ffi.Pointer<DSA_METHOD> Function()>();

  void DSA_set_default_method(
    ffi.Pointer<DSA_METHOD> arg0,
  ) {
    return _DSA_set_default_method(
      arg0,
    );
  }

  late final _DSA_set_default_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DSA_METHOD>)>>(
          'DSA_set_default_method');
  late final _DSA_set_default_method = _DSA_set_default_methodPtr.asFunction<
      void Function(ffi.Pointer<DSA_METHOD>)>();

  ffi.Pointer<DSA_METHOD> DSA_get_default_method() {
    return _DSA_get_default_method();
  }

  late final _DSA_get_default_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DSA_METHOD> Function()>>(
          'DSA_get_default_method');
  late final _DSA_get_default_method = _DSA_get_default_methodPtr.asFunction<
      ffi.Pointer<DSA_METHOD> Function()>();

  int DSA_set_method(
    ffi.Pointer<DSA> dsa,
    ffi.Pointer<DSA_METHOD> arg1,
  ) {
    return _DSA_set_method(
      dsa,
      arg1,
    );
  }

  late final _DSA_set_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DSA>, ffi.Pointer<DSA_METHOD>)>>('DSA_set_method');
  late final _DSA_set_method = _DSA_set_methodPtr.asFunction<
      int Function(ffi.Pointer<DSA>, ffi.Pointer<DSA_METHOD>)>();

  ffi.Pointer<DSA_METHOD> DSA_get_method(
    ffi.Pointer<DSA> d,
  ) {
    return _DSA_get_method(
      d,
    );
  }

  late final _DSA_get_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA_METHOD> Function(
              ffi.Pointer<DSA>)>>('DSA_get_method');
  late final _DSA_get_method = _DSA_get_methodPtr.asFunction<
      ffi.Pointer<DSA_METHOD> Function(ffi.Pointer<DSA>)>();

  ffi.Pointer<DSA> DSA_new() {
    return _DSA_new();
  }

  late final _DSA_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DSA> Function()>>('DSA_new');
  late final _DSA_new = _DSA_newPtr.asFunction<ffi.Pointer<DSA> Function()>();

  ffi.Pointer<DSA> DSA_new_method(
    ffi.Pointer<ENGINE> engine,
  ) {
    return _DSA_new_method(
      engine,
    );
  }

  late final _DSA_new_methodPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<DSA> Function(ffi.Pointer<ENGINE>)>>(
      'DSA_new_method');
  late final _DSA_new_method = _DSA_new_methodPtr.asFunction<
      ffi.Pointer<DSA> Function(ffi.Pointer<ENGINE>)>();

  void DSA_free(
    ffi.Pointer<DSA> r,
  ) {
    return _DSA_free(
      r,
    );
  }

  late final _DSA_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DSA>)>>(
          'DSA_free');
  late final _DSA_free =
      _DSA_freePtr.asFunction<void Function(ffi.Pointer<DSA>)>();

  int DSA_up_ref(
    ffi.Pointer<DSA> r,
  ) {
    return _DSA_up_ref(
      r,
    );
  }

  late final _DSA_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>(
          'DSA_up_ref');
  late final _DSA_up_ref =
      _DSA_up_refPtr.asFunction<int Function(ffi.Pointer<DSA>)>();

  int DSA_size(
    ffi.Pointer<DSA> arg0,
  ) {
    return _DSA_size(
      arg0,
    );
  }

  late final _DSA_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>(
          'DSA_size');
  late final _DSA_size =
      _DSA_sizePtr.asFunction<int Function(ffi.Pointer<DSA>)>();

  int DSA_bits(
    ffi.Pointer<DSA> d,
  ) {
    return _DSA_bits(
      d,
    );
  }

  late final _DSA_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>(
          'DSA_bits');
  late final _DSA_bits =
      _DSA_bitsPtr.asFunction<int Function(ffi.Pointer<DSA>)>();

  int DSA_security_bits(
    ffi.Pointer<DSA> d,
  ) {
    return _DSA_security_bits(
      d,
    );
  }

  late final _DSA_security_bitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>(
          'DSA_security_bits');
  late final _DSA_security_bits =
      _DSA_security_bitsPtr.asFunction<int Function(ffi.Pointer<DSA>)>();

  int DSA_sign_setup(
    ffi.Pointer<DSA> dsa,
    ffi.Pointer<BN_CTX> ctx_in,
    ffi.Pointer<ffi.Pointer<BIGNUM>> kinvp,
    ffi.Pointer<ffi.Pointer<BIGNUM>> rp,
  ) {
    return _DSA_sign_setup(
      dsa,
      ctx_in,
      kinvp,
      rp,
    );
  }

  late final _DSA_sign_setupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DSA>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>)>>('DSA_sign_setup');
  late final _DSA_sign_setup = _DSA_sign_setupPtr.asFunction<
      int Function(
          ffi.Pointer<DSA>,
          ffi.Pointer<BN_CTX>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>)>();

  int DSA_sign(
    int type,
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dlen,
    ffi.Pointer<ffi.UnsignedChar> sig,
    ffi.Pointer<ffi.UnsignedInt> siglen,
    ffi.Pointer<DSA> dsa,
  ) {
    return _DSA_sign(
      type,
      dgst,
      dlen,
      sig,
      siglen,
      dsa,
    );
  }

  late final _DSA_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<DSA>)>>('DSA_sign');
  late final _DSA_sign = _DSA_signPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<DSA>)>();

  int DSA_verify(
    int type,
    ffi.Pointer<ffi.UnsignedChar> dgst,
    int dgst_len,
    ffi.Pointer<ffi.UnsignedChar> sigbuf,
    int siglen,
    ffi.Pointer<DSA> dsa,
  ) {
    return _DSA_verify(
      type,
      dgst,
      dgst_len,
      sigbuf,
      siglen,
      dsa,
    );
  }

  late final _DSA_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<DSA>)>>('DSA_verify');
  late final _DSA_verify = _DSA_verifyPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<DSA>)>();

  int DSA_set_ex_data(
    ffi.Pointer<DSA> d,
    int idx,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _DSA_set_ex_data(
      d,
      idx,
      arg,
    );
  }

  late final _DSA_set_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DSA>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('DSA_set_ex_data');
  late final _DSA_set_ex_data = _DSA_set_ex_dataPtr.asFunction<
      int Function(ffi.Pointer<DSA>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> DSA_get_ex_data(
    ffi.Pointer<DSA> d,
    int idx,
  ) {
    return _DSA_get_ex_data(
      d,
      idx,
    );
  }

  late final _DSA_get_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<DSA>, ffi.Int)>>('DSA_get_ex_data');
  late final _DSA_get_ex_data = _DSA_get_ex_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<DSA>, int)>();

  ffi.Pointer<DSA> d2i_DSAPublicKey(
    ffi.Pointer<ffi.Pointer<DSA>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_DSAPublicKey(
      a,
      pp,
      length,
    );
  }

  late final _d2i_DSAPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA> Function(
              ffi.Pointer<ffi.Pointer<DSA>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_DSAPublicKey');
  late final _d2i_DSAPublicKey = _d2i_DSAPublicKeyPtr.asFunction<
      ffi.Pointer<DSA> Function(ffi.Pointer<ffi.Pointer<DSA>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  ffi.Pointer<DSA> d2i_DSAPrivateKey(
    ffi.Pointer<ffi.Pointer<DSA>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_DSAPrivateKey(
      a,
      pp,
      length,
    );
  }

  late final _d2i_DSAPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA> Function(
              ffi.Pointer<ffi.Pointer<DSA>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_DSAPrivateKey');
  late final _d2i_DSAPrivateKey = _d2i_DSAPrivateKeyPtr.asFunction<
      ffi.Pointer<DSA> Function(ffi.Pointer<ffi.Pointer<DSA>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  ffi.Pointer<DSA> d2i_DSAparams(
    ffi.Pointer<ffi.Pointer<DSA>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_DSAparams(
      a,
      pp,
      length,
    );
  }

  late final _d2i_DSAparamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA> Function(
              ffi.Pointer<ffi.Pointer<DSA>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_DSAparams');
  late final _d2i_DSAparams = _d2i_DSAparamsPtr.asFunction<
      ffi.Pointer<DSA> Function(ffi.Pointer<ffi.Pointer<DSA>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  ffi.Pointer<DSA> DSA_generate_parameters(
    int bits,
    ffi.Pointer<ffi.UnsignedChar> seed,
    int seed_len,
    ffi.Pointer<ffi.Int> counter_ret,
    ffi.Pointer<ffi.UnsignedLong> h_ret,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<ffi.Void> cb_arg,
  ) {
    return _DSA_generate_parameters(
      bits,
      seed,
      seed_len,
      counter_ret,
      h_ret,
      callback,
      cb_arg,
    );
  }

  late final _DSA_generate_parametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA> Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('DSA_generate_parameters');
  late final _DSA_generate_parameters = _DSA_generate_parametersPtr.asFunction<
      ffi.Pointer<DSA> Function(
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int DSA_generate_parameters_ex(
    ffi.Pointer<DSA> dsa,
    int bits,
    ffi.Pointer<ffi.UnsignedChar> seed,
    int seed_len,
    ffi.Pointer<ffi.Int> counter_ret,
    ffi.Pointer<ffi.UnsignedLong> h_ret,
    ffi.Pointer<BN_GENCB> cb,
  ) {
    return _DSA_generate_parameters_ex(
      dsa,
      bits,
      seed,
      seed_len,
      counter_ret,
      h_ret,
      cb,
    );
  }

  late final _DSA_generate_parameters_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DSA>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<BN_GENCB>)>>('DSA_generate_parameters_ex');
  late final _DSA_generate_parameters_ex =
      _DSA_generate_parameters_exPtr.asFunction<
          int Function(
              ffi.Pointer<DSA>,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<BN_GENCB>)>();

  int DSA_generate_key(
    ffi.Pointer<DSA> a,
  ) {
    return _DSA_generate_key(
      a,
    );
  }

  late final _DSA_generate_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>(
          'DSA_generate_key');
  late final _DSA_generate_key =
      _DSA_generate_keyPtr.asFunction<int Function(ffi.Pointer<DSA>)>();

  int i2d_DSAPublicKey(
    ffi.Pointer<DSA> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_DSAPublicKey(
      a,
      pp,
    );
  }

  late final _i2d_DSAPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DSA>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_DSAPublicKey');
  late final _i2d_DSAPublicKey = _i2d_DSAPublicKeyPtr.asFunction<
      int Function(
          ffi.Pointer<DSA>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int i2d_DSAPrivateKey(
    ffi.Pointer<DSA> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_DSAPrivateKey(
      a,
      pp,
    );
  }

  late final _i2d_DSAPrivateKeyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<DSA>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_DSAPrivateKey');
  late final _i2d_DSAPrivateKey = _i2d_DSAPrivateKeyPtr.asFunction<
      int Function(
          ffi.Pointer<DSA>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int i2d_DSAparams(
    ffi.Pointer<DSA> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_DSAparams(
      a,
      pp,
    );
  }

  late final _i2d_DSAparamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DSA>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_DSAparams');
  late final _i2d_DSAparams = _i2d_DSAparamsPtr.asFunction<
      int Function(
          ffi.Pointer<DSA>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int DSAparams_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<DSA> x,
  ) {
    return _DSAparams_print(
      bp,
      x,
    );
  }

  late final _DSAparams_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<DSA>)>>('DSAparams_print');
  late final _DSAparams_print = _DSAparams_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<DSA>)>();

  int DSA_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<DSA> x,
    int off,
  ) {
    return _DSA_print(
      bp,
      x,
      off,
    );
  }

  late final _DSA_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<DSA>, ffi.Int)>>('DSA_print');
  late final _DSA_print = _DSA_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<DSA>, int)>();

  int DSAparams_print_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<DSA> x,
  ) {
    return _DSAparams_print_fp(
      fp,
      x,
    );
  }

  late final _DSAparams_print_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<DSA>)>>('DSAparams_print_fp');
  late final _DSAparams_print_fp = _DSAparams_print_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<DSA>)>();

  int DSA_print_fp(
    ffi.Pointer<FILE> bp,
    ffi.Pointer<DSA> x,
    int off,
  ) {
    return _DSA_print_fp(
      bp,
      x,
      off,
    );
  }

  late final _DSA_print_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<DSA>, ffi.Int)>>('DSA_print_fp');
  late final _DSA_print_fp = _DSA_print_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<DSA>, int)>();

  ffi.Pointer<DH> DSA_dup_DH(
    ffi.Pointer<DSA> r,
  ) {
    return _DSA_dup_DH(
      r,
    );
  }

  late final _DSA_dup_DHPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DH> Function(ffi.Pointer<DSA>)>>(
          'DSA_dup_DH');
  late final _DSA_dup_DH =
      _DSA_dup_DHPtr.asFunction<ffi.Pointer<DH> Function(ffi.Pointer<DSA>)>();

  void DSA_get0_pqg(
    ffi.Pointer<DSA> d,
    ffi.Pointer<ffi.Pointer<BIGNUM>> p,
    ffi.Pointer<ffi.Pointer<BIGNUM>> q,
    ffi.Pointer<ffi.Pointer<BIGNUM>> g,
  ) {
    return _DSA_get0_pqg(
      d,
      p,
      q,
      g,
    );
  }

  late final _DSA_get0_pqgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DSA>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>)>>('DSA_get0_pqg');
  late final _DSA_get0_pqg = _DSA_get0_pqgPtr.asFunction<
      void Function(
          ffi.Pointer<DSA>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>)>();

  int DSA_set0_pqg(
    ffi.Pointer<DSA> d,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> q,
    ffi.Pointer<BIGNUM> g,
  ) {
    return _DSA_set0_pqg(
      d,
      p,
      q,
      g,
    );
  }

  late final _DSA_set0_pqgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DSA>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>>('DSA_set0_pqg');
  late final _DSA_set0_pqg = _DSA_set0_pqgPtr.asFunction<
      int Function(ffi.Pointer<DSA>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>,
          ffi.Pointer<BIGNUM>)>();

  void DSA_get0_key(
    ffi.Pointer<DSA> d,
    ffi.Pointer<ffi.Pointer<BIGNUM>> pub_key,
    ffi.Pointer<ffi.Pointer<BIGNUM>> priv_key,
  ) {
    return _DSA_get0_key(
      d,
      pub_key,
      priv_key,
    );
  }

  late final _DSA_get0_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DSA>, ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>)>>('DSA_get0_key');
  late final _DSA_get0_key = _DSA_get0_keyPtr.asFunction<
      void Function(ffi.Pointer<DSA>, ffi.Pointer<ffi.Pointer<BIGNUM>>,
          ffi.Pointer<ffi.Pointer<BIGNUM>>)>();

  int DSA_set0_key(
    ffi.Pointer<DSA> d,
    ffi.Pointer<BIGNUM> pub_key,
    ffi.Pointer<BIGNUM> priv_key,
  ) {
    return _DSA_set0_key(
      d,
      pub_key,
      priv_key,
    );
  }

  late final _DSA_set0_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DSA>, ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>)>>('DSA_set0_key');
  late final _DSA_set0_key = _DSA_set0_keyPtr.asFunction<
      int Function(
          ffi.Pointer<DSA>, ffi.Pointer<BIGNUM>, ffi.Pointer<BIGNUM>)>();

  ffi.Pointer<BIGNUM> DSA_get0_p(
    ffi.Pointer<DSA> d,
  ) {
    return _DSA_get0_p(
      d,
    );
  }

  late final _DSA_get0_pPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)>>(
      'DSA_get0_p');
  late final _DSA_get0_p = _DSA_get0_pPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)>();

  ffi.Pointer<BIGNUM> DSA_get0_q(
    ffi.Pointer<DSA> d,
  ) {
    return _DSA_get0_q(
      d,
    );
  }

  late final _DSA_get0_qPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)>>(
      'DSA_get0_q');
  late final _DSA_get0_q = _DSA_get0_qPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)>();

  ffi.Pointer<BIGNUM> DSA_get0_g(
    ffi.Pointer<DSA> d,
  ) {
    return _DSA_get0_g(
      d,
    );
  }

  late final _DSA_get0_gPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)>>(
      'DSA_get0_g');
  late final _DSA_get0_g = _DSA_get0_gPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)>();

  ffi.Pointer<BIGNUM> DSA_get0_pub_key(
    ffi.Pointer<DSA> d,
  ) {
    return _DSA_get0_pub_key(
      d,
    );
  }

  late final _DSA_get0_pub_keyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)>>(
      'DSA_get0_pub_key');
  late final _DSA_get0_pub_key = _DSA_get0_pub_keyPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)>();

  ffi.Pointer<BIGNUM> DSA_get0_priv_key(
    ffi.Pointer<DSA> d,
  ) {
    return _DSA_get0_priv_key(
      d,
    );
  }

  late final _DSA_get0_priv_keyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)>>(
      'DSA_get0_priv_key');
  late final _DSA_get0_priv_key = _DSA_get0_priv_keyPtr.asFunction<
      ffi.Pointer<BIGNUM> Function(ffi.Pointer<DSA>)>();

  void DSA_clear_flags(
    ffi.Pointer<DSA> d,
    int flags,
  ) {
    return _DSA_clear_flags(
      d,
      flags,
    );
  }

  late final _DSA_clear_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DSA>, ffi.Int)>>(
          'DSA_clear_flags');
  late final _DSA_clear_flags =
      _DSA_clear_flagsPtr.asFunction<void Function(ffi.Pointer<DSA>, int)>();

  int DSA_test_flags(
    ffi.Pointer<DSA> d,
    int flags,
  ) {
    return _DSA_test_flags(
      d,
      flags,
    );
  }

  late final _DSA_test_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>, ffi.Int)>>(
          'DSA_test_flags');
  late final _DSA_test_flags =
      _DSA_test_flagsPtr.asFunction<int Function(ffi.Pointer<DSA>, int)>();

  void DSA_set_flags(
    ffi.Pointer<DSA> d,
    int flags,
  ) {
    return _DSA_set_flags(
      d,
      flags,
    );
  }

  late final _DSA_set_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DSA>, ffi.Int)>>(
          'DSA_set_flags');
  late final _DSA_set_flags =
      _DSA_set_flagsPtr.asFunction<void Function(ffi.Pointer<DSA>, int)>();

  ffi.Pointer<ENGINE> DSA_get0_engine(
    ffi.Pointer<DSA> d,
  ) {
    return _DSA_get0_engine(
      d,
    );
  }

  late final _DSA_get0_enginePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ENGINE> Function(ffi.Pointer<DSA>)>>(
      'DSA_get0_engine');
  late final _DSA_get0_engine = _DSA_get0_enginePtr.asFunction<
      ffi.Pointer<ENGINE> Function(ffi.Pointer<DSA>)>();

  ffi.Pointer<DSA_METHOD> DSA_meth_new(
    ffi.Pointer<ffi.Char> name,
    int flags,
  ) {
    return _DSA_meth_new(
      name,
      flags,
    );
  }

  late final _DSA_meth_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA_METHOD> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('DSA_meth_new');
  late final _DSA_meth_new = _DSA_meth_newPtr.asFunction<
      ffi.Pointer<DSA_METHOD> Function(ffi.Pointer<ffi.Char>, int)>();

  void DSA_meth_free(
    ffi.Pointer<DSA_METHOD> dsam,
  ) {
    return _DSA_meth_free(
      dsam,
    );
  }

  late final _DSA_meth_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DSA_METHOD>)>>(
          'DSA_meth_free');
  late final _DSA_meth_free =
      _DSA_meth_freePtr.asFunction<void Function(ffi.Pointer<DSA_METHOD>)>();

  ffi.Pointer<DSA_METHOD> DSA_meth_dup(
    ffi.Pointer<DSA_METHOD> dsam,
  ) {
    return _DSA_meth_dup(
      dsam,
    );
  }

  late final _DSA_meth_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA_METHOD> Function(
              ffi.Pointer<DSA_METHOD>)>>('DSA_meth_dup');
  late final _DSA_meth_dup = _DSA_meth_dupPtr.asFunction<
      ffi.Pointer<DSA_METHOD> Function(ffi.Pointer<DSA_METHOD>)>();

  ffi.Pointer<ffi.Char> DSA_meth_get0_name(
    ffi.Pointer<DSA_METHOD> dsam,
  ) {
    return _DSA_meth_get0_name(
      dsam,
    );
  }

  late final _DSA_meth_get0_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DSA_METHOD>)>>('DSA_meth_get0_name');
  late final _DSA_meth_get0_name = _DSA_meth_get0_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<DSA_METHOD>)>();

  int DSA_meth_set1_name(
    ffi.Pointer<DSA_METHOD> dsam,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _DSA_meth_set1_name(
      dsam,
      name,
    );
  }

  late final _DSA_meth_set1_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DSA_METHOD>,
              ffi.Pointer<ffi.Char>)>>('DSA_meth_set1_name');
  late final _DSA_meth_set1_name = _DSA_meth_set1_namePtr.asFunction<
      int Function(ffi.Pointer<DSA_METHOD>, ffi.Pointer<ffi.Char>)>();

  int DSA_meth_get_flags(
    ffi.Pointer<DSA_METHOD> dsam,
  ) {
    return _DSA_meth_get_flags(
      dsam,
    );
  }

  late final _DSA_meth_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA_METHOD>)>>(
          'DSA_meth_get_flags');
  late final _DSA_meth_get_flags = _DSA_meth_get_flagsPtr.asFunction<
      int Function(ffi.Pointer<DSA_METHOD>)>();

  int DSA_meth_set_flags(
    ffi.Pointer<DSA_METHOD> dsam,
    int flags,
  ) {
    return _DSA_meth_set_flags(
      dsam,
      flags,
    );
  }

  late final _DSA_meth_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DSA_METHOD>, ffi.Int)>>('DSA_meth_set_flags');
  late final _DSA_meth_set_flags = _DSA_meth_set_flagsPtr.asFunction<
      int Function(ffi.Pointer<DSA_METHOD>, int)>();

  ffi.Pointer<ffi.Void> DSA_meth_get0_app_data(
    ffi.Pointer<DSA_METHOD> dsam,
  ) {
    return _DSA_meth_get0_app_data(
      dsam,
    );
  }

  late final _DSA_meth_get0_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<DSA_METHOD>)>>('DSA_meth_get0_app_data');
  late final _DSA_meth_get0_app_data = _DSA_meth_get0_app_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<DSA_METHOD>)>();

  int DSA_meth_set0_app_data(
    ffi.Pointer<DSA_METHOD> dsam,
    ffi.Pointer<ffi.Void> app_data,
  ) {
    return _DSA_meth_set0_app_data(
      dsam,
      app_data,
    );
  }

  late final _DSA_meth_set0_app_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DSA_METHOD>,
              ffi.Pointer<ffi.Void>)>>('DSA_meth_set0_app_data');
  late final _DSA_meth_set0_app_data = _DSA_meth_set0_app_dataPtr.asFunction<
      int Function(ffi.Pointer<DSA_METHOD>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<DSA_SIG> Function(
                  ffi.Pointer<ffi.UnsignedChar>, ffi.Int, ffi.Pointer<DSA>)>>
      DSA_meth_get_sign(
    ffi.Pointer<DSA_METHOD> dsam,
  ) {
    return _DSA_meth_get_sign(
      dsam,
    );
  }

  late final _DSA_meth_get_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<DSA_SIG> Function(
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<DSA>)>>
              Function(ffi.Pointer<DSA_METHOD>)>>('DSA_meth_get_sign');
  late final _DSA_meth_get_sign = _DSA_meth_get_signPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<DSA_SIG> Function(ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Int, ffi.Pointer<DSA>)>>
          Function(ffi.Pointer<DSA_METHOD>)>();

  int DSA_meth_set_sign(
    ffi.Pointer<DSA_METHOD> dsam,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<DSA_SIG> Function(
                    ffi.Pointer<ffi.UnsignedChar>, ffi.Int, ffi.Pointer<DSA>)>>
        sign,
  ) {
    return _DSA_meth_set_sign(
      dsam,
      sign,
    );
  }

  late final _DSA_meth_set_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DSA_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<DSA_SIG> Function(
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<DSA>)>>)>>('DSA_meth_set_sign');
  late final _DSA_meth_set_sign = _DSA_meth_set_signPtr.asFunction<
      int Function(
          ffi.Pointer<DSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<DSA_SIG> Function(ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Int, ffi.Pointer<DSA>)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DSA>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>,
              ffi.Pointer<ffi.Pointer<BIGNUM>>)>> DSA_meth_get_sign_setup(
    ffi.Pointer<DSA_METHOD> dsam,
  ) {
    return _DSA_meth_get_sign_setup(
      dsam,
    );
  }

  late final _DSA_meth_get_sign_setupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<DSA>,
                          ffi.Pointer<BN_CTX>,
                          ffi.Pointer<ffi.Pointer<BIGNUM>>,
                          ffi.Pointer<ffi.Pointer<BIGNUM>>)>>
              Function(ffi.Pointer<DSA_METHOD>)>>('DSA_meth_get_sign_setup');
  late final _DSA_meth_get_sign_setup = _DSA_meth_get_sign_setupPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<DSA>,
                      ffi.Pointer<BN_CTX>,
                      ffi.Pointer<ffi.Pointer<BIGNUM>>,
                      ffi.Pointer<ffi.Pointer<BIGNUM>>)>>
          Function(ffi.Pointer<DSA_METHOD>)>();

  int DSA_meth_set_sign_setup(
    ffi.Pointer<DSA_METHOD> dsam,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<DSA>,
                    ffi.Pointer<BN_CTX>,
                    ffi.Pointer<ffi.Pointer<BIGNUM>>,
                    ffi.Pointer<ffi.Pointer<BIGNUM>>)>>
        sign_setup,
  ) {
    return _DSA_meth_set_sign_setup(
      dsam,
      sign_setup,
    );
  }

  late final _DSA_meth_set_sign_setupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<DSA_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<DSA>,
                              ffi.Pointer<BN_CTX>,
                              ffi.Pointer<ffi.Pointer<BIGNUM>>,
                              ffi.Pointer<ffi.Pointer<BIGNUM>>)>>)>>(
      'DSA_meth_set_sign_setup');
  late final _DSA_meth_set_sign_setup = _DSA_meth_set_sign_setupPtr.asFunction<
      int Function(
          ffi.Pointer<DSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<DSA>,
                      ffi.Pointer<BN_CTX>,
                      ffi.Pointer<ffi.Pointer<BIGNUM>>,
                      ffi.Pointer<ffi.Pointer<BIGNUM>>)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<DSA_SIG>, ffi.Pointer<DSA>)>> DSA_meth_get_verify(
    ffi.Pointer<DSA_METHOD> dsam,
  ) {
    return _DSA_meth_get_verify(
      dsam,
    );
  }

  late final _DSA_meth_get_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
                          ffi.Pointer<DSA_SIG>, ffi.Pointer<DSA>)>>
              Function(ffi.Pointer<DSA_METHOD>)>>('DSA_meth_get_verify');
  late final _DSA_meth_get_verify = _DSA_meth_get_verifyPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
                      ffi.Pointer<DSA_SIG>, ffi.Pointer<DSA>)>>
          Function(ffi.Pointer<DSA_METHOD>)>();

  int DSA_meth_set_verify(
    ffi.Pointer<DSA_METHOD> dsam,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
                    ffi.Pointer<DSA_SIG>, ffi.Pointer<DSA>)>>
        verify,
  ) {
    return _DSA_meth_set_verify(
      dsam,
      verify,
    );
  }

  late final _DSA_meth_set_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DSA_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<DSA_SIG>,
                          ffi.Pointer<DSA>)>>)>>('DSA_meth_set_verify');
  late final _DSA_meth_set_verify = _DSA_meth_set_verifyPtr.asFunction<
      int Function(
          ffi.Pointer<DSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
                      ffi.Pointer<DSA_SIG>, ffi.Pointer<DSA>)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DSA>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>> DSA_meth_get_mod_exp(
    ffi.Pointer<DSA_METHOD> dsam,
  ) {
    return _DSA_meth_get_mod_exp(
      dsam,
    );
  }

  late final _DSA_meth_get_mod_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<DSA>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BN_CTX>,
                          ffi.Pointer<BN_MONT_CTX>)>>
              Function(ffi.Pointer<DSA_METHOD>)>>('DSA_meth_get_mod_exp');
  late final _DSA_meth_get_mod_exp = _DSA_meth_get_mod_expPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<DSA>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BN_CTX>,
                      ffi.Pointer<BN_MONT_CTX>)>>
          Function(ffi.Pointer<DSA_METHOD>)>();

  int DSA_meth_set_mod_exp(
    ffi.Pointer<DSA_METHOD> dsam,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<DSA>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BN_CTX>,
                    ffi.Pointer<BN_MONT_CTX>)>>
        mod_exp,
  ) {
    return _DSA_meth_set_mod_exp(
      dsam,
      mod_exp,
    );
  }

  late final _DSA_meth_set_mod_expPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<DSA_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<DSA>,
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BN_CTX>,
                              ffi.Pointer<BN_MONT_CTX>)>>)>>(
      'DSA_meth_set_mod_exp');
  late final _DSA_meth_set_mod_exp = _DSA_meth_set_mod_expPtr.asFunction<
      int Function(
          ffi.Pointer<DSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<DSA>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BN_CTX>,
                      ffi.Pointer<BN_MONT_CTX>)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DSA>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BIGNUM>,
              ffi.Pointer<BN_CTX>,
              ffi.Pointer<BN_MONT_CTX>)>> DSA_meth_get_bn_mod_exp(
    ffi.Pointer<DSA_METHOD> dsam,
  ) {
    return _DSA_meth_get_bn_mod_exp(
      dsam,
    );
  }

  late final _DSA_meth_get_bn_mod_expPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<DSA>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BIGNUM>,
                          ffi.Pointer<BN_CTX>,
                          ffi.Pointer<BN_MONT_CTX>)>>
              Function(ffi.Pointer<DSA_METHOD>)>>('DSA_meth_get_bn_mod_exp');
  late final _DSA_meth_get_bn_mod_exp = _DSA_meth_get_bn_mod_expPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<DSA>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BN_CTX>,
                      ffi.Pointer<BN_MONT_CTX>)>>
          Function(ffi.Pointer<DSA_METHOD>)>();

  int DSA_meth_set_bn_mod_exp(
    ffi.Pointer<DSA_METHOD> dsam,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<DSA>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BIGNUM>,
                    ffi.Pointer<BN_CTX>,
                    ffi.Pointer<BN_MONT_CTX>)>>
        bn_mod_exp,
  ) {
    return _DSA_meth_set_bn_mod_exp(
      dsam,
      bn_mod_exp,
    );
  }

  late final _DSA_meth_set_bn_mod_expPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<DSA_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(
                              ffi.Pointer<DSA>,
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BIGNUM>,
                              ffi.Pointer<BN_CTX>,
                              ffi.Pointer<BN_MONT_CTX>)>>)>>(
      'DSA_meth_set_bn_mod_exp');
  late final _DSA_meth_set_bn_mod_exp = _DSA_meth_set_bn_mod_expPtr.asFunction<
      int Function(
          ffi.Pointer<DSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<DSA>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BIGNUM>,
                      ffi.Pointer<BN_CTX>,
                      ffi.Pointer<BN_MONT_CTX>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>
      DSA_meth_get_init(
    ffi.Pointer<DSA_METHOD> dsam,
  ) {
    return _DSA_meth_get_init(
      dsam,
    );
  }

  late final _DSA_meth_get_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>
              Function(ffi.Pointer<DSA_METHOD>)>>('DSA_meth_get_init');
  late final _DSA_meth_get_init = _DSA_meth_get_initPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>
          Function(ffi.Pointer<DSA_METHOD>)>();

  int DSA_meth_set_init(
    ffi.Pointer<DSA_METHOD> dsam,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>> init,
  ) {
    return _DSA_meth_set_init(
      dsam,
      init,
    );
  }

  late final _DSA_meth_set_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DSA_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<DSA>)>>)>>('DSA_meth_set_init');
  late final _DSA_meth_set_init = _DSA_meth_set_initPtr.asFunction<
      int Function(
          ffi.Pointer<DSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>
      DSA_meth_get_finish(
    ffi.Pointer<DSA_METHOD> dsam,
  ) {
    return _DSA_meth_get_finish(
      dsam,
    );
  }

  late final _DSA_meth_get_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>
              Function(ffi.Pointer<DSA_METHOD>)>>('DSA_meth_get_finish');
  late final _DSA_meth_get_finish = _DSA_meth_get_finishPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>
          Function(ffi.Pointer<DSA_METHOD>)>();

  int DSA_meth_set_finish(
    ffi.Pointer<DSA_METHOD> dsam,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>> finish,
  ) {
    return _DSA_meth_set_finish(
      dsam,
      finish,
    );
  }

  late final _DSA_meth_set_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DSA_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<DSA>)>>)>>('DSA_meth_set_finish');
  late final _DSA_meth_set_finish = _DSA_meth_set_finishPtr.asFunction<
      int Function(
          ffi.Pointer<DSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DSA>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<BN_GENCB>)>> DSA_meth_get_paramgen(
    ffi.Pointer<DSA_METHOD> dsam,
  ) {
    return _DSA_meth_get_paramgen(
      dsam,
    );
  }

  late final _DSA_meth_get_paramgenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<DSA>,
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<ffi.Int>,
                          ffi.Pointer<ffi.UnsignedLong>,
                          ffi.Pointer<BN_GENCB>)>>
              Function(ffi.Pointer<DSA_METHOD>)>>('DSA_meth_get_paramgen');
  late final _DSA_meth_get_paramgen = _DSA_meth_get_paramgenPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<DSA>,
                      ffi.Int,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Int,
                      ffi.Pointer<ffi.Int>,
                      ffi.Pointer<ffi.UnsignedLong>,
                      ffi.Pointer<BN_GENCB>)>>
          Function(ffi.Pointer<DSA_METHOD>)>();

  int DSA_meth_set_paramgen(
    ffi.Pointer<DSA_METHOD> dsam,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<DSA>,
                    ffi.Int,
                    ffi.Pointer<ffi.UnsignedChar>,
                    ffi.Int,
                    ffi.Pointer<ffi.Int>,
                    ffi.Pointer<ffi.UnsignedLong>,
                    ffi.Pointer<BN_GENCB>)>>
        paramgen,
  ) {
    return _DSA_meth_set_paramgen(
      dsam,
      paramgen,
    );
  }

  late final _DSA_meth_set_paramgenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DSA_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<DSA>,
                          ffi.Int,
                          ffi.Pointer<ffi.UnsignedChar>,
                          ffi.Int,
                          ffi.Pointer<ffi.Int>,
                          ffi.Pointer<ffi.UnsignedLong>,
                          ffi.Pointer<BN_GENCB>)>>)>>('DSA_meth_set_paramgen');
  late final _DSA_meth_set_paramgen = _DSA_meth_set_paramgenPtr.asFunction<
      int Function(
          ffi.Pointer<DSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<DSA>,
                      ffi.Int,
                      ffi.Pointer<ffi.UnsignedChar>,
                      ffi.Int,
                      ffi.Pointer<ffi.Int>,
                      ffi.Pointer<ffi.UnsignedLong>,
                      ffi.Pointer<BN_GENCB>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>
      DSA_meth_get_keygen(
    ffi.Pointer<DSA_METHOD> dsam,
  ) {
    return _DSA_meth_get_keygen(
      dsam,
    );
  }

  late final _DSA_meth_get_keygenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>
              Function(ffi.Pointer<DSA_METHOD>)>>('DSA_meth_get_keygen');
  late final _DSA_meth_get_keygen = _DSA_meth_get_keygenPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>
          Function(ffi.Pointer<DSA_METHOD>)>();

  int DSA_meth_set_keygen(
    ffi.Pointer<DSA_METHOD> dsam,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>> keygen,
  ) {
    return _DSA_meth_set_keygen(
      dsam,
      keygen,
    );
  }

  late final _DSA_meth_set_keygenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<DSA_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<DSA>)>>)>>('DSA_meth_set_keygen');
  late final _DSA_meth_set_keygen = _DSA_meth_set_keygenPtr.asFunction<
      int Function(
          ffi.Pointer<DSA_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DSA>)>>)>();

  int SHA1_Init(
    ffi.Pointer<SHA_CTX> c,
  ) {
    return _SHA1_Init(
      c,
    );
  }

  late final _SHA1_InitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SHA_CTX>)>>(
          'SHA1_Init');
  late final _SHA1_Init =
      _SHA1_InitPtr.asFunction<int Function(ffi.Pointer<SHA_CTX>)>();

  int SHA1_Update(
    ffi.Pointer<SHA_CTX> c,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _SHA1_Update(
      c,
      data,
      len,
    );
  }

  late final _SHA1_UpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SHA_CTX>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('SHA1_Update');
  late final _SHA1_Update = _SHA1_UpdatePtr.asFunction<
      int Function(ffi.Pointer<SHA_CTX>, ffi.Pointer<ffi.Void>, int)>();

  int SHA1_Final(
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<SHA_CTX> c,
  ) {
    return _SHA1_Final(
      md,
      c,
    );
  }

  late final _SHA1_FinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<SHA_CTX>)>>('SHA1_Final');
  late final _SHA1_Final = _SHA1_FinalPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<SHA_CTX>)>();

  ffi.Pointer<ffi.UnsignedChar> SHA1(
    ffi.Pointer<ffi.UnsignedChar> d,
    int n,
    ffi.Pointer<ffi.UnsignedChar> md,
  ) {
    return _SHA1(
      d,
      n,
      md,
    );
  }

  late final _SHA1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int, ffi.Pointer<ffi.UnsignedChar>)>>('SHA1');
  late final _SHA1 = _SHA1Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.UnsignedChar>)>();

  void SHA1_Transform(
    ffi.Pointer<SHA_CTX> c,
    ffi.Pointer<ffi.UnsignedChar> data,
  ) {
    return _SHA1_Transform(
      c,
      data,
    );
  }

  late final _SHA1_TransformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<SHA_CTX>,
              ffi.Pointer<ffi.UnsignedChar>)>>('SHA1_Transform');
  late final _SHA1_Transform = _SHA1_TransformPtr.asFunction<
      void Function(ffi.Pointer<SHA_CTX>, ffi.Pointer<ffi.UnsignedChar>)>();

  int SHA224_Init(
    ffi.Pointer<SHA256_CTX> c,
  ) {
    return _SHA224_Init(
      c,
    );
  }

  late final _SHA224_InitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SHA256_CTX>)>>(
          'SHA224_Init');
  late final _SHA224_Init =
      _SHA224_InitPtr.asFunction<int Function(ffi.Pointer<SHA256_CTX>)>();

  int SHA224_Update(
    ffi.Pointer<SHA256_CTX> c,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _SHA224_Update(
      c,
      data,
      len,
    );
  }

  late final _SHA224_UpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SHA256_CTX>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('SHA224_Update');
  late final _SHA224_Update = _SHA224_UpdatePtr.asFunction<
      int Function(ffi.Pointer<SHA256_CTX>, ffi.Pointer<ffi.Void>, int)>();

  int SHA224_Final(
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<SHA256_CTX> c,
  ) {
    return _SHA224_Final(
      md,
      c,
    );
  }

  late final _SHA224_FinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<SHA256_CTX>)>>('SHA224_Final');
  late final _SHA224_Final = _SHA224_FinalPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<SHA256_CTX>)>();

  ffi.Pointer<ffi.UnsignedChar> SHA224(
    ffi.Pointer<ffi.UnsignedChar> d,
    int n,
    ffi.Pointer<ffi.UnsignedChar> md,
  ) {
    return _SHA224(
      d,
      n,
      md,
    );
  }

  late final _SHA224Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int, ffi.Pointer<ffi.UnsignedChar>)>>('SHA224');
  late final _SHA224 = _SHA224Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.UnsignedChar>)>();

  int SHA256_Init(
    ffi.Pointer<SHA256_CTX> c,
  ) {
    return _SHA256_Init(
      c,
    );
  }

  late final _SHA256_InitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SHA256_CTX>)>>(
          'SHA256_Init');
  late final _SHA256_Init =
      _SHA256_InitPtr.asFunction<int Function(ffi.Pointer<SHA256_CTX>)>();

  int SHA256_Update(
    ffi.Pointer<SHA256_CTX> c,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _SHA256_Update(
      c,
      data,
      len,
    );
  }

  late final _SHA256_UpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SHA256_CTX>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('SHA256_Update');
  late final _SHA256_Update = _SHA256_UpdatePtr.asFunction<
      int Function(ffi.Pointer<SHA256_CTX>, ffi.Pointer<ffi.Void>, int)>();

  int SHA256_Final(
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<SHA256_CTX> c,
  ) {
    return _SHA256_Final(
      md,
      c,
    );
  }

  late final _SHA256_FinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<SHA256_CTX>)>>('SHA256_Final');
  late final _SHA256_Final = _SHA256_FinalPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<SHA256_CTX>)>();

  ffi.Pointer<ffi.UnsignedChar> SHA256(
    ffi.Pointer<ffi.UnsignedChar> d,
    int n,
    ffi.Pointer<ffi.UnsignedChar> md,
  ) {
    return _SHA256(
      d,
      n,
      md,
    );
  }

  late final _SHA256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int, ffi.Pointer<ffi.UnsignedChar>)>>('SHA256');
  late final _SHA256 = _SHA256Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.UnsignedChar>)>();

  void SHA256_Transform(
    ffi.Pointer<SHA256_CTX> c,
    ffi.Pointer<ffi.UnsignedChar> data,
  ) {
    return _SHA256_Transform(
      c,
      data,
    );
  }

  late final _SHA256_TransformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<SHA256_CTX>,
              ffi.Pointer<ffi.UnsignedChar>)>>('SHA256_Transform');
  late final _SHA256_Transform = _SHA256_TransformPtr.asFunction<
      void Function(ffi.Pointer<SHA256_CTX>, ffi.Pointer<ffi.UnsignedChar>)>();

  int SHA384_Init(
    ffi.Pointer<SHA512_CTX> c,
  ) {
    return _SHA384_Init(
      c,
    );
  }

  late final _SHA384_InitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SHA512_CTX>)>>(
          'SHA384_Init');
  late final _SHA384_Init =
      _SHA384_InitPtr.asFunction<int Function(ffi.Pointer<SHA512_CTX>)>();

  int SHA384_Update(
    ffi.Pointer<SHA512_CTX> c,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _SHA384_Update(
      c,
      data,
      len,
    );
  }

  late final _SHA384_UpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SHA512_CTX>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('SHA384_Update');
  late final _SHA384_Update = _SHA384_UpdatePtr.asFunction<
      int Function(ffi.Pointer<SHA512_CTX>, ffi.Pointer<ffi.Void>, int)>();

  int SHA384_Final(
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<SHA512_CTX> c,
  ) {
    return _SHA384_Final(
      md,
      c,
    );
  }

  late final _SHA384_FinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<SHA512_CTX>)>>('SHA384_Final');
  late final _SHA384_Final = _SHA384_FinalPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<SHA512_CTX>)>();

  ffi.Pointer<ffi.UnsignedChar> SHA384(
    ffi.Pointer<ffi.UnsignedChar> d,
    int n,
    ffi.Pointer<ffi.UnsignedChar> md,
  ) {
    return _SHA384(
      d,
      n,
      md,
    );
  }

  late final _SHA384Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int, ffi.Pointer<ffi.UnsignedChar>)>>('SHA384');
  late final _SHA384 = _SHA384Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.UnsignedChar>)>();

  int SHA512_Init(
    ffi.Pointer<SHA512_CTX> c,
  ) {
    return _SHA512_Init(
      c,
    );
  }

  late final _SHA512_InitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SHA512_CTX>)>>(
          'SHA512_Init');
  late final _SHA512_Init =
      _SHA512_InitPtr.asFunction<int Function(ffi.Pointer<SHA512_CTX>)>();

  int SHA512_Update(
    ffi.Pointer<SHA512_CTX> c,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _SHA512_Update(
      c,
      data,
      len,
    );
  }

  late final _SHA512_UpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SHA512_CTX>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('SHA512_Update');
  late final _SHA512_Update = _SHA512_UpdatePtr.asFunction<
      int Function(ffi.Pointer<SHA512_CTX>, ffi.Pointer<ffi.Void>, int)>();

  int SHA512_Final(
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<SHA512_CTX> c,
  ) {
    return _SHA512_Final(
      md,
      c,
    );
  }

  late final _SHA512_FinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<SHA512_CTX>)>>('SHA512_Final');
  late final _SHA512_Final = _SHA512_FinalPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<SHA512_CTX>)>();

  ffi.Pointer<ffi.UnsignedChar> SHA512(
    ffi.Pointer<ffi.UnsignedChar> d,
    int n,
    ffi.Pointer<ffi.UnsignedChar> md,
  ) {
    return _SHA512(
      d,
      n,
      md,
    );
  }

  late final _SHA512Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int, ffi.Pointer<ffi.UnsignedChar>)>>('SHA512');
  late final _SHA512 = _SHA512Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.UnsignedChar>)>();

  void SHA512_Transform(
    ffi.Pointer<SHA512_CTX> c,
    ffi.Pointer<ffi.UnsignedChar> data,
  ) {
    return _SHA512_Transform(
      c,
      data,
    );
  }

  late final _SHA512_TransformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<SHA512_CTX>,
              ffi.Pointer<ffi.UnsignedChar>)>>('SHA512_Transform');
  late final _SHA512_Transform = _SHA512_TransformPtr.asFunction<
      void Function(ffi.Pointer<SHA512_CTX>, ffi.Pointer<ffi.UnsignedChar>)>();

  int ERR_load_X509_strings() {
    return _ERR_load_X509_strings();
  }

  late final _ERR_load_X509_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_X509_strings');
  late final _ERR_load_X509_strings =
      _ERR_load_X509_stringsPtr.asFunction<int Function()>();

  int X509_STORE_set_depth(
    ffi.Pointer<X509_STORE> store,
    int depth,
  ) {
    return _X509_STORE_set_depth(
      store,
      depth,
    );
  }

  late final _X509_STORE_set_depthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_STORE>, ffi.Int)>>('X509_STORE_set_depth');
  late final _X509_STORE_set_depth = _X509_STORE_set_depthPtr.asFunction<
      int Function(ffi.Pointer<X509_STORE>, int)>();

  void X509_STORE_CTX_set_depth(
    ffi.Pointer<X509_STORE_CTX> ctx,
    int depth,
  ) {
    return _X509_STORE_CTX_set_depth(
      ctx,
      depth,
    );
  }

  late final _X509_STORE_CTX_set_depthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE_CTX>,
              ffi.Int)>>('X509_STORE_CTX_set_depth');
  late final _X509_STORE_CTX_set_depth = _X509_STORE_CTX_set_depthPtr
      .asFunction<void Function(ffi.Pointer<X509_STORE_CTX>, int)>();

  int X509_OBJECT_idx_by_subject(
    ffi.Pointer<stack_st_X509_OBJECT> h,
    int type,
    ffi.Pointer<X509_NAME> name,
  ) {
    return _X509_OBJECT_idx_by_subject(
      h,
      type,
      name,
    );
  }

  late final _X509_OBJECT_idx_by_subjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<stack_st_X509_OBJECT>, ffi.Int32,
              ffi.Pointer<X509_NAME>)>>('X509_OBJECT_idx_by_subject');
  late final _X509_OBJECT_idx_by_subject =
      _X509_OBJECT_idx_by_subjectPtr.asFunction<
          int Function(ffi.Pointer<stack_st_X509_OBJECT>, int,
              ffi.Pointer<X509_NAME>)>();

  ffi.Pointer<X509_OBJECT> X509_OBJECT_retrieve_by_subject(
    ffi.Pointer<stack_st_X509_OBJECT> h,
    int type,
    ffi.Pointer<X509_NAME> name,
  ) {
    return _X509_OBJECT_retrieve_by_subject(
      h,
      type,
      name,
    );
  }

  late final _X509_OBJECT_retrieve_by_subjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_OBJECT> Function(
              ffi.Pointer<stack_st_X509_OBJECT>,
              ffi.Int32,
              ffi.Pointer<X509_NAME>)>>('X509_OBJECT_retrieve_by_subject');
  late final _X509_OBJECT_retrieve_by_subject =
      _X509_OBJECT_retrieve_by_subjectPtr.asFunction<
          ffi.Pointer<X509_OBJECT> Function(ffi.Pointer<stack_st_X509_OBJECT>,
              int, ffi.Pointer<X509_NAME>)>();

  ffi.Pointer<X509_OBJECT> X509_OBJECT_retrieve_match(
    ffi.Pointer<stack_st_X509_OBJECT> h,
    ffi.Pointer<X509_OBJECT> x,
  ) {
    return _X509_OBJECT_retrieve_match(
      h,
      x,
    );
  }

  late final _X509_OBJECT_retrieve_matchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_OBJECT> Function(ffi.Pointer<stack_st_X509_OBJECT>,
              ffi.Pointer<X509_OBJECT>)>>('X509_OBJECT_retrieve_match');
  late final _X509_OBJECT_retrieve_match =
      _X509_OBJECT_retrieve_matchPtr.asFunction<
          ffi.Pointer<X509_OBJECT> Function(
              ffi.Pointer<stack_st_X509_OBJECT>, ffi.Pointer<X509_OBJECT>)>();

  int X509_OBJECT_up_ref_count(
    ffi.Pointer<X509_OBJECT> a,
  ) {
    return _X509_OBJECT_up_ref_count(
      a,
    );
  }

  late final _X509_OBJECT_up_ref_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_OBJECT>)>>(
          'X509_OBJECT_up_ref_count');
  late final _X509_OBJECT_up_ref_count = _X509_OBJECT_up_ref_countPtr
      .asFunction<int Function(ffi.Pointer<X509_OBJECT>)>();

  ffi.Pointer<X509_OBJECT> X509_OBJECT_new() {
    return _X509_OBJECT_new();
  }

  late final _X509_OBJECT_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_OBJECT> Function()>>(
          'X509_OBJECT_new');
  late final _X509_OBJECT_new =
      _X509_OBJECT_newPtr.asFunction<ffi.Pointer<X509_OBJECT> Function()>();

  void X509_OBJECT_free(
    ffi.Pointer<X509_OBJECT> a,
  ) {
    return _X509_OBJECT_free(
      a,
    );
  }

  late final _X509_OBJECT_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_OBJECT>)>>(
          'X509_OBJECT_free');
  late final _X509_OBJECT_free = _X509_OBJECT_freePtr.asFunction<
      void Function(ffi.Pointer<X509_OBJECT>)>();

  int X509_OBJECT_get_type(
    ffi.Pointer<X509_OBJECT> a,
  ) {
    return _X509_OBJECT_get_type(
      a,
    );
  }

  late final _X509_OBJECT_get_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<X509_OBJECT>)>>(
          'X509_OBJECT_get_type');
  late final _X509_OBJECT_get_type = _X509_OBJECT_get_typePtr.asFunction<
      int Function(ffi.Pointer<X509_OBJECT>)>();

  ffi.Pointer<X509> X509_OBJECT_get0_X509(
    ffi.Pointer<X509_OBJECT> a,
  ) {
    return _X509_OBJECT_get0_X509(
      a,
    );
  }

  late final _X509_OBJECT_get0_X509Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509> Function(
              ffi.Pointer<X509_OBJECT>)>>('X509_OBJECT_get0_X509');
  late final _X509_OBJECT_get0_X509 = _X509_OBJECT_get0_X509Ptr.asFunction<
      ffi.Pointer<X509> Function(ffi.Pointer<X509_OBJECT>)>();

  int X509_OBJECT_set1_X509(
    ffi.Pointer<X509_OBJECT> a,
    ffi.Pointer<X509> obj,
  ) {
    return _X509_OBJECT_set1_X509(
      a,
      obj,
    );
  }

  late final _X509_OBJECT_set1_X509Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_OBJECT>,
              ffi.Pointer<X509>)>>('X509_OBJECT_set1_X509');
  late final _X509_OBJECT_set1_X509 = _X509_OBJECT_set1_X509Ptr.asFunction<
      int Function(ffi.Pointer<X509_OBJECT>, ffi.Pointer<X509>)>();

  ffi.Pointer<X509_CRL> X509_OBJECT_get0_X509_CRL(
    ffi.Pointer<X509_OBJECT> a,
  ) {
    return _X509_OBJECT_get0_X509_CRL(
      a,
    );
  }

  late final _X509_OBJECT_get0_X509_CRLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_CRL> Function(
              ffi.Pointer<X509_OBJECT>)>>('X509_OBJECT_get0_X509_CRL');
  late final _X509_OBJECT_get0_X509_CRL = _X509_OBJECT_get0_X509_CRLPtr
      .asFunction<ffi.Pointer<X509_CRL> Function(ffi.Pointer<X509_OBJECT>)>();

  int X509_OBJECT_set1_X509_CRL(
    ffi.Pointer<X509_OBJECT> a,
    ffi.Pointer<X509_CRL> obj,
  ) {
    return _X509_OBJECT_set1_X509_CRL(
      a,
      obj,
    );
  }

  late final _X509_OBJECT_set1_X509_CRLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_OBJECT>,
              ffi.Pointer<X509_CRL>)>>('X509_OBJECT_set1_X509_CRL');
  late final _X509_OBJECT_set1_X509_CRL =
      _X509_OBJECT_set1_X509_CRLPtr.asFunction<
          int Function(ffi.Pointer<X509_OBJECT>, ffi.Pointer<X509_CRL>)>();

  ffi.Pointer<X509_STORE> X509_STORE_new() {
    return _X509_STORE_new();
  }

  late final _X509_STORE_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_STORE> Function()>>(
          'X509_STORE_new');
  late final _X509_STORE_new =
      _X509_STORE_newPtr.asFunction<ffi.Pointer<X509_STORE> Function()>();

  void X509_STORE_free(
    ffi.Pointer<X509_STORE> v,
  ) {
    return _X509_STORE_free(
      v,
    );
  }

  late final _X509_STORE_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_STORE>)>>(
          'X509_STORE_free');
  late final _X509_STORE_free =
      _X509_STORE_freePtr.asFunction<void Function(ffi.Pointer<X509_STORE>)>();

  int X509_STORE_lock(
    ffi.Pointer<X509_STORE> ctx,
  ) {
    return _X509_STORE_lock(
      ctx,
    );
  }

  late final _X509_STORE_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_STORE>)>>(
          'X509_STORE_lock');
  late final _X509_STORE_lock =
      _X509_STORE_lockPtr.asFunction<int Function(ffi.Pointer<X509_STORE>)>();

  int X509_STORE_unlock(
    ffi.Pointer<X509_STORE> ctx,
  ) {
    return _X509_STORE_unlock(
      ctx,
    );
  }

  late final _X509_STORE_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_STORE>)>>(
          'X509_STORE_unlock');
  late final _X509_STORE_unlock =
      _X509_STORE_unlockPtr.asFunction<int Function(ffi.Pointer<X509_STORE>)>();

  int X509_STORE_up_ref(
    ffi.Pointer<X509_STORE> v,
  ) {
    return _X509_STORE_up_ref(
      v,
    );
  }

  late final _X509_STORE_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_STORE>)>>(
          'X509_STORE_up_ref');
  late final _X509_STORE_up_ref =
      _X509_STORE_up_refPtr.asFunction<int Function(ffi.Pointer<X509_STORE>)>();

  ffi.Pointer<stack_st_X509_OBJECT> X509_STORE_get0_objects(
    ffi.Pointer<X509_STORE> v,
  ) {
    return _X509_STORE_get0_objects(
      v,
    );
  }

  late final _X509_STORE_get0_objectsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509_OBJECT> Function(
              ffi.Pointer<X509_STORE>)>>('X509_STORE_get0_objects');
  late final _X509_STORE_get0_objects = _X509_STORE_get0_objectsPtr.asFunction<
      ffi.Pointer<stack_st_X509_OBJECT> Function(ffi.Pointer<X509_STORE>)>();

  ffi.Pointer<stack_st_X509> X509_STORE_CTX_get1_certs(
    ffi.Pointer<X509_STORE_CTX> st,
    ffi.Pointer<X509_NAME> nm,
  ) {
    return _X509_STORE_CTX_get1_certs(
      st,
      nm,
    );
  }

  late final _X509_STORE_CTX_get1_certsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509> Function(ffi.Pointer<X509_STORE_CTX>,
              ffi.Pointer<X509_NAME>)>>('X509_STORE_CTX_get1_certs');
  late final _X509_STORE_CTX_get1_certs =
      _X509_STORE_CTX_get1_certsPtr.asFunction<
          ffi.Pointer<stack_st_X509> Function(
              ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<X509_NAME>)>();

  ffi.Pointer<stack_st_X509_CRL> X509_STORE_CTX_get1_crls(
    ffi.Pointer<X509_STORE_CTX> st,
    ffi.Pointer<X509_NAME> nm,
  ) {
    return _X509_STORE_CTX_get1_crls(
      st,
      nm,
    );
  }

  late final _X509_STORE_CTX_get1_crlsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509_CRL> Function(ffi.Pointer<X509_STORE_CTX>,
              ffi.Pointer<X509_NAME>)>>('X509_STORE_CTX_get1_crls');
  late final _X509_STORE_CTX_get1_crls =
      _X509_STORE_CTX_get1_crlsPtr.asFunction<
          ffi.Pointer<stack_st_X509_CRL> Function(
              ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<X509_NAME>)>();

  int X509_STORE_set_flags(
    ffi.Pointer<X509_STORE> ctx,
    int flags,
  ) {
    return _X509_STORE_set_flags(
      ctx,
      flags,
    );
  }

  late final _X509_STORE_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_STORE>,
              ffi.UnsignedLong)>>('X509_STORE_set_flags');
  late final _X509_STORE_set_flags = _X509_STORE_set_flagsPtr.asFunction<
      int Function(ffi.Pointer<X509_STORE>, int)>();

  int X509_STORE_set_purpose(
    ffi.Pointer<X509_STORE> ctx,
    int purpose,
  ) {
    return _X509_STORE_set_purpose(
      ctx,
      purpose,
    );
  }

  late final _X509_STORE_set_purposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_STORE>, ffi.Int)>>('X509_STORE_set_purpose');
  late final _X509_STORE_set_purpose = _X509_STORE_set_purposePtr.asFunction<
      int Function(ffi.Pointer<X509_STORE>, int)>();

  int X509_STORE_set_trust(
    ffi.Pointer<X509_STORE> ctx,
    int trust,
  ) {
    return _X509_STORE_set_trust(
      ctx,
      trust,
    );
  }

  late final _X509_STORE_set_trustPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_STORE>, ffi.Int)>>('X509_STORE_set_trust');
  late final _X509_STORE_set_trust = _X509_STORE_set_trustPtr.asFunction<
      int Function(ffi.Pointer<X509_STORE>, int)>();

  int X509_STORE_set1_param(
    ffi.Pointer<X509_STORE> ctx,
    ffi.Pointer<X509_VERIFY_PARAM> pm,
  ) {
    return _X509_STORE_set1_param(
      ctx,
      pm,
    );
  }

  late final _X509_STORE_set1_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_STORE>,
              ffi.Pointer<X509_VERIFY_PARAM>)>>('X509_STORE_set1_param');
  late final _X509_STORE_set1_param = _X509_STORE_set1_paramPtr.asFunction<
      int Function(ffi.Pointer<X509_STORE>, ffi.Pointer<X509_VERIFY_PARAM>)>();

  ffi.Pointer<X509_VERIFY_PARAM> X509_STORE_get0_param(
    ffi.Pointer<X509_STORE> ctx,
  ) {
    return _X509_STORE_get0_param(
      ctx,
    );
  }

  late final _X509_STORE_get0_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_VERIFY_PARAM> Function(
              ffi.Pointer<X509_STORE>)>>('X509_STORE_get0_param');
  late final _X509_STORE_get0_param = _X509_STORE_get0_paramPtr.asFunction<
      ffi.Pointer<X509_VERIFY_PARAM> Function(ffi.Pointer<X509_STORE>)>();

  void X509_STORE_set_verify(
    ffi.Pointer<X509_STORE> ctx,
    X509_STORE_CTX_verify_fn verify,
  ) {
    return _X509_STORE_set_verify(
      ctx,
      verify,
    );
  }

  late final _X509_STORE_set_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE>,
              X509_STORE_CTX_verify_fn)>>('X509_STORE_set_verify');
  late final _X509_STORE_set_verify = _X509_STORE_set_verifyPtr.asFunction<
      void Function(ffi.Pointer<X509_STORE>, X509_STORE_CTX_verify_fn)>();

  void X509_STORE_CTX_set_verify(
    ffi.Pointer<X509_STORE_CTX> ctx,
    X509_STORE_CTX_verify_fn verify,
  ) {
    return _X509_STORE_CTX_set_verify(
      ctx,
      verify,
    );
  }

  late final _X509_STORE_CTX_set_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE_CTX>,
              X509_STORE_CTX_verify_fn)>>('X509_STORE_CTX_set_verify');
  late final _X509_STORE_CTX_set_verify =
      _X509_STORE_CTX_set_verifyPtr.asFunction<
          void Function(
              ffi.Pointer<X509_STORE_CTX>, X509_STORE_CTX_verify_fn)>();

  X509_STORE_CTX_verify_fn X509_STORE_get_verify(
    ffi.Pointer<X509_STORE> ctx,
  ) {
    return _X509_STORE_get_verify(
      ctx,
    );
  }

  late final _X509_STORE_get_verifyPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_verify_fn Function(
              ffi.Pointer<X509_STORE>)>>('X509_STORE_get_verify');
  late final _X509_STORE_get_verify = _X509_STORE_get_verifyPtr.asFunction<
      X509_STORE_CTX_verify_fn Function(ffi.Pointer<X509_STORE>)>();

  void X509_STORE_set_verify_cb(
    ffi.Pointer<X509_STORE> ctx,
    X509_STORE_CTX_verify_cb verify_cb,
  ) {
    return _X509_STORE_set_verify_cb(
      ctx,
      verify_cb,
    );
  }

  late final _X509_STORE_set_verify_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE>,
              X509_STORE_CTX_verify_cb)>>('X509_STORE_set_verify_cb');
  late final _X509_STORE_set_verify_cb =
      _X509_STORE_set_verify_cbPtr.asFunction<
          void Function(ffi.Pointer<X509_STORE>, X509_STORE_CTX_verify_cb)>();

  X509_STORE_CTX_verify_cb X509_STORE_get_verify_cb(
    ffi.Pointer<X509_STORE> ctx,
  ) {
    return _X509_STORE_get_verify_cb(
      ctx,
    );
  }

  late final _X509_STORE_get_verify_cbPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_verify_cb Function(
              ffi.Pointer<X509_STORE>)>>('X509_STORE_get_verify_cb');
  late final _X509_STORE_get_verify_cb = _X509_STORE_get_verify_cbPtr
      .asFunction<X509_STORE_CTX_verify_cb Function(ffi.Pointer<X509_STORE>)>();

  void X509_STORE_set_get_issuer(
    ffi.Pointer<X509_STORE> ctx,
    X509_STORE_CTX_get_issuer_fn get_issuer,
  ) {
    return _X509_STORE_set_get_issuer(
      ctx,
      get_issuer,
    );
  }

  late final _X509_STORE_set_get_issuerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE>,
              X509_STORE_CTX_get_issuer_fn)>>('X509_STORE_set_get_issuer');
  late final _X509_STORE_set_get_issuer =
      _X509_STORE_set_get_issuerPtr.asFunction<
          void Function(
              ffi.Pointer<X509_STORE>, X509_STORE_CTX_get_issuer_fn)>();

  X509_STORE_CTX_get_issuer_fn X509_STORE_get_get_issuer(
    ffi.Pointer<X509_STORE> ctx,
  ) {
    return _X509_STORE_get_get_issuer(
      ctx,
    );
  }

  late final _X509_STORE_get_get_issuerPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_get_issuer_fn Function(
              ffi.Pointer<X509_STORE>)>>('X509_STORE_get_get_issuer');
  late final _X509_STORE_get_get_issuer =
      _X509_STORE_get_get_issuerPtr.asFunction<
          X509_STORE_CTX_get_issuer_fn Function(ffi.Pointer<X509_STORE>)>();

  void X509_STORE_set_check_issued(
    ffi.Pointer<X509_STORE> ctx,
    X509_STORE_CTX_check_issued_fn check_issued,
  ) {
    return _X509_STORE_set_check_issued(
      ctx,
      check_issued,
    );
  }

  late final _X509_STORE_set_check_issuedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE>,
              X509_STORE_CTX_check_issued_fn)>>('X509_STORE_set_check_issued');
  late final _X509_STORE_set_check_issued =
      _X509_STORE_set_check_issuedPtr.asFunction<
          void Function(
              ffi.Pointer<X509_STORE>, X509_STORE_CTX_check_issued_fn)>();

  X509_STORE_CTX_check_issued_fn X509_STORE_get_check_issued(
    ffi.Pointer<X509_STORE> ctx,
  ) {
    return _X509_STORE_get_check_issued(
      ctx,
    );
  }

  late final _X509_STORE_get_check_issuedPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_check_issued_fn Function(
              ffi.Pointer<X509_STORE>)>>('X509_STORE_get_check_issued');
  late final _X509_STORE_get_check_issued =
      _X509_STORE_get_check_issuedPtr.asFunction<
          X509_STORE_CTX_check_issued_fn Function(ffi.Pointer<X509_STORE>)>();

  void X509_STORE_set_check_revocation(
    ffi.Pointer<X509_STORE> ctx,
    X509_STORE_CTX_check_revocation_fn check_revocation,
  ) {
    return _X509_STORE_set_check_revocation(
      ctx,
      check_revocation,
    );
  }

  late final _X509_STORE_set_check_revocationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<X509_STORE>,
                  X509_STORE_CTX_check_revocation_fn)>>(
      'X509_STORE_set_check_revocation');
  late final _X509_STORE_set_check_revocation =
      _X509_STORE_set_check_revocationPtr.asFunction<
          void Function(
              ffi.Pointer<X509_STORE>, X509_STORE_CTX_check_revocation_fn)>();

  X509_STORE_CTX_check_revocation_fn X509_STORE_get_check_revocation(
    ffi.Pointer<X509_STORE> ctx,
  ) {
    return _X509_STORE_get_check_revocation(
      ctx,
    );
  }

  late final _X509_STORE_get_check_revocationPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_check_revocation_fn Function(
              ffi.Pointer<X509_STORE>)>>('X509_STORE_get_check_revocation');
  late final _X509_STORE_get_check_revocation =
      _X509_STORE_get_check_revocationPtr.asFunction<
          X509_STORE_CTX_check_revocation_fn Function(
              ffi.Pointer<X509_STORE>)>();

  void X509_STORE_set_get_crl(
    ffi.Pointer<X509_STORE> ctx,
    X509_STORE_CTX_get_crl_fn get_crl,
  ) {
    return _X509_STORE_set_get_crl(
      ctx,
      get_crl,
    );
  }

  late final _X509_STORE_set_get_crlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE>,
              X509_STORE_CTX_get_crl_fn)>>('X509_STORE_set_get_crl');
  late final _X509_STORE_set_get_crl = _X509_STORE_set_get_crlPtr.asFunction<
      void Function(ffi.Pointer<X509_STORE>, X509_STORE_CTX_get_crl_fn)>();

  X509_STORE_CTX_get_crl_fn X509_STORE_get_get_crl(
    ffi.Pointer<X509_STORE> ctx,
  ) {
    return _X509_STORE_get_get_crl(
      ctx,
    );
  }

  late final _X509_STORE_get_get_crlPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_get_crl_fn Function(
              ffi.Pointer<X509_STORE>)>>('X509_STORE_get_get_crl');
  late final _X509_STORE_get_get_crl = _X509_STORE_get_get_crlPtr.asFunction<
      X509_STORE_CTX_get_crl_fn Function(ffi.Pointer<X509_STORE>)>();

  void X509_STORE_set_check_crl(
    ffi.Pointer<X509_STORE> ctx,
    X509_STORE_CTX_check_crl_fn check_crl,
  ) {
    return _X509_STORE_set_check_crl(
      ctx,
      check_crl,
    );
  }

  late final _X509_STORE_set_check_crlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE>,
              X509_STORE_CTX_check_crl_fn)>>('X509_STORE_set_check_crl');
  late final _X509_STORE_set_check_crl =
      _X509_STORE_set_check_crlPtr.asFunction<
          void Function(
              ffi.Pointer<X509_STORE>, X509_STORE_CTX_check_crl_fn)>();

  X509_STORE_CTX_check_crl_fn X509_STORE_get_check_crl(
    ffi.Pointer<X509_STORE> ctx,
  ) {
    return _X509_STORE_get_check_crl(
      ctx,
    );
  }

  late final _X509_STORE_get_check_crlPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_check_crl_fn Function(
              ffi.Pointer<X509_STORE>)>>('X509_STORE_get_check_crl');
  late final _X509_STORE_get_check_crl =
      _X509_STORE_get_check_crlPtr.asFunction<
          X509_STORE_CTX_check_crl_fn Function(ffi.Pointer<X509_STORE>)>();

  void X509_STORE_set_cert_crl(
    ffi.Pointer<X509_STORE> ctx,
    X509_STORE_CTX_cert_crl_fn cert_crl,
  ) {
    return _X509_STORE_set_cert_crl(
      ctx,
      cert_crl,
    );
  }

  late final _X509_STORE_set_cert_crlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE>,
              X509_STORE_CTX_cert_crl_fn)>>('X509_STORE_set_cert_crl');
  late final _X509_STORE_set_cert_crl = _X509_STORE_set_cert_crlPtr.asFunction<
      void Function(ffi.Pointer<X509_STORE>, X509_STORE_CTX_cert_crl_fn)>();

  X509_STORE_CTX_cert_crl_fn X509_STORE_get_cert_crl(
    ffi.Pointer<X509_STORE> ctx,
  ) {
    return _X509_STORE_get_cert_crl(
      ctx,
    );
  }

  late final _X509_STORE_get_cert_crlPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_cert_crl_fn Function(
              ffi.Pointer<X509_STORE>)>>('X509_STORE_get_cert_crl');
  late final _X509_STORE_get_cert_crl = _X509_STORE_get_cert_crlPtr.asFunction<
      X509_STORE_CTX_cert_crl_fn Function(ffi.Pointer<X509_STORE>)>();

  void X509_STORE_set_check_policy(
    ffi.Pointer<X509_STORE> ctx,
    X509_STORE_CTX_check_policy_fn check_policy,
  ) {
    return _X509_STORE_set_check_policy(
      ctx,
      check_policy,
    );
  }

  late final _X509_STORE_set_check_policyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE>,
              X509_STORE_CTX_check_policy_fn)>>('X509_STORE_set_check_policy');
  late final _X509_STORE_set_check_policy =
      _X509_STORE_set_check_policyPtr.asFunction<
          void Function(
              ffi.Pointer<X509_STORE>, X509_STORE_CTX_check_policy_fn)>();

  X509_STORE_CTX_check_policy_fn X509_STORE_get_check_policy(
    ffi.Pointer<X509_STORE> ctx,
  ) {
    return _X509_STORE_get_check_policy(
      ctx,
    );
  }

  late final _X509_STORE_get_check_policyPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_check_policy_fn Function(
              ffi.Pointer<X509_STORE>)>>('X509_STORE_get_check_policy');
  late final _X509_STORE_get_check_policy =
      _X509_STORE_get_check_policyPtr.asFunction<
          X509_STORE_CTX_check_policy_fn Function(ffi.Pointer<X509_STORE>)>();

  void X509_STORE_set_lookup_certs(
    ffi.Pointer<X509_STORE> ctx,
    X509_STORE_CTX_lookup_certs_fn lookup_certs,
  ) {
    return _X509_STORE_set_lookup_certs(
      ctx,
      lookup_certs,
    );
  }

  late final _X509_STORE_set_lookup_certsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE>,
              X509_STORE_CTX_lookup_certs_fn)>>('X509_STORE_set_lookup_certs');
  late final _X509_STORE_set_lookup_certs =
      _X509_STORE_set_lookup_certsPtr.asFunction<
          void Function(
              ffi.Pointer<X509_STORE>, X509_STORE_CTX_lookup_certs_fn)>();

  X509_STORE_CTX_lookup_certs_fn X509_STORE_get_lookup_certs(
    ffi.Pointer<X509_STORE> ctx,
  ) {
    return _X509_STORE_get_lookup_certs(
      ctx,
    );
  }

  late final _X509_STORE_get_lookup_certsPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_lookup_certs_fn Function(
              ffi.Pointer<X509_STORE>)>>('X509_STORE_get_lookup_certs');
  late final _X509_STORE_get_lookup_certs =
      _X509_STORE_get_lookup_certsPtr.asFunction<
          X509_STORE_CTX_lookup_certs_fn Function(ffi.Pointer<X509_STORE>)>();

  void X509_STORE_set_lookup_crls(
    ffi.Pointer<X509_STORE> ctx,
    X509_STORE_CTX_lookup_crls_fn lookup_crls,
  ) {
    return _X509_STORE_set_lookup_crls(
      ctx,
      lookup_crls,
    );
  }

  late final _X509_STORE_set_lookup_crlsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE>,
              X509_STORE_CTX_lookup_crls_fn)>>('X509_STORE_set_lookup_crls');
  late final _X509_STORE_set_lookup_crls =
      _X509_STORE_set_lookup_crlsPtr.asFunction<
          void Function(
              ffi.Pointer<X509_STORE>, X509_STORE_CTX_lookup_crls_fn)>();

  X509_STORE_CTX_lookup_crls_fn X509_STORE_get_lookup_crls(
    ffi.Pointer<X509_STORE> ctx,
  ) {
    return _X509_STORE_get_lookup_crls(
      ctx,
    );
  }

  late final _X509_STORE_get_lookup_crlsPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_lookup_crls_fn Function(
              ffi.Pointer<X509_STORE>)>>('X509_STORE_get_lookup_crls');
  late final _X509_STORE_get_lookup_crls =
      _X509_STORE_get_lookup_crlsPtr.asFunction<
          X509_STORE_CTX_lookup_crls_fn Function(ffi.Pointer<X509_STORE>)>();

  void X509_STORE_set_cleanup(
    ffi.Pointer<X509_STORE> ctx,
    X509_STORE_CTX_cleanup_fn cleanup,
  ) {
    return _X509_STORE_set_cleanup(
      ctx,
      cleanup,
    );
  }

  late final _X509_STORE_set_cleanupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE>,
              X509_STORE_CTX_cleanup_fn)>>('X509_STORE_set_cleanup');
  late final _X509_STORE_set_cleanup = _X509_STORE_set_cleanupPtr.asFunction<
      void Function(ffi.Pointer<X509_STORE>, X509_STORE_CTX_cleanup_fn)>();

  X509_STORE_CTX_cleanup_fn X509_STORE_get_cleanup(
    ffi.Pointer<X509_STORE> ctx,
  ) {
    return _X509_STORE_get_cleanup(
      ctx,
    );
  }

  late final _X509_STORE_get_cleanupPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_cleanup_fn Function(
              ffi.Pointer<X509_STORE>)>>('X509_STORE_get_cleanup');
  late final _X509_STORE_get_cleanup = _X509_STORE_get_cleanupPtr.asFunction<
      X509_STORE_CTX_cleanup_fn Function(ffi.Pointer<X509_STORE>)>();

  int X509_STORE_set_ex_data(
    ffi.Pointer<X509_STORE> ctx,
    int idx,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _X509_STORE_set_ex_data(
      ctx,
      idx,
      data,
    );
  }

  late final _X509_STORE_set_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_STORE>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('X509_STORE_set_ex_data');
  late final _X509_STORE_set_ex_data = _X509_STORE_set_ex_dataPtr.asFunction<
      int Function(ffi.Pointer<X509_STORE>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> X509_STORE_get_ex_data(
    ffi.Pointer<X509_STORE> ctx,
    int idx,
  ) {
    return _X509_STORE_get_ex_data(
      ctx,
      idx,
    );
  }

  late final _X509_STORE_get_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<X509_STORE>, ffi.Int)>>('X509_STORE_get_ex_data');
  late final _X509_STORE_get_ex_data = _X509_STORE_get_ex_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<X509_STORE>, int)>();

  ffi.Pointer<X509_STORE_CTX> X509_STORE_CTX_new() {
    return _X509_STORE_CTX_new();
  }

  late final _X509_STORE_CTX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_STORE_CTX> Function()>>(
          'X509_STORE_CTX_new');
  late final _X509_STORE_CTX_new = _X509_STORE_CTX_newPtr.asFunction<
      ffi.Pointer<X509_STORE_CTX> Function()>();

  int X509_STORE_CTX_get1_issuer(
    ffi.Pointer<ffi.Pointer<X509>> issuer,
    ffi.Pointer<X509_STORE_CTX> ctx,
    ffi.Pointer<X509> x,
  ) {
    return _X509_STORE_CTX_get1_issuer(
      issuer,
      ctx,
      x,
    );
  }

  late final _X509_STORE_CTX_get1_issuerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<X509>>,
              ffi.Pointer<X509_STORE_CTX>,
              ffi.Pointer<X509>)>>('X509_STORE_CTX_get1_issuer');
  late final _X509_STORE_CTX_get1_issuer =
      _X509_STORE_CTX_get1_issuerPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<X509>>,
              ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<X509>)>();

  void X509_STORE_CTX_free(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_free(
      ctx,
    );
  }

  late final _X509_STORE_CTX_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_STORE_CTX>)>>(
      'X509_STORE_CTX_free');
  late final _X509_STORE_CTX_free = _X509_STORE_CTX_freePtr.asFunction<
      void Function(ffi.Pointer<X509_STORE_CTX>)>();

  int X509_STORE_CTX_init(
    ffi.Pointer<X509_STORE_CTX> ctx,
    ffi.Pointer<X509_STORE> store,
    ffi.Pointer<X509> x509,
    ffi.Pointer<stack_st_X509> chain,
  ) {
    return _X509_STORE_CTX_init(
      ctx,
      store,
      x509,
      chain,
    );
  }

  late final _X509_STORE_CTX_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_STORE_CTX>,
              ffi.Pointer<X509_STORE>,
              ffi.Pointer<X509>,
              ffi.Pointer<stack_st_X509>)>>('X509_STORE_CTX_init');
  late final _X509_STORE_CTX_init = _X509_STORE_CTX_initPtr.asFunction<
      int Function(ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<X509_STORE>,
          ffi.Pointer<X509>, ffi.Pointer<stack_st_X509>)>();

  void X509_STORE_CTX_set0_trusted_stack(
    ffi.Pointer<X509_STORE_CTX> ctx,
    ffi.Pointer<stack_st_X509> sk,
  ) {
    return _X509_STORE_CTX_set0_trusted_stack(
      ctx,
      sk,
    );
  }

  late final _X509_STORE_CTX_set0_trusted_stackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<stack_st_X509>)>>(
      'X509_STORE_CTX_set0_trusted_stack');
  late final _X509_STORE_CTX_set0_trusted_stack =
      _X509_STORE_CTX_set0_trusted_stackPtr.asFunction<
          void Function(
              ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<stack_st_X509>)>();

  void X509_STORE_CTX_cleanup(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_cleanup(
      ctx,
    );
  }

  late final _X509_STORE_CTX_cleanupPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_STORE_CTX>)>>(
      'X509_STORE_CTX_cleanup');
  late final _X509_STORE_CTX_cleanup = _X509_STORE_CTX_cleanupPtr.asFunction<
      void Function(ffi.Pointer<X509_STORE_CTX>)>();

  ffi.Pointer<X509_STORE> X509_STORE_CTX_get0_store(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get0_store(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get0_storePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_STORE> Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get0_store');
  late final _X509_STORE_CTX_get0_store =
      _X509_STORE_CTX_get0_storePtr.asFunction<
          ffi.Pointer<X509_STORE> Function(ffi.Pointer<X509_STORE_CTX>)>();

  ffi.Pointer<X509> X509_STORE_CTX_get0_cert(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get0_cert(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get0_certPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509> Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get0_cert');
  late final _X509_STORE_CTX_get0_cert = _X509_STORE_CTX_get0_certPtr
      .asFunction<ffi.Pointer<X509> Function(ffi.Pointer<X509_STORE_CTX>)>();

  ffi.Pointer<stack_st_X509> X509_STORE_CTX_get0_untrusted(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get0_untrusted(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get0_untrustedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509> Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get0_untrusted');
  late final _X509_STORE_CTX_get0_untrusted =
      _X509_STORE_CTX_get0_untrustedPtr.asFunction<
          ffi.Pointer<stack_st_X509> Function(ffi.Pointer<X509_STORE_CTX>)>();

  void X509_STORE_CTX_set0_untrusted(
    ffi.Pointer<X509_STORE_CTX> ctx,
    ffi.Pointer<stack_st_X509> sk,
  ) {
    return _X509_STORE_CTX_set0_untrusted(
      ctx,
      sk,
    );
  }

  late final _X509_STORE_CTX_set0_untrustedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE_CTX>,
              ffi.Pointer<stack_st_X509>)>>('X509_STORE_CTX_set0_untrusted');
  late final _X509_STORE_CTX_set0_untrusted =
      _X509_STORE_CTX_set0_untrustedPtr.asFunction<
          void Function(
              ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<stack_st_X509>)>();

  void X509_STORE_CTX_set_verify_cb(
    ffi.Pointer<X509_STORE_CTX> ctx,
    X509_STORE_CTX_verify_cb verify,
  ) {
    return _X509_STORE_CTX_set_verify_cb(
      ctx,
      verify,
    );
  }

  late final _X509_STORE_CTX_set_verify_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE_CTX>,
              X509_STORE_CTX_verify_cb)>>('X509_STORE_CTX_set_verify_cb');
  late final _X509_STORE_CTX_set_verify_cb =
      _X509_STORE_CTX_set_verify_cbPtr.asFunction<
          void Function(
              ffi.Pointer<X509_STORE_CTX>, X509_STORE_CTX_verify_cb)>();

  X509_STORE_CTX_verify_cb X509_STORE_CTX_get_verify_cb(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get_verify_cb(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get_verify_cbPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_verify_cb Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get_verify_cb');
  late final _X509_STORE_CTX_get_verify_cb =
      _X509_STORE_CTX_get_verify_cbPtr.asFunction<
          X509_STORE_CTX_verify_cb Function(ffi.Pointer<X509_STORE_CTX>)>();

  X509_STORE_CTX_verify_fn X509_STORE_CTX_get_verify(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get_verify(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get_verifyPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_verify_fn Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get_verify');
  late final _X509_STORE_CTX_get_verify =
      _X509_STORE_CTX_get_verifyPtr.asFunction<
          X509_STORE_CTX_verify_fn Function(ffi.Pointer<X509_STORE_CTX>)>();

  X509_STORE_CTX_get_issuer_fn X509_STORE_CTX_get_get_issuer(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get_get_issuer(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get_get_issuerPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_get_issuer_fn Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get_get_issuer');
  late final _X509_STORE_CTX_get_get_issuer =
      _X509_STORE_CTX_get_get_issuerPtr.asFunction<
          X509_STORE_CTX_get_issuer_fn Function(ffi.Pointer<X509_STORE_CTX>)>();

  X509_STORE_CTX_check_issued_fn X509_STORE_CTX_get_check_issued(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get_check_issued(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get_check_issuedPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_check_issued_fn Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get_check_issued');
  late final _X509_STORE_CTX_get_check_issued =
      _X509_STORE_CTX_get_check_issuedPtr.asFunction<
          X509_STORE_CTX_check_issued_fn Function(
              ffi.Pointer<X509_STORE_CTX>)>();

  X509_STORE_CTX_check_revocation_fn X509_STORE_CTX_get_check_revocation(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get_check_revocation(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get_check_revocationPtr = _lookup<
          ffi.NativeFunction<
              X509_STORE_CTX_check_revocation_fn Function(
                  ffi.Pointer<X509_STORE_CTX>)>>(
      'X509_STORE_CTX_get_check_revocation');
  late final _X509_STORE_CTX_get_check_revocation =
      _X509_STORE_CTX_get_check_revocationPtr.asFunction<
          X509_STORE_CTX_check_revocation_fn Function(
              ffi.Pointer<X509_STORE_CTX>)>();

  X509_STORE_CTX_get_crl_fn X509_STORE_CTX_get_get_crl(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get_get_crl(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get_get_crlPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_get_crl_fn Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get_get_crl');
  late final _X509_STORE_CTX_get_get_crl =
      _X509_STORE_CTX_get_get_crlPtr.asFunction<
          X509_STORE_CTX_get_crl_fn Function(ffi.Pointer<X509_STORE_CTX>)>();

  X509_STORE_CTX_check_crl_fn X509_STORE_CTX_get_check_crl(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get_check_crl(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get_check_crlPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_check_crl_fn Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get_check_crl');
  late final _X509_STORE_CTX_get_check_crl =
      _X509_STORE_CTX_get_check_crlPtr.asFunction<
          X509_STORE_CTX_check_crl_fn Function(ffi.Pointer<X509_STORE_CTX>)>();

  X509_STORE_CTX_cert_crl_fn X509_STORE_CTX_get_cert_crl(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get_cert_crl(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get_cert_crlPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_cert_crl_fn Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get_cert_crl');
  late final _X509_STORE_CTX_get_cert_crl =
      _X509_STORE_CTX_get_cert_crlPtr.asFunction<
          X509_STORE_CTX_cert_crl_fn Function(ffi.Pointer<X509_STORE_CTX>)>();

  X509_STORE_CTX_check_policy_fn X509_STORE_CTX_get_check_policy(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get_check_policy(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get_check_policyPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_check_policy_fn Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get_check_policy');
  late final _X509_STORE_CTX_get_check_policy =
      _X509_STORE_CTX_get_check_policyPtr.asFunction<
          X509_STORE_CTX_check_policy_fn Function(
              ffi.Pointer<X509_STORE_CTX>)>();

  X509_STORE_CTX_lookup_certs_fn X509_STORE_CTX_get_lookup_certs(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get_lookup_certs(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get_lookup_certsPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_lookup_certs_fn Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get_lookup_certs');
  late final _X509_STORE_CTX_get_lookup_certs =
      _X509_STORE_CTX_get_lookup_certsPtr.asFunction<
          X509_STORE_CTX_lookup_certs_fn Function(
              ffi.Pointer<X509_STORE_CTX>)>();

  X509_STORE_CTX_lookup_crls_fn X509_STORE_CTX_get_lookup_crls(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get_lookup_crls(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get_lookup_crlsPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_lookup_crls_fn Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get_lookup_crls');
  late final _X509_STORE_CTX_get_lookup_crls =
      _X509_STORE_CTX_get_lookup_crlsPtr.asFunction<
          X509_STORE_CTX_lookup_crls_fn Function(
              ffi.Pointer<X509_STORE_CTX>)>();

  X509_STORE_CTX_cleanup_fn X509_STORE_CTX_get_cleanup(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get_cleanup(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get_cleanupPtr = _lookup<
      ffi.NativeFunction<
          X509_STORE_CTX_cleanup_fn Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get_cleanup');
  late final _X509_STORE_CTX_get_cleanup =
      _X509_STORE_CTX_get_cleanupPtr.asFunction<
          X509_STORE_CTX_cleanup_fn Function(ffi.Pointer<X509_STORE_CTX>)>();

  ffi.Pointer<X509_LOOKUP> X509_STORE_add_lookup(
    ffi.Pointer<X509_STORE> v,
    ffi.Pointer<X509_LOOKUP_METHOD> m,
  ) {
    return _X509_STORE_add_lookup(
      v,
      m,
    );
  }

  late final _X509_STORE_add_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_LOOKUP> Function(ffi.Pointer<X509_STORE>,
              ffi.Pointer<X509_LOOKUP_METHOD>)>>('X509_STORE_add_lookup');
  late final _X509_STORE_add_lookup = _X509_STORE_add_lookupPtr.asFunction<
      ffi.Pointer<X509_LOOKUP> Function(
          ffi.Pointer<X509_STORE>, ffi.Pointer<X509_LOOKUP_METHOD>)>();

  ffi.Pointer<X509_LOOKUP_METHOD> X509_LOOKUP_hash_dir() {
    return _X509_LOOKUP_hash_dir();
  }

  late final _X509_LOOKUP_hash_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_LOOKUP_METHOD> Function()>>(
          'X509_LOOKUP_hash_dir');
  late final _X509_LOOKUP_hash_dir = _X509_LOOKUP_hash_dirPtr.asFunction<
      ffi.Pointer<X509_LOOKUP_METHOD> Function()>();

  ffi.Pointer<X509_LOOKUP_METHOD> X509_LOOKUP_file() {
    return _X509_LOOKUP_file();
  }

  late final _X509_LOOKUP_filePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_LOOKUP_METHOD> Function()>>(
          'X509_LOOKUP_file');
  late final _X509_LOOKUP_file = _X509_LOOKUP_filePtr.asFunction<
      ffi.Pointer<X509_LOOKUP_METHOD> Function()>();

  ffi.Pointer<X509_LOOKUP_METHOD> X509_LOOKUP_meth_new(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _X509_LOOKUP_meth_new(
      name,
    );
  }

  late final _X509_LOOKUP_meth_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_LOOKUP_METHOD> Function(
              ffi.Pointer<ffi.Char>)>>('X509_LOOKUP_meth_new');
  late final _X509_LOOKUP_meth_new = _X509_LOOKUP_meth_newPtr.asFunction<
      ffi.Pointer<X509_LOOKUP_METHOD> Function(ffi.Pointer<ffi.Char>)>();

  void X509_LOOKUP_meth_free(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
  ) {
    return _X509_LOOKUP_meth_free(
      method,
    );
  }

  late final _X509_LOOKUP_meth_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<X509_LOOKUP_METHOD>)>>('X509_LOOKUP_meth_free');
  late final _X509_LOOKUP_meth_free = _X509_LOOKUP_meth_freePtr.asFunction<
      void Function(ffi.Pointer<X509_LOOKUP_METHOD>)>();

  int X509_LOOKUP_meth_set_new_item(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>
        new_item,
  ) {
    return _X509_LOOKUP_meth_set_new_item(
      method,
      new_item,
    );
  }

  late final _X509_LOOKUP_meth_set_new_itemPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<X509_LOOKUP_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>)>>(
      'X509_LOOKUP_meth_set_new_item');
  late final _X509_LOOKUP_meth_set_new_item =
      _X509_LOOKUP_meth_set_new_itemPtr.asFunction<
          int Function(
              ffi.Pointer<X509_LOOKUP_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>
      X509_LOOKUP_meth_get_new_item(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
  ) {
    return _X509_LOOKUP_meth_get_new_item(
      method,
    );
  }

  late final _X509_LOOKUP_meth_get_new_itemPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>
                  Function(ffi.Pointer<X509_LOOKUP_METHOD>)>>(
      'X509_LOOKUP_meth_get_new_item');
  late final _X509_LOOKUP_meth_get_new_item =
      _X509_LOOKUP_meth_get_new_itemPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>
              Function(ffi.Pointer<X509_LOOKUP_METHOD>)>();

  int X509_LOOKUP_meth_set_free(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_LOOKUP>)>>
        free_fn,
  ) {
    return _X509_LOOKUP_meth_set_free(
      method,
      free_fn,
    );
  }

  late final _X509_LOOKUP_meth_set_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<X509_LOOKUP_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<X509_LOOKUP>)>>)>>(
      'X509_LOOKUP_meth_set_free');
  late final _X509_LOOKUP_meth_set_free =
      _X509_LOOKUP_meth_set_freePtr.asFunction<
          int Function(
              ffi.Pointer<X509_LOOKUP_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<X509_LOOKUP>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_LOOKUP>)>>
      X509_LOOKUP_meth_get_free(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
  ) {
    return _X509_LOOKUP_meth_get_free(
      method,
    );
  }

  late final _X509_LOOKUP_meth_get_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<X509_LOOKUP>)>>
                  Function(ffi.Pointer<X509_LOOKUP_METHOD>)>>(
      'X509_LOOKUP_meth_get_free');
  late final _X509_LOOKUP_meth_get_free =
      _X509_LOOKUP_meth_get_freePtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<X509_LOOKUP>)>>
              Function(ffi.Pointer<X509_LOOKUP_METHOD>)>();

  int X509_LOOKUP_meth_set_init(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>
        init,
  ) {
    return _X509_LOOKUP_meth_set_init(
      method,
      init,
    );
  }

  late final _X509_LOOKUP_meth_set_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<X509_LOOKUP_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>)>>(
      'X509_LOOKUP_meth_set_init');
  late final _X509_LOOKUP_meth_set_init =
      _X509_LOOKUP_meth_set_initPtr.asFunction<
          int Function(
              ffi.Pointer<X509_LOOKUP_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>
      X509_LOOKUP_meth_get_init(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
  ) {
    return _X509_LOOKUP_meth_get_init(
      method,
    );
  }

  late final _X509_LOOKUP_meth_get_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>
                  Function(ffi.Pointer<X509_LOOKUP_METHOD>)>>(
      'X509_LOOKUP_meth_get_init');
  late final _X509_LOOKUP_meth_get_init =
      _X509_LOOKUP_meth_get_initPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>
              Function(ffi.Pointer<X509_LOOKUP_METHOD>)>();

  int X509_LOOKUP_meth_set_shutdown(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>
        shutdown,
  ) {
    return _X509_LOOKUP_meth_set_shutdown(
      method,
      shutdown,
    );
  }

  late final _X509_LOOKUP_meth_set_shutdownPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<X509_LOOKUP_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>)>>(
      'X509_LOOKUP_meth_set_shutdown');
  late final _X509_LOOKUP_meth_set_shutdown =
      _X509_LOOKUP_meth_set_shutdownPtr.asFunction<
          int Function(
              ffi.Pointer<X509_LOOKUP_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>
      X509_LOOKUP_meth_get_shutdown(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
  ) {
    return _X509_LOOKUP_meth_get_shutdown(
      method,
    );
  }

  late final _X509_LOOKUP_meth_get_shutdownPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>
                  Function(ffi.Pointer<X509_LOOKUP_METHOD>)>>(
      'X509_LOOKUP_meth_get_shutdown');
  late final _X509_LOOKUP_meth_get_shutdown =
      _X509_LOOKUP_meth_get_shutdownPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>
              Function(ffi.Pointer<X509_LOOKUP_METHOD>)>();

  int X509_LOOKUP_meth_set_ctrl(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
    X509_LOOKUP_ctrl_fn ctrl_fn,
  ) {
    return _X509_LOOKUP_meth_set_ctrl(
      method,
      ctrl_fn,
    );
  }

  late final _X509_LOOKUP_meth_set_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_LOOKUP_METHOD>,
              X509_LOOKUP_ctrl_fn)>>('X509_LOOKUP_meth_set_ctrl');
  late final _X509_LOOKUP_meth_set_ctrl =
      _X509_LOOKUP_meth_set_ctrlPtr.asFunction<
          int Function(ffi.Pointer<X509_LOOKUP_METHOD>, X509_LOOKUP_ctrl_fn)>();

  X509_LOOKUP_ctrl_fn X509_LOOKUP_meth_get_ctrl(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
  ) {
    return _X509_LOOKUP_meth_get_ctrl(
      method,
    );
  }

  late final _X509_LOOKUP_meth_get_ctrlPtr = _lookup<
      ffi.NativeFunction<
          X509_LOOKUP_ctrl_fn Function(
              ffi.Pointer<X509_LOOKUP_METHOD>)>>('X509_LOOKUP_meth_get_ctrl');
  late final _X509_LOOKUP_meth_get_ctrl =
      _X509_LOOKUP_meth_get_ctrlPtr.asFunction<
          X509_LOOKUP_ctrl_fn Function(ffi.Pointer<X509_LOOKUP_METHOD>)>();

  int X509_LOOKUP_meth_set_get_by_subject(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
    X509_LOOKUP_get_by_subject_fn fn,
  ) {
    return _X509_LOOKUP_meth_set_get_by_subject(
      method,
      fn,
    );
  }

  late final _X509_LOOKUP_meth_set_get_by_subjectPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<X509_LOOKUP_METHOD>,
                  X509_LOOKUP_get_by_subject_fn)>>(
      'X509_LOOKUP_meth_set_get_by_subject');
  late final _X509_LOOKUP_meth_set_get_by_subject =
      _X509_LOOKUP_meth_set_get_by_subjectPtr.asFunction<
          int Function(ffi.Pointer<X509_LOOKUP_METHOD>,
              X509_LOOKUP_get_by_subject_fn)>();

  X509_LOOKUP_get_by_subject_fn X509_LOOKUP_meth_get_get_by_subject(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
  ) {
    return _X509_LOOKUP_meth_get_get_by_subject(
      method,
    );
  }

  late final _X509_LOOKUP_meth_get_get_by_subjectPtr = _lookup<
          ffi.NativeFunction<
              X509_LOOKUP_get_by_subject_fn Function(
                  ffi.Pointer<X509_LOOKUP_METHOD>)>>(
      'X509_LOOKUP_meth_get_get_by_subject');
  late final _X509_LOOKUP_meth_get_get_by_subject =
      _X509_LOOKUP_meth_get_get_by_subjectPtr.asFunction<
          X509_LOOKUP_get_by_subject_fn Function(
              ffi.Pointer<X509_LOOKUP_METHOD>)>();

  int X509_LOOKUP_meth_set_get_by_issuer_serial(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
    X509_LOOKUP_get_by_issuer_serial_fn fn,
  ) {
    return _X509_LOOKUP_meth_set_get_by_issuer_serial(
      method,
      fn,
    );
  }

  late final _X509_LOOKUP_meth_set_get_by_issuer_serialPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<X509_LOOKUP_METHOD>,
                  X509_LOOKUP_get_by_issuer_serial_fn)>>(
      'X509_LOOKUP_meth_set_get_by_issuer_serial');
  late final _X509_LOOKUP_meth_set_get_by_issuer_serial =
      _X509_LOOKUP_meth_set_get_by_issuer_serialPtr.asFunction<
          int Function(ffi.Pointer<X509_LOOKUP_METHOD>,
              X509_LOOKUP_get_by_issuer_serial_fn)>();

  X509_LOOKUP_get_by_issuer_serial_fn X509_LOOKUP_meth_get_get_by_issuer_serial(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
  ) {
    return _X509_LOOKUP_meth_get_get_by_issuer_serial(
      method,
    );
  }

  late final _X509_LOOKUP_meth_get_get_by_issuer_serialPtr = _lookup<
          ffi.NativeFunction<
              X509_LOOKUP_get_by_issuer_serial_fn Function(
                  ffi.Pointer<X509_LOOKUP_METHOD>)>>(
      'X509_LOOKUP_meth_get_get_by_issuer_serial');
  late final _X509_LOOKUP_meth_get_get_by_issuer_serial =
      _X509_LOOKUP_meth_get_get_by_issuer_serialPtr.asFunction<
          X509_LOOKUP_get_by_issuer_serial_fn Function(
              ffi.Pointer<X509_LOOKUP_METHOD>)>();

  int X509_LOOKUP_meth_set_get_by_fingerprint(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
    X509_LOOKUP_get_by_fingerprint_fn fn,
  ) {
    return _X509_LOOKUP_meth_set_get_by_fingerprint(
      method,
      fn,
    );
  }

  late final _X509_LOOKUP_meth_set_get_by_fingerprintPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<X509_LOOKUP_METHOD>,
                  X509_LOOKUP_get_by_fingerprint_fn)>>(
      'X509_LOOKUP_meth_set_get_by_fingerprint');
  late final _X509_LOOKUP_meth_set_get_by_fingerprint =
      _X509_LOOKUP_meth_set_get_by_fingerprintPtr.asFunction<
          int Function(ffi.Pointer<X509_LOOKUP_METHOD>,
              X509_LOOKUP_get_by_fingerprint_fn)>();

  X509_LOOKUP_get_by_fingerprint_fn X509_LOOKUP_meth_get_get_by_fingerprint(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
  ) {
    return _X509_LOOKUP_meth_get_get_by_fingerprint(
      method,
    );
  }

  late final _X509_LOOKUP_meth_get_get_by_fingerprintPtr = _lookup<
          ffi.NativeFunction<
              X509_LOOKUP_get_by_fingerprint_fn Function(
                  ffi.Pointer<X509_LOOKUP_METHOD>)>>(
      'X509_LOOKUP_meth_get_get_by_fingerprint');
  late final _X509_LOOKUP_meth_get_get_by_fingerprint =
      _X509_LOOKUP_meth_get_get_by_fingerprintPtr.asFunction<
          X509_LOOKUP_get_by_fingerprint_fn Function(
              ffi.Pointer<X509_LOOKUP_METHOD>)>();

  int X509_LOOKUP_meth_set_get_by_alias(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
    X509_LOOKUP_get_by_alias_fn fn,
  ) {
    return _X509_LOOKUP_meth_set_get_by_alias(
      method,
      fn,
    );
  }

  late final _X509_LOOKUP_meth_set_get_by_aliasPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<X509_LOOKUP_METHOD>,
                  X509_LOOKUP_get_by_alias_fn)>>(
      'X509_LOOKUP_meth_set_get_by_alias');
  late final _X509_LOOKUP_meth_set_get_by_alias =
      _X509_LOOKUP_meth_set_get_by_aliasPtr.asFunction<
          int Function(
              ffi.Pointer<X509_LOOKUP_METHOD>, X509_LOOKUP_get_by_alias_fn)>();

  X509_LOOKUP_get_by_alias_fn X509_LOOKUP_meth_get_get_by_alias(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
  ) {
    return _X509_LOOKUP_meth_get_get_by_alias(
      method,
    );
  }

  late final _X509_LOOKUP_meth_get_get_by_aliasPtr = _lookup<
          ffi.NativeFunction<
              X509_LOOKUP_get_by_alias_fn Function(
                  ffi.Pointer<X509_LOOKUP_METHOD>)>>(
      'X509_LOOKUP_meth_get_get_by_alias');
  late final _X509_LOOKUP_meth_get_get_by_alias =
      _X509_LOOKUP_meth_get_get_by_aliasPtr.asFunction<
          X509_LOOKUP_get_by_alias_fn Function(
              ffi.Pointer<X509_LOOKUP_METHOD>)>();

  int X509_STORE_add_cert(
    ffi.Pointer<X509_STORE> ctx,
    ffi.Pointer<X509> x,
  ) {
    return _X509_STORE_add_cert(
      ctx,
      x,
    );
  }

  late final _X509_STORE_add_certPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_STORE>,
              ffi.Pointer<X509>)>>('X509_STORE_add_cert');
  late final _X509_STORE_add_cert = _X509_STORE_add_certPtr.asFunction<
      int Function(ffi.Pointer<X509_STORE>, ffi.Pointer<X509>)>();

  int X509_STORE_add_crl(
    ffi.Pointer<X509_STORE> ctx,
    ffi.Pointer<X509_CRL> x,
  ) {
    return _X509_STORE_add_crl(
      ctx,
      x,
    );
  }

  late final _X509_STORE_add_crlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_STORE>,
              ffi.Pointer<X509_CRL>)>>('X509_STORE_add_crl');
  late final _X509_STORE_add_crl = _X509_STORE_add_crlPtr.asFunction<
      int Function(ffi.Pointer<X509_STORE>, ffi.Pointer<X509_CRL>)>();

  int X509_STORE_CTX_get_by_subject(
    ffi.Pointer<X509_STORE_CTX> vs,
    int type,
    ffi.Pointer<X509_NAME> name,
    ffi.Pointer<X509_OBJECT> ret,
  ) {
    return _X509_STORE_CTX_get_by_subject(
      vs,
      type,
      name,
      ret,
    );
  }

  late final _X509_STORE_CTX_get_by_subjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_STORE_CTX>,
              ffi.Int32,
              ffi.Pointer<X509_NAME>,
              ffi.Pointer<X509_OBJECT>)>>('X509_STORE_CTX_get_by_subject');
  late final _X509_STORE_CTX_get_by_subject =
      _X509_STORE_CTX_get_by_subjectPtr.asFunction<
          int Function(ffi.Pointer<X509_STORE_CTX>, int, ffi.Pointer<X509_NAME>,
              ffi.Pointer<X509_OBJECT>)>();

  ffi.Pointer<X509_OBJECT> X509_STORE_CTX_get_obj_by_subject(
    ffi.Pointer<X509_STORE_CTX> vs,
    int type,
    ffi.Pointer<X509_NAME> name,
  ) {
    return _X509_STORE_CTX_get_obj_by_subject(
      vs,
      type,
      name,
    );
  }

  late final _X509_STORE_CTX_get_obj_by_subjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_OBJECT> Function(
              ffi.Pointer<X509_STORE_CTX>,
              ffi.Int32,
              ffi.Pointer<X509_NAME>)>>('X509_STORE_CTX_get_obj_by_subject');
  late final _X509_STORE_CTX_get_obj_by_subject =
      _X509_STORE_CTX_get_obj_by_subjectPtr.asFunction<
          ffi.Pointer<X509_OBJECT> Function(
              ffi.Pointer<X509_STORE_CTX>, int, ffi.Pointer<X509_NAME>)>();

  int X509_LOOKUP_ctrl(
    ffi.Pointer<X509_LOOKUP> ctx,
    int cmd,
    ffi.Pointer<ffi.Char> argc,
    int argl,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ret,
  ) {
    return _X509_LOOKUP_ctrl(
      ctx,
      cmd,
      argc,
      argl,
      ret,
    );
  }

  late final _X509_LOOKUP_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_LOOKUP>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Long,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('X509_LOOKUP_ctrl');
  late final _X509_LOOKUP_ctrl = _X509_LOOKUP_ctrlPtr.asFunction<
      int Function(ffi.Pointer<X509_LOOKUP>, int, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int X509_load_cert_file(
    ffi.Pointer<X509_LOOKUP> ctx,
    ffi.Pointer<ffi.Char> file,
    int type,
  ) {
    return _X509_load_cert_file(
      ctx,
      file,
      type,
    );
  }

  late final _X509_load_cert_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_LOOKUP>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('X509_load_cert_file');
  late final _X509_load_cert_file = _X509_load_cert_filePtr.asFunction<
      int Function(ffi.Pointer<X509_LOOKUP>, ffi.Pointer<ffi.Char>, int)>();

  int X509_load_crl_file(
    ffi.Pointer<X509_LOOKUP> ctx,
    ffi.Pointer<ffi.Char> file,
    int type,
  ) {
    return _X509_load_crl_file(
      ctx,
      file,
      type,
    );
  }

  late final _X509_load_crl_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_LOOKUP>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('X509_load_crl_file');
  late final _X509_load_crl_file = _X509_load_crl_filePtr.asFunction<
      int Function(ffi.Pointer<X509_LOOKUP>, ffi.Pointer<ffi.Char>, int)>();

  int X509_load_cert_crl_file(
    ffi.Pointer<X509_LOOKUP> ctx,
    ffi.Pointer<ffi.Char> file,
    int type,
  ) {
    return _X509_load_cert_crl_file(
      ctx,
      file,
      type,
    );
  }

  late final _X509_load_cert_crl_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_LOOKUP>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('X509_load_cert_crl_file');
  late final _X509_load_cert_crl_file = _X509_load_cert_crl_filePtr.asFunction<
      int Function(ffi.Pointer<X509_LOOKUP>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<X509_LOOKUP> X509_LOOKUP_new(
    ffi.Pointer<X509_LOOKUP_METHOD> method,
  ) {
    return _X509_LOOKUP_new(
      method,
    );
  }

  late final _X509_LOOKUP_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_LOOKUP> Function(
              ffi.Pointer<X509_LOOKUP_METHOD>)>>('X509_LOOKUP_new');
  late final _X509_LOOKUP_new = _X509_LOOKUP_newPtr.asFunction<
      ffi.Pointer<X509_LOOKUP> Function(ffi.Pointer<X509_LOOKUP_METHOD>)>();

  void X509_LOOKUP_free(
    ffi.Pointer<X509_LOOKUP> ctx,
  ) {
    return _X509_LOOKUP_free(
      ctx,
    );
  }

  late final _X509_LOOKUP_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_LOOKUP>)>>(
          'X509_LOOKUP_free');
  late final _X509_LOOKUP_free = _X509_LOOKUP_freePtr.asFunction<
      void Function(ffi.Pointer<X509_LOOKUP>)>();

  int X509_LOOKUP_init(
    ffi.Pointer<X509_LOOKUP> ctx,
  ) {
    return _X509_LOOKUP_init(
      ctx,
    );
  }

  late final _X509_LOOKUP_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>(
          'X509_LOOKUP_init');
  late final _X509_LOOKUP_init =
      _X509_LOOKUP_initPtr.asFunction<int Function(ffi.Pointer<X509_LOOKUP>)>();

  int X509_LOOKUP_by_subject(
    ffi.Pointer<X509_LOOKUP> ctx,
    int type,
    ffi.Pointer<X509_NAME> name,
    ffi.Pointer<X509_OBJECT> ret,
  ) {
    return _X509_LOOKUP_by_subject(
      ctx,
      type,
      name,
      ret,
    );
  }

  late final _X509_LOOKUP_by_subjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_LOOKUP>,
              ffi.Int32,
              ffi.Pointer<X509_NAME>,
              ffi.Pointer<X509_OBJECT>)>>('X509_LOOKUP_by_subject');
  late final _X509_LOOKUP_by_subject = _X509_LOOKUP_by_subjectPtr.asFunction<
      int Function(ffi.Pointer<X509_LOOKUP>, int, ffi.Pointer<X509_NAME>,
          ffi.Pointer<X509_OBJECT>)>();

  int X509_LOOKUP_by_issuer_serial(
    ffi.Pointer<X509_LOOKUP> ctx,
    int type,
    ffi.Pointer<X509_NAME> name,
    ffi.Pointer<ASN1_INTEGER> serial,
    ffi.Pointer<X509_OBJECT> ret,
  ) {
    return _X509_LOOKUP_by_issuer_serial(
      ctx,
      type,
      name,
      serial,
      ret,
    );
  }

  late final _X509_LOOKUP_by_issuer_serialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_LOOKUP>,
              ffi.Int32,
              ffi.Pointer<X509_NAME>,
              ffi.Pointer<ASN1_INTEGER>,
              ffi.Pointer<X509_OBJECT>)>>('X509_LOOKUP_by_issuer_serial');
  late final _X509_LOOKUP_by_issuer_serial =
      _X509_LOOKUP_by_issuer_serialPtr.asFunction<
          int Function(ffi.Pointer<X509_LOOKUP>, int, ffi.Pointer<X509_NAME>,
              ffi.Pointer<ASN1_INTEGER>, ffi.Pointer<X509_OBJECT>)>();

  int X509_LOOKUP_by_fingerprint(
    ffi.Pointer<X509_LOOKUP> ctx,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
    ffi.Pointer<X509_OBJECT> ret,
  ) {
    return _X509_LOOKUP_by_fingerprint(
      ctx,
      type,
      bytes,
      len,
      ret,
    );
  }

  late final _X509_LOOKUP_by_fingerprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_LOOKUP>,
              ffi.Int32,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<X509_OBJECT>)>>('X509_LOOKUP_by_fingerprint');
  late final _X509_LOOKUP_by_fingerprint =
      _X509_LOOKUP_by_fingerprintPtr.asFunction<
          int Function(ffi.Pointer<X509_LOOKUP>, int,
              ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<X509_OBJECT>)>();

  int X509_LOOKUP_by_alias(
    ffi.Pointer<X509_LOOKUP> ctx,
    int type,
    ffi.Pointer<ffi.Char> str,
    int len,
    ffi.Pointer<X509_OBJECT> ret,
  ) {
    return _X509_LOOKUP_by_alias(
      ctx,
      type,
      str,
      len,
      ret,
    );
  }

  late final _X509_LOOKUP_by_aliasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_LOOKUP>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<X509_OBJECT>)>>('X509_LOOKUP_by_alias');
  late final _X509_LOOKUP_by_alias = _X509_LOOKUP_by_aliasPtr.asFunction<
      int Function(ffi.Pointer<X509_LOOKUP>, int, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<X509_OBJECT>)>();

  int X509_LOOKUP_set_method_data(
    ffi.Pointer<X509_LOOKUP> ctx,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _X509_LOOKUP_set_method_data(
      ctx,
      data,
    );
  }

  late final _X509_LOOKUP_set_method_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_LOOKUP>,
              ffi.Pointer<ffi.Void>)>>('X509_LOOKUP_set_method_data');
  late final _X509_LOOKUP_set_method_data =
      _X509_LOOKUP_set_method_dataPtr.asFunction<
          int Function(ffi.Pointer<X509_LOOKUP>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> X509_LOOKUP_get_method_data(
    ffi.Pointer<X509_LOOKUP> ctx,
  ) {
    return _X509_LOOKUP_get_method_data(
      ctx,
    );
  }

  late final _X509_LOOKUP_get_method_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<X509_LOOKUP>)>>('X509_LOOKUP_get_method_data');
  late final _X509_LOOKUP_get_method_data = _X509_LOOKUP_get_method_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<X509_LOOKUP>)>();

  ffi.Pointer<X509_STORE> X509_LOOKUP_get_store(
    ffi.Pointer<X509_LOOKUP> ctx,
  ) {
    return _X509_LOOKUP_get_store(
      ctx,
    );
  }

  late final _X509_LOOKUP_get_storePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_STORE> Function(
              ffi.Pointer<X509_LOOKUP>)>>('X509_LOOKUP_get_store');
  late final _X509_LOOKUP_get_store = _X509_LOOKUP_get_storePtr.asFunction<
      ffi.Pointer<X509_STORE> Function(ffi.Pointer<X509_LOOKUP>)>();

  int X509_LOOKUP_shutdown(
    ffi.Pointer<X509_LOOKUP> ctx,
  ) {
    return _X509_LOOKUP_shutdown(
      ctx,
    );
  }

  late final _X509_LOOKUP_shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_LOOKUP>)>>(
          'X509_LOOKUP_shutdown');
  late final _X509_LOOKUP_shutdown = _X509_LOOKUP_shutdownPtr.asFunction<
      int Function(ffi.Pointer<X509_LOOKUP>)>();

  int X509_STORE_load_locations(
    ffi.Pointer<X509_STORE> ctx,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> dir,
  ) {
    return _X509_STORE_load_locations(
      ctx,
      file,
      dir,
    );
  }

  late final _X509_STORE_load_locationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_STORE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('X509_STORE_load_locations');
  late final _X509_STORE_load_locations =
      _X509_STORE_load_locationsPtr.asFunction<
          int Function(ffi.Pointer<X509_STORE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int X509_STORE_set_default_paths(
    ffi.Pointer<X509_STORE> ctx,
  ) {
    return _X509_STORE_set_default_paths(
      ctx,
    );
  }

  late final _X509_STORE_set_default_pathsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_STORE>)>>(
          'X509_STORE_set_default_paths');
  late final _X509_STORE_set_default_paths = _X509_STORE_set_default_pathsPtr
      .asFunction<int Function(ffi.Pointer<X509_STORE>)>();

  int X509_STORE_CTX_set_ex_data(
    ffi.Pointer<X509_STORE_CTX> ctx,
    int idx,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _X509_STORE_CTX_set_ex_data(
      ctx,
      idx,
      data,
    );
  }

  late final _X509_STORE_CTX_set_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_STORE_CTX>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('X509_STORE_CTX_set_ex_data');
  late final _X509_STORE_CTX_set_ex_data =
      _X509_STORE_CTX_set_ex_dataPtr.asFunction<
          int Function(
              ffi.Pointer<X509_STORE_CTX>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> X509_STORE_CTX_get_ex_data(
    ffi.Pointer<X509_STORE_CTX> ctx,
    int idx,
  ) {
    return _X509_STORE_CTX_get_ex_data(
      ctx,
      idx,
    );
  }

  late final _X509_STORE_CTX_get_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<X509_STORE_CTX>,
              ffi.Int)>>('X509_STORE_CTX_get_ex_data');
  late final _X509_STORE_CTX_get_ex_data =
      _X509_STORE_CTX_get_ex_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<X509_STORE_CTX>, int)>();

  int X509_STORE_CTX_get_error(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get_error(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get_errorPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_STORE_CTX>)>>(
      'X509_STORE_CTX_get_error');
  late final _X509_STORE_CTX_get_error = _X509_STORE_CTX_get_errorPtr
      .asFunction<int Function(ffi.Pointer<X509_STORE_CTX>)>();

  void X509_STORE_CTX_set_error(
    ffi.Pointer<X509_STORE_CTX> ctx,
    int s,
  ) {
    return _X509_STORE_CTX_set_error(
      ctx,
      s,
    );
  }

  late final _X509_STORE_CTX_set_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE_CTX>,
              ffi.Int)>>('X509_STORE_CTX_set_error');
  late final _X509_STORE_CTX_set_error = _X509_STORE_CTX_set_errorPtr
      .asFunction<void Function(ffi.Pointer<X509_STORE_CTX>, int)>();

  int X509_STORE_CTX_get_error_depth(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get_error_depth(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get_error_depthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_STORE_CTX>)>>(
      'X509_STORE_CTX_get_error_depth');
  late final _X509_STORE_CTX_get_error_depth =
      _X509_STORE_CTX_get_error_depthPtr.asFunction<
          int Function(ffi.Pointer<X509_STORE_CTX>)>();

  void X509_STORE_CTX_set_error_depth(
    ffi.Pointer<X509_STORE_CTX> ctx,
    int depth,
  ) {
    return _X509_STORE_CTX_set_error_depth(
      ctx,
      depth,
    );
  }

  late final _X509_STORE_CTX_set_error_depthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE_CTX>,
              ffi.Int)>>('X509_STORE_CTX_set_error_depth');
  late final _X509_STORE_CTX_set_error_depth =
      _X509_STORE_CTX_set_error_depthPtr.asFunction<
          void Function(ffi.Pointer<X509_STORE_CTX>, int)>();

  ffi.Pointer<X509> X509_STORE_CTX_get_current_cert(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get_current_cert(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get_current_certPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509> Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get_current_cert');
  late final _X509_STORE_CTX_get_current_cert =
      _X509_STORE_CTX_get_current_certPtr.asFunction<
          ffi.Pointer<X509> Function(ffi.Pointer<X509_STORE_CTX>)>();

  void X509_STORE_CTX_set_current_cert(
    ffi.Pointer<X509_STORE_CTX> ctx,
    ffi.Pointer<X509> x,
  ) {
    return _X509_STORE_CTX_set_current_cert(
      ctx,
      x,
    );
  }

  late final _X509_STORE_CTX_set_current_certPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE_CTX>,
              ffi.Pointer<X509>)>>('X509_STORE_CTX_set_current_cert');
  late final _X509_STORE_CTX_set_current_cert =
      _X509_STORE_CTX_set_current_certPtr.asFunction<
          void Function(ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<X509>)>();

  ffi.Pointer<X509> X509_STORE_CTX_get0_current_issuer(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get0_current_issuer(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get0_current_issuerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<X509> Function(ffi.Pointer<X509_STORE_CTX>)>>(
      'X509_STORE_CTX_get0_current_issuer');
  late final _X509_STORE_CTX_get0_current_issuer =
      _X509_STORE_CTX_get0_current_issuerPtr.asFunction<
          ffi.Pointer<X509> Function(ffi.Pointer<X509_STORE_CTX>)>();

  ffi.Pointer<X509_CRL> X509_STORE_CTX_get0_current_crl(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get0_current_crl(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get0_current_crlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_CRL> Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get0_current_crl');
  late final _X509_STORE_CTX_get0_current_crl =
      _X509_STORE_CTX_get0_current_crlPtr.asFunction<
          ffi.Pointer<X509_CRL> Function(ffi.Pointer<X509_STORE_CTX>)>();

  ffi.Pointer<X509_STORE_CTX> X509_STORE_CTX_get0_parent_ctx(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get0_parent_ctx(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get0_parent_ctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_STORE_CTX> Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get0_parent_ctx');
  late final _X509_STORE_CTX_get0_parent_ctx =
      _X509_STORE_CTX_get0_parent_ctxPtr.asFunction<
          ffi.Pointer<X509_STORE_CTX> Function(ffi.Pointer<X509_STORE_CTX>)>();

  ffi.Pointer<stack_st_X509> X509_STORE_CTX_get0_chain(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get0_chain(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get0_chainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509> Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get0_chain');
  late final _X509_STORE_CTX_get0_chain =
      _X509_STORE_CTX_get0_chainPtr.asFunction<
          ffi.Pointer<stack_st_X509> Function(ffi.Pointer<X509_STORE_CTX>)>();

  ffi.Pointer<stack_st_X509> X509_STORE_CTX_get1_chain(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get1_chain(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get1_chainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509> Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get1_chain');
  late final _X509_STORE_CTX_get1_chain =
      _X509_STORE_CTX_get1_chainPtr.asFunction<
          ffi.Pointer<stack_st_X509> Function(ffi.Pointer<X509_STORE_CTX>)>();

  void X509_STORE_CTX_set_cert(
    ffi.Pointer<X509_STORE_CTX> c,
    ffi.Pointer<X509> x,
  ) {
    return _X509_STORE_CTX_set_cert(
      c,
      x,
    );
  }

  late final _X509_STORE_CTX_set_certPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE_CTX>,
              ffi.Pointer<X509>)>>('X509_STORE_CTX_set_cert');
  late final _X509_STORE_CTX_set_cert = _X509_STORE_CTX_set_certPtr.asFunction<
      void Function(ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<X509>)>();

  void X509_STORE_CTX_set0_verified_chain(
    ffi.Pointer<X509_STORE_CTX> c,
    ffi.Pointer<stack_st_X509> sk,
  ) {
    return _X509_STORE_CTX_set0_verified_chain(
      c,
      sk,
    );
  }

  late final _X509_STORE_CTX_set0_verified_chainPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<stack_st_X509>)>>(
      'X509_STORE_CTX_set0_verified_chain');
  late final _X509_STORE_CTX_set0_verified_chain =
      _X509_STORE_CTX_set0_verified_chainPtr.asFunction<
          void Function(
              ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<stack_st_X509>)>();

  void X509_STORE_CTX_set0_crls(
    ffi.Pointer<X509_STORE_CTX> c,
    ffi.Pointer<stack_st_X509_CRL> sk,
  ) {
    return _X509_STORE_CTX_set0_crls(
      c,
      sk,
    );
  }

  late final _X509_STORE_CTX_set0_crlsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE_CTX>,
              ffi.Pointer<stack_st_X509_CRL>)>>('X509_STORE_CTX_set0_crls');
  late final _X509_STORE_CTX_set0_crls =
      _X509_STORE_CTX_set0_crlsPtr.asFunction<
          void Function(
              ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<stack_st_X509_CRL>)>();

  int X509_STORE_CTX_set_purpose(
    ffi.Pointer<X509_STORE_CTX> ctx,
    int purpose,
  ) {
    return _X509_STORE_CTX_set_purpose(
      ctx,
      purpose,
    );
  }

  late final _X509_STORE_CTX_set_purposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_STORE_CTX>,
              ffi.Int)>>('X509_STORE_CTX_set_purpose');
  late final _X509_STORE_CTX_set_purpose = _X509_STORE_CTX_set_purposePtr
      .asFunction<int Function(ffi.Pointer<X509_STORE_CTX>, int)>();

  int X509_STORE_CTX_set_trust(
    ffi.Pointer<X509_STORE_CTX> ctx,
    int trust,
  ) {
    return _X509_STORE_CTX_set_trust(
      ctx,
      trust,
    );
  }

  late final _X509_STORE_CTX_set_trustPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_STORE_CTX>,
              ffi.Int)>>('X509_STORE_CTX_set_trust');
  late final _X509_STORE_CTX_set_trust = _X509_STORE_CTX_set_trustPtr
      .asFunction<int Function(ffi.Pointer<X509_STORE_CTX>, int)>();

  int X509_STORE_CTX_purpose_inherit(
    ffi.Pointer<X509_STORE_CTX> ctx,
    int def_purpose,
    int purpose,
    int trust,
  ) {
    return _X509_STORE_CTX_purpose_inherit(
      ctx,
      def_purpose,
      purpose,
      trust,
    );
  }

  late final _X509_STORE_CTX_purpose_inheritPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_STORE_CTX>, ffi.Int, ffi.Int,
              ffi.Int)>>('X509_STORE_CTX_purpose_inherit');
  late final _X509_STORE_CTX_purpose_inherit =
      _X509_STORE_CTX_purpose_inheritPtr.asFunction<
          int Function(ffi.Pointer<X509_STORE_CTX>, int, int, int)>();

  void X509_STORE_CTX_set_flags(
    ffi.Pointer<X509_STORE_CTX> ctx,
    int flags,
  ) {
    return _X509_STORE_CTX_set_flags(
      ctx,
      flags,
    );
  }

  late final _X509_STORE_CTX_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE_CTX>,
              ffi.UnsignedLong)>>('X509_STORE_CTX_set_flags');
  late final _X509_STORE_CTX_set_flags = _X509_STORE_CTX_set_flagsPtr
      .asFunction<void Function(ffi.Pointer<X509_STORE_CTX>, int)>();

  void X509_STORE_CTX_set_time(
    ffi.Pointer<X509_STORE_CTX> ctx,
    int flags,
    int t,
  ) {
    return _X509_STORE_CTX_set_time(
      ctx,
      flags,
      t,
    );
  }

  late final _X509_STORE_CTX_set_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE_CTX>, ffi.UnsignedLong,
              time_t)>>('X509_STORE_CTX_set_time');
  late final _X509_STORE_CTX_set_time = _X509_STORE_CTX_set_timePtr.asFunction<
      void Function(ffi.Pointer<X509_STORE_CTX>, int, int)>();

  ffi.Pointer<X509_POLICY_TREE> X509_STORE_CTX_get0_policy_tree(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get0_policy_tree(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get0_policy_treePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_POLICY_TREE> Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get0_policy_tree');
  late final _X509_STORE_CTX_get0_policy_tree =
      _X509_STORE_CTX_get0_policy_treePtr.asFunction<
          ffi.Pointer<X509_POLICY_TREE> Function(
              ffi.Pointer<X509_STORE_CTX>)>();

  int X509_STORE_CTX_get_explicit_policy(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get_explicit_policy(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get_explicit_policyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_STORE_CTX>)>>(
      'X509_STORE_CTX_get_explicit_policy');
  late final _X509_STORE_CTX_get_explicit_policy =
      _X509_STORE_CTX_get_explicit_policyPtr.asFunction<
          int Function(ffi.Pointer<X509_STORE_CTX>)>();

  int X509_STORE_CTX_get_num_untrusted(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get_num_untrusted(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get_num_untrustedPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_STORE_CTX>)>>(
      'X509_STORE_CTX_get_num_untrusted');
  late final _X509_STORE_CTX_get_num_untrusted =
      _X509_STORE_CTX_get_num_untrustedPtr.asFunction<
          int Function(ffi.Pointer<X509_STORE_CTX>)>();

  ffi.Pointer<X509_VERIFY_PARAM> X509_STORE_CTX_get0_param(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_STORE_CTX_get0_param(
      ctx,
    );
  }

  late final _X509_STORE_CTX_get0_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_VERIFY_PARAM> Function(
              ffi.Pointer<X509_STORE_CTX>)>>('X509_STORE_CTX_get0_param');
  late final _X509_STORE_CTX_get0_param =
      _X509_STORE_CTX_get0_paramPtr.asFunction<
          ffi.Pointer<X509_VERIFY_PARAM> Function(
              ffi.Pointer<X509_STORE_CTX>)>();

  void X509_STORE_CTX_set0_param(
    ffi.Pointer<X509_STORE_CTX> ctx,
    ffi.Pointer<X509_VERIFY_PARAM> param,
  ) {
    return _X509_STORE_CTX_set0_param(
      ctx,
      param,
    );
  }

  late final _X509_STORE_CTX_set0_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE_CTX>,
              ffi.Pointer<X509_VERIFY_PARAM>)>>('X509_STORE_CTX_set0_param');
  late final _X509_STORE_CTX_set0_param =
      _X509_STORE_CTX_set0_paramPtr.asFunction<
          void Function(
              ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<X509_VERIFY_PARAM>)>();

  int X509_STORE_CTX_set_default(
    ffi.Pointer<X509_STORE_CTX> ctx,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _X509_STORE_CTX_set_default(
      ctx,
      name,
    );
  }

  late final _X509_STORE_CTX_set_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_STORE_CTX>,
              ffi.Pointer<ffi.Char>)>>('X509_STORE_CTX_set_default');
  late final _X509_STORE_CTX_set_default =
      _X509_STORE_CTX_set_defaultPtr.asFunction<
          int Function(ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<ffi.Char>)>();

  void X509_STORE_CTX_set0_dane(
    ffi.Pointer<X509_STORE_CTX> ctx,
    ffi.Pointer<SSL_DANE> dane,
  ) {
    return _X509_STORE_CTX_set0_dane(
      ctx,
      dane,
    );
  }

  late final _X509_STORE_CTX_set0_danePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_STORE_CTX>,
              ffi.Pointer<SSL_DANE>)>>('X509_STORE_CTX_set0_dane');
  late final _X509_STORE_CTX_set0_dane =
      _X509_STORE_CTX_set0_danePtr.asFunction<
          void Function(ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<SSL_DANE>)>();

  ffi.Pointer<X509_VERIFY_PARAM> X509_VERIFY_PARAM_new() {
    return _X509_VERIFY_PARAM_new();
  }

  late final _X509_VERIFY_PARAM_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_VERIFY_PARAM> Function()>>(
          'X509_VERIFY_PARAM_new');
  late final _X509_VERIFY_PARAM_new = _X509_VERIFY_PARAM_newPtr.asFunction<
      ffi.Pointer<X509_VERIFY_PARAM> Function()>();

  void X509_VERIFY_PARAM_free(
    ffi.Pointer<X509_VERIFY_PARAM> param,
  ) {
    return _X509_VERIFY_PARAM_free(
      param,
    );
  }

  late final _X509_VERIFY_PARAM_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<X509_VERIFY_PARAM>)>>('X509_VERIFY_PARAM_free');
  late final _X509_VERIFY_PARAM_free = _X509_VERIFY_PARAM_freePtr.asFunction<
      void Function(ffi.Pointer<X509_VERIFY_PARAM>)>();

  int X509_VERIFY_PARAM_inherit(
    ffi.Pointer<X509_VERIFY_PARAM> to,
    ffi.Pointer<X509_VERIFY_PARAM> from,
  ) {
    return _X509_VERIFY_PARAM_inherit(
      to,
      from,
    );
  }

  late final _X509_VERIFY_PARAM_inheritPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Pointer<X509_VERIFY_PARAM>)>>('X509_VERIFY_PARAM_inherit');
  late final _X509_VERIFY_PARAM_inherit =
      _X509_VERIFY_PARAM_inheritPtr.asFunction<
          int Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Pointer<X509_VERIFY_PARAM>)>();

  int X509_VERIFY_PARAM_set1(
    ffi.Pointer<X509_VERIFY_PARAM> to,
    ffi.Pointer<X509_VERIFY_PARAM> from,
  ) {
    return _X509_VERIFY_PARAM_set1(
      to,
      from,
    );
  }

  late final _X509_VERIFY_PARAM_set1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Pointer<X509_VERIFY_PARAM>)>>('X509_VERIFY_PARAM_set1');
  late final _X509_VERIFY_PARAM_set1 = _X509_VERIFY_PARAM_set1Ptr.asFunction<
      int Function(
          ffi.Pointer<X509_VERIFY_PARAM>, ffi.Pointer<X509_VERIFY_PARAM>)>();

  int X509_VERIFY_PARAM_set1_name(
    ffi.Pointer<X509_VERIFY_PARAM> param,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _X509_VERIFY_PARAM_set1_name(
      param,
      name,
    );
  }

  late final _X509_VERIFY_PARAM_set1_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Pointer<ffi.Char>)>>('X509_VERIFY_PARAM_set1_name');
  late final _X509_VERIFY_PARAM_set1_name =
      _X509_VERIFY_PARAM_set1_namePtr.asFunction<
          int Function(
              ffi.Pointer<X509_VERIFY_PARAM>, ffi.Pointer<ffi.Char>)>();

  int X509_VERIFY_PARAM_set_flags(
    ffi.Pointer<X509_VERIFY_PARAM> param,
    int flags,
  ) {
    return _X509_VERIFY_PARAM_set_flags(
      param,
      flags,
    );
  }

  late final _X509_VERIFY_PARAM_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.UnsignedLong)>>('X509_VERIFY_PARAM_set_flags');
  late final _X509_VERIFY_PARAM_set_flags = _X509_VERIFY_PARAM_set_flagsPtr
      .asFunction<int Function(ffi.Pointer<X509_VERIFY_PARAM>, int)>();

  int X509_VERIFY_PARAM_clear_flags(
    ffi.Pointer<X509_VERIFY_PARAM> param,
    int flags,
  ) {
    return _X509_VERIFY_PARAM_clear_flags(
      param,
      flags,
    );
  }

  late final _X509_VERIFY_PARAM_clear_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.UnsignedLong)>>('X509_VERIFY_PARAM_clear_flags');
  late final _X509_VERIFY_PARAM_clear_flags = _X509_VERIFY_PARAM_clear_flagsPtr
      .asFunction<int Function(ffi.Pointer<X509_VERIFY_PARAM>, int)>();

  int X509_VERIFY_PARAM_get_flags(
    ffi.Pointer<X509_VERIFY_PARAM> param,
  ) {
    return _X509_VERIFY_PARAM_get_flags(
      param,
    );
  }

  late final _X509_VERIFY_PARAM_get_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<X509_VERIFY_PARAM>)>>('X509_VERIFY_PARAM_get_flags');
  late final _X509_VERIFY_PARAM_get_flags = _X509_VERIFY_PARAM_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<X509_VERIFY_PARAM>)>();

  int X509_VERIFY_PARAM_set_purpose(
    ffi.Pointer<X509_VERIFY_PARAM> param,
    int purpose,
  ) {
    return _X509_VERIFY_PARAM_set_purpose(
      param,
      purpose,
    );
  }

  late final _X509_VERIFY_PARAM_set_purposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Int)>>('X509_VERIFY_PARAM_set_purpose');
  late final _X509_VERIFY_PARAM_set_purpose = _X509_VERIFY_PARAM_set_purposePtr
      .asFunction<int Function(ffi.Pointer<X509_VERIFY_PARAM>, int)>();

  int X509_VERIFY_PARAM_set_trust(
    ffi.Pointer<X509_VERIFY_PARAM> param,
    int trust,
  ) {
    return _X509_VERIFY_PARAM_set_trust(
      param,
      trust,
    );
  }

  late final _X509_VERIFY_PARAM_set_trustPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Int)>>('X509_VERIFY_PARAM_set_trust');
  late final _X509_VERIFY_PARAM_set_trust = _X509_VERIFY_PARAM_set_trustPtr
      .asFunction<int Function(ffi.Pointer<X509_VERIFY_PARAM>, int)>();

  void X509_VERIFY_PARAM_set_depth(
    ffi.Pointer<X509_VERIFY_PARAM> param,
    int depth,
  ) {
    return _X509_VERIFY_PARAM_set_depth(
      param,
      depth,
    );
  }

  late final _X509_VERIFY_PARAM_set_depthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Int)>>('X509_VERIFY_PARAM_set_depth');
  late final _X509_VERIFY_PARAM_set_depth = _X509_VERIFY_PARAM_set_depthPtr
      .asFunction<void Function(ffi.Pointer<X509_VERIFY_PARAM>, int)>();

  void X509_VERIFY_PARAM_set_auth_level(
    ffi.Pointer<X509_VERIFY_PARAM> param,
    int auth_level,
  ) {
    return _X509_VERIFY_PARAM_set_auth_level(
      param,
      auth_level,
    );
  }

  late final _X509_VERIFY_PARAM_set_auth_levelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Int)>>('X509_VERIFY_PARAM_set_auth_level');
  late final _X509_VERIFY_PARAM_set_auth_level =
      _X509_VERIFY_PARAM_set_auth_levelPtr.asFunction<
          void Function(ffi.Pointer<X509_VERIFY_PARAM>, int)>();

  int X509_VERIFY_PARAM_get_time(
    ffi.Pointer<X509_VERIFY_PARAM> param,
  ) {
    return _X509_VERIFY_PARAM_get_time(
      param,
    );
  }

  late final _X509_VERIFY_PARAM_get_timePtr = _lookup<
          ffi.NativeFunction<time_t Function(ffi.Pointer<X509_VERIFY_PARAM>)>>(
      'X509_VERIFY_PARAM_get_time');
  late final _X509_VERIFY_PARAM_get_time = _X509_VERIFY_PARAM_get_timePtr
      .asFunction<int Function(ffi.Pointer<X509_VERIFY_PARAM>)>();

  void X509_VERIFY_PARAM_set_time(
    ffi.Pointer<X509_VERIFY_PARAM> param,
    int t,
  ) {
    return _X509_VERIFY_PARAM_set_time(
      param,
      t,
    );
  }

  late final _X509_VERIFY_PARAM_set_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_VERIFY_PARAM>,
              time_t)>>('X509_VERIFY_PARAM_set_time');
  late final _X509_VERIFY_PARAM_set_time = _X509_VERIFY_PARAM_set_timePtr
      .asFunction<void Function(ffi.Pointer<X509_VERIFY_PARAM>, int)>();

  int X509_VERIFY_PARAM_add0_policy(
    ffi.Pointer<X509_VERIFY_PARAM> param,
    ffi.Pointer<ASN1_OBJECT> policy,
  ) {
    return _X509_VERIFY_PARAM_add0_policy(
      param,
      policy,
    );
  }

  late final _X509_VERIFY_PARAM_add0_policyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Pointer<ASN1_OBJECT>)>>('X509_VERIFY_PARAM_add0_policy');
  late final _X509_VERIFY_PARAM_add0_policy =
      _X509_VERIFY_PARAM_add0_policyPtr.asFunction<
          int Function(
              ffi.Pointer<X509_VERIFY_PARAM>, ffi.Pointer<ASN1_OBJECT>)>();

  int X509_VERIFY_PARAM_set1_policies(
    ffi.Pointer<X509_VERIFY_PARAM> param,
    ffi.Pointer<stack_st_ASN1_OBJECT> policies,
  ) {
    return _X509_VERIFY_PARAM_set1_policies(
      param,
      policies,
    );
  }

  late final _X509_VERIFY_PARAM_set1_policiesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<X509_VERIFY_PARAM>,
                  ffi.Pointer<stack_st_ASN1_OBJECT>)>>(
      'X509_VERIFY_PARAM_set1_policies');
  late final _X509_VERIFY_PARAM_set1_policies =
      _X509_VERIFY_PARAM_set1_policiesPtr.asFunction<
          int Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Pointer<stack_st_ASN1_OBJECT>)>();

  int X509_VERIFY_PARAM_set_inh_flags(
    ffi.Pointer<X509_VERIFY_PARAM> param,
    int flags,
  ) {
    return _X509_VERIFY_PARAM_set_inh_flags(
      param,
      flags,
    );
  }

  late final _X509_VERIFY_PARAM_set_inh_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Uint32)>>('X509_VERIFY_PARAM_set_inh_flags');
  late final _X509_VERIFY_PARAM_set_inh_flags =
      _X509_VERIFY_PARAM_set_inh_flagsPtr.asFunction<
          int Function(ffi.Pointer<X509_VERIFY_PARAM>, int)>();

  int X509_VERIFY_PARAM_get_inh_flags(
    ffi.Pointer<X509_VERIFY_PARAM> param,
  ) {
    return _X509_VERIFY_PARAM_get_inh_flags(
      param,
    );
  }

  late final _X509_VERIFY_PARAM_get_inh_flagsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint32 Function(ffi.Pointer<X509_VERIFY_PARAM>)>>(
      'X509_VERIFY_PARAM_get_inh_flags');
  late final _X509_VERIFY_PARAM_get_inh_flags =
      _X509_VERIFY_PARAM_get_inh_flagsPtr.asFunction<
          int Function(ffi.Pointer<X509_VERIFY_PARAM>)>();

  int X509_VERIFY_PARAM_set1_host(
    ffi.Pointer<X509_VERIFY_PARAM> param,
    ffi.Pointer<ffi.Char> name,
    int namelen,
  ) {
    return _X509_VERIFY_PARAM_set1_host(
      param,
      name,
      namelen,
    );
  }

  late final _X509_VERIFY_PARAM_set1_hostPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('X509_VERIFY_PARAM_set1_host');
  late final _X509_VERIFY_PARAM_set1_host =
      _X509_VERIFY_PARAM_set1_hostPtr.asFunction<
          int Function(
              ffi.Pointer<X509_VERIFY_PARAM>, ffi.Pointer<ffi.Char>, int)>();

  int X509_VERIFY_PARAM_add1_host(
    ffi.Pointer<X509_VERIFY_PARAM> param,
    ffi.Pointer<ffi.Char> name,
    int namelen,
  ) {
    return _X509_VERIFY_PARAM_add1_host(
      param,
      name,
      namelen,
    );
  }

  late final _X509_VERIFY_PARAM_add1_hostPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('X509_VERIFY_PARAM_add1_host');
  late final _X509_VERIFY_PARAM_add1_host =
      _X509_VERIFY_PARAM_add1_hostPtr.asFunction<
          int Function(
              ffi.Pointer<X509_VERIFY_PARAM>, ffi.Pointer<ffi.Char>, int)>();

  void X509_VERIFY_PARAM_set_hostflags(
    ffi.Pointer<X509_VERIFY_PARAM> param,
    int flags,
  ) {
    return _X509_VERIFY_PARAM_set_hostflags(
      param,
      flags,
    );
  }

  late final _X509_VERIFY_PARAM_set_hostflagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.UnsignedInt)>>('X509_VERIFY_PARAM_set_hostflags');
  late final _X509_VERIFY_PARAM_set_hostflags =
      _X509_VERIFY_PARAM_set_hostflagsPtr.asFunction<
          void Function(ffi.Pointer<X509_VERIFY_PARAM>, int)>();

  int X509_VERIFY_PARAM_get_hostflags(
    ffi.Pointer<X509_VERIFY_PARAM> param,
  ) {
    return _X509_VERIFY_PARAM_get_hostflags(
      param,
    );
  }

  late final _X509_VERIFY_PARAM_get_hostflagsPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<X509_VERIFY_PARAM>)>>(
      'X509_VERIFY_PARAM_get_hostflags');
  late final _X509_VERIFY_PARAM_get_hostflags =
      _X509_VERIFY_PARAM_get_hostflagsPtr.asFunction<
          int Function(ffi.Pointer<X509_VERIFY_PARAM>)>();

  ffi.Pointer<ffi.Char> X509_VERIFY_PARAM_get0_peername(
    ffi.Pointer<X509_VERIFY_PARAM> arg0,
  ) {
    return _X509_VERIFY_PARAM_get0_peername(
      arg0,
    );
  }

  late final _X509_VERIFY_PARAM_get0_peernamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<X509_VERIFY_PARAM>)>>(
      'X509_VERIFY_PARAM_get0_peername');
  late final _X509_VERIFY_PARAM_get0_peername =
      _X509_VERIFY_PARAM_get0_peernamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<X509_VERIFY_PARAM>)>();

  void X509_VERIFY_PARAM_move_peername(
    ffi.Pointer<X509_VERIFY_PARAM> arg0,
    ffi.Pointer<X509_VERIFY_PARAM> arg1,
  ) {
    return _X509_VERIFY_PARAM_move_peername(
      arg0,
      arg1,
    );
  }

  late final _X509_VERIFY_PARAM_move_peernamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<X509_VERIFY_PARAM>,
                  ffi.Pointer<X509_VERIFY_PARAM>)>>(
      'X509_VERIFY_PARAM_move_peername');
  late final _X509_VERIFY_PARAM_move_peername =
      _X509_VERIFY_PARAM_move_peernamePtr.asFunction<
          void Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Pointer<X509_VERIFY_PARAM>)>();

  int X509_VERIFY_PARAM_set1_email(
    ffi.Pointer<X509_VERIFY_PARAM> param,
    ffi.Pointer<ffi.Char> email,
    int emaillen,
  ) {
    return _X509_VERIFY_PARAM_set1_email(
      param,
      email,
      emaillen,
    );
  }

  late final _X509_VERIFY_PARAM_set1_emailPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('X509_VERIFY_PARAM_set1_email');
  late final _X509_VERIFY_PARAM_set1_email =
      _X509_VERIFY_PARAM_set1_emailPtr.asFunction<
          int Function(
              ffi.Pointer<X509_VERIFY_PARAM>, ffi.Pointer<ffi.Char>, int)>();

  int X509_VERIFY_PARAM_set1_ip(
    ffi.Pointer<X509_VERIFY_PARAM> param,
    ffi.Pointer<ffi.UnsignedChar> ip,
    int iplen,
  ) {
    return _X509_VERIFY_PARAM_set1_ip(
      param,
      ip,
      iplen,
    );
  }

  late final _X509_VERIFY_PARAM_set1_ipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('X509_VERIFY_PARAM_set1_ip');
  late final _X509_VERIFY_PARAM_set1_ip =
      _X509_VERIFY_PARAM_set1_ipPtr.asFunction<
          int Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int X509_VERIFY_PARAM_set1_ip_asc(
    ffi.Pointer<X509_VERIFY_PARAM> param,
    ffi.Pointer<ffi.Char> ipasc,
  ) {
    return _X509_VERIFY_PARAM_set1_ip_asc(
      param,
      ipasc,
    );
  }

  late final _X509_VERIFY_PARAM_set1_ip_ascPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_VERIFY_PARAM>,
              ffi.Pointer<ffi.Char>)>>('X509_VERIFY_PARAM_set1_ip_asc');
  late final _X509_VERIFY_PARAM_set1_ip_asc =
      _X509_VERIFY_PARAM_set1_ip_ascPtr.asFunction<
          int Function(
              ffi.Pointer<X509_VERIFY_PARAM>, ffi.Pointer<ffi.Char>)>();

  int X509_VERIFY_PARAM_get_depth(
    ffi.Pointer<X509_VERIFY_PARAM> param,
  ) {
    return _X509_VERIFY_PARAM_get_depth(
      param,
    );
  }

  late final _X509_VERIFY_PARAM_get_depthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_VERIFY_PARAM>)>>(
      'X509_VERIFY_PARAM_get_depth');
  late final _X509_VERIFY_PARAM_get_depth = _X509_VERIFY_PARAM_get_depthPtr
      .asFunction<int Function(ffi.Pointer<X509_VERIFY_PARAM>)>();

  int X509_VERIFY_PARAM_get_auth_level(
    ffi.Pointer<X509_VERIFY_PARAM> param,
  ) {
    return _X509_VERIFY_PARAM_get_auth_level(
      param,
    );
  }

  late final _X509_VERIFY_PARAM_get_auth_levelPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_VERIFY_PARAM>)>>(
      'X509_VERIFY_PARAM_get_auth_level');
  late final _X509_VERIFY_PARAM_get_auth_level =
      _X509_VERIFY_PARAM_get_auth_levelPtr.asFunction<
          int Function(ffi.Pointer<X509_VERIFY_PARAM>)>();

  ffi.Pointer<ffi.Char> X509_VERIFY_PARAM_get0_name(
    ffi.Pointer<X509_VERIFY_PARAM> param,
  ) {
    return _X509_VERIFY_PARAM_get0_name(
      param,
    );
  }

  late final _X509_VERIFY_PARAM_get0_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<X509_VERIFY_PARAM>)>>('X509_VERIFY_PARAM_get0_name');
  late final _X509_VERIFY_PARAM_get0_name =
      _X509_VERIFY_PARAM_get0_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<X509_VERIFY_PARAM>)>();

  int X509_VERIFY_PARAM_add0_table(
    ffi.Pointer<X509_VERIFY_PARAM> param,
  ) {
    return _X509_VERIFY_PARAM_add0_table(
      param,
    );
  }

  late final _X509_VERIFY_PARAM_add0_tablePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_VERIFY_PARAM>)>>(
      'X509_VERIFY_PARAM_add0_table');
  late final _X509_VERIFY_PARAM_add0_table = _X509_VERIFY_PARAM_add0_tablePtr
      .asFunction<int Function(ffi.Pointer<X509_VERIFY_PARAM>)>();

  int X509_VERIFY_PARAM_get_count() {
    return _X509_VERIFY_PARAM_get_count();
  }

  late final _X509_VERIFY_PARAM_get_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'X509_VERIFY_PARAM_get_count');
  late final _X509_VERIFY_PARAM_get_count =
      _X509_VERIFY_PARAM_get_countPtr.asFunction<int Function()>();

  ffi.Pointer<X509_VERIFY_PARAM> X509_VERIFY_PARAM_get0(
    int id,
  ) {
    return _X509_VERIFY_PARAM_get0(
      id,
    );
  }

  late final _X509_VERIFY_PARAM_get0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<X509_VERIFY_PARAM> Function(ffi.Int)>>(
      'X509_VERIFY_PARAM_get0');
  late final _X509_VERIFY_PARAM_get0 = _X509_VERIFY_PARAM_get0Ptr.asFunction<
      ffi.Pointer<X509_VERIFY_PARAM> Function(int)>();

  ffi.Pointer<X509_VERIFY_PARAM> X509_VERIFY_PARAM_lookup(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _X509_VERIFY_PARAM_lookup(
      name,
    );
  }

  late final _X509_VERIFY_PARAM_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_VERIFY_PARAM> Function(
              ffi.Pointer<ffi.Char>)>>('X509_VERIFY_PARAM_lookup');
  late final _X509_VERIFY_PARAM_lookup =
      _X509_VERIFY_PARAM_lookupPtr.asFunction<
          ffi.Pointer<X509_VERIFY_PARAM> Function(ffi.Pointer<ffi.Char>)>();

  void X509_VERIFY_PARAM_table_cleanup() {
    return _X509_VERIFY_PARAM_table_cleanup();
  }

  late final _X509_VERIFY_PARAM_table_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'X509_VERIFY_PARAM_table_cleanup');
  late final _X509_VERIFY_PARAM_table_cleanup =
      _X509_VERIFY_PARAM_table_cleanupPtr.asFunction<void Function()>();

  int X509_policy_check(
    ffi.Pointer<ffi.Pointer<X509_POLICY_TREE>> ptree,
    ffi.Pointer<ffi.Int> pexplicit_policy,
    ffi.Pointer<stack_st_X509> certs,
    ffi.Pointer<stack_st_ASN1_OBJECT> policy_oids,
    int flags,
  ) {
    return _X509_policy_check(
      ptree,
      pexplicit_policy,
      certs,
      policy_oids,
      flags,
    );
  }

  late final _X509_policy_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<X509_POLICY_TREE>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<stack_st_X509>,
              ffi.Pointer<stack_st_ASN1_OBJECT>,
              ffi.UnsignedInt)>>('X509_policy_check');
  late final _X509_policy_check = _X509_policy_checkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<X509_POLICY_TREE>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<stack_st_X509>,
          ffi.Pointer<stack_st_ASN1_OBJECT>,
          int)>();

  void X509_policy_tree_free(
    ffi.Pointer<X509_POLICY_TREE> tree,
  ) {
    return _X509_policy_tree_free(
      tree,
    );
  }

  late final _X509_policy_tree_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_POLICY_TREE>)>>(
      'X509_policy_tree_free');
  late final _X509_policy_tree_free = _X509_policy_tree_freePtr.asFunction<
      void Function(ffi.Pointer<X509_POLICY_TREE>)>();

  int X509_policy_tree_level_count(
    ffi.Pointer<X509_POLICY_TREE> tree,
  ) {
    return _X509_policy_tree_level_count(
      tree,
    );
  }

  late final _X509_policy_tree_level_countPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_POLICY_TREE>)>>(
      'X509_policy_tree_level_count');
  late final _X509_policy_tree_level_count = _X509_policy_tree_level_countPtr
      .asFunction<int Function(ffi.Pointer<X509_POLICY_TREE>)>();

  ffi.Pointer<X509_POLICY_LEVEL> X509_policy_tree_get0_level(
    ffi.Pointer<X509_POLICY_TREE> tree,
    int i,
  ) {
    return _X509_policy_tree_get0_level(
      tree,
      i,
    );
  }

  late final _X509_policy_tree_get0_levelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_POLICY_LEVEL> Function(ffi.Pointer<X509_POLICY_TREE>,
              ffi.Int)>>('X509_policy_tree_get0_level');
  late final _X509_policy_tree_get0_level =
      _X509_policy_tree_get0_levelPtr.asFunction<
          ffi.Pointer<X509_POLICY_LEVEL> Function(
              ffi.Pointer<X509_POLICY_TREE>, int)>();

  ffi.Pointer<stack_st_X509_POLICY_NODE> X509_policy_tree_get0_policies(
    ffi.Pointer<X509_POLICY_TREE> tree,
  ) {
    return _X509_policy_tree_get0_policies(
      tree,
    );
  }

  late final _X509_policy_tree_get0_policiesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<stack_st_X509_POLICY_NODE> Function(
                  ffi.Pointer<X509_POLICY_TREE>)>>(
      'X509_policy_tree_get0_policies');
  late final _X509_policy_tree_get0_policies =
      _X509_policy_tree_get0_policiesPtr.asFunction<
          ffi.Pointer<stack_st_X509_POLICY_NODE> Function(
              ffi.Pointer<X509_POLICY_TREE>)>();

  ffi.Pointer<stack_st_X509_POLICY_NODE> X509_policy_tree_get0_user_policies(
    ffi.Pointer<X509_POLICY_TREE> tree,
  ) {
    return _X509_policy_tree_get0_user_policies(
      tree,
    );
  }

  late final _X509_policy_tree_get0_user_policiesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<stack_st_X509_POLICY_NODE> Function(
                  ffi.Pointer<X509_POLICY_TREE>)>>(
      'X509_policy_tree_get0_user_policies');
  late final _X509_policy_tree_get0_user_policies =
      _X509_policy_tree_get0_user_policiesPtr.asFunction<
          ffi.Pointer<stack_st_X509_POLICY_NODE> Function(
              ffi.Pointer<X509_POLICY_TREE>)>();

  int X509_policy_level_node_count(
    ffi.Pointer<X509_POLICY_LEVEL> level,
  ) {
    return _X509_policy_level_node_count(
      level,
    );
  }

  late final _X509_policy_level_node_countPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_POLICY_LEVEL>)>>(
      'X509_policy_level_node_count');
  late final _X509_policy_level_node_count = _X509_policy_level_node_countPtr
      .asFunction<int Function(ffi.Pointer<X509_POLICY_LEVEL>)>();

  ffi.Pointer<X509_POLICY_NODE> X509_policy_level_get0_node(
    ffi.Pointer<X509_POLICY_LEVEL> level,
    int i,
  ) {
    return _X509_policy_level_get0_node(
      level,
      i,
    );
  }

  late final _X509_policy_level_get0_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_POLICY_NODE> Function(ffi.Pointer<X509_POLICY_LEVEL>,
              ffi.Int)>>('X509_policy_level_get0_node');
  late final _X509_policy_level_get0_node =
      _X509_policy_level_get0_nodePtr.asFunction<
          ffi.Pointer<X509_POLICY_NODE> Function(
              ffi.Pointer<X509_POLICY_LEVEL>, int)>();

  ffi.Pointer<ASN1_OBJECT> X509_policy_node_get0_policy(
    ffi.Pointer<X509_POLICY_NODE> node,
  ) {
    return _X509_policy_node_get0_policy(
      node,
    );
  }

  late final _X509_policy_node_get0_policyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(
              ffi.Pointer<X509_POLICY_NODE>)>>('X509_policy_node_get0_policy');
  late final _X509_policy_node_get0_policy =
      _X509_policy_node_get0_policyPtr.asFunction<
          ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<X509_POLICY_NODE>)>();

  ffi.Pointer<stack_st_POLICYQUALINFO> X509_policy_node_get0_qualifiers(
    ffi.Pointer<X509_POLICY_NODE> node,
  ) {
    return _X509_policy_node_get0_qualifiers(
      node,
    );
  }

  late final _X509_policy_node_get0_qualifiersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<stack_st_POLICYQUALINFO> Function(
                  ffi.Pointer<X509_POLICY_NODE>)>>(
      'X509_policy_node_get0_qualifiers');
  late final _X509_policy_node_get0_qualifiers =
      _X509_policy_node_get0_qualifiersPtr.asFunction<
          ffi.Pointer<stack_st_POLICYQUALINFO> Function(
              ffi.Pointer<X509_POLICY_NODE>)>();

  ffi.Pointer<X509_POLICY_NODE> X509_policy_node_get0_parent(
    ffi.Pointer<X509_POLICY_NODE> node,
  ) {
    return _X509_policy_node_get0_parent(
      node,
    );
  }

  late final _X509_policy_node_get0_parentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_POLICY_NODE> Function(
              ffi.Pointer<X509_POLICY_NODE>)>>('X509_policy_node_get0_parent');
  late final _X509_policy_node_get0_parent =
      _X509_policy_node_get0_parentPtr.asFunction<
          ffi.Pointer<X509_POLICY_NODE> Function(
              ffi.Pointer<X509_POLICY_NODE>)>();

  int ERR_load_PKCS7_strings() {
    return _ERR_load_PKCS7_strings();
  }

  late final _ERR_load_PKCS7_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_PKCS7_strings');
  late final _ERR_load_PKCS7_strings =
      _ERR_load_PKCS7_stringsPtr.asFunction<int Function()>();

  ffi.Pointer<PKCS7_ISSUER_AND_SERIAL> PKCS7_ISSUER_AND_SERIAL_new() {
    return _PKCS7_ISSUER_AND_SERIAL_new();
  }

  late final _PKCS7_ISSUER_AND_SERIAL_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<PKCS7_ISSUER_AND_SERIAL> Function()>>(
      'PKCS7_ISSUER_AND_SERIAL_new');
  late final _PKCS7_ISSUER_AND_SERIAL_new = _PKCS7_ISSUER_AND_SERIAL_newPtr
      .asFunction<ffi.Pointer<PKCS7_ISSUER_AND_SERIAL> Function()>();

  void PKCS7_ISSUER_AND_SERIAL_free(
    ffi.Pointer<PKCS7_ISSUER_AND_SERIAL> a,
  ) {
    return _PKCS7_ISSUER_AND_SERIAL_free(
      a,
    );
  }

  late final _PKCS7_ISSUER_AND_SERIAL_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<PKCS7_ISSUER_AND_SERIAL>)>>(
      'PKCS7_ISSUER_AND_SERIAL_free');
  late final _PKCS7_ISSUER_AND_SERIAL_free = _PKCS7_ISSUER_AND_SERIAL_freePtr
      .asFunction<void Function(ffi.Pointer<PKCS7_ISSUER_AND_SERIAL>)>();

  ffi.Pointer<PKCS7_ISSUER_AND_SERIAL> d2i_PKCS7_ISSUER_AND_SERIAL(
    ffi.Pointer<ffi.Pointer<PKCS7_ISSUER_AND_SERIAL>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_PKCS7_ISSUER_AND_SERIAL(
      a,
      in1,
      len,
    );
  }

  late final _d2i_PKCS7_ISSUER_AND_SERIALPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7_ISSUER_AND_SERIAL> Function(
              ffi.Pointer<ffi.Pointer<PKCS7_ISSUER_AND_SERIAL>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PKCS7_ISSUER_AND_SERIAL');
  late final _d2i_PKCS7_ISSUER_AND_SERIAL =
      _d2i_PKCS7_ISSUER_AND_SERIALPtr.asFunction<
          ffi.Pointer<PKCS7_ISSUER_AND_SERIAL> Function(
              ffi.Pointer<ffi.Pointer<PKCS7_ISSUER_AND_SERIAL>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              int)>();

  int i2d_PKCS7_ISSUER_AND_SERIAL(
    ffi.Pointer<PKCS7_ISSUER_AND_SERIAL> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_PKCS7_ISSUER_AND_SERIAL(
      a,
      out,
    );
  }

  late final _i2d_PKCS7_ISSUER_AND_SERIALPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<PKCS7_ISSUER_AND_SERIAL>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_PKCS7_ISSUER_AND_SERIAL');
  late final _i2d_PKCS7_ISSUER_AND_SERIAL =
      _i2d_PKCS7_ISSUER_AND_SERIALPtr.asFunction<
          int Function(ffi.Pointer<PKCS7_ISSUER_AND_SERIAL>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _PKCS7_ISSUER_AND_SERIAL_it =
      _lookup<ASN1_ITEM>('PKCS7_ISSUER_AND_SERIAL_it');

  ffi.Pointer<ASN1_ITEM> get PKCS7_ISSUER_AND_SERIAL_it =>
      _PKCS7_ISSUER_AND_SERIAL_it;

  int PKCS7_ISSUER_AND_SERIAL_digest(
    ffi.Pointer<PKCS7_ISSUER_AND_SERIAL> data,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> len,
  ) {
    return _PKCS7_ISSUER_AND_SERIAL_digest(
      data,
      type,
      md,
      len,
    );
  }

  late final _PKCS7_ISSUER_AND_SERIAL_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PKCS7_ISSUER_AND_SERIAL>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>)>>('PKCS7_ISSUER_AND_SERIAL_digest');
  late final _PKCS7_ISSUER_AND_SERIAL_digest =
      _PKCS7_ISSUER_AND_SERIAL_digestPtr.asFunction<
          int Function(
              ffi.Pointer<PKCS7_ISSUER_AND_SERIAL>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<PKCS7> d2i_PKCS7_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<PKCS7>> p7,
  ) {
    return _d2i_PKCS7_fp(
      fp,
      p7,
    );
  }

  late final _d2i_PKCS7_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7> Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<PKCS7>>)>>('d2i_PKCS7_fp');
  late final _d2i_PKCS7_fp = _d2i_PKCS7_fpPtr.asFunction<
      ffi.Pointer<PKCS7> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Pointer<PKCS7>>)>();

  int i2d_PKCS7_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<PKCS7> p7,
  ) {
    return _i2d_PKCS7_fp(
      fp,
      p7,
    );
  }

  late final _i2d_PKCS7_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<PKCS7>)>>('i2d_PKCS7_fp');
  late final _i2d_PKCS7_fp = _i2d_PKCS7_fpPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<PKCS7>)>();

  ffi.Pointer<PKCS7> PKCS7_dup(
    ffi.Pointer<PKCS7> p7,
  ) {
    return _PKCS7_dup(
      p7,
    );
  }

  late final _PKCS7_dupPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<PKCS7> Function(ffi.Pointer<PKCS7>)>>(
      'PKCS7_dup');
  late final _PKCS7_dup = _PKCS7_dupPtr.asFunction<
      ffi.Pointer<PKCS7> Function(ffi.Pointer<PKCS7>)>();

  ffi.Pointer<PKCS7> d2i_PKCS7_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<PKCS7>> p7,
  ) {
    return _d2i_PKCS7_bio(
      bp,
      p7,
    );
  }

  late final _d2i_PKCS7_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7> Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<PKCS7>>)>>('d2i_PKCS7_bio');
  late final _d2i_PKCS7_bio = _d2i_PKCS7_bioPtr.asFunction<
      ffi.Pointer<PKCS7> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<PKCS7>>)>();

  int i2d_PKCS7_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<PKCS7> p7,
  ) {
    return _i2d_PKCS7_bio(
      bp,
      p7,
    );
  }

  late final _i2d_PKCS7_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<PKCS7>)>>('i2d_PKCS7_bio');
  late final _i2d_PKCS7_bio = _i2d_PKCS7_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<PKCS7>)>();

  int i2d_PKCS7_bio_stream(
    ffi.Pointer<BIO> out,
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<BIO> in1,
    int flags,
  ) {
    return _i2d_PKCS7_bio_stream(
      out,
      p7,
      in1,
      flags,
    );
  }

  late final _i2d_PKCS7_bio_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<PKCS7>,
              ffi.Pointer<BIO>, ffi.Int)>>('i2d_PKCS7_bio_stream');
  late final _i2d_PKCS7_bio_stream = _i2d_PKCS7_bio_streamPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<PKCS7>, ffi.Pointer<BIO>, int)>();

  int PEM_write_bio_PKCS7_stream(
    ffi.Pointer<BIO> out,
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<BIO> in1,
    int flags,
  ) {
    return _PEM_write_bio_PKCS7_stream(
      out,
      p7,
      in1,
      flags,
    );
  }

  late final _PEM_write_bio_PKCS7_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<PKCS7>,
              ffi.Pointer<BIO>, ffi.Int)>>('PEM_write_bio_PKCS7_stream');
  late final _PEM_write_bio_PKCS7_stream =
      _PEM_write_bio_PKCS7_streamPtr.asFunction<
          int Function(
              ffi.Pointer<BIO>, ffi.Pointer<PKCS7>, ffi.Pointer<BIO>, int)>();

  ffi.Pointer<PKCS7_SIGNER_INFO> PKCS7_SIGNER_INFO_new() {
    return _PKCS7_SIGNER_INFO_new();
  }

  late final _PKCS7_SIGNER_INFO_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PKCS7_SIGNER_INFO> Function()>>(
          'PKCS7_SIGNER_INFO_new');
  late final _PKCS7_SIGNER_INFO_new = _PKCS7_SIGNER_INFO_newPtr.asFunction<
      ffi.Pointer<PKCS7_SIGNER_INFO> Function()>();

  void PKCS7_SIGNER_INFO_free(
    ffi.Pointer<PKCS7_SIGNER_INFO> a,
  ) {
    return _PKCS7_SIGNER_INFO_free(
      a,
    );
  }

  late final _PKCS7_SIGNER_INFO_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PKCS7_SIGNER_INFO>)>>('PKCS7_SIGNER_INFO_free');
  late final _PKCS7_SIGNER_INFO_free = _PKCS7_SIGNER_INFO_freePtr.asFunction<
      void Function(ffi.Pointer<PKCS7_SIGNER_INFO>)>();

  ffi.Pointer<PKCS7_SIGNER_INFO> d2i_PKCS7_SIGNER_INFO(
    ffi.Pointer<ffi.Pointer<PKCS7_SIGNER_INFO>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_PKCS7_SIGNER_INFO(
      a,
      in1,
      len,
    );
  }

  late final _d2i_PKCS7_SIGNER_INFOPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7_SIGNER_INFO> Function(
              ffi.Pointer<ffi.Pointer<PKCS7_SIGNER_INFO>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PKCS7_SIGNER_INFO');
  late final _d2i_PKCS7_SIGNER_INFO = _d2i_PKCS7_SIGNER_INFOPtr.asFunction<
      ffi.Pointer<PKCS7_SIGNER_INFO> Function(
          ffi.Pointer<ffi.Pointer<PKCS7_SIGNER_INFO>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_PKCS7_SIGNER_INFO(
    ffi.Pointer<PKCS7_SIGNER_INFO> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_PKCS7_SIGNER_INFO(
      a,
      out,
    );
  }

  late final _i2d_PKCS7_SIGNER_INFOPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<PKCS7_SIGNER_INFO>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_PKCS7_SIGNER_INFO');
  late final _i2d_PKCS7_SIGNER_INFO = _i2d_PKCS7_SIGNER_INFOPtr.asFunction<
      int Function(ffi.Pointer<PKCS7_SIGNER_INFO>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _PKCS7_SIGNER_INFO_it =
      _lookup<ASN1_ITEM>('PKCS7_SIGNER_INFO_it');

  ffi.Pointer<ASN1_ITEM> get PKCS7_SIGNER_INFO_it => _PKCS7_SIGNER_INFO_it;

  ffi.Pointer<PKCS7_RECIP_INFO> PKCS7_RECIP_INFO_new() {
    return _PKCS7_RECIP_INFO_new();
  }

  late final _PKCS7_RECIP_INFO_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PKCS7_RECIP_INFO> Function()>>(
          'PKCS7_RECIP_INFO_new');
  late final _PKCS7_RECIP_INFO_new = _PKCS7_RECIP_INFO_newPtr.asFunction<
      ffi.Pointer<PKCS7_RECIP_INFO> Function()>();

  void PKCS7_RECIP_INFO_free(
    ffi.Pointer<PKCS7_RECIP_INFO> a,
  ) {
    return _PKCS7_RECIP_INFO_free(
      a,
    );
  }

  late final _PKCS7_RECIP_INFO_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PKCS7_RECIP_INFO>)>>(
      'PKCS7_RECIP_INFO_free');
  late final _PKCS7_RECIP_INFO_free = _PKCS7_RECIP_INFO_freePtr.asFunction<
      void Function(ffi.Pointer<PKCS7_RECIP_INFO>)>();

  ffi.Pointer<PKCS7_RECIP_INFO> d2i_PKCS7_RECIP_INFO(
    ffi.Pointer<ffi.Pointer<PKCS7_RECIP_INFO>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_PKCS7_RECIP_INFO(
      a,
      in1,
      len,
    );
  }

  late final _d2i_PKCS7_RECIP_INFOPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7_RECIP_INFO> Function(
              ffi.Pointer<ffi.Pointer<PKCS7_RECIP_INFO>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PKCS7_RECIP_INFO');
  late final _d2i_PKCS7_RECIP_INFO = _d2i_PKCS7_RECIP_INFOPtr.asFunction<
      ffi.Pointer<PKCS7_RECIP_INFO> Function(
          ffi.Pointer<ffi.Pointer<PKCS7_RECIP_INFO>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_PKCS7_RECIP_INFO(
    ffi.Pointer<PKCS7_RECIP_INFO> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_PKCS7_RECIP_INFO(
      a,
      out,
    );
  }

  late final _i2d_PKCS7_RECIP_INFOPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<PKCS7_RECIP_INFO>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_PKCS7_RECIP_INFO');
  late final _i2d_PKCS7_RECIP_INFO = _i2d_PKCS7_RECIP_INFOPtr.asFunction<
      int Function(ffi.Pointer<PKCS7_RECIP_INFO>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _PKCS7_RECIP_INFO_it =
      _lookup<ASN1_ITEM>('PKCS7_RECIP_INFO_it');

  ffi.Pointer<ASN1_ITEM> get PKCS7_RECIP_INFO_it => _PKCS7_RECIP_INFO_it;

  ffi.Pointer<PKCS7_SIGNED> PKCS7_SIGNED_new() {
    return _PKCS7_SIGNED_new();
  }

  late final _PKCS7_SIGNED_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PKCS7_SIGNED> Function()>>(
          'PKCS7_SIGNED_new');
  late final _PKCS7_SIGNED_new =
      _PKCS7_SIGNED_newPtr.asFunction<ffi.Pointer<PKCS7_SIGNED> Function()>();

  void PKCS7_SIGNED_free(
    ffi.Pointer<PKCS7_SIGNED> a,
  ) {
    return _PKCS7_SIGNED_free(
      a,
    );
  }

  late final _PKCS7_SIGNED_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PKCS7_SIGNED>)>>(
          'PKCS7_SIGNED_free');
  late final _PKCS7_SIGNED_free = _PKCS7_SIGNED_freePtr.asFunction<
      void Function(ffi.Pointer<PKCS7_SIGNED>)>();

  ffi.Pointer<PKCS7_SIGNED> d2i_PKCS7_SIGNED(
    ffi.Pointer<ffi.Pointer<PKCS7_SIGNED>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_PKCS7_SIGNED(
      a,
      in1,
      len,
    );
  }

  late final _d2i_PKCS7_SIGNEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7_SIGNED> Function(
              ffi.Pointer<ffi.Pointer<PKCS7_SIGNED>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PKCS7_SIGNED');
  late final _d2i_PKCS7_SIGNED = _d2i_PKCS7_SIGNEDPtr.asFunction<
      ffi.Pointer<PKCS7_SIGNED> Function(ffi.Pointer<ffi.Pointer<PKCS7_SIGNED>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_PKCS7_SIGNED(
    ffi.Pointer<PKCS7_SIGNED> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_PKCS7_SIGNED(
      a,
      out,
    );
  }

  late final _i2d_PKCS7_SIGNEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PKCS7_SIGNED>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_PKCS7_SIGNED');
  late final _i2d_PKCS7_SIGNED = _i2d_PKCS7_SIGNEDPtr.asFunction<
      int Function(ffi.Pointer<PKCS7_SIGNED>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _PKCS7_SIGNED_it =
      _lookup<ASN1_ITEM>('PKCS7_SIGNED_it');

  ffi.Pointer<ASN1_ITEM> get PKCS7_SIGNED_it => _PKCS7_SIGNED_it;

  ffi.Pointer<PKCS7_ENC_CONTENT> PKCS7_ENC_CONTENT_new() {
    return _PKCS7_ENC_CONTENT_new();
  }

  late final _PKCS7_ENC_CONTENT_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PKCS7_ENC_CONTENT> Function()>>(
          'PKCS7_ENC_CONTENT_new');
  late final _PKCS7_ENC_CONTENT_new = _PKCS7_ENC_CONTENT_newPtr.asFunction<
      ffi.Pointer<PKCS7_ENC_CONTENT> Function()>();

  void PKCS7_ENC_CONTENT_free(
    ffi.Pointer<PKCS7_ENC_CONTENT> a,
  ) {
    return _PKCS7_ENC_CONTENT_free(
      a,
    );
  }

  late final _PKCS7_ENC_CONTENT_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PKCS7_ENC_CONTENT>)>>('PKCS7_ENC_CONTENT_free');
  late final _PKCS7_ENC_CONTENT_free = _PKCS7_ENC_CONTENT_freePtr.asFunction<
      void Function(ffi.Pointer<PKCS7_ENC_CONTENT>)>();

  ffi.Pointer<PKCS7_ENC_CONTENT> d2i_PKCS7_ENC_CONTENT(
    ffi.Pointer<ffi.Pointer<PKCS7_ENC_CONTENT>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_PKCS7_ENC_CONTENT(
      a,
      in1,
      len,
    );
  }

  late final _d2i_PKCS7_ENC_CONTENTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7_ENC_CONTENT> Function(
              ffi.Pointer<ffi.Pointer<PKCS7_ENC_CONTENT>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PKCS7_ENC_CONTENT');
  late final _d2i_PKCS7_ENC_CONTENT = _d2i_PKCS7_ENC_CONTENTPtr.asFunction<
      ffi.Pointer<PKCS7_ENC_CONTENT> Function(
          ffi.Pointer<ffi.Pointer<PKCS7_ENC_CONTENT>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_PKCS7_ENC_CONTENT(
    ffi.Pointer<PKCS7_ENC_CONTENT> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_PKCS7_ENC_CONTENT(
      a,
      out,
    );
  }

  late final _i2d_PKCS7_ENC_CONTENTPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<PKCS7_ENC_CONTENT>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_PKCS7_ENC_CONTENT');
  late final _i2d_PKCS7_ENC_CONTENT = _i2d_PKCS7_ENC_CONTENTPtr.asFunction<
      int Function(ffi.Pointer<PKCS7_ENC_CONTENT>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _PKCS7_ENC_CONTENT_it =
      _lookup<ASN1_ITEM>('PKCS7_ENC_CONTENT_it');

  ffi.Pointer<ASN1_ITEM> get PKCS7_ENC_CONTENT_it => _PKCS7_ENC_CONTENT_it;

  ffi.Pointer<PKCS7_ENVELOPE> PKCS7_ENVELOPE_new() {
    return _PKCS7_ENVELOPE_new();
  }

  late final _PKCS7_ENVELOPE_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PKCS7_ENVELOPE> Function()>>(
          'PKCS7_ENVELOPE_new');
  late final _PKCS7_ENVELOPE_new = _PKCS7_ENVELOPE_newPtr.asFunction<
      ffi.Pointer<PKCS7_ENVELOPE> Function()>();

  void PKCS7_ENVELOPE_free(
    ffi.Pointer<PKCS7_ENVELOPE> a,
  ) {
    return _PKCS7_ENVELOPE_free(
      a,
    );
  }

  late final _PKCS7_ENVELOPE_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PKCS7_ENVELOPE>)>>(
      'PKCS7_ENVELOPE_free');
  late final _PKCS7_ENVELOPE_free = _PKCS7_ENVELOPE_freePtr.asFunction<
      void Function(ffi.Pointer<PKCS7_ENVELOPE>)>();

  ffi.Pointer<PKCS7_ENVELOPE> d2i_PKCS7_ENVELOPE(
    ffi.Pointer<ffi.Pointer<PKCS7_ENVELOPE>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_PKCS7_ENVELOPE(
      a,
      in1,
      len,
    );
  }

  late final _d2i_PKCS7_ENVELOPEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7_ENVELOPE> Function(
              ffi.Pointer<ffi.Pointer<PKCS7_ENVELOPE>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PKCS7_ENVELOPE');
  late final _d2i_PKCS7_ENVELOPE = _d2i_PKCS7_ENVELOPEPtr.asFunction<
      ffi.Pointer<PKCS7_ENVELOPE> Function(
          ffi.Pointer<ffi.Pointer<PKCS7_ENVELOPE>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_PKCS7_ENVELOPE(
    ffi.Pointer<PKCS7_ENVELOPE> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_PKCS7_ENVELOPE(
      a,
      out,
    );
  }

  late final _i2d_PKCS7_ENVELOPEPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<PKCS7_ENVELOPE>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_PKCS7_ENVELOPE');
  late final _i2d_PKCS7_ENVELOPE = _i2d_PKCS7_ENVELOPEPtr.asFunction<
      int Function(ffi.Pointer<PKCS7_ENVELOPE>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _PKCS7_ENVELOPE_it =
      _lookup<ASN1_ITEM>('PKCS7_ENVELOPE_it');

  ffi.Pointer<ASN1_ITEM> get PKCS7_ENVELOPE_it => _PKCS7_ENVELOPE_it;

  ffi.Pointer<PKCS7_SIGN_ENVELOPE> PKCS7_SIGN_ENVELOPE_new() {
    return _PKCS7_SIGN_ENVELOPE_new();
  }

  late final _PKCS7_SIGN_ENVELOPE_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PKCS7_SIGN_ENVELOPE> Function()>>(
          'PKCS7_SIGN_ENVELOPE_new');
  late final _PKCS7_SIGN_ENVELOPE_new = _PKCS7_SIGN_ENVELOPE_newPtr.asFunction<
      ffi.Pointer<PKCS7_SIGN_ENVELOPE> Function()>();

  void PKCS7_SIGN_ENVELOPE_free(
    ffi.Pointer<PKCS7_SIGN_ENVELOPE> a,
  ) {
    return _PKCS7_SIGN_ENVELOPE_free(
      a,
    );
  }

  late final _PKCS7_SIGN_ENVELOPE_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PKCS7_SIGN_ENVELOPE>)>>('PKCS7_SIGN_ENVELOPE_free');
  late final _PKCS7_SIGN_ENVELOPE_free = _PKCS7_SIGN_ENVELOPE_freePtr
      .asFunction<void Function(ffi.Pointer<PKCS7_SIGN_ENVELOPE>)>();

  ffi.Pointer<PKCS7_SIGN_ENVELOPE> d2i_PKCS7_SIGN_ENVELOPE(
    ffi.Pointer<ffi.Pointer<PKCS7_SIGN_ENVELOPE>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_PKCS7_SIGN_ENVELOPE(
      a,
      in1,
      len,
    );
  }

  late final _d2i_PKCS7_SIGN_ENVELOPEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7_SIGN_ENVELOPE> Function(
              ffi.Pointer<ffi.Pointer<PKCS7_SIGN_ENVELOPE>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PKCS7_SIGN_ENVELOPE');
  late final _d2i_PKCS7_SIGN_ENVELOPE = _d2i_PKCS7_SIGN_ENVELOPEPtr.asFunction<
      ffi.Pointer<PKCS7_SIGN_ENVELOPE> Function(
          ffi.Pointer<ffi.Pointer<PKCS7_SIGN_ENVELOPE>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_PKCS7_SIGN_ENVELOPE(
    ffi.Pointer<PKCS7_SIGN_ENVELOPE> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_PKCS7_SIGN_ENVELOPE(
      a,
      out,
    );
  }

  late final _i2d_PKCS7_SIGN_ENVELOPEPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<PKCS7_SIGN_ENVELOPE>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_PKCS7_SIGN_ENVELOPE');
  late final _i2d_PKCS7_SIGN_ENVELOPE = _i2d_PKCS7_SIGN_ENVELOPEPtr.asFunction<
      int Function(ffi.Pointer<PKCS7_SIGN_ENVELOPE>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _PKCS7_SIGN_ENVELOPE_it =
      _lookup<ASN1_ITEM>('PKCS7_SIGN_ENVELOPE_it');

  ffi.Pointer<ASN1_ITEM> get PKCS7_SIGN_ENVELOPE_it => _PKCS7_SIGN_ENVELOPE_it;

  ffi.Pointer<PKCS7_DIGEST> PKCS7_DIGEST_new() {
    return _PKCS7_DIGEST_new();
  }

  late final _PKCS7_DIGEST_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PKCS7_DIGEST> Function()>>(
          'PKCS7_DIGEST_new');
  late final _PKCS7_DIGEST_new =
      _PKCS7_DIGEST_newPtr.asFunction<ffi.Pointer<PKCS7_DIGEST> Function()>();

  void PKCS7_DIGEST_free(
    ffi.Pointer<PKCS7_DIGEST> a,
  ) {
    return _PKCS7_DIGEST_free(
      a,
    );
  }

  late final _PKCS7_DIGEST_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PKCS7_DIGEST>)>>(
          'PKCS7_DIGEST_free');
  late final _PKCS7_DIGEST_free = _PKCS7_DIGEST_freePtr.asFunction<
      void Function(ffi.Pointer<PKCS7_DIGEST>)>();

  ffi.Pointer<PKCS7_DIGEST> d2i_PKCS7_DIGEST(
    ffi.Pointer<ffi.Pointer<PKCS7_DIGEST>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_PKCS7_DIGEST(
      a,
      in1,
      len,
    );
  }

  late final _d2i_PKCS7_DIGESTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7_DIGEST> Function(
              ffi.Pointer<ffi.Pointer<PKCS7_DIGEST>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PKCS7_DIGEST');
  late final _d2i_PKCS7_DIGEST = _d2i_PKCS7_DIGESTPtr.asFunction<
      ffi.Pointer<PKCS7_DIGEST> Function(ffi.Pointer<ffi.Pointer<PKCS7_DIGEST>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_PKCS7_DIGEST(
    ffi.Pointer<PKCS7_DIGEST> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_PKCS7_DIGEST(
      a,
      out,
    );
  }

  late final _i2d_PKCS7_DIGESTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PKCS7_DIGEST>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_PKCS7_DIGEST');
  late final _i2d_PKCS7_DIGEST = _i2d_PKCS7_DIGESTPtr.asFunction<
      int Function(ffi.Pointer<PKCS7_DIGEST>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _PKCS7_DIGEST_it =
      _lookup<ASN1_ITEM>('PKCS7_DIGEST_it');

  ffi.Pointer<ASN1_ITEM> get PKCS7_DIGEST_it => _PKCS7_DIGEST_it;

  ffi.Pointer<PKCS7_ENCRYPT> PKCS7_ENCRYPT_new() {
    return _PKCS7_ENCRYPT_new();
  }

  late final _PKCS7_ENCRYPT_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PKCS7_ENCRYPT> Function()>>(
          'PKCS7_ENCRYPT_new');
  late final _PKCS7_ENCRYPT_new =
      _PKCS7_ENCRYPT_newPtr.asFunction<ffi.Pointer<PKCS7_ENCRYPT> Function()>();

  void PKCS7_ENCRYPT_free(
    ffi.Pointer<PKCS7_ENCRYPT> a,
  ) {
    return _PKCS7_ENCRYPT_free(
      a,
    );
  }

  late final _PKCS7_ENCRYPT_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PKCS7_ENCRYPT>)>>(
      'PKCS7_ENCRYPT_free');
  late final _PKCS7_ENCRYPT_free = _PKCS7_ENCRYPT_freePtr.asFunction<
      void Function(ffi.Pointer<PKCS7_ENCRYPT>)>();

  ffi.Pointer<PKCS7_ENCRYPT> d2i_PKCS7_ENCRYPT(
    ffi.Pointer<ffi.Pointer<PKCS7_ENCRYPT>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_PKCS7_ENCRYPT(
      a,
      in1,
      len,
    );
  }

  late final _d2i_PKCS7_ENCRYPTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7_ENCRYPT> Function(
              ffi.Pointer<ffi.Pointer<PKCS7_ENCRYPT>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PKCS7_ENCRYPT');
  late final _d2i_PKCS7_ENCRYPT = _d2i_PKCS7_ENCRYPTPtr.asFunction<
      ffi.Pointer<PKCS7_ENCRYPT> Function(
          ffi.Pointer<ffi.Pointer<PKCS7_ENCRYPT>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_PKCS7_ENCRYPT(
    ffi.Pointer<PKCS7_ENCRYPT> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_PKCS7_ENCRYPT(
      a,
      out,
    );
  }

  late final _i2d_PKCS7_ENCRYPTPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<PKCS7_ENCRYPT>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_PKCS7_ENCRYPT');
  late final _i2d_PKCS7_ENCRYPT = _i2d_PKCS7_ENCRYPTPtr.asFunction<
      int Function(ffi.Pointer<PKCS7_ENCRYPT>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _PKCS7_ENCRYPT_it =
      _lookup<ASN1_ITEM>('PKCS7_ENCRYPT_it');

  ffi.Pointer<ASN1_ITEM> get PKCS7_ENCRYPT_it => _PKCS7_ENCRYPT_it;

  ffi.Pointer<PKCS7> PKCS7_new() {
    return _PKCS7_new();
  }

  late final _PKCS7_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PKCS7> Function()>>('PKCS7_new');
  late final _PKCS7_new =
      _PKCS7_newPtr.asFunction<ffi.Pointer<PKCS7> Function()>();

  void PKCS7_free(
    ffi.Pointer<PKCS7> a,
  ) {
    return _PKCS7_free(
      a,
    );
  }

  late final _PKCS7_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PKCS7>)>>(
          'PKCS7_free');
  late final _PKCS7_free =
      _PKCS7_freePtr.asFunction<void Function(ffi.Pointer<PKCS7>)>();

  ffi.Pointer<PKCS7> d2i_PKCS7(
    ffi.Pointer<ffi.Pointer<PKCS7>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_PKCS7(
      a,
      in1,
      len,
    );
  }

  late final _d2i_PKCS7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7> Function(
              ffi.Pointer<ffi.Pointer<PKCS7>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PKCS7');
  late final _d2i_PKCS7 = _d2i_PKCS7Ptr.asFunction<
      ffi.Pointer<PKCS7> Function(ffi.Pointer<ffi.Pointer<PKCS7>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_PKCS7(
    ffi.Pointer<PKCS7> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_PKCS7(
      a,
      out,
    );
  }

  late final _i2d_PKCS7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PKCS7>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_PKCS7');
  late final _i2d_PKCS7 = _i2d_PKCS7Ptr.asFunction<
      int Function(
          ffi.Pointer<PKCS7>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _PKCS7_it = _lookup<ASN1_ITEM>('PKCS7_it');

  ffi.Pointer<ASN1_ITEM> get PKCS7_it => _PKCS7_it;

  late final ffi.Pointer<ASN1_ITEM> _PKCS7_ATTR_SIGN_it =
      _lookup<ASN1_ITEM>('PKCS7_ATTR_SIGN_it');

  ffi.Pointer<ASN1_ITEM> get PKCS7_ATTR_SIGN_it => _PKCS7_ATTR_SIGN_it;

  late final ffi.Pointer<ASN1_ITEM> _PKCS7_ATTR_VERIFY_it =
      _lookup<ASN1_ITEM>('PKCS7_ATTR_VERIFY_it');

  ffi.Pointer<ASN1_ITEM> get PKCS7_ATTR_VERIFY_it => _PKCS7_ATTR_VERIFY_it;

  int i2d_PKCS7_NDEF(
    ffi.Pointer<PKCS7> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_PKCS7_NDEF(
      a,
      out,
    );
  }

  late final _i2d_PKCS7_NDEFPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PKCS7>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_PKCS7_NDEF');
  late final _i2d_PKCS7_NDEF = _i2d_PKCS7_NDEFPtr.asFunction<
      int Function(
          ffi.Pointer<PKCS7>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int PKCS7_print_ctx(
    ffi.Pointer<BIO> out,
    ffi.Pointer<PKCS7> x,
    int indent,
    ffi.Pointer<ASN1_PCTX> pctx,
  ) {
    return _PKCS7_print_ctx(
      out,
      x,
      indent,
      pctx,
    );
  }

  late final _PKCS7_print_ctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<PKCS7>, ffi.Int,
              ffi.Pointer<ASN1_PCTX>)>>('PKCS7_print_ctx');
  late final _PKCS7_print_ctx = _PKCS7_print_ctxPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<PKCS7>, int, ffi.Pointer<ASN1_PCTX>)>();

  int PKCS7_ctrl(
    ffi.Pointer<PKCS7> p7,
    int cmd,
    int larg,
    ffi.Pointer<ffi.Char> parg,
  ) {
    return _PKCS7_ctrl(
      p7,
      cmd,
      larg,
      parg,
    );
  }

  late final _PKCS7_ctrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<PKCS7>, ffi.Int, ffi.Long,
              ffi.Pointer<ffi.Char>)>>('PKCS7_ctrl');
  late final _PKCS7_ctrl = _PKCS7_ctrlPtr.asFunction<
      int Function(ffi.Pointer<PKCS7>, int, int, ffi.Pointer<ffi.Char>)>();

  int PKCS7_set_type(
    ffi.Pointer<PKCS7> p7,
    int type,
  ) {
    return _PKCS7_set_type(
      p7,
      type,
    );
  }

  late final _PKCS7_set_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PKCS7>, ffi.Int)>>(
      'PKCS7_set_type');
  late final _PKCS7_set_type =
      _PKCS7_set_typePtr.asFunction<int Function(ffi.Pointer<PKCS7>, int)>();

  int PKCS7_set0_type_other(
    ffi.Pointer<PKCS7> p7,
    int type,
    ffi.Pointer<ASN1_TYPE> other,
  ) {
    return _PKCS7_set0_type_other(
      p7,
      type,
      other,
    );
  }

  late final _PKCS7_set0_type_otherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PKCS7>, ffi.Int,
              ffi.Pointer<ASN1_TYPE>)>>('PKCS7_set0_type_other');
  late final _PKCS7_set0_type_other = _PKCS7_set0_type_otherPtr.asFunction<
      int Function(ffi.Pointer<PKCS7>, int, ffi.Pointer<ASN1_TYPE>)>();

  int PKCS7_set_content(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<PKCS7> p7_data,
  ) {
    return _PKCS7_set_content(
      p7,
      p7_data,
    );
  }

  late final _PKCS7_set_contentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PKCS7>, ffi.Pointer<PKCS7>)>>('PKCS7_set_content');
  late final _PKCS7_set_content = _PKCS7_set_contentPtr.asFunction<
      int Function(ffi.Pointer<PKCS7>, ffi.Pointer<PKCS7>)>();

  int PKCS7_SIGNER_INFO_set(
    ffi.Pointer<PKCS7_SIGNER_INFO> p7i,
    ffi.Pointer<X509> x509,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<EVP_MD> dgst,
  ) {
    return _PKCS7_SIGNER_INFO_set(
      p7i,
      x509,
      pkey,
      dgst,
    );
  }

  late final _PKCS7_SIGNER_INFO_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PKCS7_SIGNER_INFO>,
              ffi.Pointer<X509>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_MD>)>>('PKCS7_SIGNER_INFO_set');
  late final _PKCS7_SIGNER_INFO_set = _PKCS7_SIGNER_INFO_setPtr.asFunction<
      int Function(ffi.Pointer<PKCS7_SIGNER_INFO>, ffi.Pointer<X509>,
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_MD>)>();

  int PKCS7_SIGNER_INFO_sign(
    ffi.Pointer<PKCS7_SIGNER_INFO> si,
  ) {
    return _PKCS7_SIGNER_INFO_sign(
      si,
    );
  }

  late final _PKCS7_SIGNER_INFO_signPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PKCS7_SIGNER_INFO>)>>(
      'PKCS7_SIGNER_INFO_sign');
  late final _PKCS7_SIGNER_INFO_sign = _PKCS7_SIGNER_INFO_signPtr.asFunction<
      int Function(ffi.Pointer<PKCS7_SIGNER_INFO>)>();

  int PKCS7_add_signer(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<PKCS7_SIGNER_INFO> p7i,
  ) {
    return _PKCS7_add_signer(
      p7,
      p7i,
    );
  }

  late final _PKCS7_add_signerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PKCS7>,
              ffi.Pointer<PKCS7_SIGNER_INFO>)>>('PKCS7_add_signer');
  late final _PKCS7_add_signer = _PKCS7_add_signerPtr.asFunction<
      int Function(ffi.Pointer<PKCS7>, ffi.Pointer<PKCS7_SIGNER_INFO>)>();

  int PKCS7_add_certificate(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<X509> x509,
  ) {
    return _PKCS7_add_certificate(
      p7,
      x509,
    );
  }

  late final _PKCS7_add_certificatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PKCS7>, ffi.Pointer<X509>)>>('PKCS7_add_certificate');
  late final _PKCS7_add_certificate = _PKCS7_add_certificatePtr.asFunction<
      int Function(ffi.Pointer<PKCS7>, ffi.Pointer<X509>)>();

  int PKCS7_add_crl(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<X509_CRL> x509,
  ) {
    return _PKCS7_add_crl(
      p7,
      x509,
    );
  }

  late final _PKCS7_add_crlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PKCS7>, ffi.Pointer<X509_CRL>)>>('PKCS7_add_crl');
  late final _PKCS7_add_crl = _PKCS7_add_crlPtr.asFunction<
      int Function(ffi.Pointer<PKCS7>, ffi.Pointer<X509_CRL>)>();

  int PKCS7_content_new(
    ffi.Pointer<PKCS7> p7,
    int nid,
  ) {
    return _PKCS7_content_new(
      p7,
      nid,
    );
  }

  late final _PKCS7_content_newPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PKCS7>, ffi.Int)>>(
      'PKCS7_content_new');
  late final _PKCS7_content_new =
      _PKCS7_content_newPtr.asFunction<int Function(ffi.Pointer<PKCS7>, int)>();

  int PKCS7_dataVerify(
    ffi.Pointer<X509_STORE> cert_store,
    ffi.Pointer<X509_STORE_CTX> ctx,
    ffi.Pointer<BIO> bio,
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<PKCS7_SIGNER_INFO> si,
  ) {
    return _PKCS7_dataVerify(
      cert_store,
      ctx,
      bio,
      p7,
      si,
    );
  }

  late final _PKCS7_dataVerifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_STORE>,
              ffi.Pointer<X509_STORE_CTX>,
              ffi.Pointer<BIO>,
              ffi.Pointer<PKCS7>,
              ffi.Pointer<PKCS7_SIGNER_INFO>)>>('PKCS7_dataVerify');
  late final _PKCS7_dataVerify = _PKCS7_dataVerifyPtr.asFunction<
      int Function(
          ffi.Pointer<X509_STORE>,
          ffi.Pointer<X509_STORE_CTX>,
          ffi.Pointer<BIO>,
          ffi.Pointer<PKCS7>,
          ffi.Pointer<PKCS7_SIGNER_INFO>)>();

  int PKCS7_signatureVerify(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<PKCS7_SIGNER_INFO> si,
    ffi.Pointer<X509> x509,
  ) {
    return _PKCS7_signatureVerify(
      bio,
      p7,
      si,
      x509,
    );
  }

  late final _PKCS7_signatureVerifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<PKCS7>,
              ffi.Pointer<PKCS7_SIGNER_INFO>,
              ffi.Pointer<X509>)>>('PKCS7_signatureVerify');
  late final _PKCS7_signatureVerify = _PKCS7_signatureVerifyPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<PKCS7>,
          ffi.Pointer<PKCS7_SIGNER_INFO>, ffi.Pointer<X509>)>();

  ffi.Pointer<BIO> PKCS7_dataInit(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<BIO> bio,
  ) {
    return _PKCS7_dataInit(
      p7,
      bio,
    );
  }

  late final _PKCS7_dataInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
              ffi.Pointer<PKCS7>, ffi.Pointer<BIO>)>>('PKCS7_dataInit');
  late final _PKCS7_dataInit = _PKCS7_dataInitPtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<PKCS7>, ffi.Pointer<BIO>)>();

  int PKCS7_dataFinal(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<BIO> bio,
  ) {
    return _PKCS7_dataFinal(
      p7,
      bio,
    );
  }

  late final _PKCS7_dataFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PKCS7>, ffi.Pointer<BIO>)>>('PKCS7_dataFinal');
  late final _PKCS7_dataFinal = _PKCS7_dataFinalPtr.asFunction<
      int Function(ffi.Pointer<PKCS7>, ffi.Pointer<BIO>)>();

  ffi.Pointer<BIO> PKCS7_dataDecode(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<BIO> in_bio,
    ffi.Pointer<X509> pcert,
  ) {
    return _PKCS7_dataDecode(
      p7,
      pkey,
      in_bio,
      pcert,
    );
  }

  late final _PKCS7_dataDecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(ffi.Pointer<PKCS7>, ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<BIO>, ffi.Pointer<X509>)>>('PKCS7_dataDecode');
  late final _PKCS7_dataDecode = _PKCS7_dataDecodePtr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<PKCS7>, ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<BIO>, ffi.Pointer<X509>)>();

  ffi.Pointer<PKCS7_SIGNER_INFO> PKCS7_add_signature(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<X509> x509,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<EVP_MD> dgst,
  ) {
    return _PKCS7_add_signature(
      p7,
      x509,
      pkey,
      dgst,
    );
  }

  late final _PKCS7_add_signaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7_SIGNER_INFO> Function(
              ffi.Pointer<PKCS7>,
              ffi.Pointer<X509>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_MD>)>>('PKCS7_add_signature');
  late final _PKCS7_add_signature = _PKCS7_add_signaturePtr.asFunction<
      ffi.Pointer<PKCS7_SIGNER_INFO> Function(ffi.Pointer<PKCS7>,
          ffi.Pointer<X509>, ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<X509> PKCS7_cert_from_signer_info(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<PKCS7_SIGNER_INFO> si,
  ) {
    return _PKCS7_cert_from_signer_info(
      p7,
      si,
    );
  }

  late final _PKCS7_cert_from_signer_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509> Function(ffi.Pointer<PKCS7>,
              ffi.Pointer<PKCS7_SIGNER_INFO>)>>('PKCS7_cert_from_signer_info');
  late final _PKCS7_cert_from_signer_info =
      _PKCS7_cert_from_signer_infoPtr.asFunction<
          ffi.Pointer<X509> Function(
              ffi.Pointer<PKCS7>, ffi.Pointer<PKCS7_SIGNER_INFO>)>();

  int PKCS7_set_digest(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _PKCS7_set_digest(
      p7,
      md,
    );
  }

  late final _PKCS7_set_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PKCS7>, ffi.Pointer<EVP_MD>)>>('PKCS7_set_digest');
  late final _PKCS7_set_digest = _PKCS7_set_digestPtr.asFunction<
      int Function(ffi.Pointer<PKCS7>, ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<stack_st_PKCS7_SIGNER_INFO> PKCS7_get_signer_info(
    ffi.Pointer<PKCS7> p7,
  ) {
    return _PKCS7_get_signer_info(
      p7,
    );
  }

  late final _PKCS7_get_signer_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_PKCS7_SIGNER_INFO> Function(
              ffi.Pointer<PKCS7>)>>('PKCS7_get_signer_info');
  late final _PKCS7_get_signer_info = _PKCS7_get_signer_infoPtr.asFunction<
      ffi.Pointer<stack_st_PKCS7_SIGNER_INFO> Function(ffi.Pointer<PKCS7>)>();

  ffi.Pointer<PKCS7_RECIP_INFO> PKCS7_add_recipient(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<X509> x509,
  ) {
    return _PKCS7_add_recipient(
      p7,
      x509,
    );
  }

  late final _PKCS7_add_recipientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7_RECIP_INFO> Function(
              ffi.Pointer<PKCS7>, ffi.Pointer<X509>)>>('PKCS7_add_recipient');
  late final _PKCS7_add_recipient = _PKCS7_add_recipientPtr.asFunction<
      ffi.Pointer<PKCS7_RECIP_INFO> Function(
          ffi.Pointer<PKCS7>, ffi.Pointer<X509>)>();

  void PKCS7_SIGNER_INFO_get0_algs(
    ffi.Pointer<PKCS7_SIGNER_INFO> si,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> pk,
    ffi.Pointer<ffi.Pointer<X509_ALGOR>> pdig,
    ffi.Pointer<ffi.Pointer<X509_ALGOR>> psig,
  ) {
    return _PKCS7_SIGNER_INFO_get0_algs(
      si,
      pk,
      pdig,
      psig,
    );
  }

  late final _PKCS7_SIGNER_INFO_get0_algsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<PKCS7_SIGNER_INFO>,
                  ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
                  ffi.Pointer<ffi.Pointer<X509_ALGOR>>,
                  ffi.Pointer<ffi.Pointer<X509_ALGOR>>)>>(
      'PKCS7_SIGNER_INFO_get0_algs');
  late final _PKCS7_SIGNER_INFO_get0_algs =
      _PKCS7_SIGNER_INFO_get0_algsPtr.asFunction<
          void Function(
              ffi.Pointer<PKCS7_SIGNER_INFO>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<ffi.Pointer<X509_ALGOR>>,
              ffi.Pointer<ffi.Pointer<X509_ALGOR>>)>();

  void PKCS7_RECIP_INFO_get0_alg(
    ffi.Pointer<PKCS7_RECIP_INFO> ri,
    ffi.Pointer<ffi.Pointer<X509_ALGOR>> penc,
  ) {
    return _PKCS7_RECIP_INFO_get0_alg(
      ri,
      penc,
    );
  }

  late final _PKCS7_RECIP_INFO_get0_algPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<PKCS7_RECIP_INFO>,
                  ffi.Pointer<ffi.Pointer<X509_ALGOR>>)>>(
      'PKCS7_RECIP_INFO_get0_alg');
  late final _PKCS7_RECIP_INFO_get0_alg =
      _PKCS7_RECIP_INFO_get0_algPtr.asFunction<
          void Function(ffi.Pointer<PKCS7_RECIP_INFO>,
              ffi.Pointer<ffi.Pointer<X509_ALGOR>>)>();

  int PKCS7_add_recipient_info(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<PKCS7_RECIP_INFO> ri,
  ) {
    return _PKCS7_add_recipient_info(
      p7,
      ri,
    );
  }

  late final _PKCS7_add_recipient_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PKCS7>,
              ffi.Pointer<PKCS7_RECIP_INFO>)>>('PKCS7_add_recipient_info');
  late final _PKCS7_add_recipient_info =
      _PKCS7_add_recipient_infoPtr.asFunction<
          int Function(ffi.Pointer<PKCS7>, ffi.Pointer<PKCS7_RECIP_INFO>)>();

  int PKCS7_RECIP_INFO_set(
    ffi.Pointer<PKCS7_RECIP_INFO> p7i,
    ffi.Pointer<X509> x509,
  ) {
    return _PKCS7_RECIP_INFO_set(
      p7i,
      x509,
    );
  }

  late final _PKCS7_RECIP_INFO_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PKCS7_RECIP_INFO>,
              ffi.Pointer<X509>)>>('PKCS7_RECIP_INFO_set');
  late final _PKCS7_RECIP_INFO_set = _PKCS7_RECIP_INFO_setPtr.asFunction<
      int Function(ffi.Pointer<PKCS7_RECIP_INFO>, ffi.Pointer<X509>)>();

  int PKCS7_set_cipher(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<EVP_CIPHER> cipher,
  ) {
    return _PKCS7_set_cipher(
      p7,
      cipher,
    );
  }

  late final _PKCS7_set_cipherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PKCS7>,
              ffi.Pointer<EVP_CIPHER>)>>('PKCS7_set_cipher');
  late final _PKCS7_set_cipher = _PKCS7_set_cipherPtr.asFunction<
      int Function(ffi.Pointer<PKCS7>, ffi.Pointer<EVP_CIPHER>)>();

  int PKCS7_stream(
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>> boundary,
    ffi.Pointer<PKCS7> p7,
  ) {
    return _PKCS7_stream(
      boundary,
      p7,
    );
  }

  late final _PKCS7_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>>,
              ffi.Pointer<PKCS7>)>>('PKCS7_stream');
  late final _PKCS7_stream = _PKCS7_streamPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>>,
          ffi.Pointer<PKCS7>)>();

  ffi.Pointer<PKCS7_ISSUER_AND_SERIAL> PKCS7_get_issuer_and_serial(
    ffi.Pointer<PKCS7> p7,
    int idx,
  ) {
    return _PKCS7_get_issuer_and_serial(
      p7,
      idx,
    );
  }

  late final _PKCS7_get_issuer_and_serialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7_ISSUER_AND_SERIAL> Function(
              ffi.Pointer<PKCS7>, ffi.Int)>>('PKCS7_get_issuer_and_serial');
  late final _PKCS7_get_issuer_and_serial =
      _PKCS7_get_issuer_and_serialPtr.asFunction<
          ffi.Pointer<PKCS7_ISSUER_AND_SERIAL> Function(
              ffi.Pointer<PKCS7>, int)>();

  ffi.Pointer<ASN1_OCTET_STRING> PKCS7_digest_from_attributes(
    ffi.Pointer<stack_st_X509_ATTRIBUTE> sk,
  ) {
    return _PKCS7_digest_from_attributes(
      sk,
    );
  }

  late final _PKCS7_digest_from_attributesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ASN1_OCTET_STRING> Function(
                  ffi.Pointer<stack_st_X509_ATTRIBUTE>)>>(
      'PKCS7_digest_from_attributes');
  late final _PKCS7_digest_from_attributes =
      _PKCS7_digest_from_attributesPtr.asFunction<
          ffi.Pointer<ASN1_OCTET_STRING> Function(
              ffi.Pointer<stack_st_X509_ATTRIBUTE>)>();

  int PKCS7_add_signed_attribute(
    ffi.Pointer<PKCS7_SIGNER_INFO> p7si,
    int nid,
    int type,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _PKCS7_add_signed_attribute(
      p7si,
      nid,
      type,
      data,
    );
  }

  late final _PKCS7_add_signed_attributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PKCS7_SIGNER_INFO>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('PKCS7_add_signed_attribute');
  late final _PKCS7_add_signed_attribute =
      _PKCS7_add_signed_attributePtr.asFunction<
          int Function(ffi.Pointer<PKCS7_SIGNER_INFO>, int, int,
              ffi.Pointer<ffi.Void>)>();

  int PKCS7_add_attribute(
    ffi.Pointer<PKCS7_SIGNER_INFO> p7si,
    int nid,
    int atrtype,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _PKCS7_add_attribute(
      p7si,
      nid,
      atrtype,
      value,
    );
  }

  late final _PKCS7_add_attributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PKCS7_SIGNER_INFO>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('PKCS7_add_attribute');
  late final _PKCS7_add_attribute = _PKCS7_add_attributePtr.asFunction<
      int Function(
          ffi.Pointer<PKCS7_SIGNER_INFO>, int, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ASN1_TYPE> PKCS7_get_attribute(
    ffi.Pointer<PKCS7_SIGNER_INFO> si,
    int nid,
  ) {
    return _PKCS7_get_attribute(
      si,
      nid,
    );
  }

  late final _PKCS7_get_attributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TYPE> Function(
              ffi.Pointer<PKCS7_SIGNER_INFO>, ffi.Int)>>('PKCS7_get_attribute');
  late final _PKCS7_get_attribute = _PKCS7_get_attributePtr.asFunction<
      ffi.Pointer<ASN1_TYPE> Function(ffi.Pointer<PKCS7_SIGNER_INFO>, int)>();

  ffi.Pointer<ASN1_TYPE> PKCS7_get_signed_attribute(
    ffi.Pointer<PKCS7_SIGNER_INFO> si,
    int nid,
  ) {
    return _PKCS7_get_signed_attribute(
      si,
      nid,
    );
  }

  late final _PKCS7_get_signed_attributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TYPE> Function(ffi.Pointer<PKCS7_SIGNER_INFO>,
              ffi.Int)>>('PKCS7_get_signed_attribute');
  late final _PKCS7_get_signed_attribute =
      _PKCS7_get_signed_attributePtr.asFunction<
          ffi.Pointer<ASN1_TYPE> Function(
              ffi.Pointer<PKCS7_SIGNER_INFO>, int)>();

  int PKCS7_set_signed_attributes(
    ffi.Pointer<PKCS7_SIGNER_INFO> p7si,
    ffi.Pointer<stack_st_X509_ATTRIBUTE> sk,
  ) {
    return _PKCS7_set_signed_attributes(
      p7si,
      sk,
    );
  }

  late final _PKCS7_set_signed_attributesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<PKCS7_SIGNER_INFO>,
                  ffi.Pointer<stack_st_X509_ATTRIBUTE>)>>(
      'PKCS7_set_signed_attributes');
  late final _PKCS7_set_signed_attributes =
      _PKCS7_set_signed_attributesPtr.asFunction<
          int Function(ffi.Pointer<PKCS7_SIGNER_INFO>,
              ffi.Pointer<stack_st_X509_ATTRIBUTE>)>();

  int PKCS7_set_attributes(
    ffi.Pointer<PKCS7_SIGNER_INFO> p7si,
    ffi.Pointer<stack_st_X509_ATTRIBUTE> sk,
  ) {
    return _PKCS7_set_attributes(
      p7si,
      sk,
    );
  }

  late final _PKCS7_set_attributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PKCS7_SIGNER_INFO>,
              ffi.Pointer<stack_st_X509_ATTRIBUTE>)>>('PKCS7_set_attributes');
  late final _PKCS7_set_attributes = _PKCS7_set_attributesPtr.asFunction<
      int Function(ffi.Pointer<PKCS7_SIGNER_INFO>,
          ffi.Pointer<stack_st_X509_ATTRIBUTE>)>();

  ffi.Pointer<PKCS7> PKCS7_sign(
    ffi.Pointer<X509> signcert,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<stack_st_X509> certs,
    ffi.Pointer<BIO> data,
    int flags,
  ) {
    return _PKCS7_sign(
      signcert,
      pkey,
      certs,
      data,
      flags,
    );
  }

  late final _PKCS7_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7> Function(
              ffi.Pointer<X509>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<stack_st_X509>,
              ffi.Pointer<BIO>,
              ffi.Int)>>('PKCS7_sign');
  late final _PKCS7_sign = _PKCS7_signPtr.asFunction<
      ffi.Pointer<PKCS7> Function(ffi.Pointer<X509>, ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<stack_st_X509>, ffi.Pointer<BIO>, int)>();

  ffi.Pointer<PKCS7_SIGNER_INFO> PKCS7_sign_add_signer(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<X509> signcert,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<EVP_MD> md,
    int flags,
  ) {
    return _PKCS7_sign_add_signer(
      p7,
      signcert,
      pkey,
      md,
      flags,
    );
  }

  late final _PKCS7_sign_add_signerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7_SIGNER_INFO> Function(
              ffi.Pointer<PKCS7>,
              ffi.Pointer<X509>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_MD>,
              ffi.Int)>>('PKCS7_sign_add_signer');
  late final _PKCS7_sign_add_signer = _PKCS7_sign_add_signerPtr.asFunction<
      ffi.Pointer<PKCS7_SIGNER_INFO> Function(
          ffi.Pointer<PKCS7>,
          ffi.Pointer<X509>,
          ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<EVP_MD>,
          int)>();

  int PKCS7_final(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<BIO> data,
    int flags,
  ) {
    return _PKCS7_final(
      p7,
      data,
      flags,
    );
  }

  late final _PKCS7_finalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PKCS7>, ffi.Pointer<BIO>, ffi.Int)>>('PKCS7_final');
  late final _PKCS7_final = _PKCS7_finalPtr.asFunction<
      int Function(ffi.Pointer<PKCS7>, ffi.Pointer<BIO>, int)>();

  int PKCS7_verify(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<stack_st_X509> certs,
    ffi.Pointer<X509_STORE> store,
    ffi.Pointer<BIO> indata,
    ffi.Pointer<BIO> out,
    int flags,
  ) {
    return _PKCS7_verify(
      p7,
      certs,
      store,
      indata,
      out,
      flags,
    );
  }

  late final _PKCS7_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PKCS7>,
              ffi.Pointer<stack_st_X509>,
              ffi.Pointer<X509_STORE>,
              ffi.Pointer<BIO>,
              ffi.Pointer<BIO>,
              ffi.Int)>>('PKCS7_verify');
  late final _PKCS7_verify = _PKCS7_verifyPtr.asFunction<
      int Function(ffi.Pointer<PKCS7>, ffi.Pointer<stack_st_X509>,
          ffi.Pointer<X509_STORE>, ffi.Pointer<BIO>, ffi.Pointer<BIO>, int)>();

  ffi.Pointer<stack_st_X509> PKCS7_get0_signers(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<stack_st_X509> certs,
    int flags,
  ) {
    return _PKCS7_get0_signers(
      p7,
      certs,
      flags,
    );
  }

  late final _PKCS7_get0_signersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509> Function(ffi.Pointer<PKCS7>,
              ffi.Pointer<stack_st_X509>, ffi.Int)>>('PKCS7_get0_signers');
  late final _PKCS7_get0_signers = _PKCS7_get0_signersPtr.asFunction<
      ffi.Pointer<stack_st_X509> Function(
          ffi.Pointer<PKCS7>, ffi.Pointer<stack_st_X509>, int)>();

  ffi.Pointer<PKCS7> PKCS7_encrypt(
    ffi.Pointer<stack_st_X509> certs,
    ffi.Pointer<BIO> in1,
    ffi.Pointer<EVP_CIPHER> cipher,
    int flags,
  ) {
    return _PKCS7_encrypt(
      certs,
      in1,
      cipher,
      flags,
    );
  }

  late final _PKCS7_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7> Function(
              ffi.Pointer<stack_st_X509>,
              ffi.Pointer<BIO>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Int)>>('PKCS7_encrypt');
  late final _PKCS7_encrypt = _PKCS7_encryptPtr.asFunction<
      ffi.Pointer<PKCS7> Function(ffi.Pointer<stack_st_X509>, ffi.Pointer<BIO>,
          ffi.Pointer<EVP_CIPHER>, int)>();

  int PKCS7_decrypt(
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<X509> cert,
    ffi.Pointer<BIO> data,
    int flags,
  ) {
    return _PKCS7_decrypt(
      p7,
      pkey,
      cert,
      data,
      flags,
    );
  }

  late final _PKCS7_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PKCS7>, ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<X509>, ffi.Pointer<BIO>, ffi.Int)>>('PKCS7_decrypt');
  late final _PKCS7_decrypt = _PKCS7_decryptPtr.asFunction<
      int Function(ffi.Pointer<PKCS7>, ffi.Pointer<EVP_PKEY>, ffi.Pointer<X509>,
          ffi.Pointer<BIO>, int)>();

  int PKCS7_add_attrib_smimecap(
    ffi.Pointer<PKCS7_SIGNER_INFO> si,
    ffi.Pointer<stack_st_X509_ALGOR> cap,
  ) {
    return _PKCS7_add_attrib_smimecap(
      si,
      cap,
    );
  }

  late final _PKCS7_add_attrib_smimecapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PKCS7_SIGNER_INFO>,
              ffi.Pointer<stack_st_X509_ALGOR>)>>('PKCS7_add_attrib_smimecap');
  late final _PKCS7_add_attrib_smimecap =
      _PKCS7_add_attrib_smimecapPtr.asFunction<
          int Function(ffi.Pointer<PKCS7_SIGNER_INFO>,
              ffi.Pointer<stack_st_X509_ALGOR>)>();

  ffi.Pointer<stack_st_X509_ALGOR> PKCS7_get_smimecap(
    ffi.Pointer<PKCS7_SIGNER_INFO> si,
  ) {
    return _PKCS7_get_smimecap(
      si,
    );
  }

  late final _PKCS7_get_smimecapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509_ALGOR> Function(
              ffi.Pointer<PKCS7_SIGNER_INFO>)>>('PKCS7_get_smimecap');
  late final _PKCS7_get_smimecap = _PKCS7_get_smimecapPtr.asFunction<
      ffi.Pointer<stack_st_X509_ALGOR> Function(
          ffi.Pointer<PKCS7_SIGNER_INFO>)>();

  int PKCS7_simple_smimecap(
    ffi.Pointer<stack_st_X509_ALGOR> sk,
    int nid,
    int arg,
  ) {
    return _PKCS7_simple_smimecap(
      sk,
      nid,
      arg,
    );
  }

  late final _PKCS7_simple_smimecapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<stack_st_X509_ALGOR>, ffi.Int,
              ffi.Int)>>('PKCS7_simple_smimecap');
  late final _PKCS7_simple_smimecap = _PKCS7_simple_smimecapPtr.asFunction<
      int Function(ffi.Pointer<stack_st_X509_ALGOR>, int, int)>();

  int PKCS7_add_attrib_content_type(
    ffi.Pointer<PKCS7_SIGNER_INFO> si,
    ffi.Pointer<ASN1_OBJECT> coid,
  ) {
    return _PKCS7_add_attrib_content_type(
      si,
      coid,
    );
  }

  late final _PKCS7_add_attrib_content_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PKCS7_SIGNER_INFO>,
              ffi.Pointer<ASN1_OBJECT>)>>('PKCS7_add_attrib_content_type');
  late final _PKCS7_add_attrib_content_type =
      _PKCS7_add_attrib_content_typePtr.asFunction<
          int Function(
              ffi.Pointer<PKCS7_SIGNER_INFO>, ffi.Pointer<ASN1_OBJECT>)>();

  int PKCS7_add0_attrib_signing_time(
    ffi.Pointer<PKCS7_SIGNER_INFO> si,
    ffi.Pointer<ASN1_TIME> t,
  ) {
    return _PKCS7_add0_attrib_signing_time(
      si,
      t,
    );
  }

  late final _PKCS7_add0_attrib_signing_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PKCS7_SIGNER_INFO>,
              ffi.Pointer<ASN1_TIME>)>>('PKCS7_add0_attrib_signing_time');
  late final _PKCS7_add0_attrib_signing_time =
      _PKCS7_add0_attrib_signing_timePtr.asFunction<
          int Function(
              ffi.Pointer<PKCS7_SIGNER_INFO>, ffi.Pointer<ASN1_TIME>)>();

  int PKCS7_add1_attrib_digest(
    ffi.Pointer<PKCS7_SIGNER_INFO> si,
    ffi.Pointer<ffi.UnsignedChar> md,
    int mdlen,
  ) {
    return _PKCS7_add1_attrib_digest(
      si,
      md,
      mdlen,
    );
  }

  late final _PKCS7_add1_attrib_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PKCS7_SIGNER_INFO>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('PKCS7_add1_attrib_digest');
  late final _PKCS7_add1_attrib_digest =
      _PKCS7_add1_attrib_digestPtr.asFunction<
          int Function(ffi.Pointer<PKCS7_SIGNER_INFO>,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int SMIME_write_PKCS7(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<PKCS7> p7,
    ffi.Pointer<BIO> data,
    int flags,
  ) {
    return _SMIME_write_PKCS7(
      bio,
      p7,
      data,
      flags,
    );
  }

  late final _SMIME_write_PKCS7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<PKCS7>,
              ffi.Pointer<BIO>, ffi.Int)>>('SMIME_write_PKCS7');
  late final _SMIME_write_PKCS7 = _SMIME_write_PKCS7Ptr.asFunction<
      int Function(
          ffi.Pointer<BIO>, ffi.Pointer<PKCS7>, ffi.Pointer<BIO>, int)>();

  ffi.Pointer<PKCS7> SMIME_read_PKCS7(
    ffi.Pointer<BIO> bio,
    ffi.Pointer<ffi.Pointer<BIO>> bcont,
  ) {
    return _SMIME_read_PKCS7(
      bio,
      bcont,
    );
  }

  late final _SMIME_read_PKCS7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7> Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<BIO>>)>>('SMIME_read_PKCS7');
  late final _SMIME_read_PKCS7 = _SMIME_read_PKCS7Ptr.asFunction<
      ffi.Pointer<PKCS7> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<BIO>>)>();

  ffi.Pointer<BIO> BIO_new_PKCS7(
    ffi.Pointer<BIO> out,
    ffi.Pointer<PKCS7> p7,
  ) {
    return _BIO_new_PKCS7(
      out,
      p7,
    );
  }

  late final _BIO_new_PKCS7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<BIO> Function(
              ffi.Pointer<BIO>, ffi.Pointer<PKCS7>)>>('BIO_new_PKCS7');
  late final _BIO_new_PKCS7 = _BIO_new_PKCS7Ptr.asFunction<
      ffi.Pointer<BIO> Function(ffi.Pointer<BIO>, ffi.Pointer<PKCS7>)>();

  void X509_CRL_set_default_method(
    ffi.Pointer<X509_CRL_METHOD> meth,
  ) {
    return _X509_CRL_set_default_method(
      meth,
    );
  }

  late final _X509_CRL_set_default_methodPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_CRL_METHOD>)>>(
      'X509_CRL_set_default_method');
  late final _X509_CRL_set_default_method = _X509_CRL_set_default_methodPtr
      .asFunction<void Function(ffi.Pointer<X509_CRL_METHOD>)>();

  ffi.Pointer<X509_CRL_METHOD> X509_CRL_METHOD_new(
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_CRL>)>>
        crl_init,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_CRL>)>>
        crl_free,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<X509_CRL>,
                    ffi.Pointer<ffi.Pointer<X509_REVOKED>>,
                    ffi.Pointer<ASN1_INTEGER>,
                    ffi.Pointer<X509_NAME>)>>
        crl_lookup,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<X509_CRL>, ffi.Pointer<EVP_PKEY>)>>
        crl_verify,
  ) {
    return _X509_CRL_METHOD_new(
      crl_init,
      crl_free,
      crl_lookup,
      crl_verify,
    );
  }

  late final _X509_CRL_METHOD_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_CRL_METHOD> Function(
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_CRL>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_CRL>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<X509_CRL>,
                          ffi.Pointer<ffi.Pointer<X509_REVOKED>>,
                          ffi.Pointer<ASN1_INTEGER>,
                          ffi.Pointer<X509_NAME>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<X509_CRL>,
                          ffi.Pointer<EVP_PKEY>)>>)>>('X509_CRL_METHOD_new');
  late final _X509_CRL_METHOD_new = _X509_CRL_METHOD_newPtr.asFunction<
      ffi.Pointer<X509_CRL_METHOD> Function(
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_CRL>)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_CRL>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<X509_CRL>,
                      ffi.Pointer<ffi.Pointer<X509_REVOKED>>,
                      ffi.Pointer<ASN1_INTEGER>,
                      ffi.Pointer<X509_NAME>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<X509_CRL>, ffi.Pointer<EVP_PKEY>)>>)>();

  void X509_CRL_METHOD_free(
    ffi.Pointer<X509_CRL_METHOD> m,
  ) {
    return _X509_CRL_METHOD_free(
      m,
    );
  }

  late final _X509_CRL_METHOD_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_CRL_METHOD>)>>(
      'X509_CRL_METHOD_free');
  late final _X509_CRL_METHOD_free = _X509_CRL_METHOD_freePtr.asFunction<
      void Function(ffi.Pointer<X509_CRL_METHOD>)>();

  void X509_CRL_set_meth_data(
    ffi.Pointer<X509_CRL> crl,
    ffi.Pointer<ffi.Void> dat,
  ) {
    return _X509_CRL_set_meth_data(
      crl,
      dat,
    );
  }

  late final _X509_CRL_set_meth_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_CRL>,
              ffi.Pointer<ffi.Void>)>>('X509_CRL_set_meth_data');
  late final _X509_CRL_set_meth_data = _X509_CRL_set_meth_dataPtr.asFunction<
      void Function(ffi.Pointer<X509_CRL>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> X509_CRL_get_meth_data(
    ffi.Pointer<X509_CRL> crl,
  ) {
    return _X509_CRL_get_meth_data(
      crl,
    );
  }

  late final _X509_CRL_get_meth_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<X509_CRL>)>>('X509_CRL_get_meth_data');
  late final _X509_CRL_get_meth_data = _X509_CRL_get_meth_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<X509_CRL>)>();

  ffi.Pointer<ffi.Char> X509_verify_cert_error_string(
    int n,
  ) {
    return _X509_verify_cert_error_string(
      n,
    );
  }

  late final _X509_verify_cert_error_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'X509_verify_cert_error_string');
  late final _X509_verify_cert_error_string = _X509_verify_cert_error_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int X509_verify(
    ffi.Pointer<X509> a,
    ffi.Pointer<EVP_PKEY> r,
  ) {
    return _X509_verify(
      a,
      r,
    );
  }

  late final _X509_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509>, ffi.Pointer<EVP_PKEY>)>>('X509_verify');
  late final _X509_verify = _X509_verifyPtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<EVP_PKEY>)>();

  int X509_REQ_verify(
    ffi.Pointer<X509_REQ> a,
    ffi.Pointer<EVP_PKEY> r,
  ) {
    return _X509_REQ_verify(
      a,
      r,
    );
  }

  late final _X509_REQ_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REQ>,
              ffi.Pointer<EVP_PKEY>)>>('X509_REQ_verify');
  late final _X509_REQ_verify = _X509_REQ_verifyPtr.asFunction<
      int Function(ffi.Pointer<X509_REQ>, ffi.Pointer<EVP_PKEY>)>();

  int X509_CRL_verify(
    ffi.Pointer<X509_CRL> a,
    ffi.Pointer<EVP_PKEY> r,
  ) {
    return _X509_CRL_verify(
      a,
      r,
    );
  }

  late final _X509_CRL_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_CRL>,
              ffi.Pointer<EVP_PKEY>)>>('X509_CRL_verify');
  late final _X509_CRL_verify = _X509_CRL_verifyPtr.asFunction<
      int Function(ffi.Pointer<X509_CRL>, ffi.Pointer<EVP_PKEY>)>();

  int NETSCAPE_SPKI_verify(
    ffi.Pointer<NETSCAPE_SPKI> a,
    ffi.Pointer<EVP_PKEY> r,
  ) {
    return _NETSCAPE_SPKI_verify(
      a,
      r,
    );
  }

  late final _NETSCAPE_SPKI_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<NETSCAPE_SPKI>,
              ffi.Pointer<EVP_PKEY>)>>('NETSCAPE_SPKI_verify');
  late final _NETSCAPE_SPKI_verify = _NETSCAPE_SPKI_verifyPtr.asFunction<
      int Function(ffi.Pointer<NETSCAPE_SPKI>, ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<NETSCAPE_SPKI> NETSCAPE_SPKI_b64_decode(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _NETSCAPE_SPKI_b64_decode(
      str,
      len,
    );
  }

  late final _NETSCAPE_SPKI_b64_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NETSCAPE_SPKI> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('NETSCAPE_SPKI_b64_decode');
  late final _NETSCAPE_SPKI_b64_decode =
      _NETSCAPE_SPKI_b64_decodePtr.asFunction<
          ffi.Pointer<NETSCAPE_SPKI> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> NETSCAPE_SPKI_b64_encode(
    ffi.Pointer<NETSCAPE_SPKI> x,
  ) {
    return _NETSCAPE_SPKI_b64_encode(
      x,
    );
  }

  late final _NETSCAPE_SPKI_b64_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<NETSCAPE_SPKI>)>>('NETSCAPE_SPKI_b64_encode');
  late final _NETSCAPE_SPKI_b64_encode = _NETSCAPE_SPKI_b64_encodePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<NETSCAPE_SPKI>)>();

  ffi.Pointer<EVP_PKEY> NETSCAPE_SPKI_get_pubkey(
    ffi.Pointer<NETSCAPE_SPKI> x,
  ) {
    return _NETSCAPE_SPKI_get_pubkey(
      x,
    );
  }

  late final _NETSCAPE_SPKI_get_pubkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<NETSCAPE_SPKI>)>>('NETSCAPE_SPKI_get_pubkey');
  late final _NETSCAPE_SPKI_get_pubkey = _NETSCAPE_SPKI_get_pubkeyPtr
      .asFunction<ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<NETSCAPE_SPKI>)>();

  int NETSCAPE_SPKI_set_pubkey(
    ffi.Pointer<NETSCAPE_SPKI> x,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _NETSCAPE_SPKI_set_pubkey(
      x,
      pkey,
    );
  }

  late final _NETSCAPE_SPKI_set_pubkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<NETSCAPE_SPKI>,
              ffi.Pointer<EVP_PKEY>)>>('NETSCAPE_SPKI_set_pubkey');
  late final _NETSCAPE_SPKI_set_pubkey =
      _NETSCAPE_SPKI_set_pubkeyPtr.asFunction<
          int Function(ffi.Pointer<NETSCAPE_SPKI>, ffi.Pointer<EVP_PKEY>)>();

  int NETSCAPE_SPKI_print(
    ffi.Pointer<BIO> out,
    ffi.Pointer<NETSCAPE_SPKI> spki,
  ) {
    return _NETSCAPE_SPKI_print(
      out,
      spki,
    );
  }

  late final _NETSCAPE_SPKI_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<NETSCAPE_SPKI>)>>('NETSCAPE_SPKI_print');
  late final _NETSCAPE_SPKI_print = _NETSCAPE_SPKI_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<NETSCAPE_SPKI>)>();

  int X509_signature_dump(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ASN1_STRING> sig,
    int indent,
  ) {
    return _X509_signature_dump(
      bp,
      sig,
      indent,
    );
  }

  late final _X509_signature_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>,
              ffi.Int)>>('X509_signature_dump');
  late final _X509_signature_dump = _X509_signature_dumpPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ASN1_STRING>, int)>();

  int X509_signature_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509_ALGOR> alg,
    ffi.Pointer<ASN1_STRING> sig,
  ) {
    return _X509_signature_print(
      bp,
      alg,
      sig,
    );
  }

  late final _X509_signature_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_ALGOR>,
              ffi.Pointer<ASN1_STRING>)>>('X509_signature_print');
  late final _X509_signature_print = _X509_signature_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_ALGOR>,
          ffi.Pointer<ASN1_STRING>)>();

  int X509_sign(
    ffi.Pointer<X509> x,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _X509_sign(
      x,
      pkey,
      md,
    );
  }

  late final _X509_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>, ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_MD>)>>('X509_sign');
  late final _X509_sign = _X509_signPtr.asFunction<
      int Function(
          ffi.Pointer<X509>, ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_MD>)>();

  int X509_sign_ctx(
    ffi.Pointer<X509> x,
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _X509_sign_ctx(
      x,
      ctx,
    );
  }

  late final _X509_sign_ctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509>, ffi.Pointer<EVP_MD_CTX>)>>('X509_sign_ctx');
  late final _X509_sign_ctx = _X509_sign_ctxPtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<EVP_MD_CTX>)>();

  int X509_http_nbio(
    ffi.Pointer<OCSP_REQ_CTX> rctx,
    ffi.Pointer<ffi.Pointer<X509>> pcert,
  ) {
    return _X509_http_nbio(
      rctx,
      pcert,
    );
  }

  late final _X509_http_nbioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OCSP_REQ_CTX>,
              ffi.Pointer<ffi.Pointer<X509>>)>>('X509_http_nbio');
  late final _X509_http_nbio = _X509_http_nbioPtr.asFunction<
      int Function(
          ffi.Pointer<OCSP_REQ_CTX>, ffi.Pointer<ffi.Pointer<X509>>)>();

  int X509_REQ_sign(
    ffi.Pointer<X509_REQ> x,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _X509_REQ_sign(
      x,
      pkey,
      md,
    );
  }

  late final _X509_REQ_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REQ>, ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_MD>)>>('X509_REQ_sign');
  late final _X509_REQ_sign = _X509_REQ_signPtr.asFunction<
      int Function(
          ffi.Pointer<X509_REQ>, ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_MD>)>();

  int X509_REQ_sign_ctx(
    ffi.Pointer<X509_REQ> x,
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _X509_REQ_sign_ctx(
      x,
      ctx,
    );
  }

  late final _X509_REQ_sign_ctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REQ>,
              ffi.Pointer<EVP_MD_CTX>)>>('X509_REQ_sign_ctx');
  late final _X509_REQ_sign_ctx = _X509_REQ_sign_ctxPtr.asFunction<
      int Function(ffi.Pointer<X509_REQ>, ffi.Pointer<EVP_MD_CTX>)>();

  int X509_CRL_sign(
    ffi.Pointer<X509_CRL> x,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _X509_CRL_sign(
      x,
      pkey,
      md,
    );
  }

  late final _X509_CRL_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_CRL>, ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_MD>)>>('X509_CRL_sign');
  late final _X509_CRL_sign = _X509_CRL_signPtr.asFunction<
      int Function(
          ffi.Pointer<X509_CRL>, ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_MD>)>();

  int X509_CRL_sign_ctx(
    ffi.Pointer<X509_CRL> x,
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _X509_CRL_sign_ctx(
      x,
      ctx,
    );
  }

  late final _X509_CRL_sign_ctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_CRL>,
              ffi.Pointer<EVP_MD_CTX>)>>('X509_CRL_sign_ctx');
  late final _X509_CRL_sign_ctx = _X509_CRL_sign_ctxPtr.asFunction<
      int Function(ffi.Pointer<X509_CRL>, ffi.Pointer<EVP_MD_CTX>)>();

  int X509_CRL_http_nbio(
    ffi.Pointer<OCSP_REQ_CTX> rctx,
    ffi.Pointer<ffi.Pointer<X509_CRL>> pcrl,
  ) {
    return _X509_CRL_http_nbio(
      rctx,
      pcrl,
    );
  }

  late final _X509_CRL_http_nbioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<OCSP_REQ_CTX>,
              ffi.Pointer<ffi.Pointer<X509_CRL>>)>>('X509_CRL_http_nbio');
  late final _X509_CRL_http_nbio = _X509_CRL_http_nbioPtr.asFunction<
      int Function(
          ffi.Pointer<OCSP_REQ_CTX>, ffi.Pointer<ffi.Pointer<X509_CRL>>)>();

  int NETSCAPE_SPKI_sign(
    ffi.Pointer<NETSCAPE_SPKI> x,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _NETSCAPE_SPKI_sign(
      x,
      pkey,
      md,
    );
  }

  late final _NETSCAPE_SPKI_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<NETSCAPE_SPKI>, ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_MD>)>>('NETSCAPE_SPKI_sign');
  late final _NETSCAPE_SPKI_sign = _NETSCAPE_SPKI_signPtr.asFunction<
      int Function(ffi.Pointer<NETSCAPE_SPKI>, ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<EVP_MD>)>();

  int X509_pubkey_digest(
    ffi.Pointer<X509> data,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> len,
  ) {
    return _X509_pubkey_digest(
      data,
      type,
      md,
      len,
    );
  }

  late final _X509_pubkey_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>)>>('X509_pubkey_digest');
  late final _X509_pubkey_digest = _X509_pubkey_digestPtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedInt>)>();

  int X509_digest(
    ffi.Pointer<X509> data,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> len,
  ) {
    return _X509_digest(
      data,
      type,
      md,
      len,
    );
  }

  late final _X509_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>)>>('X509_digest');
  late final _X509_digest = _X509_digestPtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedInt>)>();

  int X509_CRL_digest(
    ffi.Pointer<X509_CRL> data,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> len,
  ) {
    return _X509_CRL_digest(
      data,
      type,
      md,
      len,
    );
  }

  late final _X509_CRL_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_CRL>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>)>>('X509_CRL_digest');
  late final _X509_CRL_digest = _X509_CRL_digestPtr.asFunction<
      int Function(ffi.Pointer<X509_CRL>, ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedInt>)>();

  int X509_REQ_digest(
    ffi.Pointer<X509_REQ> data,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> len,
  ) {
    return _X509_REQ_digest(
      data,
      type,
      md,
      len,
    );
  }

  late final _X509_REQ_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_REQ>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>)>>('X509_REQ_digest');
  late final _X509_REQ_digest = _X509_REQ_digestPtr.asFunction<
      int Function(ffi.Pointer<X509_REQ>, ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedInt>)>();

  int X509_NAME_digest(
    ffi.Pointer<X509_NAME> data,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> len,
  ) {
    return _X509_NAME_digest(
      data,
      type,
      md,
      len,
    );
  }

  late final _X509_NAME_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_NAME>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>)>>('X509_NAME_digest');
  late final _X509_NAME_digest = _X509_NAME_digestPtr.asFunction<
      int Function(ffi.Pointer<X509_NAME>, ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<X509> d2i_X509_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<X509>> x509,
  ) {
    return _d2i_X509_fp(
      fp,
      x509,
    );
  }

  late final _d2i_X509_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509> Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<X509>>)>>('d2i_X509_fp');
  late final _d2i_X509_fp = _d2i_X509_fpPtr.asFunction<
      ffi.Pointer<X509> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Pointer<X509>>)>();

  int i2d_X509_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<X509> x509,
  ) {
    return _i2d_X509_fp(
      fp,
      x509,
    );
  }

  late final _i2d_X509_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<X509>)>>('i2d_X509_fp');
  late final _i2d_X509_fp = _i2d_X509_fpPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<X509>)>();

  ffi.Pointer<X509_CRL> d2i_X509_CRL_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<X509_CRL>> crl,
  ) {
    return _d2i_X509_CRL_fp(
      fp,
      crl,
    );
  }

  late final _d2i_X509_CRL_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_CRL> Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<X509_CRL>>)>>('d2i_X509_CRL_fp');
  late final _d2i_X509_CRL_fp = _d2i_X509_CRL_fpPtr.asFunction<
      ffi.Pointer<X509_CRL> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Pointer<X509_CRL>>)>();

  int i2d_X509_CRL_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<X509_CRL> crl,
  ) {
    return _i2d_X509_CRL_fp(
      fp,
      crl,
    );
  }

  late final _i2d_X509_CRL_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<X509_CRL>)>>('i2d_X509_CRL_fp');
  late final _i2d_X509_CRL_fp = _i2d_X509_CRL_fpPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<X509_CRL>)>();

  ffi.Pointer<X509_REQ> d2i_X509_REQ_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<X509_REQ>> req,
  ) {
    return _d2i_X509_REQ_fp(
      fp,
      req,
    );
  }

  late final _d2i_X509_REQ_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_REQ> Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<X509_REQ>>)>>('d2i_X509_REQ_fp');
  late final _d2i_X509_REQ_fp = _d2i_X509_REQ_fpPtr.asFunction<
      ffi.Pointer<X509_REQ> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Pointer<X509_REQ>>)>();

  int i2d_X509_REQ_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<X509_REQ> req,
  ) {
    return _i2d_X509_REQ_fp(
      fp,
      req,
    );
  }

  late final _i2d_X509_REQ_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<X509_REQ>)>>('i2d_X509_REQ_fp');
  late final _i2d_X509_REQ_fp = _i2d_X509_REQ_fpPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<X509_REQ>)>();

  ffi.Pointer<RSA> d2i_RSAPrivateKey_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<RSA>> rsa,
  ) {
    return _d2i_RSAPrivateKey_fp(
      fp,
      rsa,
    );
  }

  late final _d2i_RSAPrivateKey_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA> Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<RSA>>)>>('d2i_RSAPrivateKey_fp');
  late final _d2i_RSAPrivateKey_fp = _d2i_RSAPrivateKey_fpPtr.asFunction<
      ffi.Pointer<RSA> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Pointer<RSA>>)>();

  int i2d_RSAPrivateKey_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<RSA> rsa,
  ) {
    return _i2d_RSAPrivateKey_fp(
      fp,
      rsa,
    );
  }

  late final _i2d_RSAPrivateKey_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<RSA>)>>('i2d_RSAPrivateKey_fp');
  late final _i2d_RSAPrivateKey_fp = _i2d_RSAPrivateKey_fpPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<RSA>)>();

  ffi.Pointer<RSA> d2i_RSAPublicKey_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<RSA>> rsa,
  ) {
    return _d2i_RSAPublicKey_fp(
      fp,
      rsa,
    );
  }

  late final _d2i_RSAPublicKey_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA> Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<RSA>>)>>('d2i_RSAPublicKey_fp');
  late final _d2i_RSAPublicKey_fp = _d2i_RSAPublicKey_fpPtr.asFunction<
      ffi.Pointer<RSA> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Pointer<RSA>>)>();

  int i2d_RSAPublicKey_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<RSA> rsa,
  ) {
    return _i2d_RSAPublicKey_fp(
      fp,
      rsa,
    );
  }

  late final _i2d_RSAPublicKey_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<RSA>)>>('i2d_RSAPublicKey_fp');
  late final _i2d_RSAPublicKey_fp = _i2d_RSAPublicKey_fpPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<RSA>)>();

  ffi.Pointer<RSA> d2i_RSA_PUBKEY_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<RSA>> rsa,
  ) {
    return _d2i_RSA_PUBKEY_fp(
      fp,
      rsa,
    );
  }

  late final _d2i_RSA_PUBKEY_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA> Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<RSA>>)>>('d2i_RSA_PUBKEY_fp');
  late final _d2i_RSA_PUBKEY_fp = _d2i_RSA_PUBKEY_fpPtr.asFunction<
      ffi.Pointer<RSA> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Pointer<RSA>>)>();

  int i2d_RSA_PUBKEY_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<RSA> rsa,
  ) {
    return _i2d_RSA_PUBKEY_fp(
      fp,
      rsa,
    );
  }

  late final _i2d_RSA_PUBKEY_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<RSA>)>>('i2d_RSA_PUBKEY_fp');
  late final _i2d_RSA_PUBKEY_fp = _i2d_RSA_PUBKEY_fpPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<RSA>)>();

  ffi.Pointer<DSA> d2i_DSA_PUBKEY_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<DSA>> dsa,
  ) {
    return _d2i_DSA_PUBKEY_fp(
      fp,
      dsa,
    );
  }

  late final _d2i_DSA_PUBKEY_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA> Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<DSA>>)>>('d2i_DSA_PUBKEY_fp');
  late final _d2i_DSA_PUBKEY_fp = _d2i_DSA_PUBKEY_fpPtr.asFunction<
      ffi.Pointer<DSA> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Pointer<DSA>>)>();

  int i2d_DSA_PUBKEY_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<DSA> dsa,
  ) {
    return _i2d_DSA_PUBKEY_fp(
      fp,
      dsa,
    );
  }

  late final _i2d_DSA_PUBKEY_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<DSA>)>>('i2d_DSA_PUBKEY_fp');
  late final _i2d_DSA_PUBKEY_fp = _i2d_DSA_PUBKEY_fpPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<DSA>)>();

  ffi.Pointer<DSA> d2i_DSAPrivateKey_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<DSA>> dsa,
  ) {
    return _d2i_DSAPrivateKey_fp(
      fp,
      dsa,
    );
  }

  late final _d2i_DSAPrivateKey_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA> Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<DSA>>)>>('d2i_DSAPrivateKey_fp');
  late final _d2i_DSAPrivateKey_fp = _d2i_DSAPrivateKey_fpPtr.asFunction<
      ffi.Pointer<DSA> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Pointer<DSA>>)>();

  int i2d_DSAPrivateKey_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<DSA> dsa,
  ) {
    return _i2d_DSAPrivateKey_fp(
      fp,
      dsa,
    );
  }

  late final _i2d_DSAPrivateKey_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<DSA>)>>('i2d_DSAPrivateKey_fp');
  late final _i2d_DSAPrivateKey_fp = _i2d_DSAPrivateKey_fpPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<DSA>)>();

  ffi.Pointer<EC_KEY> d2i_EC_PUBKEY_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<EC_KEY>> eckey,
  ) {
    return _d2i_EC_PUBKEY_fp(
      fp,
      eckey,
    );
  }

  late final _d2i_EC_PUBKEY_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<EC_KEY>>)>>('d2i_EC_PUBKEY_fp');
  late final _d2i_EC_PUBKEY_fp = _d2i_EC_PUBKEY_fpPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Pointer<EC_KEY>>)>();

  int i2d_EC_PUBKEY_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _i2d_EC_PUBKEY_fp(
      fp,
      eckey,
    );
  }

  late final _i2d_EC_PUBKEY_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<EC_KEY>)>>('i2d_EC_PUBKEY_fp');
  late final _i2d_EC_PUBKEY_fp = _i2d_EC_PUBKEY_fpPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_KEY>)>();

  ffi.Pointer<EC_KEY> d2i_ECPrivateKey_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<EC_KEY>> eckey,
  ) {
    return _d2i_ECPrivateKey_fp(
      fp,
      eckey,
    );
  }

  late final _d2i_ECPrivateKey_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<EC_KEY>>)>>('d2i_ECPrivateKey_fp');
  late final _d2i_ECPrivateKey_fp = _d2i_ECPrivateKey_fpPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Pointer<EC_KEY>>)>();

  int i2d_ECPrivateKey_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _i2d_ECPrivateKey_fp(
      fp,
      eckey,
    );
  }

  late final _i2d_ECPrivateKey_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<EC_KEY>)>>('i2d_ECPrivateKey_fp');
  late final _i2d_ECPrivateKey_fp = _i2d_ECPrivateKey_fpPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_KEY>)>();

  ffi.Pointer<X509_SIG> d2i_PKCS8_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<X509_SIG>> p8,
  ) {
    return _d2i_PKCS8_fp(
      fp,
      p8,
    );
  }

  late final _d2i_PKCS8_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_SIG> Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<X509_SIG>>)>>('d2i_PKCS8_fp');
  late final _d2i_PKCS8_fp = _d2i_PKCS8_fpPtr.asFunction<
      ffi.Pointer<X509_SIG> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Pointer<X509_SIG>>)>();

  int i2d_PKCS8_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<X509_SIG> p8,
  ) {
    return _i2d_PKCS8_fp(
      fp,
      p8,
    );
  }

  late final _i2d_PKCS8_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<X509_SIG>)>>('i2d_PKCS8_fp');
  late final _i2d_PKCS8_fp = _i2d_PKCS8_fpPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<X509_SIG>)>();

  ffi.Pointer<PKCS8_PRIV_KEY_INFO> d2i_PKCS8_PRIV_KEY_INFO_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<PKCS8_PRIV_KEY_INFO>> p8inf,
  ) {
    return _d2i_PKCS8_PRIV_KEY_INFO_fp(
      fp,
      p8inf,
    );
  }

  late final _d2i_PKCS8_PRIV_KEY_INFO_fpPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<PKCS8_PRIV_KEY_INFO> Function(ffi.Pointer<FILE>,
                  ffi.Pointer<ffi.Pointer<PKCS8_PRIV_KEY_INFO>>)>>(
      'd2i_PKCS8_PRIV_KEY_INFO_fp');
  late final _d2i_PKCS8_PRIV_KEY_INFO_fp =
      _d2i_PKCS8_PRIV_KEY_INFO_fpPtr.asFunction<
          ffi.Pointer<PKCS8_PRIV_KEY_INFO> Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<PKCS8_PRIV_KEY_INFO>>)>();

  int i2d_PKCS8_PRIV_KEY_INFO_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8inf,
  ) {
    return _i2d_PKCS8_PRIV_KEY_INFO_fp(
      fp,
      p8inf,
    );
  }

  late final _i2d_PKCS8_PRIV_KEY_INFO_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>,
              ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>>('i2d_PKCS8_PRIV_KEY_INFO_fp');
  late final _i2d_PKCS8_PRIV_KEY_INFO_fp =
      _i2d_PKCS8_PRIV_KEY_INFO_fpPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>();

  int i2d_PKCS8PrivateKeyInfo_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EVP_PKEY> key,
  ) {
    return _i2d_PKCS8PrivateKeyInfo_fp(
      fp,
      key,
    );
  }

  late final _i2d_PKCS8PrivateKeyInfo_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>,
              ffi.Pointer<EVP_PKEY>)>>('i2d_PKCS8PrivateKeyInfo_fp');
  late final _i2d_PKCS8PrivateKeyInfo_fp = _i2d_PKCS8PrivateKeyInfo_fpPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<EVP_PKEY>)>();

  int i2d_PrivateKey_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _i2d_PrivateKey_fp(
      fp,
      pkey,
    );
  }

  late final _i2d_PrivateKey_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<EVP_PKEY>)>>('i2d_PrivateKey_fp');
  late final _i2d_PrivateKey_fp = _i2d_PrivateKey_fpPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY> d2i_PrivateKey_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
  ) {
    return _d2i_PrivateKey_fp(
      fp,
      a,
    );
  }

  late final _d2i_PrivateKey_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>>('d2i_PrivateKey_fp');
  late final _d2i_PrivateKey_fp = _d2i_PrivateKey_fpPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>();

  int i2d_PUBKEY_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _i2d_PUBKEY_fp(
      fp,
      pkey,
    );
  }

  late final _i2d_PUBKEY_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<EVP_PKEY>)>>('i2d_PUBKEY_fp');
  late final _i2d_PUBKEY_fp = _i2d_PUBKEY_fpPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY> d2i_PUBKEY_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
  ) {
    return _d2i_PUBKEY_fp(
      fp,
      a,
    );
  }

  late final _d2i_PUBKEY_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>>('d2i_PUBKEY_fp');
  late final _d2i_PUBKEY_fp = _d2i_PUBKEY_fpPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>();

  ffi.Pointer<X509> d2i_X509_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<X509>> x509,
  ) {
    return _d2i_X509_bio(
      bp,
      x509,
    );
  }

  late final _d2i_X509_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509> Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<X509>>)>>('d2i_X509_bio');
  late final _d2i_X509_bio = _d2i_X509_bioPtr.asFunction<
      ffi.Pointer<X509> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<X509>>)>();

  int i2d_X509_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509> x509,
  ) {
    return _i2d_X509_bio(
      bp,
      x509,
    );
  }

  late final _i2d_X509_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<X509>)>>('i2d_X509_bio');
  late final _i2d_X509_bio = _i2d_X509_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<X509>)>();

  ffi.Pointer<X509_CRL> d2i_X509_CRL_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<X509_CRL>> crl,
  ) {
    return _d2i_X509_CRL_bio(
      bp,
      crl,
    );
  }

  late final _d2i_X509_CRL_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_CRL> Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<X509_CRL>>)>>('d2i_X509_CRL_bio');
  late final _d2i_X509_CRL_bio = _d2i_X509_CRL_bioPtr.asFunction<
      ffi.Pointer<X509_CRL> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<X509_CRL>>)>();

  int i2d_X509_CRL_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509_CRL> crl,
  ) {
    return _i2d_X509_CRL_bio(
      bp,
      crl,
    );
  }

  late final _i2d_X509_CRL_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<X509_CRL>)>>('i2d_X509_CRL_bio');
  late final _i2d_X509_CRL_bio = _i2d_X509_CRL_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_CRL>)>();

  ffi.Pointer<X509_REQ> d2i_X509_REQ_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<X509_REQ>> req,
  ) {
    return _d2i_X509_REQ_bio(
      bp,
      req,
    );
  }

  late final _d2i_X509_REQ_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_REQ> Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<X509_REQ>>)>>('d2i_X509_REQ_bio');
  late final _d2i_X509_REQ_bio = _d2i_X509_REQ_bioPtr.asFunction<
      ffi.Pointer<X509_REQ> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<X509_REQ>>)>();

  int i2d_X509_REQ_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509_REQ> req,
  ) {
    return _i2d_X509_REQ_bio(
      bp,
      req,
    );
  }

  late final _i2d_X509_REQ_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<X509_REQ>)>>('i2d_X509_REQ_bio');
  late final _i2d_X509_REQ_bio = _i2d_X509_REQ_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_REQ>)>();

  ffi.Pointer<RSA> d2i_RSAPrivateKey_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<RSA>> rsa,
  ) {
    return _d2i_RSAPrivateKey_bio(
      bp,
      rsa,
    );
  }

  late final _d2i_RSAPrivateKey_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA> Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<RSA>>)>>('d2i_RSAPrivateKey_bio');
  late final _d2i_RSAPrivateKey_bio = _d2i_RSAPrivateKey_bioPtr.asFunction<
      ffi.Pointer<RSA> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<RSA>>)>();

  int i2d_RSAPrivateKey_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<RSA> rsa,
  ) {
    return _i2d_RSAPrivateKey_bio(
      bp,
      rsa,
    );
  }

  late final _i2d_RSAPrivateKey_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<RSA>)>>('i2d_RSAPrivateKey_bio');
  late final _i2d_RSAPrivateKey_bio = _i2d_RSAPrivateKey_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<RSA>)>();

  ffi.Pointer<RSA> d2i_RSAPublicKey_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<RSA>> rsa,
  ) {
    return _d2i_RSAPublicKey_bio(
      bp,
      rsa,
    );
  }

  late final _d2i_RSAPublicKey_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA> Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<RSA>>)>>('d2i_RSAPublicKey_bio');
  late final _d2i_RSAPublicKey_bio = _d2i_RSAPublicKey_bioPtr.asFunction<
      ffi.Pointer<RSA> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<RSA>>)>();

  int i2d_RSAPublicKey_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<RSA> rsa,
  ) {
    return _i2d_RSAPublicKey_bio(
      bp,
      rsa,
    );
  }

  late final _i2d_RSAPublicKey_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<RSA>)>>('i2d_RSAPublicKey_bio');
  late final _i2d_RSAPublicKey_bio = _i2d_RSAPublicKey_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<RSA>)>();

  ffi.Pointer<RSA> d2i_RSA_PUBKEY_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<RSA>> rsa,
  ) {
    return _d2i_RSA_PUBKEY_bio(
      bp,
      rsa,
    );
  }

  late final _d2i_RSA_PUBKEY_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA> Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<RSA>>)>>('d2i_RSA_PUBKEY_bio');
  late final _d2i_RSA_PUBKEY_bio = _d2i_RSA_PUBKEY_bioPtr.asFunction<
      ffi.Pointer<RSA> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<RSA>>)>();

  int i2d_RSA_PUBKEY_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<RSA> rsa,
  ) {
    return _i2d_RSA_PUBKEY_bio(
      bp,
      rsa,
    );
  }

  late final _i2d_RSA_PUBKEY_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<RSA>)>>('i2d_RSA_PUBKEY_bio');
  late final _i2d_RSA_PUBKEY_bio = _i2d_RSA_PUBKEY_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<RSA>)>();

  ffi.Pointer<DSA> d2i_DSA_PUBKEY_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<DSA>> dsa,
  ) {
    return _d2i_DSA_PUBKEY_bio(
      bp,
      dsa,
    );
  }

  late final _d2i_DSA_PUBKEY_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA> Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<DSA>>)>>('d2i_DSA_PUBKEY_bio');
  late final _d2i_DSA_PUBKEY_bio = _d2i_DSA_PUBKEY_bioPtr.asFunction<
      ffi.Pointer<DSA> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<DSA>>)>();

  int i2d_DSA_PUBKEY_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<DSA> dsa,
  ) {
    return _i2d_DSA_PUBKEY_bio(
      bp,
      dsa,
    );
  }

  late final _i2d_DSA_PUBKEY_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<DSA>)>>('i2d_DSA_PUBKEY_bio');
  late final _i2d_DSA_PUBKEY_bio = _i2d_DSA_PUBKEY_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<DSA>)>();

  ffi.Pointer<DSA> d2i_DSAPrivateKey_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<DSA>> dsa,
  ) {
    return _d2i_DSAPrivateKey_bio(
      bp,
      dsa,
    );
  }

  late final _d2i_DSAPrivateKey_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA> Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<DSA>>)>>('d2i_DSAPrivateKey_bio');
  late final _d2i_DSAPrivateKey_bio = _d2i_DSAPrivateKey_bioPtr.asFunction<
      ffi.Pointer<DSA> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<DSA>>)>();

  int i2d_DSAPrivateKey_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<DSA> dsa,
  ) {
    return _i2d_DSAPrivateKey_bio(
      bp,
      dsa,
    );
  }

  late final _i2d_DSAPrivateKey_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<DSA>)>>('i2d_DSAPrivateKey_bio');
  late final _i2d_DSAPrivateKey_bio = _i2d_DSAPrivateKey_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<DSA>)>();

  ffi.Pointer<EC_KEY> d2i_EC_PUBKEY_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<EC_KEY>> eckey,
  ) {
    return _d2i_EC_PUBKEY_bio(
      bp,
      eckey,
    );
  }

  late final _d2i_EC_PUBKEY_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<EC_KEY>>)>>('d2i_EC_PUBKEY_bio');
  late final _d2i_EC_PUBKEY_bio = _d2i_EC_PUBKEY_bioPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<EC_KEY>>)>();

  int i2d_EC_PUBKEY_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _i2d_EC_PUBKEY_bio(
      bp,
      eckey,
    );
  }

  late final _i2d_EC_PUBKEY_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<EC_KEY>)>>('i2d_EC_PUBKEY_bio');
  late final _i2d_EC_PUBKEY_bio = _i2d_EC_PUBKEY_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_KEY>)>();

  ffi.Pointer<EC_KEY> d2i_ECPrivateKey_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<EC_KEY>> eckey,
  ) {
    return _d2i_ECPrivateKey_bio(
      bp,
      eckey,
    );
  }

  late final _d2i_ECPrivateKey_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<EC_KEY>>)>>('d2i_ECPrivateKey_bio');
  late final _d2i_ECPrivateKey_bio = _d2i_ECPrivateKey_bioPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<EC_KEY>>)>();

  int i2d_ECPrivateKey_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EC_KEY> eckey,
  ) {
    return _i2d_ECPrivateKey_bio(
      bp,
      eckey,
    );
  }

  late final _i2d_ECPrivateKey_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<EC_KEY>)>>('i2d_ECPrivateKey_bio');
  late final _i2d_ECPrivateKey_bio = _i2d_ECPrivateKey_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_KEY>)>();

  ffi.Pointer<X509_SIG> d2i_PKCS8_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<X509_SIG>> p8,
  ) {
    return _d2i_PKCS8_bio(
      bp,
      p8,
    );
  }

  late final _d2i_PKCS8_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_SIG> Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<X509_SIG>>)>>('d2i_PKCS8_bio');
  late final _d2i_PKCS8_bio = _d2i_PKCS8_bioPtr.asFunction<
      ffi.Pointer<X509_SIG> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<X509_SIG>>)>();

  int i2d_PKCS8_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509_SIG> p8,
  ) {
    return _i2d_PKCS8_bio(
      bp,
      p8,
    );
  }

  late final _i2d_PKCS8_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<X509_SIG>)>>('i2d_PKCS8_bio');
  late final _i2d_PKCS8_bio = _i2d_PKCS8_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_SIG>)>();

  ffi.Pointer<PKCS8_PRIV_KEY_INFO> d2i_PKCS8_PRIV_KEY_INFO_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<PKCS8_PRIV_KEY_INFO>> p8inf,
  ) {
    return _d2i_PKCS8_PRIV_KEY_INFO_bio(
      bp,
      p8inf,
    );
  }

  late final _d2i_PKCS8_PRIV_KEY_INFO_bioPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<PKCS8_PRIV_KEY_INFO> Function(ffi.Pointer<BIO>,
                  ffi.Pointer<ffi.Pointer<PKCS8_PRIV_KEY_INFO>>)>>(
      'd2i_PKCS8_PRIV_KEY_INFO_bio');
  late final _d2i_PKCS8_PRIV_KEY_INFO_bio =
      _d2i_PKCS8_PRIV_KEY_INFO_bioPtr.asFunction<
          ffi.Pointer<PKCS8_PRIV_KEY_INFO> Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<PKCS8_PRIV_KEY_INFO>>)>();

  int i2d_PKCS8_PRIV_KEY_INFO_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8inf,
  ) {
    return _i2d_PKCS8_PRIV_KEY_INFO_bio(
      bp,
      p8inf,
    );
  }

  late final _i2d_PKCS8_PRIV_KEY_INFO_bioPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO>, ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>>(
      'i2d_PKCS8_PRIV_KEY_INFO_bio');
  late final _i2d_PKCS8_PRIV_KEY_INFO_bio =
      _i2d_PKCS8_PRIV_KEY_INFO_bioPtr.asFunction<
          int Function(ffi.Pointer<BIO>, ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>();

  int i2d_PKCS8PrivateKeyInfo_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EVP_PKEY> key,
  ) {
    return _i2d_PKCS8PrivateKeyInfo_bio(
      bp,
      key,
    );
  }

  late final _i2d_PKCS8PrivateKeyInfo_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<EVP_PKEY>)>>('i2d_PKCS8PrivateKeyInfo_bio');
  late final _i2d_PKCS8PrivateKeyInfo_bio = _i2d_PKCS8PrivateKeyInfo_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>)>();

  int i2d_PrivateKey_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _i2d_PrivateKey_bio(
      bp,
      pkey,
    );
  }

  late final _i2d_PrivateKey_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>)>>('i2d_PrivateKey_bio');
  late final _i2d_PrivateKey_bio = _i2d_PrivateKey_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY> d2i_PrivateKey_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
  ) {
    return _d2i_PrivateKey_bio(
      bp,
      a,
    );
  }

  late final _d2i_PrivateKey_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>>('d2i_PrivateKey_bio');
  late final _d2i_PrivateKey_bio = _d2i_PrivateKey_bioPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>();

  int i2d_PUBKEY_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _i2d_PUBKEY_bio(
      bp,
      pkey,
    );
  }

  late final _i2d_PUBKEY_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>)>>('i2d_PUBKEY_bio');
  late final _i2d_PUBKEY_bio = _i2d_PUBKEY_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY> d2i_PUBKEY_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
  ) {
    return _d2i_PUBKEY_bio(
      bp,
      a,
    );
  }

  late final _d2i_PUBKEY_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>>('d2i_PUBKEY_bio');
  late final _d2i_PUBKEY_bio = _d2i_PUBKEY_bioPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>();

  ffi.Pointer<X509> X509_dup(
    ffi.Pointer<X509> x509,
  ) {
    return _X509_dup(
      x509,
    );
  }

  late final _X509_dupPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<X509> Function(ffi.Pointer<X509>)>>(
      'X509_dup');
  late final _X509_dup =
      _X509_dupPtr.asFunction<ffi.Pointer<X509> Function(ffi.Pointer<X509>)>();

  ffi.Pointer<X509_ATTRIBUTE> X509_ATTRIBUTE_dup(
    ffi.Pointer<X509_ATTRIBUTE> xa,
  ) {
    return _X509_ATTRIBUTE_dup(
      xa,
    );
  }

  late final _X509_ATTRIBUTE_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ATTRIBUTE> Function(
              ffi.Pointer<X509_ATTRIBUTE>)>>('X509_ATTRIBUTE_dup');
  late final _X509_ATTRIBUTE_dup = _X509_ATTRIBUTE_dupPtr.asFunction<
      ffi.Pointer<X509_ATTRIBUTE> Function(ffi.Pointer<X509_ATTRIBUTE>)>();

  ffi.Pointer<X509_EXTENSION> X509_EXTENSION_dup(
    ffi.Pointer<X509_EXTENSION> ex,
  ) {
    return _X509_EXTENSION_dup(
      ex,
    );
  }

  late final _X509_EXTENSION_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_EXTENSION> Function(
              ffi.Pointer<X509_EXTENSION>)>>('X509_EXTENSION_dup');
  late final _X509_EXTENSION_dup = _X509_EXTENSION_dupPtr.asFunction<
      ffi.Pointer<X509_EXTENSION> Function(ffi.Pointer<X509_EXTENSION>)>();

  ffi.Pointer<X509_CRL> X509_CRL_dup(
    ffi.Pointer<X509_CRL> crl,
  ) {
    return _X509_CRL_dup(
      crl,
    );
  }

  late final _X509_CRL_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_CRL> Function(
              ffi.Pointer<X509_CRL>)>>('X509_CRL_dup');
  late final _X509_CRL_dup = _X509_CRL_dupPtr.asFunction<
      ffi.Pointer<X509_CRL> Function(ffi.Pointer<X509_CRL>)>();

  ffi.Pointer<X509_REVOKED> X509_REVOKED_dup(
    ffi.Pointer<X509_REVOKED> rev,
  ) {
    return _X509_REVOKED_dup(
      rev,
    );
  }

  late final _X509_REVOKED_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_REVOKED> Function(
              ffi.Pointer<X509_REVOKED>)>>('X509_REVOKED_dup');
  late final _X509_REVOKED_dup = _X509_REVOKED_dupPtr.asFunction<
      ffi.Pointer<X509_REVOKED> Function(ffi.Pointer<X509_REVOKED>)>();

  ffi.Pointer<X509_REQ> X509_REQ_dup(
    ffi.Pointer<X509_REQ> req,
  ) {
    return _X509_REQ_dup(
      req,
    );
  }

  late final _X509_REQ_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_REQ> Function(
              ffi.Pointer<X509_REQ>)>>('X509_REQ_dup');
  late final _X509_REQ_dup = _X509_REQ_dupPtr.asFunction<
      ffi.Pointer<X509_REQ> Function(ffi.Pointer<X509_REQ>)>();

  ffi.Pointer<X509_ALGOR> X509_ALGOR_dup(
    ffi.Pointer<X509_ALGOR> xn,
  ) {
    return _X509_ALGOR_dup(
      xn,
    );
  }

  late final _X509_ALGOR_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ALGOR> Function(
              ffi.Pointer<X509_ALGOR>)>>('X509_ALGOR_dup');
  late final _X509_ALGOR_dup = _X509_ALGOR_dupPtr.asFunction<
      ffi.Pointer<X509_ALGOR> Function(ffi.Pointer<X509_ALGOR>)>();

  int X509_ALGOR_set0(
    ffi.Pointer<X509_ALGOR> alg,
    ffi.Pointer<ASN1_OBJECT> aobj,
    int ptype,
    ffi.Pointer<ffi.Void> pval,
  ) {
    return _X509_ALGOR_set0(
      alg,
      aobj,
      ptype,
      pval,
    );
  }

  late final _X509_ALGOR_set0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_ALGOR>, ffi.Pointer<ASN1_OBJECT>,
              ffi.Int, ffi.Pointer<ffi.Void>)>>('X509_ALGOR_set0');
  late final _X509_ALGOR_set0 = _X509_ALGOR_set0Ptr.asFunction<
      int Function(ffi.Pointer<X509_ALGOR>, ffi.Pointer<ASN1_OBJECT>, int,
          ffi.Pointer<ffi.Void>)>();

  void X509_ALGOR_get0(
    ffi.Pointer<ffi.Pointer<ASN1_OBJECT>> paobj,
    ffi.Pointer<ffi.Int> pptype,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppval,
    ffi.Pointer<X509_ALGOR> algor,
  ) {
    return _X509_ALGOR_get0(
      paobj,
      pptype,
      ppval,
      algor,
    );
  }

  late final _X509_ALGOR_get0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ASN1_OBJECT>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<X509_ALGOR>)>>('X509_ALGOR_get0');
  late final _X509_ALGOR_get0 = _X509_ALGOR_get0Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<ASN1_OBJECT>>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<X509_ALGOR>)>();

  void X509_ALGOR_set_md(
    ffi.Pointer<X509_ALGOR> alg,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _X509_ALGOR_set_md(
      alg,
      md,
    );
  }

  late final _X509_ALGOR_set_mdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_ALGOR>,
              ffi.Pointer<EVP_MD>)>>('X509_ALGOR_set_md');
  late final _X509_ALGOR_set_md = _X509_ALGOR_set_mdPtr.asFunction<
      void Function(ffi.Pointer<X509_ALGOR>, ffi.Pointer<EVP_MD>)>();

  int X509_ALGOR_cmp(
    ffi.Pointer<X509_ALGOR> a,
    ffi.Pointer<X509_ALGOR> b,
  ) {
    return _X509_ALGOR_cmp(
      a,
      b,
    );
  }

  late final _X509_ALGOR_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_ALGOR>,
              ffi.Pointer<X509_ALGOR>)>>('X509_ALGOR_cmp');
  late final _X509_ALGOR_cmp = _X509_ALGOR_cmpPtr.asFunction<
      int Function(ffi.Pointer<X509_ALGOR>, ffi.Pointer<X509_ALGOR>)>();

  int X509_ALGOR_copy(
    ffi.Pointer<X509_ALGOR> dest,
    ffi.Pointer<X509_ALGOR> src,
  ) {
    return _X509_ALGOR_copy(
      dest,
      src,
    );
  }

  late final _X509_ALGOR_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_ALGOR>,
              ffi.Pointer<X509_ALGOR>)>>('X509_ALGOR_copy');
  late final _X509_ALGOR_copy = _X509_ALGOR_copyPtr.asFunction<
      int Function(ffi.Pointer<X509_ALGOR>, ffi.Pointer<X509_ALGOR>)>();

  ffi.Pointer<X509_NAME> X509_NAME_dup(
    ffi.Pointer<X509_NAME> xn,
  ) {
    return _X509_NAME_dup(
      xn,
    );
  }

  late final _X509_NAME_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_NAME> Function(
              ffi.Pointer<X509_NAME>)>>('X509_NAME_dup');
  late final _X509_NAME_dup = _X509_NAME_dupPtr.asFunction<
      ffi.Pointer<X509_NAME> Function(ffi.Pointer<X509_NAME>)>();

  ffi.Pointer<X509_NAME_ENTRY> X509_NAME_ENTRY_dup(
    ffi.Pointer<X509_NAME_ENTRY> ne,
  ) {
    return _X509_NAME_ENTRY_dup(
      ne,
    );
  }

  late final _X509_NAME_ENTRY_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_NAME_ENTRY> Function(
              ffi.Pointer<X509_NAME_ENTRY>)>>('X509_NAME_ENTRY_dup');
  late final _X509_NAME_ENTRY_dup = _X509_NAME_ENTRY_dupPtr.asFunction<
      ffi.Pointer<X509_NAME_ENTRY> Function(ffi.Pointer<X509_NAME_ENTRY>)>();

  int X509_cmp_time(
    ffi.Pointer<ASN1_TIME> s,
    ffi.Pointer<time_t> t,
  ) {
    return _X509_cmp_time(
      s,
      t,
    );
  }

  late final _X509_cmp_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_TIME>, ffi.Pointer<time_t>)>>('X509_cmp_time');
  late final _X509_cmp_time = _X509_cmp_timePtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>, ffi.Pointer<time_t>)>();

  int X509_cmp_current_time(
    ffi.Pointer<ASN1_TIME> s,
  ) {
    return _X509_cmp_current_time(
      s,
    );
  }

  late final _X509_cmp_current_timePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ASN1_TIME>)>>(
          'X509_cmp_current_time');
  late final _X509_cmp_current_time = _X509_cmp_current_timePtr.asFunction<
      int Function(ffi.Pointer<ASN1_TIME>)>();

  ffi.Pointer<ASN1_TIME> X509_time_adj(
    ffi.Pointer<ASN1_TIME> s,
    int adj,
    ffi.Pointer<time_t> t,
  ) {
    return _X509_time_adj(
      s,
      adj,
      t,
    );
  }

  late final _X509_time_adjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<ASN1_TIME>, ffi.Long,
              ffi.Pointer<time_t>)>>('X509_time_adj');
  late final _X509_time_adj = _X509_time_adjPtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(
          ffi.Pointer<ASN1_TIME>, int, ffi.Pointer<time_t>)>();

  ffi.Pointer<ASN1_TIME> X509_time_adj_ex(
    ffi.Pointer<ASN1_TIME> s,
    int offset_day,
    int offset_sec,
    ffi.Pointer<time_t> t,
  ) {
    return _X509_time_adj_ex(
      s,
      offset_day,
      offset_sec,
      t,
    );
  }

  late final _X509_time_adj_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<ASN1_TIME>, ffi.Int,
              ffi.Long, ffi.Pointer<time_t>)>>('X509_time_adj_ex');
  late final _X509_time_adj_ex = _X509_time_adj_exPtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(
          ffi.Pointer<ASN1_TIME>, int, int, ffi.Pointer<time_t>)>();

  ffi.Pointer<ASN1_TIME> X509_gmtime_adj(
    ffi.Pointer<ASN1_TIME> s,
    int adj,
  ) {
    return _X509_gmtime_adj(
      s,
      adj,
    );
  }

  late final _X509_gmtime_adjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(
              ffi.Pointer<ASN1_TIME>, ffi.Long)>>('X509_gmtime_adj');
  late final _X509_gmtime_adj = _X509_gmtime_adjPtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<ASN1_TIME>, int)>();

  ffi.Pointer<ffi.Char> X509_get_default_cert_area() {
    return _X509_get_default_cert_area();
  }

  late final _X509_get_default_cert_areaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'X509_get_default_cert_area');
  late final _X509_get_default_cert_area = _X509_get_default_cert_areaPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> X509_get_default_cert_dir() {
    return _X509_get_default_cert_dir();
  }

  late final _X509_get_default_cert_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'X509_get_default_cert_dir');
  late final _X509_get_default_cert_dir = _X509_get_default_cert_dirPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> X509_get_default_cert_file() {
    return _X509_get_default_cert_file();
  }

  late final _X509_get_default_cert_filePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'X509_get_default_cert_file');
  late final _X509_get_default_cert_file = _X509_get_default_cert_filePtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> X509_get_default_cert_dir_env() {
    return _X509_get_default_cert_dir_env();
  }

  late final _X509_get_default_cert_dir_envPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'X509_get_default_cert_dir_env');
  late final _X509_get_default_cert_dir_env = _X509_get_default_cert_dir_envPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> X509_get_default_cert_file_env() {
    return _X509_get_default_cert_file_env();
  }

  late final _X509_get_default_cert_file_envPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'X509_get_default_cert_file_env');
  late final _X509_get_default_cert_file_env =
      _X509_get_default_cert_file_envPtr.asFunction<
          ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> X509_get_default_private_dir() {
    return _X509_get_default_private_dir();
  }

  late final _X509_get_default_private_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'X509_get_default_private_dir');
  late final _X509_get_default_private_dir = _X509_get_default_private_dirPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<X509_REQ> X509_to_X509_REQ(
    ffi.Pointer<X509> x,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<EVP_MD> md,
  ) {
    return _X509_to_X509_REQ(
      x,
      pkey,
      md,
    );
  }

  late final _X509_to_X509_REQPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_REQ> Function(ffi.Pointer<X509>,
              ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_MD>)>>('X509_to_X509_REQ');
  late final _X509_to_X509_REQ = _X509_to_X509_REQPtr.asFunction<
      ffi.Pointer<X509_REQ> Function(
          ffi.Pointer<X509>, ffi.Pointer<EVP_PKEY>, ffi.Pointer<EVP_MD>)>();

  ffi.Pointer<X509> X509_REQ_to_X509(
    ffi.Pointer<X509_REQ> r,
    int days,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _X509_REQ_to_X509(
      r,
      days,
      pkey,
    );
  }

  late final _X509_REQ_to_X509Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509> Function(ffi.Pointer<X509_REQ>, ffi.Int,
              ffi.Pointer<EVP_PKEY>)>>('X509_REQ_to_X509');
  late final _X509_REQ_to_X509 = _X509_REQ_to_X509Ptr.asFunction<
      ffi.Pointer<X509> Function(
          ffi.Pointer<X509_REQ>, int, ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<X509_ALGOR> X509_ALGOR_new() {
    return _X509_ALGOR_new();
  }

  late final _X509_ALGOR_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_ALGOR> Function()>>(
          'X509_ALGOR_new');
  late final _X509_ALGOR_new =
      _X509_ALGOR_newPtr.asFunction<ffi.Pointer<X509_ALGOR> Function()>();

  void X509_ALGOR_free(
    ffi.Pointer<X509_ALGOR> a,
  ) {
    return _X509_ALGOR_free(
      a,
    );
  }

  late final _X509_ALGOR_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_ALGOR>)>>(
          'X509_ALGOR_free');
  late final _X509_ALGOR_free =
      _X509_ALGOR_freePtr.asFunction<void Function(ffi.Pointer<X509_ALGOR>)>();

  ffi.Pointer<X509_ALGOR> d2i_X509_ALGOR(
    ffi.Pointer<ffi.Pointer<X509_ALGOR>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509_ALGOR(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509_ALGORPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ALGOR> Function(
              ffi.Pointer<ffi.Pointer<X509_ALGOR>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_ALGOR');
  late final _d2i_X509_ALGOR = _d2i_X509_ALGORPtr.asFunction<
      ffi.Pointer<X509_ALGOR> Function(ffi.Pointer<ffi.Pointer<X509_ALGOR>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_X509_ALGOR(
    ffi.Pointer<X509_ALGOR> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509_ALGOR(
      a,
      out,
    );
  }

  late final _i2d_X509_ALGORPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_ALGOR>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_X509_ALGOR');
  late final _i2d_X509_ALGOR = _i2d_X509_ALGORPtr.asFunction<
      int Function(ffi.Pointer<X509_ALGOR>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_ALGOR_it =
      _lookup<ASN1_ITEM>('X509_ALGOR_it');

  ffi.Pointer<ASN1_ITEM> get X509_ALGOR_it => _X509_ALGOR_it;

  ffi.Pointer<X509_ALGORS> d2i_X509_ALGORS(
    ffi.Pointer<ffi.Pointer<X509_ALGORS>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509_ALGORS(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509_ALGORSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ALGORS> Function(
              ffi.Pointer<ffi.Pointer<X509_ALGORS>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_ALGORS');
  late final _d2i_X509_ALGORS = _d2i_X509_ALGORSPtr.asFunction<
      ffi.Pointer<X509_ALGORS> Function(ffi.Pointer<ffi.Pointer<X509_ALGORS>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_X509_ALGORS(
    ffi.Pointer<X509_ALGORS> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509_ALGORS(
      a,
      out,
    );
  }

  late final _i2d_X509_ALGORSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_ALGORS>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_X509_ALGORS');
  late final _i2d_X509_ALGORS = _i2d_X509_ALGORSPtr.asFunction<
      int Function(ffi.Pointer<X509_ALGORS>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_ALGORS_it =
      _lookup<ASN1_ITEM>('X509_ALGORS_it');

  ffi.Pointer<ASN1_ITEM> get X509_ALGORS_it => _X509_ALGORS_it;

  ffi.Pointer<X509_VAL> X509_VAL_new() {
    return _X509_VAL_new();
  }

  late final _X509_VAL_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_VAL> Function()>>(
          'X509_VAL_new');
  late final _X509_VAL_new =
      _X509_VAL_newPtr.asFunction<ffi.Pointer<X509_VAL> Function()>();

  void X509_VAL_free(
    ffi.Pointer<X509_VAL> a,
  ) {
    return _X509_VAL_free(
      a,
    );
  }

  late final _X509_VAL_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_VAL>)>>(
          'X509_VAL_free');
  late final _X509_VAL_free =
      _X509_VAL_freePtr.asFunction<void Function(ffi.Pointer<X509_VAL>)>();

  ffi.Pointer<X509_VAL> d2i_X509_VAL(
    ffi.Pointer<ffi.Pointer<X509_VAL>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509_VAL(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509_VALPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_VAL> Function(
              ffi.Pointer<ffi.Pointer<X509_VAL>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_VAL');
  late final _d2i_X509_VAL = _d2i_X509_VALPtr.asFunction<
      ffi.Pointer<X509_VAL> Function(ffi.Pointer<ffi.Pointer<X509_VAL>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_X509_VAL(
    ffi.Pointer<X509_VAL> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509_VAL(
      a,
      out,
    );
  }

  late final _i2d_X509_VALPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_VAL>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_X509_VAL');
  late final _i2d_X509_VAL = _i2d_X509_VALPtr.asFunction<
      int Function(
          ffi.Pointer<X509_VAL>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_VAL_it =
      _lookup<ASN1_ITEM>('X509_VAL_it');

  ffi.Pointer<ASN1_ITEM> get X509_VAL_it => _X509_VAL_it;

  ffi.Pointer<X509_PUBKEY> X509_PUBKEY_new() {
    return _X509_PUBKEY_new();
  }

  late final _X509_PUBKEY_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_PUBKEY> Function()>>(
          'X509_PUBKEY_new');
  late final _X509_PUBKEY_new =
      _X509_PUBKEY_newPtr.asFunction<ffi.Pointer<X509_PUBKEY> Function()>();

  void X509_PUBKEY_free(
    ffi.Pointer<X509_PUBKEY> a,
  ) {
    return _X509_PUBKEY_free(
      a,
    );
  }

  late final _X509_PUBKEY_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_PUBKEY>)>>(
          'X509_PUBKEY_free');
  late final _X509_PUBKEY_free = _X509_PUBKEY_freePtr.asFunction<
      void Function(ffi.Pointer<X509_PUBKEY>)>();

  ffi.Pointer<X509_PUBKEY> d2i_X509_PUBKEY(
    ffi.Pointer<ffi.Pointer<X509_PUBKEY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509_PUBKEY(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_PUBKEY> Function(
              ffi.Pointer<ffi.Pointer<X509_PUBKEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_PUBKEY');
  late final _d2i_X509_PUBKEY = _d2i_X509_PUBKEYPtr.asFunction<
      ffi.Pointer<X509_PUBKEY> Function(ffi.Pointer<ffi.Pointer<X509_PUBKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_X509_PUBKEY(
    ffi.Pointer<X509_PUBKEY> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509_PUBKEY(
      a,
      out,
    );
  }

  late final _i2d_X509_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_PUBKEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_X509_PUBKEY');
  late final _i2d_X509_PUBKEY = _i2d_X509_PUBKEYPtr.asFunction<
      int Function(ffi.Pointer<X509_PUBKEY>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_PUBKEY_it =
      _lookup<ASN1_ITEM>('X509_PUBKEY_it');

  ffi.Pointer<ASN1_ITEM> get X509_PUBKEY_it => _X509_PUBKEY_it;

  int X509_PUBKEY_set(
    ffi.Pointer<ffi.Pointer<X509_PUBKEY>> x,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _X509_PUBKEY_set(
      x,
      pkey,
    );
  }

  late final _X509_PUBKEY_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<X509_PUBKEY>>,
              ffi.Pointer<EVP_PKEY>)>>('X509_PUBKEY_set');
  late final _X509_PUBKEY_set = _X509_PUBKEY_setPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<X509_PUBKEY>>, ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY> X509_PUBKEY_get0(
    ffi.Pointer<X509_PUBKEY> key,
  ) {
    return _X509_PUBKEY_get0(
      key,
    );
  }

  late final _X509_PUBKEY_get0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<X509_PUBKEY>)>>('X509_PUBKEY_get0');
  late final _X509_PUBKEY_get0 = _X509_PUBKEY_get0Ptr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<X509_PUBKEY>)>();

  ffi.Pointer<EVP_PKEY> X509_PUBKEY_get(
    ffi.Pointer<X509_PUBKEY> key,
  ) {
    return _X509_PUBKEY_get(
      key,
    );
  }

  late final _X509_PUBKEY_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<X509_PUBKEY>)>>('X509_PUBKEY_get');
  late final _X509_PUBKEY_get = _X509_PUBKEY_getPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<X509_PUBKEY>)>();

  int X509_get_pubkey_parameters(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<stack_st_X509> chain,
  ) {
    return _X509_get_pubkey_parameters(
      pkey,
      chain,
    );
  }

  late final _X509_get_pubkey_parametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<stack_st_X509>)>>('X509_get_pubkey_parameters');
  late final _X509_get_pubkey_parameters =
      _X509_get_pubkey_parametersPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<stack_st_X509>)>();

  int X509_get_pathlen(
    ffi.Pointer<X509> x,
  ) {
    return _X509_get_pathlen(
      x,
    );
  }

  late final _X509_get_pathlenPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<X509>)>>(
          'X509_get_pathlen');
  late final _X509_get_pathlen =
      _X509_get_pathlenPtr.asFunction<int Function(ffi.Pointer<X509>)>();

  int i2d_PUBKEY(
    ffi.Pointer<EVP_PKEY> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_PUBKEY(
      a,
      pp,
    );
  }

  late final _i2d_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_PUBKEY');
  late final _i2d_PUBKEY = _i2d_PUBKEYPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<EVP_PKEY> d2i_PUBKEY(
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_PUBKEY(
      a,
      pp,
      length,
    );
  }

  late final _d2i_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PUBKEY');
  late final _d2i_PUBKEY = _d2i_PUBKEYPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_RSA_PUBKEY(
    ffi.Pointer<RSA> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_RSA_PUBKEY(
      a,
      pp,
    );
  }

  late final _i2d_RSA_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<RSA>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_RSA_PUBKEY');
  late final _i2d_RSA_PUBKEY = _i2d_RSA_PUBKEYPtr.asFunction<
      int Function(
          ffi.Pointer<RSA>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<RSA> d2i_RSA_PUBKEY(
    ffi.Pointer<ffi.Pointer<RSA>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_RSA_PUBKEY(
      a,
      pp,
      length,
    );
  }

  late final _d2i_RSA_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA> Function(
              ffi.Pointer<ffi.Pointer<RSA>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_RSA_PUBKEY');
  late final _d2i_RSA_PUBKEY = _d2i_RSA_PUBKEYPtr.asFunction<
      ffi.Pointer<RSA> Function(ffi.Pointer<ffi.Pointer<RSA>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_DSA_PUBKEY(
    ffi.Pointer<DSA> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_DSA_PUBKEY(
      a,
      pp,
    );
  }

  late final _i2d_DSA_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DSA>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_DSA_PUBKEY');
  late final _i2d_DSA_PUBKEY = _i2d_DSA_PUBKEYPtr.asFunction<
      int Function(
          ffi.Pointer<DSA>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<DSA> d2i_DSA_PUBKEY(
    ffi.Pointer<ffi.Pointer<DSA>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_DSA_PUBKEY(
      a,
      pp,
      length,
    );
  }

  late final _d2i_DSA_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA> Function(
              ffi.Pointer<ffi.Pointer<DSA>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_DSA_PUBKEY');
  late final _d2i_DSA_PUBKEY = _d2i_DSA_PUBKEYPtr.asFunction<
      ffi.Pointer<DSA> Function(ffi.Pointer<ffi.Pointer<DSA>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_EC_PUBKEY(
    ffi.Pointer<EC_KEY> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_EC_PUBKEY(
      a,
      pp,
    );
  }

  late final _i2d_EC_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EC_KEY>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_EC_PUBKEY');
  late final _i2d_EC_PUBKEY = _i2d_EC_PUBKEYPtr.asFunction<
      int Function(
          ffi.Pointer<EC_KEY>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<EC_KEY> d2i_EC_PUBKEY(
    ffi.Pointer<ffi.Pointer<EC_KEY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_EC_PUBKEY(
      a,
      pp,
      length,
    );
  }

  late final _d2i_EC_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(
              ffi.Pointer<ffi.Pointer<EC_KEY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_EC_PUBKEY');
  late final _d2i_EC_PUBKEY = _d2i_EC_PUBKEYPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(ffi.Pointer<ffi.Pointer<EC_KEY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  ffi.Pointer<X509_SIG> X509_SIG_new() {
    return _X509_SIG_new();
  }

  late final _X509_SIG_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_SIG> Function()>>(
          'X509_SIG_new');
  late final _X509_SIG_new =
      _X509_SIG_newPtr.asFunction<ffi.Pointer<X509_SIG> Function()>();

  void X509_SIG_free(
    ffi.Pointer<X509_SIG> a,
  ) {
    return _X509_SIG_free(
      a,
    );
  }

  late final _X509_SIG_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_SIG>)>>(
          'X509_SIG_free');
  late final _X509_SIG_free =
      _X509_SIG_freePtr.asFunction<void Function(ffi.Pointer<X509_SIG>)>();

  ffi.Pointer<X509_SIG> d2i_X509_SIG(
    ffi.Pointer<ffi.Pointer<X509_SIG>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509_SIG(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509_SIGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_SIG> Function(
              ffi.Pointer<ffi.Pointer<X509_SIG>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_SIG');
  late final _d2i_X509_SIG = _d2i_X509_SIGPtr.asFunction<
      ffi.Pointer<X509_SIG> Function(ffi.Pointer<ffi.Pointer<X509_SIG>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_X509_SIG(
    ffi.Pointer<X509_SIG> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509_SIG(
      a,
      out,
    );
  }

  late final _i2d_X509_SIGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_SIG>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_X509_SIG');
  late final _i2d_X509_SIG = _i2d_X509_SIGPtr.asFunction<
      int Function(
          ffi.Pointer<X509_SIG>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_SIG_it =
      _lookup<ASN1_ITEM>('X509_SIG_it');

  ffi.Pointer<ASN1_ITEM> get X509_SIG_it => _X509_SIG_it;

  void X509_SIG_get0(
    ffi.Pointer<X509_SIG> sig,
    ffi.Pointer<ffi.Pointer<X509_ALGOR>> palg,
    ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>> pdigest,
  ) {
    return _X509_SIG_get0(
      sig,
      palg,
      pdigest,
    );
  }

  late final _X509_SIG_get0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<X509_SIG>,
              ffi.Pointer<ffi.Pointer<X509_ALGOR>>,
              ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>>)>>('X509_SIG_get0');
  late final _X509_SIG_get0 = _X509_SIG_get0Ptr.asFunction<
      void Function(ffi.Pointer<X509_SIG>, ffi.Pointer<ffi.Pointer<X509_ALGOR>>,
          ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>>)>();

  void X509_SIG_getm(
    ffi.Pointer<X509_SIG> sig,
    ffi.Pointer<ffi.Pointer<X509_ALGOR>> palg,
    ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>> pdigest,
  ) {
    return _X509_SIG_getm(
      sig,
      palg,
      pdigest,
    );
  }

  late final _X509_SIG_getmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<X509_SIG>,
              ffi.Pointer<ffi.Pointer<X509_ALGOR>>,
              ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>>)>>('X509_SIG_getm');
  late final _X509_SIG_getm = _X509_SIG_getmPtr.asFunction<
      void Function(ffi.Pointer<X509_SIG>, ffi.Pointer<ffi.Pointer<X509_ALGOR>>,
          ffi.Pointer<ffi.Pointer<ASN1_OCTET_STRING>>)>();

  ffi.Pointer<X509_REQ_INFO> X509_REQ_INFO_new() {
    return _X509_REQ_INFO_new();
  }

  late final _X509_REQ_INFO_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_REQ_INFO> Function()>>(
          'X509_REQ_INFO_new');
  late final _X509_REQ_INFO_new =
      _X509_REQ_INFO_newPtr.asFunction<ffi.Pointer<X509_REQ_INFO> Function()>();

  void X509_REQ_INFO_free(
    ffi.Pointer<X509_REQ_INFO> a,
  ) {
    return _X509_REQ_INFO_free(
      a,
    );
  }

  late final _X509_REQ_INFO_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_REQ_INFO>)>>(
      'X509_REQ_INFO_free');
  late final _X509_REQ_INFO_free = _X509_REQ_INFO_freePtr.asFunction<
      void Function(ffi.Pointer<X509_REQ_INFO>)>();

  ffi.Pointer<X509_REQ_INFO> d2i_X509_REQ_INFO(
    ffi.Pointer<ffi.Pointer<X509_REQ_INFO>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509_REQ_INFO(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509_REQ_INFOPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_REQ_INFO> Function(
              ffi.Pointer<ffi.Pointer<X509_REQ_INFO>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_REQ_INFO');
  late final _d2i_X509_REQ_INFO = _d2i_X509_REQ_INFOPtr.asFunction<
      ffi.Pointer<X509_REQ_INFO> Function(
          ffi.Pointer<ffi.Pointer<X509_REQ_INFO>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_X509_REQ_INFO(
    ffi.Pointer<X509_REQ_INFO> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509_REQ_INFO(
      a,
      out,
    );
  }

  late final _i2d_X509_REQ_INFOPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<X509_REQ_INFO>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_X509_REQ_INFO');
  late final _i2d_X509_REQ_INFO = _i2d_X509_REQ_INFOPtr.asFunction<
      int Function(ffi.Pointer<X509_REQ_INFO>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_REQ_INFO_it =
      _lookup<ASN1_ITEM>('X509_REQ_INFO_it');

  ffi.Pointer<ASN1_ITEM> get X509_REQ_INFO_it => _X509_REQ_INFO_it;

  ffi.Pointer<X509_REQ> X509_REQ_new() {
    return _X509_REQ_new();
  }

  late final _X509_REQ_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_REQ> Function()>>(
          'X509_REQ_new');
  late final _X509_REQ_new =
      _X509_REQ_newPtr.asFunction<ffi.Pointer<X509_REQ> Function()>();

  void X509_REQ_free(
    ffi.Pointer<X509_REQ> a,
  ) {
    return _X509_REQ_free(
      a,
    );
  }

  late final _X509_REQ_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_REQ>)>>(
          'X509_REQ_free');
  late final _X509_REQ_free =
      _X509_REQ_freePtr.asFunction<void Function(ffi.Pointer<X509_REQ>)>();

  ffi.Pointer<X509_REQ> d2i_X509_REQ(
    ffi.Pointer<ffi.Pointer<X509_REQ>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509_REQ(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509_REQPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_REQ> Function(
              ffi.Pointer<ffi.Pointer<X509_REQ>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_REQ');
  late final _d2i_X509_REQ = _d2i_X509_REQPtr.asFunction<
      ffi.Pointer<X509_REQ> Function(ffi.Pointer<ffi.Pointer<X509_REQ>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_X509_REQ(
    ffi.Pointer<X509_REQ> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509_REQ(
      a,
      out,
    );
  }

  late final _i2d_X509_REQPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REQ>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_X509_REQ');
  late final _i2d_X509_REQ = _i2d_X509_REQPtr.asFunction<
      int Function(
          ffi.Pointer<X509_REQ>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_REQ_it =
      _lookup<ASN1_ITEM>('X509_REQ_it');

  ffi.Pointer<ASN1_ITEM> get X509_REQ_it => _X509_REQ_it;

  ffi.Pointer<X509_ATTRIBUTE> X509_ATTRIBUTE_new() {
    return _X509_ATTRIBUTE_new();
  }

  late final _X509_ATTRIBUTE_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_ATTRIBUTE> Function()>>(
          'X509_ATTRIBUTE_new');
  late final _X509_ATTRIBUTE_new = _X509_ATTRIBUTE_newPtr.asFunction<
      ffi.Pointer<X509_ATTRIBUTE> Function()>();

  void X509_ATTRIBUTE_free(
    ffi.Pointer<X509_ATTRIBUTE> a,
  ) {
    return _X509_ATTRIBUTE_free(
      a,
    );
  }

  late final _X509_ATTRIBUTE_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_ATTRIBUTE>)>>(
      'X509_ATTRIBUTE_free');
  late final _X509_ATTRIBUTE_free = _X509_ATTRIBUTE_freePtr.asFunction<
      void Function(ffi.Pointer<X509_ATTRIBUTE>)>();

  ffi.Pointer<X509_ATTRIBUTE> d2i_X509_ATTRIBUTE(
    ffi.Pointer<ffi.Pointer<X509_ATTRIBUTE>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509_ATTRIBUTE(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509_ATTRIBUTEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ATTRIBUTE> Function(
              ffi.Pointer<ffi.Pointer<X509_ATTRIBUTE>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_ATTRIBUTE');
  late final _d2i_X509_ATTRIBUTE = _d2i_X509_ATTRIBUTEPtr.asFunction<
      ffi.Pointer<X509_ATTRIBUTE> Function(
          ffi.Pointer<ffi.Pointer<X509_ATTRIBUTE>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_X509_ATTRIBUTE(
    ffi.Pointer<X509_ATTRIBUTE> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509_ATTRIBUTE(
      a,
      out,
    );
  }

  late final _i2d_X509_ATTRIBUTEPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<X509_ATTRIBUTE>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_X509_ATTRIBUTE');
  late final _i2d_X509_ATTRIBUTE = _i2d_X509_ATTRIBUTEPtr.asFunction<
      int Function(ffi.Pointer<X509_ATTRIBUTE>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_ATTRIBUTE_it =
      _lookup<ASN1_ITEM>('X509_ATTRIBUTE_it');

  ffi.Pointer<ASN1_ITEM> get X509_ATTRIBUTE_it => _X509_ATTRIBUTE_it;

  ffi.Pointer<X509_ATTRIBUTE> X509_ATTRIBUTE_create(
    int nid,
    int atrtype,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _X509_ATTRIBUTE_create(
      nid,
      atrtype,
      value,
    );
  }

  late final _X509_ATTRIBUTE_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ATTRIBUTE> Function(ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('X509_ATTRIBUTE_create');
  late final _X509_ATTRIBUTE_create = _X509_ATTRIBUTE_createPtr.asFunction<
      ffi.Pointer<X509_ATTRIBUTE> Function(int, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<X509_EXTENSION> X509_EXTENSION_new() {
    return _X509_EXTENSION_new();
  }

  late final _X509_EXTENSION_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_EXTENSION> Function()>>(
          'X509_EXTENSION_new');
  late final _X509_EXTENSION_new = _X509_EXTENSION_newPtr.asFunction<
      ffi.Pointer<X509_EXTENSION> Function()>();

  void X509_EXTENSION_free(
    ffi.Pointer<X509_EXTENSION> a,
  ) {
    return _X509_EXTENSION_free(
      a,
    );
  }

  late final _X509_EXTENSION_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_EXTENSION>)>>(
      'X509_EXTENSION_free');
  late final _X509_EXTENSION_free = _X509_EXTENSION_freePtr.asFunction<
      void Function(ffi.Pointer<X509_EXTENSION>)>();

  ffi.Pointer<X509_EXTENSION> d2i_X509_EXTENSION(
    ffi.Pointer<ffi.Pointer<X509_EXTENSION>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509_EXTENSION(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509_EXTENSIONPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_EXTENSION> Function(
              ffi.Pointer<ffi.Pointer<X509_EXTENSION>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_EXTENSION');
  late final _d2i_X509_EXTENSION = _d2i_X509_EXTENSIONPtr.asFunction<
      ffi.Pointer<X509_EXTENSION> Function(
          ffi.Pointer<ffi.Pointer<X509_EXTENSION>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_X509_EXTENSION(
    ffi.Pointer<X509_EXTENSION> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509_EXTENSION(
      a,
      out,
    );
  }

  late final _i2d_X509_EXTENSIONPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<X509_EXTENSION>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_X509_EXTENSION');
  late final _i2d_X509_EXTENSION = _i2d_X509_EXTENSIONPtr.asFunction<
      int Function(ffi.Pointer<X509_EXTENSION>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_EXTENSION_it =
      _lookup<ASN1_ITEM>('X509_EXTENSION_it');

  ffi.Pointer<ASN1_ITEM> get X509_EXTENSION_it => _X509_EXTENSION_it;

  ffi.Pointer<X509_EXTENSIONS> d2i_X509_EXTENSIONS(
    ffi.Pointer<ffi.Pointer<X509_EXTENSIONS>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509_EXTENSIONS(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509_EXTENSIONSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_EXTENSIONS> Function(
              ffi.Pointer<ffi.Pointer<X509_EXTENSIONS>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_EXTENSIONS');
  late final _d2i_X509_EXTENSIONS = _d2i_X509_EXTENSIONSPtr.asFunction<
      ffi.Pointer<X509_EXTENSIONS> Function(
          ffi.Pointer<ffi.Pointer<X509_EXTENSIONS>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_X509_EXTENSIONS(
    ffi.Pointer<X509_EXTENSIONS> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509_EXTENSIONS(
      a,
      out,
    );
  }

  late final _i2d_X509_EXTENSIONSPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<X509_EXTENSIONS>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_X509_EXTENSIONS');
  late final _i2d_X509_EXTENSIONS = _i2d_X509_EXTENSIONSPtr.asFunction<
      int Function(ffi.Pointer<X509_EXTENSIONS>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_EXTENSIONS_it =
      _lookup<ASN1_ITEM>('X509_EXTENSIONS_it');

  ffi.Pointer<ASN1_ITEM> get X509_EXTENSIONS_it => _X509_EXTENSIONS_it;

  ffi.Pointer<X509_NAME_ENTRY> X509_NAME_ENTRY_new() {
    return _X509_NAME_ENTRY_new();
  }

  late final _X509_NAME_ENTRY_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_NAME_ENTRY> Function()>>(
          'X509_NAME_ENTRY_new');
  late final _X509_NAME_ENTRY_new = _X509_NAME_ENTRY_newPtr.asFunction<
      ffi.Pointer<X509_NAME_ENTRY> Function()>();

  void X509_NAME_ENTRY_free(
    ffi.Pointer<X509_NAME_ENTRY> a,
  ) {
    return _X509_NAME_ENTRY_free(
      a,
    );
  }

  late final _X509_NAME_ENTRY_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_NAME_ENTRY>)>>(
      'X509_NAME_ENTRY_free');
  late final _X509_NAME_ENTRY_free = _X509_NAME_ENTRY_freePtr.asFunction<
      void Function(ffi.Pointer<X509_NAME_ENTRY>)>();

  ffi.Pointer<X509_NAME_ENTRY> d2i_X509_NAME_ENTRY(
    ffi.Pointer<ffi.Pointer<X509_NAME_ENTRY>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509_NAME_ENTRY(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509_NAME_ENTRYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_NAME_ENTRY> Function(
              ffi.Pointer<ffi.Pointer<X509_NAME_ENTRY>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_NAME_ENTRY');
  late final _d2i_X509_NAME_ENTRY = _d2i_X509_NAME_ENTRYPtr.asFunction<
      ffi.Pointer<X509_NAME_ENTRY> Function(
          ffi.Pointer<ffi.Pointer<X509_NAME_ENTRY>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_X509_NAME_ENTRY(
    ffi.Pointer<X509_NAME_ENTRY> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509_NAME_ENTRY(
      a,
      out,
    );
  }

  late final _i2d_X509_NAME_ENTRYPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<X509_NAME_ENTRY>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_X509_NAME_ENTRY');
  late final _i2d_X509_NAME_ENTRY = _i2d_X509_NAME_ENTRYPtr.asFunction<
      int Function(ffi.Pointer<X509_NAME_ENTRY>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_NAME_ENTRY_it =
      _lookup<ASN1_ITEM>('X509_NAME_ENTRY_it');

  ffi.Pointer<ASN1_ITEM> get X509_NAME_ENTRY_it => _X509_NAME_ENTRY_it;

  ffi.Pointer<X509_NAME> X509_NAME_new() {
    return _X509_NAME_new();
  }

  late final _X509_NAME_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_NAME> Function()>>(
          'X509_NAME_new');
  late final _X509_NAME_new =
      _X509_NAME_newPtr.asFunction<ffi.Pointer<X509_NAME> Function()>();

  void X509_NAME_free(
    ffi.Pointer<X509_NAME> a,
  ) {
    return _X509_NAME_free(
      a,
    );
  }

  late final _X509_NAME_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_NAME>)>>(
          'X509_NAME_free');
  late final _X509_NAME_free =
      _X509_NAME_freePtr.asFunction<void Function(ffi.Pointer<X509_NAME>)>();

  ffi.Pointer<X509_NAME> d2i_X509_NAME(
    ffi.Pointer<ffi.Pointer<X509_NAME>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509_NAME(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509_NAMEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_NAME> Function(
              ffi.Pointer<ffi.Pointer<X509_NAME>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_NAME');
  late final _d2i_X509_NAME = _d2i_X509_NAMEPtr.asFunction<
      ffi.Pointer<X509_NAME> Function(ffi.Pointer<ffi.Pointer<X509_NAME>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_X509_NAME(
    ffi.Pointer<X509_NAME> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509_NAME(
      a,
      out,
    );
  }

  late final _i2d_X509_NAMEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_NAME>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_X509_NAME');
  late final _i2d_X509_NAME = _i2d_X509_NAMEPtr.asFunction<
      int Function(ffi.Pointer<X509_NAME>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_NAME_it =
      _lookup<ASN1_ITEM>('X509_NAME_it');

  ffi.Pointer<ASN1_ITEM> get X509_NAME_it => _X509_NAME_it;

  int X509_NAME_set(
    ffi.Pointer<ffi.Pointer<X509_NAME>> xn,
    ffi.Pointer<X509_NAME> name,
  ) {
    return _X509_NAME_set(
      xn,
      name,
    );
  }

  late final _X509_NAME_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<X509_NAME>>,
              ffi.Pointer<X509_NAME>)>>('X509_NAME_set');
  late final _X509_NAME_set = _X509_NAME_setPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<X509_NAME>>, ffi.Pointer<X509_NAME>)>();

  ffi.Pointer<X509_CINF> X509_CINF_new() {
    return _X509_CINF_new();
  }

  late final _X509_CINF_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_CINF> Function()>>(
          'X509_CINF_new');
  late final _X509_CINF_new =
      _X509_CINF_newPtr.asFunction<ffi.Pointer<X509_CINF> Function()>();

  void X509_CINF_free(
    ffi.Pointer<X509_CINF> a,
  ) {
    return _X509_CINF_free(
      a,
    );
  }

  late final _X509_CINF_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_CINF>)>>(
          'X509_CINF_free');
  late final _X509_CINF_free =
      _X509_CINF_freePtr.asFunction<void Function(ffi.Pointer<X509_CINF>)>();

  ffi.Pointer<X509_CINF> d2i_X509_CINF(
    ffi.Pointer<ffi.Pointer<X509_CINF>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509_CINF(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509_CINFPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_CINF> Function(
              ffi.Pointer<ffi.Pointer<X509_CINF>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_CINF');
  late final _d2i_X509_CINF = _d2i_X509_CINFPtr.asFunction<
      ffi.Pointer<X509_CINF> Function(ffi.Pointer<ffi.Pointer<X509_CINF>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_X509_CINF(
    ffi.Pointer<X509_CINF> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509_CINF(
      a,
      out,
    );
  }

  late final _i2d_X509_CINFPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_CINF>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_X509_CINF');
  late final _i2d_X509_CINF = _i2d_X509_CINFPtr.asFunction<
      int Function(ffi.Pointer<X509_CINF>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_CINF_it =
      _lookup<ASN1_ITEM>('X509_CINF_it');

  ffi.Pointer<ASN1_ITEM> get X509_CINF_it => _X509_CINF_it;

  ffi.Pointer<X509> X509_new() {
    return _X509_new();
  }

  late final _X509_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509> Function()>>('X509_new');
  late final _X509_new =
      _X509_newPtr.asFunction<ffi.Pointer<X509> Function()>();

  void X509_free(
    ffi.Pointer<X509> a,
  ) {
    return _X509_free(
      a,
    );
  }

  late final _X509_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509>)>>(
          'X509_free');
  late final _X509_free =
      _X509_freePtr.asFunction<void Function(ffi.Pointer<X509>)>();

  ffi.Pointer<X509> d2i_X509(
    ffi.Pointer<ffi.Pointer<X509>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509> Function(
              ffi.Pointer<ffi.Pointer<X509>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509');
  late final _d2i_X509 = _d2i_X509Ptr.asFunction<
      ffi.Pointer<X509> Function(ffi.Pointer<ffi.Pointer<X509>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_X509(
    ffi.Pointer<X509> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509(
      a,
      out,
    );
  }

  late final _i2d_X509Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_X509');
  late final _i2d_X509 = _i2d_X509Ptr.asFunction<
      int Function(
          ffi.Pointer<X509>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_it = _lookup<ASN1_ITEM>('X509_it');

  ffi.Pointer<ASN1_ITEM> get X509_it => _X509_it;

  ffi.Pointer<X509_CERT_AUX> X509_CERT_AUX_new() {
    return _X509_CERT_AUX_new();
  }

  late final _X509_CERT_AUX_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_CERT_AUX> Function()>>(
          'X509_CERT_AUX_new');
  late final _X509_CERT_AUX_new =
      _X509_CERT_AUX_newPtr.asFunction<ffi.Pointer<X509_CERT_AUX> Function()>();

  void X509_CERT_AUX_free(
    ffi.Pointer<X509_CERT_AUX> a,
  ) {
    return _X509_CERT_AUX_free(
      a,
    );
  }

  late final _X509_CERT_AUX_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_CERT_AUX>)>>(
      'X509_CERT_AUX_free');
  late final _X509_CERT_AUX_free = _X509_CERT_AUX_freePtr.asFunction<
      void Function(ffi.Pointer<X509_CERT_AUX>)>();

  ffi.Pointer<X509_CERT_AUX> d2i_X509_CERT_AUX(
    ffi.Pointer<ffi.Pointer<X509_CERT_AUX>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509_CERT_AUX(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509_CERT_AUXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_CERT_AUX> Function(
              ffi.Pointer<ffi.Pointer<X509_CERT_AUX>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_CERT_AUX');
  late final _d2i_X509_CERT_AUX = _d2i_X509_CERT_AUXPtr.asFunction<
      ffi.Pointer<X509_CERT_AUX> Function(
          ffi.Pointer<ffi.Pointer<X509_CERT_AUX>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_X509_CERT_AUX(
    ffi.Pointer<X509_CERT_AUX> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509_CERT_AUX(
      a,
      out,
    );
  }

  late final _i2d_X509_CERT_AUXPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<X509_CERT_AUX>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_X509_CERT_AUX');
  late final _i2d_X509_CERT_AUX = _i2d_X509_CERT_AUXPtr.asFunction<
      int Function(ffi.Pointer<X509_CERT_AUX>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_CERT_AUX_it =
      _lookup<ASN1_ITEM>('X509_CERT_AUX_it');

  ffi.Pointer<ASN1_ITEM> get X509_CERT_AUX_it => _X509_CERT_AUX_it;

  int X509_set_ex_data(
    ffi.Pointer<X509> r,
    int idx,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _X509_set_ex_data(
      r,
      idx,
      arg,
    );
  }

  late final _X509_set_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('X509_set_ex_data');
  late final _X509_set_ex_data = _X509_set_ex_dataPtr.asFunction<
      int Function(ffi.Pointer<X509>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> X509_get_ex_data(
    ffi.Pointer<X509> r,
    int idx,
  ) {
    return _X509_get_ex_data(
      r,
      idx,
    );
  }

  late final _X509_get_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<X509>, ffi.Int)>>('X509_get_ex_data');
  late final _X509_get_ex_data = _X509_get_ex_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<X509>, int)>();

  int i2d_X509_AUX(
    ffi.Pointer<X509> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_X509_AUX(
      a,
      pp,
    );
  }

  late final _i2d_X509_AUXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_X509_AUX');
  late final _i2d_X509_AUX = _i2d_X509_AUXPtr.asFunction<
      int Function(
          ffi.Pointer<X509>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<X509> d2i_X509_AUX(
    ffi.Pointer<ffi.Pointer<X509>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
    int length,
  ) {
    return _d2i_X509_AUX(
      a,
      pp,
      length,
    );
  }

  late final _d2i_X509_AUXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509> Function(
              ffi.Pointer<ffi.Pointer<X509>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_AUX');
  late final _d2i_X509_AUX = _d2i_X509_AUXPtr.asFunction<
      ffi.Pointer<X509> Function(ffi.Pointer<ffi.Pointer<X509>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_re_X509_tbs(
    ffi.Pointer<X509> x,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_re_X509_tbs(
      x,
      pp,
    );
  }

  late final _i2d_re_X509_tbsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_re_X509_tbs');
  late final _i2d_re_X509_tbs = _i2d_re_X509_tbsPtr.asFunction<
      int Function(
          ffi.Pointer<X509>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int X509_SIG_INFO_get(
    ffi.Pointer<X509_SIG_INFO> siginf,
    ffi.Pointer<ffi.Int> mdnid,
    ffi.Pointer<ffi.Int> pknid,
    ffi.Pointer<ffi.Int> secbits,
    ffi.Pointer<ffi.Uint32> flags,
  ) {
    return _X509_SIG_INFO_get(
      siginf,
      mdnid,
      pknid,
      secbits,
      flags,
    );
  }

  late final _X509_SIG_INFO_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_SIG_INFO>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Uint32>)>>('X509_SIG_INFO_get');
  late final _X509_SIG_INFO_get = _X509_SIG_INFO_getPtr.asFunction<
      int Function(
          ffi.Pointer<X509_SIG_INFO>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Uint32>)>();

  void X509_SIG_INFO_set(
    ffi.Pointer<X509_SIG_INFO> siginf,
    int mdnid,
    int pknid,
    int secbits,
    int flags,
  ) {
    return _X509_SIG_INFO_set(
      siginf,
      mdnid,
      pknid,
      secbits,
      flags,
    );
  }

  late final _X509_SIG_INFO_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_SIG_INFO>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Uint32)>>('X509_SIG_INFO_set');
  late final _X509_SIG_INFO_set = _X509_SIG_INFO_setPtr.asFunction<
      void Function(ffi.Pointer<X509_SIG_INFO>, int, int, int, int)>();

  int X509_get_signature_info(
    ffi.Pointer<X509> x,
    ffi.Pointer<ffi.Int> mdnid,
    ffi.Pointer<ffi.Int> pknid,
    ffi.Pointer<ffi.Int> secbits,
    ffi.Pointer<ffi.Uint32> flags,
  ) {
    return _X509_get_signature_info(
      x,
      mdnid,
      pknid,
      secbits,
      flags,
    );
  }

  late final _X509_get_signature_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Uint32>)>>('X509_get_signature_info');
  late final _X509_get_signature_info = _X509_get_signature_infoPtr.asFunction<
      int Function(
          ffi.Pointer<X509>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Uint32>)>();

  void X509_get0_signature(
    ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>> psig,
    ffi.Pointer<ffi.Pointer<X509_ALGOR>> palg,
    ffi.Pointer<X509> x,
  ) {
    return _X509_get0_signature(
      psig,
      palg,
      x,
    );
  }

  late final _X509_get0_signaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>>,
              ffi.Pointer<ffi.Pointer<X509_ALGOR>>,
              ffi.Pointer<X509>)>>('X509_get0_signature');
  late final _X509_get0_signature = _X509_get0_signaturePtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>>,
          ffi.Pointer<ffi.Pointer<X509_ALGOR>>, ffi.Pointer<X509>)>();

  int X509_get_signature_nid(
    ffi.Pointer<X509> x,
  ) {
    return _X509_get_signature_nid(
      x,
    );
  }

  late final _X509_get_signature_nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509>)>>(
          'X509_get_signature_nid');
  late final _X509_get_signature_nid =
      _X509_get_signature_nidPtr.asFunction<int Function(ffi.Pointer<X509>)>();

  int X509_trusted(
    ffi.Pointer<X509> x,
  ) {
    return _X509_trusted(
      x,
    );
  }

  late final _X509_trustedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509>)>>(
          'X509_trusted');
  late final _X509_trusted =
      _X509_trustedPtr.asFunction<int Function(ffi.Pointer<X509>)>();

  int X509_alias_set1(
    ffi.Pointer<X509> x,
    ffi.Pointer<ffi.UnsignedChar> name,
    int len,
  ) {
    return _X509_alias_set1(
      x,
      name,
      len,
    );
  }

  late final _X509_alias_set1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('X509_alias_set1');
  late final _X509_alias_set1 = _X509_alias_set1Ptr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int X509_keyid_set1(
    ffi.Pointer<X509> x,
    ffi.Pointer<ffi.UnsignedChar> id,
    int len,
  ) {
    return _X509_keyid_set1(
      x,
      id,
      len,
    );
  }

  late final _X509_keyid_set1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('X509_keyid_set1');
  late final _X509_keyid_set1 = _X509_keyid_set1Ptr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ffi.UnsignedChar> X509_alias_get0(
    ffi.Pointer<X509> x,
    ffi.Pointer<ffi.Int> len,
  ) {
    return _X509_alias_get0(
      x,
      len,
    );
  }

  late final _X509_alias_get0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<X509>, ffi.Pointer<ffi.Int>)>>('X509_alias_get0');
  late final _X509_alias_get0 = _X509_alias_get0Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<X509>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.UnsignedChar> X509_keyid_get0(
    ffi.Pointer<X509> x,
    ffi.Pointer<ffi.Int> len,
  ) {
    return _X509_keyid_get0(
      x,
      len,
    );
  }

  late final _X509_keyid_get0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<X509>, ffi.Pointer<ffi.Int>)>>('X509_keyid_get0');
  late final _X509_keyid_get0 = _X509_keyid_get0Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<X509>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Pointer<X509>, ffi.Int)>>
      X509_TRUST_set_default(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Int, ffi.Pointer<X509>, ffi.Int)>>
        trust,
  ) {
    return _X509_TRUST_set_default(
      trust,
    );
  }

  late final _X509_TRUST_set_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<X509>, ffi.Int)>> Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Int, ffi.Pointer<X509>,
                          ffi.Int)>>)>>('X509_TRUST_set_default');
  late final _X509_TRUST_set_default = _X509_TRUST_set_defaultPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<X509>, ffi.Int)>> Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Int, ffi.Pointer<X509>, ffi.Int)>>)>();

  int X509_TRUST_set(
    ffi.Pointer<ffi.Int> t,
    int trust,
  ) {
    return _X509_TRUST_set(
      t,
      trust,
    );
  }

  late final _X509_TRUST_setPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'X509_TRUST_set');
  late final _X509_TRUST_set =
      _X509_TRUST_setPtr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  int X509_add1_trust_object(
    ffi.Pointer<X509> x,
    ffi.Pointer<ASN1_OBJECT> obj,
  ) {
    return _X509_add1_trust_object(
      x,
      obj,
    );
  }

  late final _X509_add1_trust_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>,
              ffi.Pointer<ASN1_OBJECT>)>>('X509_add1_trust_object');
  late final _X509_add1_trust_object = _X509_add1_trust_objectPtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<ASN1_OBJECT>)>();

  int X509_add1_reject_object(
    ffi.Pointer<X509> x,
    ffi.Pointer<ASN1_OBJECT> obj,
  ) {
    return _X509_add1_reject_object(
      x,
      obj,
    );
  }

  late final _X509_add1_reject_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>,
              ffi.Pointer<ASN1_OBJECT>)>>('X509_add1_reject_object');
  late final _X509_add1_reject_object = _X509_add1_reject_objectPtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<ASN1_OBJECT>)>();

  void X509_trust_clear(
    ffi.Pointer<X509> x,
  ) {
    return _X509_trust_clear(
      x,
    );
  }

  late final _X509_trust_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509>)>>(
          'X509_trust_clear');
  late final _X509_trust_clear =
      _X509_trust_clearPtr.asFunction<void Function(ffi.Pointer<X509>)>();

  void X509_reject_clear(
    ffi.Pointer<X509> x,
  ) {
    return _X509_reject_clear(
      x,
    );
  }

  late final _X509_reject_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509>)>>(
          'X509_reject_clear');
  late final _X509_reject_clear =
      _X509_reject_clearPtr.asFunction<void Function(ffi.Pointer<X509>)>();

  ffi.Pointer<stack_st_ASN1_OBJECT> X509_get0_trust_objects(
    ffi.Pointer<X509> x,
  ) {
    return _X509_get0_trust_objects(
      x,
    );
  }

  late final _X509_get0_trust_objectsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_ASN1_OBJECT> Function(
              ffi.Pointer<X509>)>>('X509_get0_trust_objects');
  late final _X509_get0_trust_objects = _X509_get0_trust_objectsPtr.asFunction<
      ffi.Pointer<stack_st_ASN1_OBJECT> Function(ffi.Pointer<X509>)>();

  ffi.Pointer<stack_st_ASN1_OBJECT> X509_get0_reject_objects(
    ffi.Pointer<X509> x,
  ) {
    return _X509_get0_reject_objects(
      x,
    );
  }

  late final _X509_get0_reject_objectsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_ASN1_OBJECT> Function(
              ffi.Pointer<X509>)>>('X509_get0_reject_objects');
  late final _X509_get0_reject_objects =
      _X509_get0_reject_objectsPtr.asFunction<
          ffi.Pointer<stack_st_ASN1_OBJECT> Function(ffi.Pointer<X509>)>();

  ffi.Pointer<X509_REVOKED> X509_REVOKED_new() {
    return _X509_REVOKED_new();
  }

  late final _X509_REVOKED_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_REVOKED> Function()>>(
          'X509_REVOKED_new');
  late final _X509_REVOKED_new =
      _X509_REVOKED_newPtr.asFunction<ffi.Pointer<X509_REVOKED> Function()>();

  void X509_REVOKED_free(
    ffi.Pointer<X509_REVOKED> a,
  ) {
    return _X509_REVOKED_free(
      a,
    );
  }

  late final _X509_REVOKED_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_REVOKED>)>>(
          'X509_REVOKED_free');
  late final _X509_REVOKED_free = _X509_REVOKED_freePtr.asFunction<
      void Function(ffi.Pointer<X509_REVOKED>)>();

  ffi.Pointer<X509_REVOKED> d2i_X509_REVOKED(
    ffi.Pointer<ffi.Pointer<X509_REVOKED>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509_REVOKED(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509_REVOKEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_REVOKED> Function(
              ffi.Pointer<ffi.Pointer<X509_REVOKED>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_REVOKED');
  late final _d2i_X509_REVOKED = _d2i_X509_REVOKEDPtr.asFunction<
      ffi.Pointer<X509_REVOKED> Function(ffi.Pointer<ffi.Pointer<X509_REVOKED>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_X509_REVOKED(
    ffi.Pointer<X509_REVOKED> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509_REVOKED(
      a,
      out,
    );
  }

  late final _i2d_X509_REVOKEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REVOKED>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_X509_REVOKED');
  late final _i2d_X509_REVOKED = _i2d_X509_REVOKEDPtr.asFunction<
      int Function(ffi.Pointer<X509_REVOKED>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_REVOKED_it =
      _lookup<ASN1_ITEM>('X509_REVOKED_it');

  ffi.Pointer<ASN1_ITEM> get X509_REVOKED_it => _X509_REVOKED_it;

  ffi.Pointer<X509_CRL_INFO> X509_CRL_INFO_new() {
    return _X509_CRL_INFO_new();
  }

  late final _X509_CRL_INFO_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_CRL_INFO> Function()>>(
          'X509_CRL_INFO_new');
  late final _X509_CRL_INFO_new =
      _X509_CRL_INFO_newPtr.asFunction<ffi.Pointer<X509_CRL_INFO> Function()>();

  void X509_CRL_INFO_free(
    ffi.Pointer<X509_CRL_INFO> a,
  ) {
    return _X509_CRL_INFO_free(
      a,
    );
  }

  late final _X509_CRL_INFO_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_CRL_INFO>)>>(
      'X509_CRL_INFO_free');
  late final _X509_CRL_INFO_free = _X509_CRL_INFO_freePtr.asFunction<
      void Function(ffi.Pointer<X509_CRL_INFO>)>();

  ffi.Pointer<X509_CRL_INFO> d2i_X509_CRL_INFO(
    ffi.Pointer<ffi.Pointer<X509_CRL_INFO>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509_CRL_INFO(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509_CRL_INFOPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_CRL_INFO> Function(
              ffi.Pointer<ffi.Pointer<X509_CRL_INFO>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_CRL_INFO');
  late final _d2i_X509_CRL_INFO = _d2i_X509_CRL_INFOPtr.asFunction<
      ffi.Pointer<X509_CRL_INFO> Function(
          ffi.Pointer<ffi.Pointer<X509_CRL_INFO>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_X509_CRL_INFO(
    ffi.Pointer<X509_CRL_INFO> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509_CRL_INFO(
      a,
      out,
    );
  }

  late final _i2d_X509_CRL_INFOPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<X509_CRL_INFO>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_X509_CRL_INFO');
  late final _i2d_X509_CRL_INFO = _i2d_X509_CRL_INFOPtr.asFunction<
      int Function(ffi.Pointer<X509_CRL_INFO>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_CRL_INFO_it =
      _lookup<ASN1_ITEM>('X509_CRL_INFO_it');

  ffi.Pointer<ASN1_ITEM> get X509_CRL_INFO_it => _X509_CRL_INFO_it;

  ffi.Pointer<X509_CRL> X509_CRL_new() {
    return _X509_CRL_new();
  }

  late final _X509_CRL_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_CRL> Function()>>(
          'X509_CRL_new');
  late final _X509_CRL_new =
      _X509_CRL_newPtr.asFunction<ffi.Pointer<X509_CRL> Function()>();

  void X509_CRL_free(
    ffi.Pointer<X509_CRL> a,
  ) {
    return _X509_CRL_free(
      a,
    );
  }

  late final _X509_CRL_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_CRL>)>>(
          'X509_CRL_free');
  late final _X509_CRL_free =
      _X509_CRL_freePtr.asFunction<void Function(ffi.Pointer<X509_CRL>)>();

  ffi.Pointer<X509_CRL> d2i_X509_CRL(
    ffi.Pointer<ffi.Pointer<X509_CRL>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_X509_CRL(
      a,
      in1,
      len,
    );
  }

  late final _d2i_X509_CRLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_CRL> Function(
              ffi.Pointer<ffi.Pointer<X509_CRL>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_X509_CRL');
  late final _d2i_X509_CRL = _d2i_X509_CRLPtr.asFunction<
      ffi.Pointer<X509_CRL> Function(ffi.Pointer<ffi.Pointer<X509_CRL>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_X509_CRL(
    ffi.Pointer<X509_CRL> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_X509_CRL(
      a,
      out,
    );
  }

  late final _i2d_X509_CRLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_CRL>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_X509_CRL');
  late final _i2d_X509_CRL = _i2d_X509_CRLPtr.asFunction<
      int Function(
          ffi.Pointer<X509_CRL>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _X509_CRL_it =
      _lookup<ASN1_ITEM>('X509_CRL_it');

  ffi.Pointer<ASN1_ITEM> get X509_CRL_it => _X509_CRL_it;

  int X509_CRL_add0_revoked(
    ffi.Pointer<X509_CRL> crl,
    ffi.Pointer<X509_REVOKED> rev,
  ) {
    return _X509_CRL_add0_revoked(
      crl,
      rev,
    );
  }

  late final _X509_CRL_add0_revokedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_CRL>,
              ffi.Pointer<X509_REVOKED>)>>('X509_CRL_add0_revoked');
  late final _X509_CRL_add0_revoked = _X509_CRL_add0_revokedPtr.asFunction<
      int Function(ffi.Pointer<X509_CRL>, ffi.Pointer<X509_REVOKED>)>();

  int X509_CRL_get0_by_serial(
    ffi.Pointer<X509_CRL> crl,
    ffi.Pointer<ffi.Pointer<X509_REVOKED>> ret,
    ffi.Pointer<ASN1_INTEGER> serial,
  ) {
    return _X509_CRL_get0_by_serial(
      crl,
      ret,
      serial,
    );
  }

  late final _X509_CRL_get0_by_serialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_CRL>,
              ffi.Pointer<ffi.Pointer<X509_REVOKED>>,
              ffi.Pointer<ASN1_INTEGER>)>>('X509_CRL_get0_by_serial');
  late final _X509_CRL_get0_by_serial = _X509_CRL_get0_by_serialPtr.asFunction<
      int Function(ffi.Pointer<X509_CRL>,
          ffi.Pointer<ffi.Pointer<X509_REVOKED>>, ffi.Pointer<ASN1_INTEGER>)>();

  int X509_CRL_get0_by_cert(
    ffi.Pointer<X509_CRL> crl,
    ffi.Pointer<ffi.Pointer<X509_REVOKED>> ret,
    ffi.Pointer<X509> x,
  ) {
    return _X509_CRL_get0_by_cert(
      crl,
      ret,
      x,
    );
  }

  late final _X509_CRL_get0_by_certPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_CRL>,
              ffi.Pointer<ffi.Pointer<X509_REVOKED>>,
              ffi.Pointer<X509>)>>('X509_CRL_get0_by_cert');
  late final _X509_CRL_get0_by_cert = _X509_CRL_get0_by_certPtr.asFunction<
      int Function(ffi.Pointer<X509_CRL>,
          ffi.Pointer<ffi.Pointer<X509_REVOKED>>, ffi.Pointer<X509>)>();

  ffi.Pointer<X509_PKEY> X509_PKEY_new() {
    return _X509_PKEY_new();
  }

  late final _X509_PKEY_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_PKEY> Function()>>(
          'X509_PKEY_new');
  late final _X509_PKEY_new =
      _X509_PKEY_newPtr.asFunction<ffi.Pointer<X509_PKEY> Function()>();

  void X509_PKEY_free(
    ffi.Pointer<X509_PKEY> a,
  ) {
    return _X509_PKEY_free(
      a,
    );
  }

  late final _X509_PKEY_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_PKEY>)>>(
          'X509_PKEY_free');
  late final _X509_PKEY_free =
      _X509_PKEY_freePtr.asFunction<void Function(ffi.Pointer<X509_PKEY>)>();

  ffi.Pointer<NETSCAPE_SPKI> NETSCAPE_SPKI_new() {
    return _NETSCAPE_SPKI_new();
  }

  late final _NETSCAPE_SPKI_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NETSCAPE_SPKI> Function()>>(
          'NETSCAPE_SPKI_new');
  late final _NETSCAPE_SPKI_new =
      _NETSCAPE_SPKI_newPtr.asFunction<ffi.Pointer<NETSCAPE_SPKI> Function()>();

  void NETSCAPE_SPKI_free(
    ffi.Pointer<NETSCAPE_SPKI> a,
  ) {
    return _NETSCAPE_SPKI_free(
      a,
    );
  }

  late final _NETSCAPE_SPKI_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NETSCAPE_SPKI>)>>(
      'NETSCAPE_SPKI_free');
  late final _NETSCAPE_SPKI_free = _NETSCAPE_SPKI_freePtr.asFunction<
      void Function(ffi.Pointer<NETSCAPE_SPKI>)>();

  ffi.Pointer<NETSCAPE_SPKI> d2i_NETSCAPE_SPKI(
    ffi.Pointer<ffi.Pointer<NETSCAPE_SPKI>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_NETSCAPE_SPKI(
      a,
      in1,
      len,
    );
  }

  late final _d2i_NETSCAPE_SPKIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NETSCAPE_SPKI> Function(
              ffi.Pointer<ffi.Pointer<NETSCAPE_SPKI>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_NETSCAPE_SPKI');
  late final _d2i_NETSCAPE_SPKI = _d2i_NETSCAPE_SPKIPtr.asFunction<
      ffi.Pointer<NETSCAPE_SPKI> Function(
          ffi.Pointer<ffi.Pointer<NETSCAPE_SPKI>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_NETSCAPE_SPKI(
    ffi.Pointer<NETSCAPE_SPKI> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_NETSCAPE_SPKI(
      a,
      out,
    );
  }

  late final _i2d_NETSCAPE_SPKIPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<NETSCAPE_SPKI>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_NETSCAPE_SPKI');
  late final _i2d_NETSCAPE_SPKI = _i2d_NETSCAPE_SPKIPtr.asFunction<
      int Function(ffi.Pointer<NETSCAPE_SPKI>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _NETSCAPE_SPKI_it =
      _lookup<ASN1_ITEM>('NETSCAPE_SPKI_it');

  ffi.Pointer<ASN1_ITEM> get NETSCAPE_SPKI_it => _NETSCAPE_SPKI_it;

  ffi.Pointer<NETSCAPE_SPKAC> NETSCAPE_SPKAC_new() {
    return _NETSCAPE_SPKAC_new();
  }

  late final _NETSCAPE_SPKAC_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NETSCAPE_SPKAC> Function()>>(
          'NETSCAPE_SPKAC_new');
  late final _NETSCAPE_SPKAC_new = _NETSCAPE_SPKAC_newPtr.asFunction<
      ffi.Pointer<NETSCAPE_SPKAC> Function()>();

  void NETSCAPE_SPKAC_free(
    ffi.Pointer<NETSCAPE_SPKAC> a,
  ) {
    return _NETSCAPE_SPKAC_free(
      a,
    );
  }

  late final _NETSCAPE_SPKAC_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NETSCAPE_SPKAC>)>>(
      'NETSCAPE_SPKAC_free');
  late final _NETSCAPE_SPKAC_free = _NETSCAPE_SPKAC_freePtr.asFunction<
      void Function(ffi.Pointer<NETSCAPE_SPKAC>)>();

  ffi.Pointer<NETSCAPE_SPKAC> d2i_NETSCAPE_SPKAC(
    ffi.Pointer<ffi.Pointer<NETSCAPE_SPKAC>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_NETSCAPE_SPKAC(
      a,
      in1,
      len,
    );
  }

  late final _d2i_NETSCAPE_SPKACPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NETSCAPE_SPKAC> Function(
              ffi.Pointer<ffi.Pointer<NETSCAPE_SPKAC>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_NETSCAPE_SPKAC');
  late final _d2i_NETSCAPE_SPKAC = _d2i_NETSCAPE_SPKACPtr.asFunction<
      ffi.Pointer<NETSCAPE_SPKAC> Function(
          ffi.Pointer<ffi.Pointer<NETSCAPE_SPKAC>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_NETSCAPE_SPKAC(
    ffi.Pointer<NETSCAPE_SPKAC> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_NETSCAPE_SPKAC(
      a,
      out,
    );
  }

  late final _i2d_NETSCAPE_SPKACPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<NETSCAPE_SPKAC>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_NETSCAPE_SPKAC');
  late final _i2d_NETSCAPE_SPKAC = _i2d_NETSCAPE_SPKACPtr.asFunction<
      int Function(ffi.Pointer<NETSCAPE_SPKAC>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _NETSCAPE_SPKAC_it =
      _lookup<ASN1_ITEM>('NETSCAPE_SPKAC_it');

  ffi.Pointer<ASN1_ITEM> get NETSCAPE_SPKAC_it => _NETSCAPE_SPKAC_it;

  ffi.Pointer<NETSCAPE_CERT_SEQUENCE> NETSCAPE_CERT_SEQUENCE_new() {
    return _NETSCAPE_CERT_SEQUENCE_new();
  }

  late final _NETSCAPE_CERT_SEQUENCE_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<NETSCAPE_CERT_SEQUENCE> Function()>>(
      'NETSCAPE_CERT_SEQUENCE_new');
  late final _NETSCAPE_CERT_SEQUENCE_new = _NETSCAPE_CERT_SEQUENCE_newPtr
      .asFunction<ffi.Pointer<NETSCAPE_CERT_SEQUENCE> Function()>();

  void NETSCAPE_CERT_SEQUENCE_free(
    ffi.Pointer<NETSCAPE_CERT_SEQUENCE> a,
  ) {
    return _NETSCAPE_CERT_SEQUENCE_free(
      a,
    );
  }

  late final _NETSCAPE_CERT_SEQUENCE_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<NETSCAPE_CERT_SEQUENCE>)>>(
      'NETSCAPE_CERT_SEQUENCE_free');
  late final _NETSCAPE_CERT_SEQUENCE_free = _NETSCAPE_CERT_SEQUENCE_freePtr
      .asFunction<void Function(ffi.Pointer<NETSCAPE_CERT_SEQUENCE>)>();

  ffi.Pointer<NETSCAPE_CERT_SEQUENCE> d2i_NETSCAPE_CERT_SEQUENCE(
    ffi.Pointer<ffi.Pointer<NETSCAPE_CERT_SEQUENCE>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_NETSCAPE_CERT_SEQUENCE(
      a,
      in1,
      len,
    );
  }

  late final _d2i_NETSCAPE_CERT_SEQUENCEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NETSCAPE_CERT_SEQUENCE> Function(
              ffi.Pointer<ffi.Pointer<NETSCAPE_CERT_SEQUENCE>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_NETSCAPE_CERT_SEQUENCE');
  late final _d2i_NETSCAPE_CERT_SEQUENCE =
      _d2i_NETSCAPE_CERT_SEQUENCEPtr.asFunction<
          ffi.Pointer<NETSCAPE_CERT_SEQUENCE> Function(
              ffi.Pointer<ffi.Pointer<NETSCAPE_CERT_SEQUENCE>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              int)>();

  int i2d_NETSCAPE_CERT_SEQUENCE(
    ffi.Pointer<NETSCAPE_CERT_SEQUENCE> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_NETSCAPE_CERT_SEQUENCE(
      a,
      out,
    );
  }

  late final _i2d_NETSCAPE_CERT_SEQUENCEPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<NETSCAPE_CERT_SEQUENCE>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_NETSCAPE_CERT_SEQUENCE');
  late final _i2d_NETSCAPE_CERT_SEQUENCE =
      _i2d_NETSCAPE_CERT_SEQUENCEPtr.asFunction<
          int Function(ffi.Pointer<NETSCAPE_CERT_SEQUENCE>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _NETSCAPE_CERT_SEQUENCE_it =
      _lookup<ASN1_ITEM>('NETSCAPE_CERT_SEQUENCE_it');

  ffi.Pointer<ASN1_ITEM> get NETSCAPE_CERT_SEQUENCE_it =>
      _NETSCAPE_CERT_SEQUENCE_it;

  ffi.Pointer<X509_INFO> X509_INFO_new() {
    return _X509_INFO_new();
  }

  late final _X509_INFO_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_INFO> Function()>>(
          'X509_INFO_new');
  late final _X509_INFO_new =
      _X509_INFO_newPtr.asFunction<ffi.Pointer<X509_INFO> Function()>();

  void X509_INFO_free(
    ffi.Pointer<X509_INFO> a,
  ) {
    return _X509_INFO_free(
      a,
    );
  }

  late final _X509_INFO_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<X509_INFO>)>>(
          'X509_INFO_free');
  late final _X509_INFO_free =
      _X509_INFO_freePtr.asFunction<void Function(ffi.Pointer<X509_INFO>)>();

  ffi.Pointer<ffi.Char> X509_NAME_oneline(
    ffi.Pointer<X509_NAME> a,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _X509_NAME_oneline(
      a,
      buf,
      size,
    );
  }

  late final _X509_NAME_onelinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<X509_NAME>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('X509_NAME_oneline');
  late final _X509_NAME_oneline = _X509_NAME_onelinePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<X509_NAME>, ffi.Pointer<ffi.Char>, int)>();

  int ASN1_verify(
    ffi.Pointer<i2d_of_void> i2d,
    ffi.Pointer<X509_ALGOR> algor1,
    ffi.Pointer<ASN1_BIT_STRING> signature,
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _ASN1_verify(
      i2d,
      algor1,
      signature,
      data,
      pkey,
    );
  }

  late final _ASN1_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<i2d_of_void>,
              ffi.Pointer<X509_ALGOR>,
              ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<EVP_PKEY>)>>('ASN1_verify');
  late final _ASN1_verify = _ASN1_verifyPtr.asFunction<
      int Function(
          ffi.Pointer<i2d_of_void>,
          ffi.Pointer<X509_ALGOR>,
          ffi.Pointer<ASN1_BIT_STRING>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<EVP_PKEY>)>();

  int ASN1_digest(
    ffi.Pointer<i2d_of_void> i2d,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> len,
  ) {
    return _ASN1_digest(
      i2d,
      type,
      data,
      md,
      len,
    );
  }

  late final _ASN1_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<i2d_of_void>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>)>>('ASN1_digest');
  late final _ASN1_digest = _ASN1_digestPtr.asFunction<
      int Function(
          ffi.Pointer<i2d_of_void>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  int ASN1_sign(
    ffi.Pointer<i2d_of_void> i2d,
    ffi.Pointer<X509_ALGOR> algor1,
    ffi.Pointer<X509_ALGOR> algor2,
    ffi.Pointer<ASN1_BIT_STRING> signature,
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<EVP_MD> type,
  ) {
    return _ASN1_sign(
      i2d,
      algor1,
      algor2,
      signature,
      data,
      pkey,
      type,
    );
  }

  late final _ASN1_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<i2d_of_void>,
              ffi.Pointer<X509_ALGOR>,
              ffi.Pointer<X509_ALGOR>,
              ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_MD>)>>('ASN1_sign');
  late final _ASN1_sign = _ASN1_signPtr.asFunction<
      int Function(
          ffi.Pointer<i2d_of_void>,
          ffi.Pointer<X509_ALGOR>,
          ffi.Pointer<X509_ALGOR>,
          ffi.Pointer<ASN1_BIT_STRING>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<EVP_MD>)>();

  int ASN1_item_digest(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.UnsignedChar> md,
    ffi.Pointer<ffi.UnsignedInt> len,
  ) {
    return _ASN1_item_digest(
      it,
      type,
      data,
      md,
      len,
    );
  }

  late final _ASN1_item_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<EVP_MD>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>)>>('ASN1_item_digest');
  late final _ASN1_item_digest = _ASN1_item_digestPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<EVP_MD>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  int ASN1_item_verify(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<X509_ALGOR> algor1,
    ffi.Pointer<ASN1_BIT_STRING> signature,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _ASN1_item_verify(
      it,
      algor1,
      signature,
      data,
      pkey,
    );
  }

  late final _ASN1_item_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<X509_ALGOR>,
              ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<EVP_PKEY>)>>('ASN1_item_verify');
  late final _ASN1_item_verify = _ASN1_item_verifyPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<X509_ALGOR>,
          ffi.Pointer<ASN1_BIT_STRING>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<EVP_PKEY>)>();

  int ASN1_item_sign(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<X509_ALGOR> algor1,
    ffi.Pointer<X509_ALGOR> algor2,
    ffi.Pointer<ASN1_BIT_STRING> signature,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<EVP_MD> type,
  ) {
    return _ASN1_item_sign(
      it,
      algor1,
      algor2,
      signature,
      data,
      pkey,
      type,
    );
  }

  late final _ASN1_item_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<X509_ALGOR>,
              ffi.Pointer<X509_ALGOR>,
              ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_MD>)>>('ASN1_item_sign');
  late final _ASN1_item_sign = _ASN1_item_signPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<X509_ALGOR>,
          ffi.Pointer<X509_ALGOR>,
          ffi.Pointer<ASN1_BIT_STRING>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<EVP_MD>)>();

  int ASN1_item_sign_ctx(
    ffi.Pointer<ASN1_ITEM> it,
    ffi.Pointer<X509_ALGOR> algor1,
    ffi.Pointer<X509_ALGOR> algor2,
    ffi.Pointer<ASN1_BIT_STRING> signature,
    ffi.Pointer<ffi.Void> asn,
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return _ASN1_item_sign_ctx(
      it,
      algor1,
      algor2,
      signature,
      asn,
      ctx,
    );
  }

  late final _ASN1_item_sign_ctxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ASN1_ITEM>,
              ffi.Pointer<X509_ALGOR>,
              ffi.Pointer<X509_ALGOR>,
              ffi.Pointer<ASN1_BIT_STRING>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<EVP_MD_CTX>)>>('ASN1_item_sign_ctx');
  late final _ASN1_item_sign_ctx = _ASN1_item_sign_ctxPtr.asFunction<
      int Function(
          ffi.Pointer<ASN1_ITEM>,
          ffi.Pointer<X509_ALGOR>,
          ffi.Pointer<X509_ALGOR>,
          ffi.Pointer<ASN1_BIT_STRING>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<EVP_MD_CTX>)>();

  int X509_get_version(
    ffi.Pointer<X509> x,
  ) {
    return _X509_get_version(
      x,
    );
  }

  late final _X509_get_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<X509>)>>(
          'X509_get_version');
  late final _X509_get_version =
      _X509_get_versionPtr.asFunction<int Function(ffi.Pointer<X509>)>();

  int X509_set_version(
    ffi.Pointer<X509> x,
    int version,
  ) {
    return _X509_set_version(
      x,
      version,
    );
  }

  late final _X509_set_versionPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509>, ffi.Long)>>(
      'X509_set_version');
  late final _X509_set_version =
      _X509_set_versionPtr.asFunction<int Function(ffi.Pointer<X509>, int)>();

  int X509_set_serialNumber(
    ffi.Pointer<X509> x,
    ffi.Pointer<ASN1_INTEGER> serial,
  ) {
    return _X509_set_serialNumber(
      x,
      serial,
    );
  }

  late final _X509_set_serialNumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>,
              ffi.Pointer<ASN1_INTEGER>)>>('X509_set_serialNumber');
  late final _X509_set_serialNumber = _X509_set_serialNumberPtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<ASN1_INTEGER>)>();

  ffi.Pointer<ASN1_INTEGER> X509_get_serialNumber(
    ffi.Pointer<X509> x,
  ) {
    return _X509_get_serialNumber(
      x,
    );
  }

  late final _X509_get_serialNumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_INTEGER> Function(
              ffi.Pointer<X509>)>>('X509_get_serialNumber');
  late final _X509_get_serialNumber = _X509_get_serialNumberPtr.asFunction<
      ffi.Pointer<ASN1_INTEGER> Function(ffi.Pointer<X509>)>();

  ffi.Pointer<ASN1_INTEGER> X509_get0_serialNumber(
    ffi.Pointer<X509> x,
  ) {
    return _X509_get0_serialNumber(
      x,
    );
  }

  late final _X509_get0_serialNumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_INTEGER> Function(
              ffi.Pointer<X509>)>>('X509_get0_serialNumber');
  late final _X509_get0_serialNumber = _X509_get0_serialNumberPtr.asFunction<
      ffi.Pointer<ASN1_INTEGER> Function(ffi.Pointer<X509>)>();

  int X509_set_issuer_name(
    ffi.Pointer<X509> x,
    ffi.Pointer<X509_NAME> name,
  ) {
    return _X509_set_issuer_name(
      x,
      name,
    );
  }

  late final _X509_set_issuer_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>,
              ffi.Pointer<X509_NAME>)>>('X509_set_issuer_name');
  late final _X509_set_issuer_name = _X509_set_issuer_namePtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<X509_NAME>)>();

  ffi.Pointer<X509_NAME> X509_get_issuer_name(
    ffi.Pointer<X509> a,
  ) {
    return _X509_get_issuer_name(
      a,
    );
  }

  late final _X509_get_issuer_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_NAME> Function(
              ffi.Pointer<X509>)>>('X509_get_issuer_name');
  late final _X509_get_issuer_name = _X509_get_issuer_namePtr.asFunction<
      ffi.Pointer<X509_NAME> Function(ffi.Pointer<X509>)>();

  int X509_set_subject_name(
    ffi.Pointer<X509> x,
    ffi.Pointer<X509_NAME> name,
  ) {
    return _X509_set_subject_name(
      x,
      name,
    );
  }

  late final _X509_set_subject_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>,
              ffi.Pointer<X509_NAME>)>>('X509_set_subject_name');
  late final _X509_set_subject_name = _X509_set_subject_namePtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<X509_NAME>)>();

  ffi.Pointer<X509_NAME> X509_get_subject_name(
    ffi.Pointer<X509> a,
  ) {
    return _X509_get_subject_name(
      a,
    );
  }

  late final _X509_get_subject_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_NAME> Function(
              ffi.Pointer<X509>)>>('X509_get_subject_name');
  late final _X509_get_subject_name = _X509_get_subject_namePtr.asFunction<
      ffi.Pointer<X509_NAME> Function(ffi.Pointer<X509>)>();

  ffi.Pointer<ASN1_TIME> X509_get0_notBefore(
    ffi.Pointer<X509> x,
  ) {
    return _X509_get0_notBefore(
      x,
    );
  }

  late final _X509_get0_notBeforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(
              ffi.Pointer<X509>)>>('X509_get0_notBefore');
  late final _X509_get0_notBefore = _X509_get0_notBeforePtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<X509>)>();

  ffi.Pointer<ASN1_TIME> X509_getm_notBefore(
    ffi.Pointer<X509> x,
  ) {
    return _X509_getm_notBefore(
      x,
    );
  }

  late final _X509_getm_notBeforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(
              ffi.Pointer<X509>)>>('X509_getm_notBefore');
  late final _X509_getm_notBefore = _X509_getm_notBeforePtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<X509>)>();

  int X509_set1_notBefore(
    ffi.Pointer<X509> x,
    ffi.Pointer<ASN1_TIME> tm,
  ) {
    return _X509_set1_notBefore(
      x,
      tm,
    );
  }

  late final _X509_set1_notBeforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>,
              ffi.Pointer<ASN1_TIME>)>>('X509_set1_notBefore');
  late final _X509_set1_notBefore = _X509_set1_notBeforePtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<ASN1_TIME>)>();

  ffi.Pointer<ASN1_TIME> X509_get0_notAfter(
    ffi.Pointer<X509> x,
  ) {
    return _X509_get0_notAfter(
      x,
    );
  }

  late final _X509_get0_notAfterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(
              ffi.Pointer<X509>)>>('X509_get0_notAfter');
  late final _X509_get0_notAfter = _X509_get0_notAfterPtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<X509>)>();

  ffi.Pointer<ASN1_TIME> X509_getm_notAfter(
    ffi.Pointer<X509> x,
  ) {
    return _X509_getm_notAfter(
      x,
    );
  }

  late final _X509_getm_notAfterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(
              ffi.Pointer<X509>)>>('X509_getm_notAfter');
  late final _X509_getm_notAfter = _X509_getm_notAfterPtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<X509>)>();

  int X509_set1_notAfter(
    ffi.Pointer<X509> x,
    ffi.Pointer<ASN1_TIME> tm,
  ) {
    return _X509_set1_notAfter(
      x,
      tm,
    );
  }

  late final _X509_set1_notAfterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>,
              ffi.Pointer<ASN1_TIME>)>>('X509_set1_notAfter');
  late final _X509_set1_notAfter = _X509_set1_notAfterPtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<ASN1_TIME>)>();

  int X509_set_pubkey(
    ffi.Pointer<X509> x,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _X509_set_pubkey(
      x,
      pkey,
    );
  }

  late final _X509_set_pubkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509>, ffi.Pointer<EVP_PKEY>)>>('X509_set_pubkey');
  late final _X509_set_pubkey = _X509_set_pubkeyPtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<EVP_PKEY>)>();

  int X509_up_ref(
    ffi.Pointer<X509> x,
  ) {
    return _X509_up_ref(
      x,
    );
  }

  late final _X509_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509>)>>(
          'X509_up_ref');
  late final _X509_up_ref =
      _X509_up_refPtr.asFunction<int Function(ffi.Pointer<X509>)>();

  int X509_get_signature_type(
    ffi.Pointer<X509> x,
  ) {
    return _X509_get_signature_type(
      x,
    );
  }

  late final _X509_get_signature_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509>)>>(
          'X509_get_signature_type');
  late final _X509_get_signature_type =
      _X509_get_signature_typePtr.asFunction<int Function(ffi.Pointer<X509>)>();

  ffi.Pointer<X509_PUBKEY> X509_get_X509_PUBKEY(
    ffi.Pointer<X509> x,
  ) {
    return _X509_get_X509_PUBKEY(
      x,
    );
  }

  late final _X509_get_X509_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_PUBKEY> Function(
              ffi.Pointer<X509>)>>('X509_get_X509_PUBKEY');
  late final _X509_get_X509_PUBKEY = _X509_get_X509_PUBKEYPtr.asFunction<
      ffi.Pointer<X509_PUBKEY> Function(ffi.Pointer<X509>)>();

  ffi.Pointer<stack_st_X509_EXTENSION> X509_get0_extensions(
    ffi.Pointer<X509> x,
  ) {
    return _X509_get0_extensions(
      x,
    );
  }

  late final _X509_get0_extensionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509_EXTENSION> Function(
              ffi.Pointer<X509>)>>('X509_get0_extensions');
  late final _X509_get0_extensions = _X509_get0_extensionsPtr.asFunction<
      ffi.Pointer<stack_st_X509_EXTENSION> Function(ffi.Pointer<X509>)>();

  void X509_get0_uids(
    ffi.Pointer<X509> x,
    ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>> piuid,
    ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>> psuid,
  ) {
    return _X509_get0_uids(
      x,
      piuid,
      psuid,
    );
  }

  late final _X509_get0_uidsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<X509>,
              ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>>,
              ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>>)>>('X509_get0_uids');
  late final _X509_get0_uids = _X509_get0_uidsPtr.asFunction<
      void Function(
          ffi.Pointer<X509>,
          ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>>,
          ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>>)>();

  ffi.Pointer<X509_ALGOR> X509_get0_tbs_sigalg(
    ffi.Pointer<X509> x,
  ) {
    return _X509_get0_tbs_sigalg(
      x,
    );
  }

  late final _X509_get0_tbs_sigalgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ALGOR> Function(
              ffi.Pointer<X509>)>>('X509_get0_tbs_sigalg');
  late final _X509_get0_tbs_sigalg = _X509_get0_tbs_sigalgPtr.asFunction<
      ffi.Pointer<X509_ALGOR> Function(ffi.Pointer<X509>)>();

  ffi.Pointer<EVP_PKEY> X509_get0_pubkey(
    ffi.Pointer<X509> x,
  ) {
    return _X509_get0_pubkey(
      x,
    );
  }

  late final _X509_get0_pubkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<X509>)>>('X509_get0_pubkey');
  late final _X509_get0_pubkey = _X509_get0_pubkeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<X509>)>();

  ffi.Pointer<EVP_PKEY> X509_get_pubkey(
    ffi.Pointer<X509> x,
  ) {
    return _X509_get_pubkey(
      x,
    );
  }

  late final _X509_get_pubkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<X509>)>>('X509_get_pubkey');
  late final _X509_get_pubkey = _X509_get_pubkeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<X509>)>();

  ffi.Pointer<ASN1_BIT_STRING> X509_get0_pubkey_bitstr(
    ffi.Pointer<X509> x,
  ) {
    return _X509_get0_pubkey_bitstr(
      x,
    );
  }

  late final _X509_get0_pubkey_bitstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_BIT_STRING> Function(
              ffi.Pointer<X509>)>>('X509_get0_pubkey_bitstr');
  late final _X509_get0_pubkey_bitstr = _X509_get0_pubkey_bitstrPtr.asFunction<
      ffi.Pointer<ASN1_BIT_STRING> Function(ffi.Pointer<X509>)>();

  int X509_certificate_type(
    ffi.Pointer<X509> x,
    ffi.Pointer<EVP_PKEY> pubkey,
  ) {
    return _X509_certificate_type(
      x,
      pubkey,
    );
  }

  late final _X509_certificate_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>,
              ffi.Pointer<EVP_PKEY>)>>('X509_certificate_type');
  late final _X509_certificate_type = _X509_certificate_typePtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<EVP_PKEY>)>();

  int X509_REQ_get_version(
    ffi.Pointer<X509_REQ> req,
  ) {
    return _X509_REQ_get_version(
      req,
    );
  }

  late final _X509_REQ_get_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<X509_REQ>)>>(
          'X509_REQ_get_version');
  late final _X509_REQ_get_version = _X509_REQ_get_versionPtr.asFunction<
      int Function(ffi.Pointer<X509_REQ>)>();

  int X509_REQ_set_version(
    ffi.Pointer<X509_REQ> x,
    int version,
  ) {
    return _X509_REQ_set_version(
      x,
      version,
    );
  }

  late final _X509_REQ_set_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_REQ>, ffi.Long)>>('X509_REQ_set_version');
  late final _X509_REQ_set_version = _X509_REQ_set_versionPtr.asFunction<
      int Function(ffi.Pointer<X509_REQ>, int)>();

  ffi.Pointer<X509_NAME> X509_REQ_get_subject_name(
    ffi.Pointer<X509_REQ> req,
  ) {
    return _X509_REQ_get_subject_name(
      req,
    );
  }

  late final _X509_REQ_get_subject_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_NAME> Function(
              ffi.Pointer<X509_REQ>)>>('X509_REQ_get_subject_name');
  late final _X509_REQ_get_subject_name = _X509_REQ_get_subject_namePtr
      .asFunction<ffi.Pointer<X509_NAME> Function(ffi.Pointer<X509_REQ>)>();

  int X509_REQ_set_subject_name(
    ffi.Pointer<X509_REQ> req,
    ffi.Pointer<X509_NAME> name,
  ) {
    return _X509_REQ_set_subject_name(
      req,
      name,
    );
  }

  late final _X509_REQ_set_subject_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REQ>,
              ffi.Pointer<X509_NAME>)>>('X509_REQ_set_subject_name');
  late final _X509_REQ_set_subject_name =
      _X509_REQ_set_subject_namePtr.asFunction<
          int Function(ffi.Pointer<X509_REQ>, ffi.Pointer<X509_NAME>)>();

  void X509_REQ_get0_signature(
    ffi.Pointer<X509_REQ> req,
    ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>> psig,
    ffi.Pointer<ffi.Pointer<X509_ALGOR>> palg,
  ) {
    return _X509_REQ_get0_signature(
      req,
      psig,
      palg,
    );
  }

  late final _X509_REQ_get0_signaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<X509_REQ>,
                  ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>>,
                  ffi.Pointer<ffi.Pointer<X509_ALGOR>>)>>(
      'X509_REQ_get0_signature');
  late final _X509_REQ_get0_signature = _X509_REQ_get0_signaturePtr.asFunction<
      void Function(
          ffi.Pointer<X509_REQ>,
          ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>>,
          ffi.Pointer<ffi.Pointer<X509_ALGOR>>)>();

  void X509_REQ_set0_signature(
    ffi.Pointer<X509_REQ> req,
    ffi.Pointer<ASN1_BIT_STRING> psig,
  ) {
    return _X509_REQ_set0_signature(
      req,
      psig,
    );
  }

  late final _X509_REQ_set0_signaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<X509_REQ>,
              ffi.Pointer<ASN1_BIT_STRING>)>>('X509_REQ_set0_signature');
  late final _X509_REQ_set0_signature = _X509_REQ_set0_signaturePtr.asFunction<
      void Function(ffi.Pointer<X509_REQ>, ffi.Pointer<ASN1_BIT_STRING>)>();

  int X509_REQ_set1_signature_algo(
    ffi.Pointer<X509_REQ> req,
    ffi.Pointer<X509_ALGOR> palg,
  ) {
    return _X509_REQ_set1_signature_algo(
      req,
      palg,
    );
  }

  late final _X509_REQ_set1_signature_algoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REQ>,
              ffi.Pointer<X509_ALGOR>)>>('X509_REQ_set1_signature_algo');
  late final _X509_REQ_set1_signature_algo =
      _X509_REQ_set1_signature_algoPtr.asFunction<
          int Function(ffi.Pointer<X509_REQ>, ffi.Pointer<X509_ALGOR>)>();

  int X509_REQ_get_signature_nid(
    ffi.Pointer<X509_REQ> req,
  ) {
    return _X509_REQ_get_signature_nid(
      req,
    );
  }

  late final _X509_REQ_get_signature_nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_REQ>)>>(
          'X509_REQ_get_signature_nid');
  late final _X509_REQ_get_signature_nid = _X509_REQ_get_signature_nidPtr
      .asFunction<int Function(ffi.Pointer<X509_REQ>)>();

  int i2d_re_X509_REQ_tbs(
    ffi.Pointer<X509_REQ> req,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_re_X509_REQ_tbs(
      req,
      pp,
    );
  }

  late final _i2d_re_X509_REQ_tbsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<X509_REQ>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_re_X509_REQ_tbs');
  late final _i2d_re_X509_REQ_tbs = _i2d_re_X509_REQ_tbsPtr.asFunction<
      int Function(
          ffi.Pointer<X509_REQ>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  int X509_REQ_set_pubkey(
    ffi.Pointer<X509_REQ> x,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _X509_REQ_set_pubkey(
      x,
      pkey,
    );
  }

  late final _X509_REQ_set_pubkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REQ>,
              ffi.Pointer<EVP_PKEY>)>>('X509_REQ_set_pubkey');
  late final _X509_REQ_set_pubkey = _X509_REQ_set_pubkeyPtr.asFunction<
      int Function(ffi.Pointer<X509_REQ>, ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY> X509_REQ_get_pubkey(
    ffi.Pointer<X509_REQ> req,
  ) {
    return _X509_REQ_get_pubkey(
      req,
    );
  }

  late final _X509_REQ_get_pubkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<X509_REQ>)>>('X509_REQ_get_pubkey');
  late final _X509_REQ_get_pubkey = _X509_REQ_get_pubkeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<X509_REQ>)>();

  ffi.Pointer<EVP_PKEY> X509_REQ_get0_pubkey(
    ffi.Pointer<X509_REQ> req,
  ) {
    return _X509_REQ_get0_pubkey(
      req,
    );
  }

  late final _X509_REQ_get0_pubkeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<X509_REQ>)>>('X509_REQ_get0_pubkey');
  late final _X509_REQ_get0_pubkey = _X509_REQ_get0_pubkeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<X509_REQ>)>();

  ffi.Pointer<X509_PUBKEY> X509_REQ_get_X509_PUBKEY(
    ffi.Pointer<X509_REQ> req,
  ) {
    return _X509_REQ_get_X509_PUBKEY(
      req,
    );
  }

  late final _X509_REQ_get_X509_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_PUBKEY> Function(
              ffi.Pointer<X509_REQ>)>>('X509_REQ_get_X509_PUBKEY');
  late final _X509_REQ_get_X509_PUBKEY = _X509_REQ_get_X509_PUBKEYPtr
      .asFunction<ffi.Pointer<X509_PUBKEY> Function(ffi.Pointer<X509_REQ>)>();

  int X509_REQ_extension_nid(
    int nid,
  ) {
    return _X509_REQ_extension_nid(
      nid,
    );
  }

  late final _X509_REQ_extension_nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'X509_REQ_extension_nid');
  late final _X509_REQ_extension_nid =
      _X509_REQ_extension_nidPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int> X509_REQ_get_extension_nids() {
    return _X509_REQ_get_extension_nids();
  }

  late final _X509_REQ_get_extension_nidsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          'X509_REQ_get_extension_nids');
  late final _X509_REQ_get_extension_nids = _X509_REQ_get_extension_nidsPtr
      .asFunction<ffi.Pointer<ffi.Int> Function()>();

  void X509_REQ_set_extension_nids(
    ffi.Pointer<ffi.Int> nids,
  ) {
    return _X509_REQ_set_extension_nids(
      nids,
    );
  }

  late final _X509_REQ_set_extension_nidsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'X509_REQ_set_extension_nids');
  late final _X509_REQ_set_extension_nids = _X509_REQ_set_extension_nidsPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<stack_st_X509_EXTENSION> X509_REQ_get_extensions(
    ffi.Pointer<X509_REQ> req,
  ) {
    return _X509_REQ_get_extensions(
      req,
    );
  }

  late final _X509_REQ_get_extensionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509_EXTENSION> Function(
              ffi.Pointer<X509_REQ>)>>('X509_REQ_get_extensions');
  late final _X509_REQ_get_extensions = _X509_REQ_get_extensionsPtr.asFunction<
      ffi.Pointer<stack_st_X509_EXTENSION> Function(ffi.Pointer<X509_REQ>)>();

  int X509_REQ_add_extensions_nid(
    ffi.Pointer<X509_REQ> req,
    ffi.Pointer<stack_st_X509_EXTENSION> exts,
    int nid,
  ) {
    return _X509_REQ_add_extensions_nid(
      req,
      exts,
      nid,
    );
  }

  late final _X509_REQ_add_extensions_nidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_REQ>,
              ffi.Pointer<stack_st_X509_EXTENSION>,
              ffi.Int)>>('X509_REQ_add_extensions_nid');
  late final _X509_REQ_add_extensions_nid =
      _X509_REQ_add_extensions_nidPtr.asFunction<
          int Function(ffi.Pointer<X509_REQ>,
              ffi.Pointer<stack_st_X509_EXTENSION>, int)>();

  int X509_REQ_add_extensions(
    ffi.Pointer<X509_REQ> req,
    ffi.Pointer<stack_st_X509_EXTENSION> exts,
  ) {
    return _X509_REQ_add_extensions(
      req,
      exts,
    );
  }

  late final _X509_REQ_add_extensionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<X509_REQ>,
                  ffi.Pointer<stack_st_X509_EXTENSION>)>>(
      'X509_REQ_add_extensions');
  late final _X509_REQ_add_extensions = _X509_REQ_add_extensionsPtr.asFunction<
      int Function(
          ffi.Pointer<X509_REQ>, ffi.Pointer<stack_st_X509_EXTENSION>)>();

  int X509_REQ_get_attr_count(
    ffi.Pointer<X509_REQ> req,
  ) {
    return _X509_REQ_get_attr_count(
      req,
    );
  }

  late final _X509_REQ_get_attr_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_REQ>)>>(
          'X509_REQ_get_attr_count');
  late final _X509_REQ_get_attr_count = _X509_REQ_get_attr_countPtr.asFunction<
      int Function(ffi.Pointer<X509_REQ>)>();

  int X509_REQ_get_attr_by_NID(
    ffi.Pointer<X509_REQ> req,
    int nid,
    int lastpos,
  ) {
    return _X509_REQ_get_attr_by_NID(
      req,
      nid,
      lastpos,
    );
  }

  late final _X509_REQ_get_attr_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REQ>, ffi.Int,
              ffi.Int)>>('X509_REQ_get_attr_by_NID');
  late final _X509_REQ_get_attr_by_NID = _X509_REQ_get_attr_by_NIDPtr
      .asFunction<int Function(ffi.Pointer<X509_REQ>, int, int)>();

  int X509_REQ_get_attr_by_OBJ(
    ffi.Pointer<X509_REQ> req,
    ffi.Pointer<ASN1_OBJECT> obj,
    int lastpos,
  ) {
    return _X509_REQ_get_attr_by_OBJ(
      req,
      obj,
      lastpos,
    );
  }

  late final _X509_REQ_get_attr_by_OBJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REQ>, ffi.Pointer<ASN1_OBJECT>,
              ffi.Int)>>('X509_REQ_get_attr_by_OBJ');
  late final _X509_REQ_get_attr_by_OBJ =
      _X509_REQ_get_attr_by_OBJPtr.asFunction<
          int Function(ffi.Pointer<X509_REQ>, ffi.Pointer<ASN1_OBJECT>, int)>();

  ffi.Pointer<X509_ATTRIBUTE> X509_REQ_get_attr(
    ffi.Pointer<X509_REQ> req,
    int loc,
  ) {
    return _X509_REQ_get_attr(
      req,
      loc,
    );
  }

  late final _X509_REQ_get_attrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ATTRIBUTE> Function(
              ffi.Pointer<X509_REQ>, ffi.Int)>>('X509_REQ_get_attr');
  late final _X509_REQ_get_attr = _X509_REQ_get_attrPtr.asFunction<
      ffi.Pointer<X509_ATTRIBUTE> Function(ffi.Pointer<X509_REQ>, int)>();

  ffi.Pointer<X509_ATTRIBUTE> X509_REQ_delete_attr(
    ffi.Pointer<X509_REQ> req,
    int loc,
  ) {
    return _X509_REQ_delete_attr(
      req,
      loc,
    );
  }

  late final _X509_REQ_delete_attrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ATTRIBUTE> Function(
              ffi.Pointer<X509_REQ>, ffi.Int)>>('X509_REQ_delete_attr');
  late final _X509_REQ_delete_attr = _X509_REQ_delete_attrPtr.asFunction<
      ffi.Pointer<X509_ATTRIBUTE> Function(ffi.Pointer<X509_REQ>, int)>();

  int X509_REQ_add1_attr(
    ffi.Pointer<X509_REQ> req,
    ffi.Pointer<X509_ATTRIBUTE> attr,
  ) {
    return _X509_REQ_add1_attr(
      req,
      attr,
    );
  }

  late final _X509_REQ_add1_attrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REQ>,
              ffi.Pointer<X509_ATTRIBUTE>)>>('X509_REQ_add1_attr');
  late final _X509_REQ_add1_attr = _X509_REQ_add1_attrPtr.asFunction<
      int Function(ffi.Pointer<X509_REQ>, ffi.Pointer<X509_ATTRIBUTE>)>();

  int X509_REQ_add1_attr_by_OBJ(
    ffi.Pointer<X509_REQ> req,
    ffi.Pointer<ASN1_OBJECT> obj,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
  ) {
    return _X509_REQ_add1_attr_by_OBJ(
      req,
      obj,
      type,
      bytes,
      len,
    );
  }

  late final _X509_REQ_add1_attr_by_OBJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_REQ>,
              ffi.Pointer<ASN1_OBJECT>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('X509_REQ_add1_attr_by_OBJ');
  late final _X509_REQ_add1_attr_by_OBJ =
      _X509_REQ_add1_attr_by_OBJPtr.asFunction<
          int Function(ffi.Pointer<X509_REQ>, ffi.Pointer<ASN1_OBJECT>, int,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int X509_REQ_add1_attr_by_NID(
    ffi.Pointer<X509_REQ> req,
    int nid,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
  ) {
    return _X509_REQ_add1_attr_by_NID(
      req,
      nid,
      type,
      bytes,
      len,
    );
  }

  late final _X509_REQ_add1_attr_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_REQ>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('X509_REQ_add1_attr_by_NID');
  late final _X509_REQ_add1_attr_by_NID =
      _X509_REQ_add1_attr_by_NIDPtr.asFunction<
          int Function(ffi.Pointer<X509_REQ>, int, int,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int X509_REQ_add1_attr_by_txt(
    ffi.Pointer<X509_REQ> req,
    ffi.Pointer<ffi.Char> attrname,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
  ) {
    return _X509_REQ_add1_attr_by_txt(
      req,
      attrname,
      type,
      bytes,
      len,
    );
  }

  late final _X509_REQ_add1_attr_by_txtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_REQ>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('X509_REQ_add1_attr_by_txt');
  late final _X509_REQ_add1_attr_by_txt =
      _X509_REQ_add1_attr_by_txtPtr.asFunction<
          int Function(ffi.Pointer<X509_REQ>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int X509_CRL_set_version(
    ffi.Pointer<X509_CRL> x,
    int version,
  ) {
    return _X509_CRL_set_version(
      x,
      version,
    );
  }

  late final _X509_CRL_set_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_CRL>, ffi.Long)>>('X509_CRL_set_version');
  late final _X509_CRL_set_version = _X509_CRL_set_versionPtr.asFunction<
      int Function(ffi.Pointer<X509_CRL>, int)>();

  int X509_CRL_set_issuer_name(
    ffi.Pointer<X509_CRL> x,
    ffi.Pointer<X509_NAME> name,
  ) {
    return _X509_CRL_set_issuer_name(
      x,
      name,
    );
  }

  late final _X509_CRL_set_issuer_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_CRL>,
              ffi.Pointer<X509_NAME>)>>('X509_CRL_set_issuer_name');
  late final _X509_CRL_set_issuer_name =
      _X509_CRL_set_issuer_namePtr.asFunction<
          int Function(ffi.Pointer<X509_CRL>, ffi.Pointer<X509_NAME>)>();

  int X509_CRL_set1_lastUpdate(
    ffi.Pointer<X509_CRL> x,
    ffi.Pointer<ASN1_TIME> tm,
  ) {
    return _X509_CRL_set1_lastUpdate(
      x,
      tm,
    );
  }

  late final _X509_CRL_set1_lastUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_CRL>,
              ffi.Pointer<ASN1_TIME>)>>('X509_CRL_set1_lastUpdate');
  late final _X509_CRL_set1_lastUpdate =
      _X509_CRL_set1_lastUpdatePtr.asFunction<
          int Function(ffi.Pointer<X509_CRL>, ffi.Pointer<ASN1_TIME>)>();

  int X509_CRL_set1_nextUpdate(
    ffi.Pointer<X509_CRL> x,
    ffi.Pointer<ASN1_TIME> tm,
  ) {
    return _X509_CRL_set1_nextUpdate(
      x,
      tm,
    );
  }

  late final _X509_CRL_set1_nextUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_CRL>,
              ffi.Pointer<ASN1_TIME>)>>('X509_CRL_set1_nextUpdate');
  late final _X509_CRL_set1_nextUpdate =
      _X509_CRL_set1_nextUpdatePtr.asFunction<
          int Function(ffi.Pointer<X509_CRL>, ffi.Pointer<ASN1_TIME>)>();

  int X509_CRL_sort(
    ffi.Pointer<X509_CRL> crl,
  ) {
    return _X509_CRL_sort(
      crl,
    );
  }

  late final _X509_CRL_sortPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_CRL>)>>(
          'X509_CRL_sort');
  late final _X509_CRL_sort =
      _X509_CRL_sortPtr.asFunction<int Function(ffi.Pointer<X509_CRL>)>();

  int X509_CRL_up_ref(
    ffi.Pointer<X509_CRL> crl,
  ) {
    return _X509_CRL_up_ref(
      crl,
    );
  }

  late final _X509_CRL_up_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_CRL>)>>(
          'X509_CRL_up_ref');
  late final _X509_CRL_up_ref =
      _X509_CRL_up_refPtr.asFunction<int Function(ffi.Pointer<X509_CRL>)>();

  int X509_CRL_get_version(
    ffi.Pointer<X509_CRL> crl,
  ) {
    return _X509_CRL_get_version(
      crl,
    );
  }

  late final _X509_CRL_get_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<X509_CRL>)>>(
          'X509_CRL_get_version');
  late final _X509_CRL_get_version = _X509_CRL_get_versionPtr.asFunction<
      int Function(ffi.Pointer<X509_CRL>)>();

  ffi.Pointer<ASN1_TIME> X509_CRL_get0_lastUpdate(
    ffi.Pointer<X509_CRL> crl,
  ) {
    return _X509_CRL_get0_lastUpdate(
      crl,
    );
  }

  late final _X509_CRL_get0_lastUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(
              ffi.Pointer<X509_CRL>)>>('X509_CRL_get0_lastUpdate');
  late final _X509_CRL_get0_lastUpdate = _X509_CRL_get0_lastUpdatePtr
      .asFunction<ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<X509_CRL>)>();

  ffi.Pointer<ASN1_TIME> X509_CRL_get0_nextUpdate(
    ffi.Pointer<X509_CRL> crl,
  ) {
    return _X509_CRL_get0_nextUpdate(
      crl,
    );
  }

  late final _X509_CRL_get0_nextUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(
              ffi.Pointer<X509_CRL>)>>('X509_CRL_get0_nextUpdate');
  late final _X509_CRL_get0_nextUpdate = _X509_CRL_get0_nextUpdatePtr
      .asFunction<ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<X509_CRL>)>();

  ffi.Pointer<ASN1_TIME> X509_CRL_get_lastUpdate(
    ffi.Pointer<X509_CRL> crl,
  ) {
    return _X509_CRL_get_lastUpdate(
      crl,
    );
  }

  late final _X509_CRL_get_lastUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(
              ffi.Pointer<X509_CRL>)>>('X509_CRL_get_lastUpdate');
  late final _X509_CRL_get_lastUpdate = _X509_CRL_get_lastUpdatePtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<X509_CRL>)>();

  ffi.Pointer<ASN1_TIME> X509_CRL_get_nextUpdate(
    ffi.Pointer<X509_CRL> crl,
  ) {
    return _X509_CRL_get_nextUpdate(
      crl,
    );
  }

  late final _X509_CRL_get_nextUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(
              ffi.Pointer<X509_CRL>)>>('X509_CRL_get_nextUpdate');
  late final _X509_CRL_get_nextUpdate = _X509_CRL_get_nextUpdatePtr.asFunction<
      ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<X509_CRL>)>();

  ffi.Pointer<X509_NAME> X509_CRL_get_issuer(
    ffi.Pointer<X509_CRL> crl,
  ) {
    return _X509_CRL_get_issuer(
      crl,
    );
  }

  late final _X509_CRL_get_issuerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_NAME> Function(
              ffi.Pointer<X509_CRL>)>>('X509_CRL_get_issuer');
  late final _X509_CRL_get_issuer = _X509_CRL_get_issuerPtr.asFunction<
      ffi.Pointer<X509_NAME> Function(ffi.Pointer<X509_CRL>)>();

  ffi.Pointer<stack_st_X509_EXTENSION> X509_CRL_get0_extensions(
    ffi.Pointer<X509_CRL> crl,
  ) {
    return _X509_CRL_get0_extensions(
      crl,
    );
  }

  late final _X509_CRL_get0_extensionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509_EXTENSION> Function(
              ffi.Pointer<X509_CRL>)>>('X509_CRL_get0_extensions');
  late final _X509_CRL_get0_extensions =
      _X509_CRL_get0_extensionsPtr.asFunction<
          ffi.Pointer<stack_st_X509_EXTENSION> Function(
              ffi.Pointer<X509_CRL>)>();

  ffi.Pointer<stack_st_X509_REVOKED> X509_CRL_get_REVOKED(
    ffi.Pointer<X509_CRL> crl,
  ) {
    return _X509_CRL_get_REVOKED(
      crl,
    );
  }

  late final _X509_CRL_get_REVOKEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509_REVOKED> Function(
              ffi.Pointer<X509_CRL>)>>('X509_CRL_get_REVOKED');
  late final _X509_CRL_get_REVOKED = _X509_CRL_get_REVOKEDPtr.asFunction<
      ffi.Pointer<stack_st_X509_REVOKED> Function(ffi.Pointer<X509_CRL>)>();

  void X509_CRL_get0_signature(
    ffi.Pointer<X509_CRL> crl,
    ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>> psig,
    ffi.Pointer<ffi.Pointer<X509_ALGOR>> palg,
  ) {
    return _X509_CRL_get0_signature(
      crl,
      psig,
      palg,
    );
  }

  late final _X509_CRL_get0_signaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<X509_CRL>,
                  ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>>,
                  ffi.Pointer<ffi.Pointer<X509_ALGOR>>)>>(
      'X509_CRL_get0_signature');
  late final _X509_CRL_get0_signature = _X509_CRL_get0_signaturePtr.asFunction<
      void Function(
          ffi.Pointer<X509_CRL>,
          ffi.Pointer<ffi.Pointer<ASN1_BIT_STRING>>,
          ffi.Pointer<ffi.Pointer<X509_ALGOR>>)>();

  int X509_CRL_get_signature_nid(
    ffi.Pointer<X509_CRL> crl,
  ) {
    return _X509_CRL_get_signature_nid(
      crl,
    );
  }

  late final _X509_CRL_get_signature_nidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_CRL>)>>(
          'X509_CRL_get_signature_nid');
  late final _X509_CRL_get_signature_nid = _X509_CRL_get_signature_nidPtr
      .asFunction<int Function(ffi.Pointer<X509_CRL>)>();

  int i2d_re_X509_CRL_tbs(
    ffi.Pointer<X509_CRL> req,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pp,
  ) {
    return _i2d_re_X509_CRL_tbs(
      req,
      pp,
    );
  }

  late final _i2d_re_X509_CRL_tbsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<X509_CRL>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_re_X509_CRL_tbs');
  late final _i2d_re_X509_CRL_tbs = _i2d_re_X509_CRL_tbsPtr.asFunction<
      int Function(
          ffi.Pointer<X509_CRL>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  ffi.Pointer<ASN1_INTEGER> X509_REVOKED_get0_serialNumber(
    ffi.Pointer<X509_REVOKED> x,
  ) {
    return _X509_REVOKED_get0_serialNumber(
      x,
    );
  }

  late final _X509_REVOKED_get0_serialNumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_INTEGER> Function(
              ffi.Pointer<X509_REVOKED>)>>('X509_REVOKED_get0_serialNumber');
  late final _X509_REVOKED_get0_serialNumber =
      _X509_REVOKED_get0_serialNumberPtr.asFunction<
          ffi.Pointer<ASN1_INTEGER> Function(ffi.Pointer<X509_REVOKED>)>();

  int X509_REVOKED_set_serialNumber(
    ffi.Pointer<X509_REVOKED> x,
    ffi.Pointer<ASN1_INTEGER> serial,
  ) {
    return _X509_REVOKED_set_serialNumber(
      x,
      serial,
    );
  }

  late final _X509_REVOKED_set_serialNumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REVOKED>,
              ffi.Pointer<ASN1_INTEGER>)>>('X509_REVOKED_set_serialNumber');
  late final _X509_REVOKED_set_serialNumber =
      _X509_REVOKED_set_serialNumberPtr.asFunction<
          int Function(ffi.Pointer<X509_REVOKED>, ffi.Pointer<ASN1_INTEGER>)>();

  ffi.Pointer<ASN1_TIME> X509_REVOKED_get0_revocationDate(
    ffi.Pointer<X509_REVOKED> x,
  ) {
    return _X509_REVOKED_get0_revocationDate(
      x,
    );
  }

  late final _X509_REVOKED_get0_revocationDatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TIME> Function(
              ffi.Pointer<X509_REVOKED>)>>('X509_REVOKED_get0_revocationDate');
  late final _X509_REVOKED_get0_revocationDate =
      _X509_REVOKED_get0_revocationDatePtr.asFunction<
          ffi.Pointer<ASN1_TIME> Function(ffi.Pointer<X509_REVOKED>)>();

  int X509_REVOKED_set_revocationDate(
    ffi.Pointer<X509_REVOKED> r,
    ffi.Pointer<ASN1_TIME> tm,
  ) {
    return _X509_REVOKED_set_revocationDate(
      r,
      tm,
    );
  }

  late final _X509_REVOKED_set_revocationDatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REVOKED>,
              ffi.Pointer<ASN1_TIME>)>>('X509_REVOKED_set_revocationDate');
  late final _X509_REVOKED_set_revocationDate =
      _X509_REVOKED_set_revocationDatePtr.asFunction<
          int Function(ffi.Pointer<X509_REVOKED>, ffi.Pointer<ASN1_TIME>)>();

  ffi.Pointer<stack_st_X509_EXTENSION> X509_REVOKED_get0_extensions(
    ffi.Pointer<X509_REVOKED> r,
  ) {
    return _X509_REVOKED_get0_extensions(
      r,
    );
  }

  late final _X509_REVOKED_get0_extensionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509_EXTENSION> Function(
              ffi.Pointer<X509_REVOKED>)>>('X509_REVOKED_get0_extensions');
  late final _X509_REVOKED_get0_extensions =
      _X509_REVOKED_get0_extensionsPtr.asFunction<
          ffi.Pointer<stack_st_X509_EXTENSION> Function(
              ffi.Pointer<X509_REVOKED>)>();

  ffi.Pointer<X509_CRL> X509_CRL_diff(
    ffi.Pointer<X509_CRL> base,
    ffi.Pointer<X509_CRL> newer,
    ffi.Pointer<EVP_PKEY> skey,
    ffi.Pointer<EVP_MD> md,
    int flags,
  ) {
    return _X509_CRL_diff(
      base,
      newer,
      skey,
      md,
      flags,
    );
  }

  late final _X509_CRL_diffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_CRL> Function(
              ffi.Pointer<X509_CRL>,
              ffi.Pointer<X509_CRL>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_MD>,
              ffi.UnsignedInt)>>('X509_CRL_diff');
  late final _X509_CRL_diff = _X509_CRL_diffPtr.asFunction<
      ffi.Pointer<X509_CRL> Function(
          ffi.Pointer<X509_CRL>,
          ffi.Pointer<X509_CRL>,
          ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<EVP_MD>,
          int)>();

  int X509_REQ_check_private_key(
    ffi.Pointer<X509_REQ> x509,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _X509_REQ_check_private_key(
      x509,
      pkey,
    );
  }

  late final _X509_REQ_check_private_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REQ>,
              ffi.Pointer<EVP_PKEY>)>>('X509_REQ_check_private_key');
  late final _X509_REQ_check_private_key = _X509_REQ_check_private_keyPtr
      .asFunction<int Function(ffi.Pointer<X509_REQ>, ffi.Pointer<EVP_PKEY>)>();

  int X509_check_private_key(
    ffi.Pointer<X509> x509,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _X509_check_private_key(
      x509,
      pkey,
    );
  }

  late final _X509_check_private_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>,
              ffi.Pointer<EVP_PKEY>)>>('X509_check_private_key');
  late final _X509_check_private_key = _X509_check_private_keyPtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<EVP_PKEY>)>();

  int X509_chain_check_suiteb(
    ffi.Pointer<ffi.Int> perror_depth,
    ffi.Pointer<X509> x,
    ffi.Pointer<stack_st_X509> chain,
    int flags,
  ) {
    return _X509_chain_check_suiteb(
      perror_depth,
      x,
      chain,
      flags,
    );
  }

  late final _X509_chain_check_suitebPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<X509>,
              ffi.Pointer<stack_st_X509>,
              ffi.UnsignedLong)>>('X509_chain_check_suiteb');
  late final _X509_chain_check_suiteb = _X509_chain_check_suitebPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<X509>,
          ffi.Pointer<stack_st_X509>, int)>();

  int X509_CRL_check_suiteb(
    ffi.Pointer<X509_CRL> crl,
    ffi.Pointer<EVP_PKEY> pk,
    int flags,
  ) {
    return _X509_CRL_check_suiteb(
      crl,
      pk,
      flags,
    );
  }

  late final _X509_CRL_check_suitebPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_CRL>, ffi.Pointer<EVP_PKEY>,
              ffi.UnsignedLong)>>('X509_CRL_check_suiteb');
  late final _X509_CRL_check_suiteb = _X509_CRL_check_suitebPtr.asFunction<
      int Function(ffi.Pointer<X509_CRL>, ffi.Pointer<EVP_PKEY>, int)>();

  ffi.Pointer<stack_st_X509> X509_chain_up_ref(
    ffi.Pointer<stack_st_X509> chain,
  ) {
    return _X509_chain_up_ref(
      chain,
    );
  }

  late final _X509_chain_up_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509> Function(
              ffi.Pointer<stack_st_X509>)>>('X509_chain_up_ref');
  late final _X509_chain_up_ref = _X509_chain_up_refPtr.asFunction<
      ffi.Pointer<stack_st_X509> Function(ffi.Pointer<stack_st_X509>)>();

  int X509_issuer_and_serial_cmp(
    ffi.Pointer<X509> a,
    ffi.Pointer<X509> b,
  ) {
    return _X509_issuer_and_serial_cmp(
      a,
      b,
    );
  }

  late final _X509_issuer_and_serial_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>,
              ffi.Pointer<X509>)>>('X509_issuer_and_serial_cmp');
  late final _X509_issuer_and_serial_cmp = _X509_issuer_and_serial_cmpPtr
      .asFunction<int Function(ffi.Pointer<X509>, ffi.Pointer<X509>)>();

  int X509_issuer_and_serial_hash(
    ffi.Pointer<X509> a,
  ) {
    return _X509_issuer_and_serial_hash(
      a,
    );
  }

  late final _X509_issuer_and_serial_hashPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<X509>)>>(
          'X509_issuer_and_serial_hash');
  late final _X509_issuer_and_serial_hash = _X509_issuer_and_serial_hashPtr
      .asFunction<int Function(ffi.Pointer<X509>)>();

  int X509_issuer_name_cmp(
    ffi.Pointer<X509> a,
    ffi.Pointer<X509> b,
  ) {
    return _X509_issuer_name_cmp(
      a,
      b,
    );
  }

  late final _X509_issuer_name_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509>, ffi.Pointer<X509>)>>('X509_issuer_name_cmp');
  late final _X509_issuer_name_cmp = _X509_issuer_name_cmpPtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<X509>)>();

  int X509_issuer_name_hash(
    ffi.Pointer<X509> a,
  ) {
    return _X509_issuer_name_hash(
      a,
    );
  }

  late final _X509_issuer_name_hashPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<X509>)>>(
          'X509_issuer_name_hash');
  late final _X509_issuer_name_hash =
      _X509_issuer_name_hashPtr.asFunction<int Function(ffi.Pointer<X509>)>();

  int X509_subject_name_cmp(
    ffi.Pointer<X509> a,
    ffi.Pointer<X509> b,
  ) {
    return _X509_subject_name_cmp(
      a,
      b,
    );
  }

  late final _X509_subject_name_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509>, ffi.Pointer<X509>)>>('X509_subject_name_cmp');
  late final _X509_subject_name_cmp = _X509_subject_name_cmpPtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<X509>)>();

  int X509_subject_name_hash(
    ffi.Pointer<X509> x,
  ) {
    return _X509_subject_name_hash(
      x,
    );
  }

  late final _X509_subject_name_hashPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<X509>)>>(
          'X509_subject_name_hash');
  late final _X509_subject_name_hash =
      _X509_subject_name_hashPtr.asFunction<int Function(ffi.Pointer<X509>)>();

  int X509_issuer_name_hash_old(
    ffi.Pointer<X509> a,
  ) {
    return _X509_issuer_name_hash_old(
      a,
    );
  }

  late final _X509_issuer_name_hash_oldPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<X509>)>>(
          'X509_issuer_name_hash_old');
  late final _X509_issuer_name_hash_old = _X509_issuer_name_hash_oldPtr
      .asFunction<int Function(ffi.Pointer<X509>)>();

  int X509_subject_name_hash_old(
    ffi.Pointer<X509> x,
  ) {
    return _X509_subject_name_hash_old(
      x,
    );
  }

  late final _X509_subject_name_hash_oldPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<X509>)>>(
          'X509_subject_name_hash_old');
  late final _X509_subject_name_hash_old = _X509_subject_name_hash_oldPtr
      .asFunction<int Function(ffi.Pointer<X509>)>();

  int X509_cmp(
    ffi.Pointer<X509> a,
    ffi.Pointer<X509> b,
  ) {
    return _X509_cmp(
      a,
      b,
    );
  }

  late final _X509_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>, ffi.Pointer<X509>)>>('X509_cmp');
  late final _X509_cmp = _X509_cmpPtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<X509>)>();

  int X509_NAME_cmp(
    ffi.Pointer<X509_NAME> a,
    ffi.Pointer<X509_NAME> b,
  ) {
    return _X509_NAME_cmp(
      a,
      b,
    );
  }

  late final _X509_NAME_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_NAME>,
              ffi.Pointer<X509_NAME>)>>('X509_NAME_cmp');
  late final _X509_NAME_cmp = _X509_NAME_cmpPtr.asFunction<
      int Function(ffi.Pointer<X509_NAME>, ffi.Pointer<X509_NAME>)>();

  int X509_NAME_hash(
    ffi.Pointer<X509_NAME> x,
  ) {
    return _X509_NAME_hash(
      x,
    );
  }

  late final _X509_NAME_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<X509_NAME>)>>('X509_NAME_hash');
  late final _X509_NAME_hash =
      _X509_NAME_hashPtr.asFunction<int Function(ffi.Pointer<X509_NAME>)>();

  int X509_NAME_hash_old(
    ffi.Pointer<X509_NAME> x,
  ) {
    return _X509_NAME_hash_old(
      x,
    );
  }

  late final _X509_NAME_hash_oldPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<X509_NAME>)>>('X509_NAME_hash_old');
  late final _X509_NAME_hash_old =
      _X509_NAME_hash_oldPtr.asFunction<int Function(ffi.Pointer<X509_NAME>)>();

  int X509_CRL_cmp(
    ffi.Pointer<X509_CRL> a,
    ffi.Pointer<X509_CRL> b,
  ) {
    return _X509_CRL_cmp(
      a,
      b,
    );
  }

  late final _X509_CRL_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_CRL>, ffi.Pointer<X509_CRL>)>>('X509_CRL_cmp');
  late final _X509_CRL_cmp = _X509_CRL_cmpPtr.asFunction<
      int Function(ffi.Pointer<X509_CRL>, ffi.Pointer<X509_CRL>)>();

  int X509_CRL_match(
    ffi.Pointer<X509_CRL> a,
    ffi.Pointer<X509_CRL> b,
  ) {
    return _X509_CRL_match(
      a,
      b,
    );
  }

  late final _X509_CRL_matchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_CRL>, ffi.Pointer<X509_CRL>)>>('X509_CRL_match');
  late final _X509_CRL_match = _X509_CRL_matchPtr.asFunction<
      int Function(ffi.Pointer<X509_CRL>, ffi.Pointer<X509_CRL>)>();

  int X509_aux_print(
    ffi.Pointer<BIO> out,
    ffi.Pointer<X509> x,
    int indent,
  ) {
    return _X509_aux_print(
      out,
      x,
      indent,
    );
  }

  late final _X509_aux_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<X509>, ffi.Int)>>('X509_aux_print');
  late final _X509_aux_print = _X509_aux_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<X509>, int)>();

  int X509_print_ex_fp(
    ffi.Pointer<FILE> bp,
    ffi.Pointer<X509> x,
    int nmflag,
    int cflag,
  ) {
    return _X509_print_ex_fp(
      bp,
      x,
      nmflag,
      cflag,
    );
  }

  late final _X509_print_ex_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<X509>,
              ffi.UnsignedLong, ffi.UnsignedLong)>>('X509_print_ex_fp');
  late final _X509_print_ex_fp = _X509_print_ex_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<X509>, int, int)>();

  int X509_print_fp(
    ffi.Pointer<FILE> bp,
    ffi.Pointer<X509> x,
  ) {
    return _X509_print_fp(
      bp,
      x,
    );
  }

  late final _X509_print_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<X509>)>>('X509_print_fp');
  late final _X509_print_fp = _X509_print_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<X509>)>();

  int X509_CRL_print_fp(
    ffi.Pointer<FILE> bp,
    ffi.Pointer<X509_CRL> x,
  ) {
    return _X509_CRL_print_fp(
      bp,
      x,
    );
  }

  late final _X509_CRL_print_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<X509_CRL>)>>('X509_CRL_print_fp');
  late final _X509_CRL_print_fp = _X509_CRL_print_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<X509_CRL>)>();

  int X509_REQ_print_fp(
    ffi.Pointer<FILE> bp,
    ffi.Pointer<X509_REQ> req,
  ) {
    return _X509_REQ_print_fp(
      bp,
      req,
    );
  }

  late final _X509_REQ_print_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<X509_REQ>)>>('X509_REQ_print_fp');
  late final _X509_REQ_print_fp = _X509_REQ_print_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<X509_REQ>)>();

  int X509_NAME_print_ex_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<X509_NAME> nm,
    int indent,
    int flags,
  ) {
    return _X509_NAME_print_ex_fp(
      fp,
      nm,
      indent,
      flags,
    );
  }

  late final _X509_NAME_print_ex_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<X509_NAME>, ffi.Int,
              ffi.UnsignedLong)>>('X509_NAME_print_ex_fp');
  late final _X509_NAME_print_ex_fp = _X509_NAME_print_ex_fpPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<X509_NAME>, int, int)>();

  int X509_NAME_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509_NAME> name,
    int obase,
  ) {
    return _X509_NAME_print(
      bp,
      name,
      obase,
    );
  }

  late final _X509_NAME_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_NAME>,
              ffi.Int)>>('X509_NAME_print');
  late final _X509_NAME_print = _X509_NAME_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_NAME>, int)>();

  int X509_NAME_print_ex(
    ffi.Pointer<BIO> out,
    ffi.Pointer<X509_NAME> nm,
    int indent,
    int flags,
  ) {
    return _X509_NAME_print_ex(
      out,
      nm,
      indent,
      flags,
    );
  }

  late final _X509_NAME_print_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_NAME>, ffi.Int,
              ffi.UnsignedLong)>>('X509_NAME_print_ex');
  late final _X509_NAME_print_ex = _X509_NAME_print_exPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_NAME>, int, int)>();

  int X509_print_ex(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509> x,
    int nmflag,
    int cflag,
  ) {
    return _X509_print_ex(
      bp,
      x,
      nmflag,
      cflag,
    );
  }

  late final _X509_print_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<X509>,
              ffi.UnsignedLong, ffi.UnsignedLong)>>('X509_print_ex');
  late final _X509_print_ex = _X509_print_exPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<X509>, int, int)>();

  int X509_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509> x,
  ) {
    return _X509_print(
      bp,
      x,
    );
  }

  late final _X509_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<X509>)>>('X509_print');
  late final _X509_print = _X509_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<X509>)>();

  int X509_ocspid_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509> x,
  ) {
    return _X509_ocspid_print(
      bp,
      x,
    );
  }

  late final _X509_ocspid_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<X509>)>>('X509_ocspid_print');
  late final _X509_ocspid_print = _X509_ocspid_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<X509>)>();

  int X509_CRL_print_ex(
    ffi.Pointer<BIO> out,
    ffi.Pointer<X509_CRL> x,
    int nmflag,
  ) {
    return _X509_CRL_print_ex(
      out,
      x,
      nmflag,
    );
  }

  late final _X509_CRL_print_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_CRL>,
              ffi.UnsignedLong)>>('X509_CRL_print_ex');
  late final _X509_CRL_print_ex = _X509_CRL_print_exPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_CRL>, int)>();

  int X509_CRL_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509_CRL> x,
  ) {
    return _X509_CRL_print(
      bp,
      x,
    );
  }

  late final _X509_CRL_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<X509_CRL>)>>('X509_CRL_print');
  late final _X509_CRL_print = _X509_CRL_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_CRL>)>();

  int X509_REQ_print_ex(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509_REQ> x,
    int nmflag,
    int cflag,
  ) {
    return _X509_REQ_print_ex(
      bp,
      x,
      nmflag,
      cflag,
    );
  }

  late final _X509_REQ_print_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_REQ>,
              ffi.UnsignedLong, ffi.UnsignedLong)>>('X509_REQ_print_ex');
  late final _X509_REQ_print_ex = _X509_REQ_print_exPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_REQ>, int, int)>();

  int X509_REQ_print(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509_REQ> req,
  ) {
    return _X509_REQ_print(
      bp,
      req,
    );
  }

  late final _X509_REQ_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<X509_REQ>)>>('X509_REQ_print');
  late final _X509_REQ_print = _X509_REQ_printPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_REQ>)>();

  int X509_NAME_entry_count(
    ffi.Pointer<X509_NAME> name,
  ) {
    return _X509_NAME_entry_count(
      name,
    );
  }

  late final _X509_NAME_entry_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_NAME>)>>(
          'X509_NAME_entry_count');
  late final _X509_NAME_entry_count = _X509_NAME_entry_countPtr.asFunction<
      int Function(ffi.Pointer<X509_NAME>)>();

  int X509_NAME_get_text_by_NID(
    ffi.Pointer<X509_NAME> name,
    int nid,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _X509_NAME_get_text_by_NID(
      name,
      nid,
      buf,
      len,
    );
  }

  late final _X509_NAME_get_text_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_NAME>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('X509_NAME_get_text_by_NID');
  late final _X509_NAME_get_text_by_NID =
      _X509_NAME_get_text_by_NIDPtr.asFunction<
          int Function(
              ffi.Pointer<X509_NAME>, int, ffi.Pointer<ffi.Char>, int)>();

  int X509_NAME_get_text_by_OBJ(
    ffi.Pointer<X509_NAME> name,
    ffi.Pointer<ASN1_OBJECT> obj,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _X509_NAME_get_text_by_OBJ(
      name,
      obj,
      buf,
      len,
    );
  }

  late final _X509_NAME_get_text_by_OBJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_NAME>, ffi.Pointer<ASN1_OBJECT>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('X509_NAME_get_text_by_OBJ');
  late final _X509_NAME_get_text_by_OBJ =
      _X509_NAME_get_text_by_OBJPtr.asFunction<
          int Function(ffi.Pointer<X509_NAME>, ffi.Pointer<ASN1_OBJECT>,
              ffi.Pointer<ffi.Char>, int)>();

  int X509_NAME_get_index_by_NID(
    ffi.Pointer<X509_NAME> name,
    int nid,
    int lastpos,
  ) {
    return _X509_NAME_get_index_by_NID(
      name,
      nid,
      lastpos,
    );
  }

  late final _X509_NAME_get_index_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_NAME>, ffi.Int,
              ffi.Int)>>('X509_NAME_get_index_by_NID');
  late final _X509_NAME_get_index_by_NID = _X509_NAME_get_index_by_NIDPtr
      .asFunction<int Function(ffi.Pointer<X509_NAME>, int, int)>();

  int X509_NAME_get_index_by_OBJ(
    ffi.Pointer<X509_NAME> name,
    ffi.Pointer<ASN1_OBJECT> obj,
    int lastpos,
  ) {
    return _X509_NAME_get_index_by_OBJ(
      name,
      obj,
      lastpos,
    );
  }

  late final _X509_NAME_get_index_by_OBJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_NAME>, ffi.Pointer<ASN1_OBJECT>,
              ffi.Int)>>('X509_NAME_get_index_by_OBJ');
  late final _X509_NAME_get_index_by_OBJ =
      _X509_NAME_get_index_by_OBJPtr.asFunction<
          int Function(
              ffi.Pointer<X509_NAME>, ffi.Pointer<ASN1_OBJECT>, int)>();

  ffi.Pointer<X509_NAME_ENTRY> X509_NAME_get_entry(
    ffi.Pointer<X509_NAME> name,
    int loc,
  ) {
    return _X509_NAME_get_entry(
      name,
      loc,
    );
  }

  late final _X509_NAME_get_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_NAME_ENTRY> Function(
              ffi.Pointer<X509_NAME>, ffi.Int)>>('X509_NAME_get_entry');
  late final _X509_NAME_get_entry = _X509_NAME_get_entryPtr.asFunction<
      ffi.Pointer<X509_NAME_ENTRY> Function(ffi.Pointer<X509_NAME>, int)>();

  ffi.Pointer<X509_NAME_ENTRY> X509_NAME_delete_entry(
    ffi.Pointer<X509_NAME> name,
    int loc,
  ) {
    return _X509_NAME_delete_entry(
      name,
      loc,
    );
  }

  late final _X509_NAME_delete_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_NAME_ENTRY> Function(
              ffi.Pointer<X509_NAME>, ffi.Int)>>('X509_NAME_delete_entry');
  late final _X509_NAME_delete_entry = _X509_NAME_delete_entryPtr.asFunction<
      ffi.Pointer<X509_NAME_ENTRY> Function(ffi.Pointer<X509_NAME>, int)>();

  int X509_NAME_add_entry(
    ffi.Pointer<X509_NAME> name,
    ffi.Pointer<X509_NAME_ENTRY> ne,
    int loc,
    int set1,
  ) {
    return _X509_NAME_add_entry(
      name,
      ne,
      loc,
      set1,
    );
  }

  late final _X509_NAME_add_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_NAME>, ffi.Pointer<X509_NAME_ENTRY>,
              ffi.Int, ffi.Int)>>('X509_NAME_add_entry');
  late final _X509_NAME_add_entry = _X509_NAME_add_entryPtr.asFunction<
      int Function(
          ffi.Pointer<X509_NAME>, ffi.Pointer<X509_NAME_ENTRY>, int, int)>();

  int X509_NAME_add_entry_by_OBJ(
    ffi.Pointer<X509_NAME> name,
    ffi.Pointer<ASN1_OBJECT> obj,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
    int loc,
    int set1,
  ) {
    return _X509_NAME_add_entry_by_OBJ(
      name,
      obj,
      type,
      bytes,
      len,
      loc,
      set1,
    );
  }

  late final _X509_NAME_add_entry_by_OBJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_NAME>,
              ffi.Pointer<ASN1_OBJECT>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('X509_NAME_add_entry_by_OBJ');
  late final _X509_NAME_add_entry_by_OBJ =
      _X509_NAME_add_entry_by_OBJPtr.asFunction<
          int Function(ffi.Pointer<X509_NAME>, ffi.Pointer<ASN1_OBJECT>, int,
              ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  int X509_NAME_add_entry_by_NID(
    ffi.Pointer<X509_NAME> name,
    int nid,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
    int loc,
    int set1,
  ) {
    return _X509_NAME_add_entry_by_NID(
      name,
      nid,
      type,
      bytes,
      len,
      loc,
      set1,
    );
  }

  late final _X509_NAME_add_entry_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_NAME>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('X509_NAME_add_entry_by_NID');
  late final _X509_NAME_add_entry_by_NID =
      _X509_NAME_add_entry_by_NIDPtr.asFunction<
          int Function(ffi.Pointer<X509_NAME>, int, int,
              ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  ffi.Pointer<X509_NAME_ENTRY> X509_NAME_ENTRY_create_by_txt(
    ffi.Pointer<ffi.Pointer<X509_NAME_ENTRY>> ne,
    ffi.Pointer<ffi.Char> field,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
  ) {
    return _X509_NAME_ENTRY_create_by_txt(
      ne,
      field,
      type,
      bytes,
      len,
    );
  }

  late final _X509_NAME_ENTRY_create_by_txtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_NAME_ENTRY> Function(
              ffi.Pointer<ffi.Pointer<X509_NAME_ENTRY>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('X509_NAME_ENTRY_create_by_txt');
  late final _X509_NAME_ENTRY_create_by_txt =
      _X509_NAME_ENTRY_create_by_txtPtr.asFunction<
          ffi.Pointer<X509_NAME_ENTRY> Function(
              ffi.Pointer<ffi.Pointer<X509_NAME_ENTRY>>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              int)>();

  ffi.Pointer<X509_NAME_ENTRY> X509_NAME_ENTRY_create_by_NID(
    ffi.Pointer<ffi.Pointer<X509_NAME_ENTRY>> ne,
    int nid,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
  ) {
    return _X509_NAME_ENTRY_create_by_NID(
      ne,
      nid,
      type,
      bytes,
      len,
    );
  }

  late final _X509_NAME_ENTRY_create_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_NAME_ENTRY> Function(
              ffi.Pointer<ffi.Pointer<X509_NAME_ENTRY>>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('X509_NAME_ENTRY_create_by_NID');
  late final _X509_NAME_ENTRY_create_by_NID =
      _X509_NAME_ENTRY_create_by_NIDPtr.asFunction<
          ffi.Pointer<X509_NAME_ENTRY> Function(
              ffi.Pointer<ffi.Pointer<X509_NAME_ENTRY>>,
              int,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              int)>();

  int X509_NAME_add_entry_by_txt(
    ffi.Pointer<X509_NAME> name,
    ffi.Pointer<ffi.Char> field,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
    int loc,
    int set1,
  ) {
    return _X509_NAME_add_entry_by_txt(
      name,
      field,
      type,
      bytes,
      len,
      loc,
      set1,
    );
  }

  late final _X509_NAME_add_entry_by_txtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_NAME>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('X509_NAME_add_entry_by_txt');
  late final _X509_NAME_add_entry_by_txt =
      _X509_NAME_add_entry_by_txtPtr.asFunction<
          int Function(ffi.Pointer<X509_NAME>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  ffi.Pointer<X509_NAME_ENTRY> X509_NAME_ENTRY_create_by_OBJ(
    ffi.Pointer<ffi.Pointer<X509_NAME_ENTRY>> ne,
    ffi.Pointer<ASN1_OBJECT> obj,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
  ) {
    return _X509_NAME_ENTRY_create_by_OBJ(
      ne,
      obj,
      type,
      bytes,
      len,
    );
  }

  late final _X509_NAME_ENTRY_create_by_OBJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_NAME_ENTRY> Function(
              ffi.Pointer<ffi.Pointer<X509_NAME_ENTRY>>,
              ffi.Pointer<ASN1_OBJECT>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('X509_NAME_ENTRY_create_by_OBJ');
  late final _X509_NAME_ENTRY_create_by_OBJ =
      _X509_NAME_ENTRY_create_by_OBJPtr.asFunction<
          ffi.Pointer<X509_NAME_ENTRY> Function(
              ffi.Pointer<ffi.Pointer<X509_NAME_ENTRY>>,
              ffi.Pointer<ASN1_OBJECT>,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              int)>();

  int X509_NAME_ENTRY_set_object(
    ffi.Pointer<X509_NAME_ENTRY> ne,
    ffi.Pointer<ASN1_OBJECT> obj,
  ) {
    return _X509_NAME_ENTRY_set_object(
      ne,
      obj,
    );
  }

  late final _X509_NAME_ENTRY_set_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_NAME_ENTRY>,
              ffi.Pointer<ASN1_OBJECT>)>>('X509_NAME_ENTRY_set_object');
  late final _X509_NAME_ENTRY_set_object =
      _X509_NAME_ENTRY_set_objectPtr.asFunction<
          int Function(
              ffi.Pointer<X509_NAME_ENTRY>, ffi.Pointer<ASN1_OBJECT>)>();

  int X509_NAME_ENTRY_set_data(
    ffi.Pointer<X509_NAME_ENTRY> ne,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
  ) {
    return _X509_NAME_ENTRY_set_data(
      ne,
      type,
      bytes,
      len,
    );
  }

  late final _X509_NAME_ENTRY_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_NAME_ENTRY>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('X509_NAME_ENTRY_set_data');
  late final _X509_NAME_ENTRY_set_data =
      _X509_NAME_ENTRY_set_dataPtr.asFunction<
          int Function(ffi.Pointer<X509_NAME_ENTRY>, int,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ASN1_OBJECT> X509_NAME_ENTRY_get_object(
    ffi.Pointer<X509_NAME_ENTRY> ne,
  ) {
    return _X509_NAME_ENTRY_get_object(
      ne,
    );
  }

  late final _X509_NAME_ENTRY_get_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(
              ffi.Pointer<X509_NAME_ENTRY>)>>('X509_NAME_ENTRY_get_object');
  late final _X509_NAME_ENTRY_get_object =
      _X509_NAME_ENTRY_get_objectPtr.asFunction<
          ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<X509_NAME_ENTRY>)>();

  ffi.Pointer<ASN1_STRING> X509_NAME_ENTRY_get_data(
    ffi.Pointer<X509_NAME_ENTRY> ne,
  ) {
    return _X509_NAME_ENTRY_get_data(
      ne,
    );
  }

  late final _X509_NAME_ENTRY_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_STRING> Function(
              ffi.Pointer<X509_NAME_ENTRY>)>>('X509_NAME_ENTRY_get_data');
  late final _X509_NAME_ENTRY_get_data =
      _X509_NAME_ENTRY_get_dataPtr.asFunction<
          ffi.Pointer<ASN1_STRING> Function(ffi.Pointer<X509_NAME_ENTRY>)>();

  int X509_NAME_ENTRY_set(
    ffi.Pointer<X509_NAME_ENTRY> ne,
  ) {
    return _X509_NAME_ENTRY_set(
      ne,
    );
  }

  late final _X509_NAME_ENTRY_setPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_NAME_ENTRY>)>>(
      'X509_NAME_ENTRY_set');
  late final _X509_NAME_ENTRY_set = _X509_NAME_ENTRY_setPtr.asFunction<
      int Function(ffi.Pointer<X509_NAME_ENTRY>)>();

  int X509_NAME_get0_der(
    ffi.Pointer<X509_NAME> nm,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pder,
    ffi.Pointer<ffi.Int> pderlen,
  ) {
    return _X509_NAME_get0_der(
      nm,
      pder,
      pderlen,
    );
  }

  late final _X509_NAME_get0_derPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_NAME>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>)>>('X509_NAME_get0_der');
  late final _X509_NAME_get0_der = _X509_NAME_get0_derPtr.asFunction<
      int Function(ffi.Pointer<X509_NAME>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Pointer<ffi.Int>)>();

  int X509v3_get_ext_count(
    ffi.Pointer<stack_st_X509_EXTENSION> x,
  ) {
    return _X509v3_get_ext_count(
      x,
    );
  }

  late final _X509v3_get_ext_countPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<stack_st_X509_EXTENSION>)>>('X509v3_get_ext_count');
  late final _X509v3_get_ext_count = _X509v3_get_ext_countPtr.asFunction<
      int Function(ffi.Pointer<stack_st_X509_EXTENSION>)>();

  int X509v3_get_ext_by_NID(
    ffi.Pointer<stack_st_X509_EXTENSION> x,
    int nid,
    int lastpos,
  ) {
    return _X509v3_get_ext_by_NID(
      x,
      nid,
      lastpos,
    );
  }

  late final _X509v3_get_ext_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<stack_st_X509_EXTENSION>, ffi.Int,
              ffi.Int)>>('X509v3_get_ext_by_NID');
  late final _X509v3_get_ext_by_NID = _X509v3_get_ext_by_NIDPtr.asFunction<
      int Function(ffi.Pointer<stack_st_X509_EXTENSION>, int, int)>();

  int X509v3_get_ext_by_OBJ(
    ffi.Pointer<stack_st_X509_EXTENSION> x,
    ffi.Pointer<ASN1_OBJECT> obj,
    int lastpos,
  ) {
    return _X509v3_get_ext_by_OBJ(
      x,
      obj,
      lastpos,
    );
  }

  late final _X509v3_get_ext_by_OBJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<stack_st_X509_EXTENSION>,
              ffi.Pointer<ASN1_OBJECT>, ffi.Int)>>('X509v3_get_ext_by_OBJ');
  late final _X509v3_get_ext_by_OBJ = _X509v3_get_ext_by_OBJPtr.asFunction<
      int Function(ffi.Pointer<stack_st_X509_EXTENSION>,
          ffi.Pointer<ASN1_OBJECT>, int)>();

  int X509v3_get_ext_by_critical(
    ffi.Pointer<stack_st_X509_EXTENSION> x,
    int crit,
    int lastpos,
  ) {
    return _X509v3_get_ext_by_critical(
      x,
      crit,
      lastpos,
    );
  }

  late final _X509v3_get_ext_by_criticalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<stack_st_X509_EXTENSION>, ffi.Int,
              ffi.Int)>>('X509v3_get_ext_by_critical');
  late final _X509v3_get_ext_by_critical =
      _X509v3_get_ext_by_criticalPtr.asFunction<
          int Function(ffi.Pointer<stack_st_X509_EXTENSION>, int, int)>();

  ffi.Pointer<X509_EXTENSION> X509v3_get_ext(
    ffi.Pointer<stack_st_X509_EXTENSION> x,
    int loc,
  ) {
    return _X509v3_get_ext(
      x,
      loc,
    );
  }

  late final _X509v3_get_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_EXTENSION> Function(
              ffi.Pointer<stack_st_X509_EXTENSION>,
              ffi.Int)>>('X509v3_get_ext');
  late final _X509v3_get_ext = _X509v3_get_extPtr.asFunction<
      ffi.Pointer<X509_EXTENSION> Function(
          ffi.Pointer<stack_st_X509_EXTENSION>, int)>();

  ffi.Pointer<X509_EXTENSION> X509v3_delete_ext(
    ffi.Pointer<stack_st_X509_EXTENSION> x,
    int loc,
  ) {
    return _X509v3_delete_ext(
      x,
      loc,
    );
  }

  late final _X509v3_delete_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_EXTENSION> Function(
              ffi.Pointer<stack_st_X509_EXTENSION>,
              ffi.Int)>>('X509v3_delete_ext');
  late final _X509v3_delete_ext = _X509v3_delete_extPtr.asFunction<
      ffi.Pointer<X509_EXTENSION> Function(
          ffi.Pointer<stack_st_X509_EXTENSION>, int)>();

  ffi.Pointer<stack_st_X509_EXTENSION> X509v3_add_ext(
    ffi.Pointer<ffi.Pointer<stack_st_X509_EXTENSION>> x,
    ffi.Pointer<X509_EXTENSION> ex,
    int loc,
  ) {
    return _X509v3_add_ext(
      x,
      ex,
      loc,
    );
  }

  late final _X509v3_add_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509_EXTENSION> Function(
              ffi.Pointer<ffi.Pointer<stack_st_X509_EXTENSION>>,
              ffi.Pointer<X509_EXTENSION>,
              ffi.Int)>>('X509v3_add_ext');
  late final _X509v3_add_ext = _X509v3_add_extPtr.asFunction<
      ffi.Pointer<stack_st_X509_EXTENSION> Function(
          ffi.Pointer<ffi.Pointer<stack_st_X509_EXTENSION>>,
          ffi.Pointer<X509_EXTENSION>,
          int)>();

  int X509_get_ext_count(
    ffi.Pointer<X509> x,
  ) {
    return _X509_get_ext_count(
      x,
    );
  }

  late final _X509_get_ext_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509>)>>(
          'X509_get_ext_count');
  late final _X509_get_ext_count =
      _X509_get_ext_countPtr.asFunction<int Function(ffi.Pointer<X509>)>();

  int X509_get_ext_by_NID(
    ffi.Pointer<X509> x,
    int nid,
    int lastpos,
  ) {
    return _X509_get_ext_by_NID(
      x,
      nid,
      lastpos,
    );
  }

  late final _X509_get_ext_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509>, ffi.Int, ffi.Int)>>('X509_get_ext_by_NID');
  late final _X509_get_ext_by_NID = _X509_get_ext_by_NIDPtr.asFunction<
      int Function(ffi.Pointer<X509>, int, int)>();

  int X509_get_ext_by_OBJ(
    ffi.Pointer<X509> x,
    ffi.Pointer<ASN1_OBJECT> obj,
    int lastpos,
  ) {
    return _X509_get_ext_by_OBJ(
      x,
      obj,
      lastpos,
    );
  }

  late final _X509_get_ext_by_OBJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>, ffi.Pointer<ASN1_OBJECT>,
              ffi.Int)>>('X509_get_ext_by_OBJ');
  late final _X509_get_ext_by_OBJ = _X509_get_ext_by_OBJPtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<ASN1_OBJECT>, int)>();

  int X509_get_ext_by_critical(
    ffi.Pointer<X509> x,
    int crit,
    int lastpos,
  ) {
    return _X509_get_ext_by_critical(
      x,
      crit,
      lastpos,
    );
  }

  late final _X509_get_ext_by_criticalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>, ffi.Int,
              ffi.Int)>>('X509_get_ext_by_critical');
  late final _X509_get_ext_by_critical = _X509_get_ext_by_criticalPtr
      .asFunction<int Function(ffi.Pointer<X509>, int, int)>();

  ffi.Pointer<X509_EXTENSION> X509_get_ext(
    ffi.Pointer<X509> x,
    int loc,
  ) {
    return _X509_get_ext(
      x,
      loc,
    );
  }

  late final _X509_get_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_EXTENSION> Function(
              ffi.Pointer<X509>, ffi.Int)>>('X509_get_ext');
  late final _X509_get_ext = _X509_get_extPtr.asFunction<
      ffi.Pointer<X509_EXTENSION> Function(ffi.Pointer<X509>, int)>();

  ffi.Pointer<X509_EXTENSION> X509_delete_ext(
    ffi.Pointer<X509> x,
    int loc,
  ) {
    return _X509_delete_ext(
      x,
      loc,
    );
  }

  late final _X509_delete_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_EXTENSION> Function(
              ffi.Pointer<X509>, ffi.Int)>>('X509_delete_ext');
  late final _X509_delete_ext = _X509_delete_extPtr.asFunction<
      ffi.Pointer<X509_EXTENSION> Function(ffi.Pointer<X509>, int)>();

  int X509_add_ext(
    ffi.Pointer<X509> x,
    ffi.Pointer<X509_EXTENSION> ex,
    int loc,
  ) {
    return _X509_add_ext(
      x,
      ex,
      loc,
    );
  }

  late final _X509_add_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>, ffi.Pointer<X509_EXTENSION>,
              ffi.Int)>>('X509_add_ext');
  late final _X509_add_ext = _X509_add_extPtr.asFunction<
      int Function(ffi.Pointer<X509>, ffi.Pointer<X509_EXTENSION>, int)>();

  ffi.Pointer<ffi.Void> X509_get_ext_d2i(
    ffi.Pointer<X509> x,
    int nid,
    ffi.Pointer<ffi.Int> crit,
    ffi.Pointer<ffi.Int> idx,
  ) {
    return _X509_get_ext_d2i(
      x,
      nid,
      crit,
      idx,
    );
  }

  late final _X509_get_ext_d2iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<X509>, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('X509_get_ext_d2i');
  late final _X509_get_ext_d2i = _X509_get_ext_d2iPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<X509>, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int X509_add1_ext_i2d(
    ffi.Pointer<X509> x,
    int nid,
    ffi.Pointer<ffi.Void> value,
    int crit,
    int flags,
  ) {
    return _X509_add1_ext_i2d(
      x,
      nid,
      value,
      crit,
      flags,
    );
  }

  late final _X509_add1_ext_i2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509>, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.UnsignedLong)>>('X509_add1_ext_i2d');
  late final _X509_add1_ext_i2d = _X509_add1_ext_i2dPtr.asFunction<
      int Function(ffi.Pointer<X509>, int, ffi.Pointer<ffi.Void>, int, int)>();

  int X509_CRL_get_ext_count(
    ffi.Pointer<X509_CRL> x,
  ) {
    return _X509_CRL_get_ext_count(
      x,
    );
  }

  late final _X509_CRL_get_ext_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_CRL>)>>(
          'X509_CRL_get_ext_count');
  late final _X509_CRL_get_ext_count = _X509_CRL_get_ext_countPtr.asFunction<
      int Function(ffi.Pointer<X509_CRL>)>();

  int X509_CRL_get_ext_by_NID(
    ffi.Pointer<X509_CRL> x,
    int nid,
    int lastpos,
  ) {
    return _X509_CRL_get_ext_by_NID(
      x,
      nid,
      lastpos,
    );
  }

  late final _X509_CRL_get_ext_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_CRL>, ffi.Int,
              ffi.Int)>>('X509_CRL_get_ext_by_NID');
  late final _X509_CRL_get_ext_by_NID = _X509_CRL_get_ext_by_NIDPtr.asFunction<
      int Function(ffi.Pointer<X509_CRL>, int, int)>();

  int X509_CRL_get_ext_by_OBJ(
    ffi.Pointer<X509_CRL> x,
    ffi.Pointer<ASN1_OBJECT> obj,
    int lastpos,
  ) {
    return _X509_CRL_get_ext_by_OBJ(
      x,
      obj,
      lastpos,
    );
  }

  late final _X509_CRL_get_ext_by_OBJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_CRL>, ffi.Pointer<ASN1_OBJECT>,
              ffi.Int)>>('X509_CRL_get_ext_by_OBJ');
  late final _X509_CRL_get_ext_by_OBJ = _X509_CRL_get_ext_by_OBJPtr.asFunction<
      int Function(ffi.Pointer<X509_CRL>, ffi.Pointer<ASN1_OBJECT>, int)>();

  int X509_CRL_get_ext_by_critical(
    ffi.Pointer<X509_CRL> x,
    int crit,
    int lastpos,
  ) {
    return _X509_CRL_get_ext_by_critical(
      x,
      crit,
      lastpos,
    );
  }

  late final _X509_CRL_get_ext_by_criticalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_CRL>, ffi.Int,
              ffi.Int)>>('X509_CRL_get_ext_by_critical');
  late final _X509_CRL_get_ext_by_critical = _X509_CRL_get_ext_by_criticalPtr
      .asFunction<int Function(ffi.Pointer<X509_CRL>, int, int)>();

  ffi.Pointer<X509_EXTENSION> X509_CRL_get_ext(
    ffi.Pointer<X509_CRL> x,
    int loc,
  ) {
    return _X509_CRL_get_ext(
      x,
      loc,
    );
  }

  late final _X509_CRL_get_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_EXTENSION> Function(
              ffi.Pointer<X509_CRL>, ffi.Int)>>('X509_CRL_get_ext');
  late final _X509_CRL_get_ext = _X509_CRL_get_extPtr.asFunction<
      ffi.Pointer<X509_EXTENSION> Function(ffi.Pointer<X509_CRL>, int)>();

  ffi.Pointer<X509_EXTENSION> X509_CRL_delete_ext(
    ffi.Pointer<X509_CRL> x,
    int loc,
  ) {
    return _X509_CRL_delete_ext(
      x,
      loc,
    );
  }

  late final _X509_CRL_delete_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_EXTENSION> Function(
              ffi.Pointer<X509_CRL>, ffi.Int)>>('X509_CRL_delete_ext');
  late final _X509_CRL_delete_ext = _X509_CRL_delete_extPtr.asFunction<
      ffi.Pointer<X509_EXTENSION> Function(ffi.Pointer<X509_CRL>, int)>();

  int X509_CRL_add_ext(
    ffi.Pointer<X509_CRL> x,
    ffi.Pointer<X509_EXTENSION> ex,
    int loc,
  ) {
    return _X509_CRL_add_ext(
      x,
      ex,
      loc,
    );
  }

  late final _X509_CRL_add_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_CRL>, ffi.Pointer<X509_EXTENSION>,
              ffi.Int)>>('X509_CRL_add_ext');
  late final _X509_CRL_add_ext = _X509_CRL_add_extPtr.asFunction<
      int Function(ffi.Pointer<X509_CRL>, ffi.Pointer<X509_EXTENSION>, int)>();

  ffi.Pointer<ffi.Void> X509_CRL_get_ext_d2i(
    ffi.Pointer<X509_CRL> x,
    int nid,
    ffi.Pointer<ffi.Int> crit,
    ffi.Pointer<ffi.Int> idx,
  ) {
    return _X509_CRL_get_ext_d2i(
      x,
      nid,
      crit,
      idx,
    );
  }

  late final _X509_CRL_get_ext_d2iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<X509_CRL>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('X509_CRL_get_ext_d2i');
  late final _X509_CRL_get_ext_d2i = _X509_CRL_get_ext_d2iPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<X509_CRL>, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int X509_CRL_add1_ext_i2d(
    ffi.Pointer<X509_CRL> x,
    int nid,
    ffi.Pointer<ffi.Void> value,
    int crit,
    int flags,
  ) {
    return _X509_CRL_add1_ext_i2d(
      x,
      nid,
      value,
      crit,
      flags,
    );
  }

  late final _X509_CRL_add1_ext_i2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_CRL>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.UnsignedLong)>>('X509_CRL_add1_ext_i2d');
  late final _X509_CRL_add1_ext_i2d = _X509_CRL_add1_ext_i2dPtr.asFunction<
      int Function(
          ffi.Pointer<X509_CRL>, int, ffi.Pointer<ffi.Void>, int, int)>();

  int X509_REVOKED_get_ext_count(
    ffi.Pointer<X509_REVOKED> x,
  ) {
    return _X509_REVOKED_get_ext_count(
      x,
    );
  }

  late final _X509_REVOKED_get_ext_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_REVOKED>)>>(
          'X509_REVOKED_get_ext_count');
  late final _X509_REVOKED_get_ext_count = _X509_REVOKED_get_ext_countPtr
      .asFunction<int Function(ffi.Pointer<X509_REVOKED>)>();

  int X509_REVOKED_get_ext_by_NID(
    ffi.Pointer<X509_REVOKED> x,
    int nid,
    int lastpos,
  ) {
    return _X509_REVOKED_get_ext_by_NID(
      x,
      nid,
      lastpos,
    );
  }

  late final _X509_REVOKED_get_ext_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REVOKED>, ffi.Int,
              ffi.Int)>>('X509_REVOKED_get_ext_by_NID');
  late final _X509_REVOKED_get_ext_by_NID = _X509_REVOKED_get_ext_by_NIDPtr
      .asFunction<int Function(ffi.Pointer<X509_REVOKED>, int, int)>();

  int X509_REVOKED_get_ext_by_OBJ(
    ffi.Pointer<X509_REVOKED> x,
    ffi.Pointer<ASN1_OBJECT> obj,
    int lastpos,
  ) {
    return _X509_REVOKED_get_ext_by_OBJ(
      x,
      obj,
      lastpos,
    );
  }

  late final _X509_REVOKED_get_ext_by_OBJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REVOKED>, ffi.Pointer<ASN1_OBJECT>,
              ffi.Int)>>('X509_REVOKED_get_ext_by_OBJ');
  late final _X509_REVOKED_get_ext_by_OBJ =
      _X509_REVOKED_get_ext_by_OBJPtr.asFunction<
          int Function(
              ffi.Pointer<X509_REVOKED>, ffi.Pointer<ASN1_OBJECT>, int)>();

  int X509_REVOKED_get_ext_by_critical(
    ffi.Pointer<X509_REVOKED> x,
    int crit,
    int lastpos,
  ) {
    return _X509_REVOKED_get_ext_by_critical(
      x,
      crit,
      lastpos,
    );
  }

  late final _X509_REVOKED_get_ext_by_criticalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REVOKED>, ffi.Int,
              ffi.Int)>>('X509_REVOKED_get_ext_by_critical');
  late final _X509_REVOKED_get_ext_by_critical =
      _X509_REVOKED_get_ext_by_criticalPtr.asFunction<
          int Function(ffi.Pointer<X509_REVOKED>, int, int)>();

  ffi.Pointer<X509_EXTENSION> X509_REVOKED_get_ext(
    ffi.Pointer<X509_REVOKED> x,
    int loc,
  ) {
    return _X509_REVOKED_get_ext(
      x,
      loc,
    );
  }

  late final _X509_REVOKED_get_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_EXTENSION> Function(
              ffi.Pointer<X509_REVOKED>, ffi.Int)>>('X509_REVOKED_get_ext');
  late final _X509_REVOKED_get_ext = _X509_REVOKED_get_extPtr.asFunction<
      ffi.Pointer<X509_EXTENSION> Function(ffi.Pointer<X509_REVOKED>, int)>();

  ffi.Pointer<X509_EXTENSION> X509_REVOKED_delete_ext(
    ffi.Pointer<X509_REVOKED> x,
    int loc,
  ) {
    return _X509_REVOKED_delete_ext(
      x,
      loc,
    );
  }

  late final _X509_REVOKED_delete_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_EXTENSION> Function(
              ffi.Pointer<X509_REVOKED>, ffi.Int)>>('X509_REVOKED_delete_ext');
  late final _X509_REVOKED_delete_ext = _X509_REVOKED_delete_extPtr.asFunction<
      ffi.Pointer<X509_EXTENSION> Function(ffi.Pointer<X509_REVOKED>, int)>();

  int X509_REVOKED_add_ext(
    ffi.Pointer<X509_REVOKED> x,
    ffi.Pointer<X509_EXTENSION> ex,
    int loc,
  ) {
    return _X509_REVOKED_add_ext(
      x,
      ex,
      loc,
    );
  }

  late final _X509_REVOKED_add_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_REVOKED>,
              ffi.Pointer<X509_EXTENSION>, ffi.Int)>>('X509_REVOKED_add_ext');
  late final _X509_REVOKED_add_ext = _X509_REVOKED_add_extPtr.asFunction<
      int Function(
          ffi.Pointer<X509_REVOKED>, ffi.Pointer<X509_EXTENSION>, int)>();

  ffi.Pointer<ffi.Void> X509_REVOKED_get_ext_d2i(
    ffi.Pointer<X509_REVOKED> x,
    int nid,
    ffi.Pointer<ffi.Int> crit,
    ffi.Pointer<ffi.Int> idx,
  ) {
    return _X509_REVOKED_get_ext_d2i(
      x,
      nid,
      crit,
      idx,
    );
  }

  late final _X509_REVOKED_get_ext_d2iPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<X509_REVOKED>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('X509_REVOKED_get_ext_d2i');
  late final _X509_REVOKED_get_ext_d2i =
      _X509_REVOKED_get_ext_d2iPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<X509_REVOKED>, int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int X509_REVOKED_add1_ext_i2d(
    ffi.Pointer<X509_REVOKED> x,
    int nid,
    ffi.Pointer<ffi.Void> value,
    int crit,
    int flags,
  ) {
    return _X509_REVOKED_add1_ext_i2d(
      x,
      nid,
      value,
      crit,
      flags,
    );
  }

  late final _X509_REVOKED_add1_ext_i2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_REVOKED>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.UnsignedLong)>>('X509_REVOKED_add1_ext_i2d');
  late final _X509_REVOKED_add1_ext_i2d =
      _X509_REVOKED_add1_ext_i2dPtr.asFunction<
          int Function(ffi.Pointer<X509_REVOKED>, int, ffi.Pointer<ffi.Void>,
              int, int)>();

  ffi.Pointer<X509_EXTENSION> X509_EXTENSION_create_by_NID(
    ffi.Pointer<ffi.Pointer<X509_EXTENSION>> ex,
    int nid,
    int crit,
    ffi.Pointer<ASN1_OCTET_STRING> data,
  ) {
    return _X509_EXTENSION_create_by_NID(
      ex,
      nid,
      crit,
      data,
    );
  }

  late final _X509_EXTENSION_create_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_EXTENSION> Function(
              ffi.Pointer<ffi.Pointer<X509_EXTENSION>>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ASN1_OCTET_STRING>)>>('X509_EXTENSION_create_by_NID');
  late final _X509_EXTENSION_create_by_NID =
      _X509_EXTENSION_create_by_NIDPtr.asFunction<
          ffi.Pointer<X509_EXTENSION> Function(
              ffi.Pointer<ffi.Pointer<X509_EXTENSION>>,
              int,
              int,
              ffi.Pointer<ASN1_OCTET_STRING>)>();

  ffi.Pointer<X509_EXTENSION> X509_EXTENSION_create_by_OBJ(
    ffi.Pointer<ffi.Pointer<X509_EXTENSION>> ex,
    ffi.Pointer<ASN1_OBJECT> obj,
    int crit,
    ffi.Pointer<ASN1_OCTET_STRING> data,
  ) {
    return _X509_EXTENSION_create_by_OBJ(
      ex,
      obj,
      crit,
      data,
    );
  }

  late final _X509_EXTENSION_create_by_OBJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_EXTENSION> Function(
              ffi.Pointer<ffi.Pointer<X509_EXTENSION>>,
              ffi.Pointer<ASN1_OBJECT>,
              ffi.Int,
              ffi.Pointer<ASN1_OCTET_STRING>)>>('X509_EXTENSION_create_by_OBJ');
  late final _X509_EXTENSION_create_by_OBJ =
      _X509_EXTENSION_create_by_OBJPtr.asFunction<
          ffi.Pointer<X509_EXTENSION> Function(
              ffi.Pointer<ffi.Pointer<X509_EXTENSION>>,
              ffi.Pointer<ASN1_OBJECT>,
              int,
              ffi.Pointer<ASN1_OCTET_STRING>)>();

  int X509_EXTENSION_set_object(
    ffi.Pointer<X509_EXTENSION> ex,
    ffi.Pointer<ASN1_OBJECT> obj,
  ) {
    return _X509_EXTENSION_set_object(
      ex,
      obj,
    );
  }

  late final _X509_EXTENSION_set_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_EXTENSION>,
              ffi.Pointer<ASN1_OBJECT>)>>('X509_EXTENSION_set_object');
  late final _X509_EXTENSION_set_object =
      _X509_EXTENSION_set_objectPtr.asFunction<
          int Function(
              ffi.Pointer<X509_EXTENSION>, ffi.Pointer<ASN1_OBJECT>)>();

  int X509_EXTENSION_set_critical(
    ffi.Pointer<X509_EXTENSION> ex,
    int crit,
  ) {
    return _X509_EXTENSION_set_critical(
      ex,
      crit,
    );
  }

  late final _X509_EXTENSION_set_criticalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_EXTENSION>,
              ffi.Int)>>('X509_EXTENSION_set_critical');
  late final _X509_EXTENSION_set_critical = _X509_EXTENSION_set_criticalPtr
      .asFunction<int Function(ffi.Pointer<X509_EXTENSION>, int)>();

  int X509_EXTENSION_set_data(
    ffi.Pointer<X509_EXTENSION> ex,
    ffi.Pointer<ASN1_OCTET_STRING> data,
  ) {
    return _X509_EXTENSION_set_data(
      ex,
      data,
    );
  }

  late final _X509_EXTENSION_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_EXTENSION>,
              ffi.Pointer<ASN1_OCTET_STRING>)>>('X509_EXTENSION_set_data');
  late final _X509_EXTENSION_set_data = _X509_EXTENSION_set_dataPtr.asFunction<
      int Function(
          ffi.Pointer<X509_EXTENSION>, ffi.Pointer<ASN1_OCTET_STRING>)>();

  ffi.Pointer<ASN1_OBJECT> X509_EXTENSION_get_object(
    ffi.Pointer<X509_EXTENSION> ex,
  ) {
    return _X509_EXTENSION_get_object(
      ex,
    );
  }

  late final _X509_EXTENSION_get_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(
              ffi.Pointer<X509_EXTENSION>)>>('X509_EXTENSION_get_object');
  late final _X509_EXTENSION_get_object =
      _X509_EXTENSION_get_objectPtr.asFunction<
          ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<X509_EXTENSION>)>();

  ffi.Pointer<ASN1_OCTET_STRING> X509_EXTENSION_get_data(
    ffi.Pointer<X509_EXTENSION> ne,
  ) {
    return _X509_EXTENSION_get_data(
      ne,
    );
  }

  late final _X509_EXTENSION_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OCTET_STRING> Function(
              ffi.Pointer<X509_EXTENSION>)>>('X509_EXTENSION_get_data');
  late final _X509_EXTENSION_get_data = _X509_EXTENSION_get_dataPtr.asFunction<
      ffi.Pointer<ASN1_OCTET_STRING> Function(ffi.Pointer<X509_EXTENSION>)>();

  int X509_EXTENSION_get_critical(
    ffi.Pointer<X509_EXTENSION> ex,
  ) {
    return _X509_EXTENSION_get_critical(
      ex,
    );
  }

  late final _X509_EXTENSION_get_criticalPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_EXTENSION>)>>(
      'X509_EXTENSION_get_critical');
  late final _X509_EXTENSION_get_critical = _X509_EXTENSION_get_criticalPtr
      .asFunction<int Function(ffi.Pointer<X509_EXTENSION>)>();

  int X509at_get_attr_count(
    ffi.Pointer<stack_st_X509_ATTRIBUTE> x,
  ) {
    return _X509at_get_attr_count(
      x,
    );
  }

  late final _X509at_get_attr_countPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<stack_st_X509_ATTRIBUTE>)>>('X509at_get_attr_count');
  late final _X509at_get_attr_count = _X509at_get_attr_countPtr.asFunction<
      int Function(ffi.Pointer<stack_st_X509_ATTRIBUTE>)>();

  int X509at_get_attr_by_NID(
    ffi.Pointer<stack_st_X509_ATTRIBUTE> x,
    int nid,
    int lastpos,
  ) {
    return _X509at_get_attr_by_NID(
      x,
      nid,
      lastpos,
    );
  }

  late final _X509at_get_attr_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<stack_st_X509_ATTRIBUTE>, ffi.Int,
              ffi.Int)>>('X509at_get_attr_by_NID');
  late final _X509at_get_attr_by_NID = _X509at_get_attr_by_NIDPtr.asFunction<
      int Function(ffi.Pointer<stack_st_X509_ATTRIBUTE>, int, int)>();

  int X509at_get_attr_by_OBJ(
    ffi.Pointer<stack_st_X509_ATTRIBUTE> sk,
    ffi.Pointer<ASN1_OBJECT> obj,
    int lastpos,
  ) {
    return _X509at_get_attr_by_OBJ(
      sk,
      obj,
      lastpos,
    );
  }

  late final _X509at_get_attr_by_OBJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<stack_st_X509_ATTRIBUTE>,
              ffi.Pointer<ASN1_OBJECT>, ffi.Int)>>('X509at_get_attr_by_OBJ');
  late final _X509at_get_attr_by_OBJ = _X509at_get_attr_by_OBJPtr.asFunction<
      int Function(ffi.Pointer<stack_st_X509_ATTRIBUTE>,
          ffi.Pointer<ASN1_OBJECT>, int)>();

  ffi.Pointer<X509_ATTRIBUTE> X509at_get_attr(
    ffi.Pointer<stack_st_X509_ATTRIBUTE> x,
    int loc,
  ) {
    return _X509at_get_attr(
      x,
      loc,
    );
  }

  late final _X509at_get_attrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ATTRIBUTE> Function(
              ffi.Pointer<stack_st_X509_ATTRIBUTE>,
              ffi.Int)>>('X509at_get_attr');
  late final _X509at_get_attr = _X509at_get_attrPtr.asFunction<
      ffi.Pointer<X509_ATTRIBUTE> Function(
          ffi.Pointer<stack_st_X509_ATTRIBUTE>, int)>();

  ffi.Pointer<X509_ATTRIBUTE> X509at_delete_attr(
    ffi.Pointer<stack_st_X509_ATTRIBUTE> x,
    int loc,
  ) {
    return _X509at_delete_attr(
      x,
      loc,
    );
  }

  late final _X509at_delete_attrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ATTRIBUTE> Function(
              ffi.Pointer<stack_st_X509_ATTRIBUTE>,
              ffi.Int)>>('X509at_delete_attr');
  late final _X509at_delete_attr = _X509at_delete_attrPtr.asFunction<
      ffi.Pointer<X509_ATTRIBUTE> Function(
          ffi.Pointer<stack_st_X509_ATTRIBUTE>, int)>();

  ffi.Pointer<stack_st_X509_ATTRIBUTE> X509at_add1_attr(
    ffi.Pointer<ffi.Pointer<stack_st_X509_ATTRIBUTE>> x,
    ffi.Pointer<X509_ATTRIBUTE> attr,
  ) {
    return _X509at_add1_attr(
      x,
      attr,
    );
  }

  late final _X509at_add1_attrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509_ATTRIBUTE> Function(
              ffi.Pointer<ffi.Pointer<stack_st_X509_ATTRIBUTE>>,
              ffi.Pointer<X509_ATTRIBUTE>)>>('X509at_add1_attr');
  late final _X509at_add1_attr = _X509at_add1_attrPtr.asFunction<
      ffi.Pointer<stack_st_X509_ATTRIBUTE> Function(
          ffi.Pointer<ffi.Pointer<stack_st_X509_ATTRIBUTE>>,
          ffi.Pointer<X509_ATTRIBUTE>)>();

  ffi.Pointer<stack_st_X509_ATTRIBUTE> X509at_add1_attr_by_OBJ(
    ffi.Pointer<ffi.Pointer<stack_st_X509_ATTRIBUTE>> x,
    ffi.Pointer<ASN1_OBJECT> obj,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
  ) {
    return _X509at_add1_attr_by_OBJ(
      x,
      obj,
      type,
      bytes,
      len,
    );
  }

  late final _X509at_add1_attr_by_OBJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509_ATTRIBUTE> Function(
              ffi.Pointer<ffi.Pointer<stack_st_X509_ATTRIBUTE>>,
              ffi.Pointer<ASN1_OBJECT>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('X509at_add1_attr_by_OBJ');
  late final _X509at_add1_attr_by_OBJ = _X509at_add1_attr_by_OBJPtr.asFunction<
      ffi.Pointer<stack_st_X509_ATTRIBUTE> Function(
          ffi.Pointer<ffi.Pointer<stack_st_X509_ATTRIBUTE>>,
          ffi.Pointer<ASN1_OBJECT>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int)>();

  ffi.Pointer<stack_st_X509_ATTRIBUTE> X509at_add1_attr_by_NID(
    ffi.Pointer<ffi.Pointer<stack_st_X509_ATTRIBUTE>> x,
    int nid,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
  ) {
    return _X509at_add1_attr_by_NID(
      x,
      nid,
      type,
      bytes,
      len,
    );
  }

  late final _X509at_add1_attr_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509_ATTRIBUTE> Function(
              ffi.Pointer<ffi.Pointer<stack_st_X509_ATTRIBUTE>>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('X509at_add1_attr_by_NID');
  late final _X509at_add1_attr_by_NID = _X509at_add1_attr_by_NIDPtr.asFunction<
      ffi.Pointer<stack_st_X509_ATTRIBUTE> Function(
          ffi.Pointer<ffi.Pointer<stack_st_X509_ATTRIBUTE>>,
          int,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int)>();

  ffi.Pointer<stack_st_X509_ATTRIBUTE> X509at_add1_attr_by_txt(
    ffi.Pointer<ffi.Pointer<stack_st_X509_ATTRIBUTE>> x,
    ffi.Pointer<ffi.Char> attrname,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
  ) {
    return _X509at_add1_attr_by_txt(
      x,
      attrname,
      type,
      bytes,
      len,
    );
  }

  late final _X509at_add1_attr_by_txtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509_ATTRIBUTE> Function(
              ffi.Pointer<ffi.Pointer<stack_st_X509_ATTRIBUTE>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('X509at_add1_attr_by_txt');
  late final _X509at_add1_attr_by_txt = _X509at_add1_attr_by_txtPtr.asFunction<
      ffi.Pointer<stack_st_X509_ATTRIBUTE> Function(
          ffi.Pointer<ffi.Pointer<stack_st_X509_ATTRIBUTE>>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int)>();

  ffi.Pointer<ffi.Void> X509at_get0_data_by_OBJ(
    ffi.Pointer<stack_st_X509_ATTRIBUTE> x,
    ffi.Pointer<ASN1_OBJECT> obj,
    int lastpos,
    int type,
  ) {
    return _X509at_get0_data_by_OBJ(
      x,
      obj,
      lastpos,
      type,
    );
  }

  late final _X509at_get0_data_by_OBJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<stack_st_X509_ATTRIBUTE>,
              ffi.Pointer<ASN1_OBJECT>,
              ffi.Int,
              ffi.Int)>>('X509at_get0_data_by_OBJ');
  late final _X509at_get0_data_by_OBJ = _X509at_get0_data_by_OBJPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<stack_st_X509_ATTRIBUTE>,
          ffi.Pointer<ASN1_OBJECT>, int, int)>();

  ffi.Pointer<X509_ATTRIBUTE> X509_ATTRIBUTE_create_by_NID(
    ffi.Pointer<ffi.Pointer<X509_ATTRIBUTE>> attr,
    int nid,
    int atrtype,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _X509_ATTRIBUTE_create_by_NID(
      attr,
      nid,
      atrtype,
      data,
      len,
    );
  }

  late final _X509_ATTRIBUTE_create_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ATTRIBUTE> Function(
              ffi.Pointer<ffi.Pointer<X509_ATTRIBUTE>>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int)>>('X509_ATTRIBUTE_create_by_NID');
  late final _X509_ATTRIBUTE_create_by_NID =
      _X509_ATTRIBUTE_create_by_NIDPtr.asFunction<
          ffi.Pointer<X509_ATTRIBUTE> Function(
              ffi.Pointer<ffi.Pointer<X509_ATTRIBUTE>>,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              int)>();

  ffi.Pointer<X509_ATTRIBUTE> X509_ATTRIBUTE_create_by_OBJ(
    ffi.Pointer<ffi.Pointer<X509_ATTRIBUTE>> attr,
    ffi.Pointer<ASN1_OBJECT> obj,
    int atrtype,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _X509_ATTRIBUTE_create_by_OBJ(
      attr,
      obj,
      atrtype,
      data,
      len,
    );
  }

  late final _X509_ATTRIBUTE_create_by_OBJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ATTRIBUTE> Function(
              ffi.Pointer<ffi.Pointer<X509_ATTRIBUTE>>,
              ffi.Pointer<ASN1_OBJECT>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int)>>('X509_ATTRIBUTE_create_by_OBJ');
  late final _X509_ATTRIBUTE_create_by_OBJ =
      _X509_ATTRIBUTE_create_by_OBJPtr.asFunction<
          ffi.Pointer<X509_ATTRIBUTE> Function(
              ffi.Pointer<ffi.Pointer<X509_ATTRIBUTE>>,
              ffi.Pointer<ASN1_OBJECT>,
              int,
              ffi.Pointer<ffi.Void>,
              int)>();

  ffi.Pointer<X509_ATTRIBUTE> X509_ATTRIBUTE_create_by_txt(
    ffi.Pointer<ffi.Pointer<X509_ATTRIBUTE>> attr,
    ffi.Pointer<ffi.Char> atrname,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
  ) {
    return _X509_ATTRIBUTE_create_by_txt(
      attr,
      atrname,
      type,
      bytes,
      len,
    );
  }

  late final _X509_ATTRIBUTE_create_by_txtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ATTRIBUTE> Function(
              ffi.Pointer<ffi.Pointer<X509_ATTRIBUTE>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('X509_ATTRIBUTE_create_by_txt');
  late final _X509_ATTRIBUTE_create_by_txt =
      _X509_ATTRIBUTE_create_by_txtPtr.asFunction<
          ffi.Pointer<X509_ATTRIBUTE> Function(
              ffi.Pointer<ffi.Pointer<X509_ATTRIBUTE>>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.UnsignedChar>,
              int)>();

  int X509_ATTRIBUTE_set1_object(
    ffi.Pointer<X509_ATTRIBUTE> attr,
    ffi.Pointer<ASN1_OBJECT> obj,
  ) {
    return _X509_ATTRIBUTE_set1_object(
      attr,
      obj,
    );
  }

  late final _X509_ATTRIBUTE_set1_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_ATTRIBUTE>,
              ffi.Pointer<ASN1_OBJECT>)>>('X509_ATTRIBUTE_set1_object');
  late final _X509_ATTRIBUTE_set1_object =
      _X509_ATTRIBUTE_set1_objectPtr.asFunction<
          int Function(
              ffi.Pointer<X509_ATTRIBUTE>, ffi.Pointer<ASN1_OBJECT>)>();

  int X509_ATTRIBUTE_set1_data(
    ffi.Pointer<X509_ATTRIBUTE> attr,
    int attrtype,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _X509_ATTRIBUTE_set1_data(
      attr,
      attrtype,
      data,
      len,
    );
  }

  late final _X509_ATTRIBUTE_set1_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_ATTRIBUTE>, ffi.Int,
              ffi.Pointer<ffi.Void>, ffi.Int)>>('X509_ATTRIBUTE_set1_data');
  late final _X509_ATTRIBUTE_set1_data =
      _X509_ATTRIBUTE_set1_dataPtr.asFunction<
          int Function(
              ffi.Pointer<X509_ATTRIBUTE>, int, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> X509_ATTRIBUTE_get0_data(
    ffi.Pointer<X509_ATTRIBUTE> attr,
    int idx,
    int atrtype,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _X509_ATTRIBUTE_get0_data(
      attr,
      idx,
      atrtype,
      data,
    );
  }

  late final _X509_ATTRIBUTE_get0_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<X509_ATTRIBUTE>, ffi.Int,
              ffi.Int, ffi.Pointer<ffi.Void>)>>('X509_ATTRIBUTE_get0_data');
  late final _X509_ATTRIBUTE_get0_data =
      _X509_ATTRIBUTE_get0_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<X509_ATTRIBUTE>, int, int, ffi.Pointer<ffi.Void>)>();

  int X509_ATTRIBUTE_count(
    ffi.Pointer<X509_ATTRIBUTE> attr,
  ) {
    return _X509_ATTRIBUTE_count(
      attr,
    );
  }

  late final _X509_ATTRIBUTE_countPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_ATTRIBUTE>)>>(
      'X509_ATTRIBUTE_count');
  late final _X509_ATTRIBUTE_count = _X509_ATTRIBUTE_countPtr.asFunction<
      int Function(ffi.Pointer<X509_ATTRIBUTE>)>();

  ffi.Pointer<ASN1_OBJECT> X509_ATTRIBUTE_get0_object(
    ffi.Pointer<X509_ATTRIBUTE> attr,
  ) {
    return _X509_ATTRIBUTE_get0_object(
      attr,
    );
  }

  late final _X509_ATTRIBUTE_get0_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_OBJECT> Function(
              ffi.Pointer<X509_ATTRIBUTE>)>>('X509_ATTRIBUTE_get0_object');
  late final _X509_ATTRIBUTE_get0_object =
      _X509_ATTRIBUTE_get0_objectPtr.asFunction<
          ffi.Pointer<ASN1_OBJECT> Function(ffi.Pointer<X509_ATTRIBUTE>)>();

  ffi.Pointer<ASN1_TYPE> X509_ATTRIBUTE_get0_type(
    ffi.Pointer<X509_ATTRIBUTE> attr,
    int idx,
  ) {
    return _X509_ATTRIBUTE_get0_type(
      attr,
      idx,
    );
  }

  late final _X509_ATTRIBUTE_get0_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ASN1_TYPE> Function(ffi.Pointer<X509_ATTRIBUTE>,
              ffi.Int)>>('X509_ATTRIBUTE_get0_type');
  late final _X509_ATTRIBUTE_get0_type =
      _X509_ATTRIBUTE_get0_typePtr.asFunction<
          ffi.Pointer<ASN1_TYPE> Function(ffi.Pointer<X509_ATTRIBUTE>, int)>();

  int EVP_PKEY_get_attr_count(
    ffi.Pointer<EVP_PKEY> key,
  ) {
    return _EVP_PKEY_get_attr_count(
      key,
    );
  }

  late final _EVP_PKEY_get_attr_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY>)>>(
          'EVP_PKEY_get_attr_count');
  late final _EVP_PKEY_get_attr_count = _EVP_PKEY_get_attr_countPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>)>();

  int EVP_PKEY_get_attr_by_NID(
    ffi.Pointer<EVP_PKEY> key,
    int nid,
    int lastpos,
  ) {
    return _EVP_PKEY_get_attr_by_NID(
      key,
      nid,
      lastpos,
    );
  }

  late final _EVP_PKEY_get_attr_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Int,
              ffi.Int)>>('EVP_PKEY_get_attr_by_NID');
  late final _EVP_PKEY_get_attr_by_NID = _EVP_PKEY_get_attr_by_NIDPtr
      .asFunction<int Function(ffi.Pointer<EVP_PKEY>, int, int)>();

  int EVP_PKEY_get_attr_by_OBJ(
    ffi.Pointer<EVP_PKEY> key,
    ffi.Pointer<ASN1_OBJECT> obj,
    int lastpos,
  ) {
    return _EVP_PKEY_get_attr_by_OBJ(
      key,
      obj,
      lastpos,
    );
  }

  late final _EVP_PKEY_get_attr_by_OBJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ASN1_OBJECT>,
              ffi.Int)>>('EVP_PKEY_get_attr_by_OBJ');
  late final _EVP_PKEY_get_attr_by_OBJ =
      _EVP_PKEY_get_attr_by_OBJPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ASN1_OBJECT>, int)>();

  ffi.Pointer<X509_ATTRIBUTE> EVP_PKEY_get_attr(
    ffi.Pointer<EVP_PKEY> key,
    int loc,
  ) {
    return _EVP_PKEY_get_attr(
      key,
      loc,
    );
  }

  late final _EVP_PKEY_get_attrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ATTRIBUTE> Function(
              ffi.Pointer<EVP_PKEY>, ffi.Int)>>('EVP_PKEY_get_attr');
  late final _EVP_PKEY_get_attr = _EVP_PKEY_get_attrPtr.asFunction<
      ffi.Pointer<X509_ATTRIBUTE> Function(ffi.Pointer<EVP_PKEY>, int)>();

  ffi.Pointer<X509_ATTRIBUTE> EVP_PKEY_delete_attr(
    ffi.Pointer<EVP_PKEY> key,
    int loc,
  ) {
    return _EVP_PKEY_delete_attr(
      key,
      loc,
    );
  }

  late final _EVP_PKEY_delete_attrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ATTRIBUTE> Function(
              ffi.Pointer<EVP_PKEY>, ffi.Int)>>('EVP_PKEY_delete_attr');
  late final _EVP_PKEY_delete_attr = _EVP_PKEY_delete_attrPtr.asFunction<
      ffi.Pointer<X509_ATTRIBUTE> Function(ffi.Pointer<EVP_PKEY>, int)>();

  int EVP_PKEY_add1_attr(
    ffi.Pointer<EVP_PKEY> key,
    ffi.Pointer<X509_ATTRIBUTE> attr,
  ) {
    return _EVP_PKEY_add1_attr(
      key,
      attr,
    );
  }

  late final _EVP_PKEY_add1_attrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<X509_ATTRIBUTE>)>>('EVP_PKEY_add1_attr');
  late final _EVP_PKEY_add1_attr = _EVP_PKEY_add1_attrPtr.asFunction<
      int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<X509_ATTRIBUTE>)>();

  int EVP_PKEY_add1_attr_by_OBJ(
    ffi.Pointer<EVP_PKEY> key,
    ffi.Pointer<ASN1_OBJECT> obj,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
  ) {
    return _EVP_PKEY_add1_attr_by_OBJ(
      key,
      obj,
      type,
      bytes,
      len,
    );
  }

  late final _EVP_PKEY_add1_attr_by_OBJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ASN1_OBJECT>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_add1_attr_by_OBJ');
  late final _EVP_PKEY_add1_attr_by_OBJ =
      _EVP_PKEY_add1_attr_by_OBJPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ASN1_OBJECT>, int,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_add1_attr_by_NID(
    ffi.Pointer<EVP_PKEY> key,
    int nid,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
  ) {
    return _EVP_PKEY_add1_attr_by_NID(
      key,
      nid,
      type,
      bytes,
      len,
    );
  }

  late final _EVP_PKEY_add1_attr_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_add1_attr_by_NID');
  late final _EVP_PKEY_add1_attr_by_NID =
      _EVP_PKEY_add1_attr_by_NIDPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, int, int,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int EVP_PKEY_add1_attr_by_txt(
    ffi.Pointer<EVP_PKEY> key,
    ffi.Pointer<ffi.Char> attrname,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
  ) {
    return _EVP_PKEY_add1_attr_by_txt(
      key,
      attrname,
      type,
      bytes,
      len,
    );
  }

  late final _EVP_PKEY_add1_attr_by_txtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('EVP_PKEY_add1_attr_by_txt');
  late final _EVP_PKEY_add1_attr_by_txt =
      _EVP_PKEY_add1_attr_by_txtPtr.asFunction<
          int Function(ffi.Pointer<EVP_PKEY>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int X509_verify_cert(
    ffi.Pointer<X509_STORE_CTX> ctx,
  ) {
    return _X509_verify_cert(
      ctx,
    );
  }

  late final _X509_verify_certPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_STORE_CTX>)>>(
      'X509_verify_cert');
  late final _X509_verify_cert = _X509_verify_certPtr.asFunction<
      int Function(ffi.Pointer<X509_STORE_CTX>)>();

  ffi.Pointer<X509> X509_find_by_issuer_and_serial(
    ffi.Pointer<stack_st_X509> sk,
    ffi.Pointer<X509_NAME> name,
    ffi.Pointer<ASN1_INTEGER> serial,
  ) {
    return _X509_find_by_issuer_and_serial(
      sk,
      name,
      serial,
    );
  }

  late final _X509_find_by_issuer_and_serialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509> Function(
              ffi.Pointer<stack_st_X509>,
              ffi.Pointer<X509_NAME>,
              ffi.Pointer<ASN1_INTEGER>)>>('X509_find_by_issuer_and_serial');
  late final _X509_find_by_issuer_and_serial =
      _X509_find_by_issuer_and_serialPtr.asFunction<
          ffi.Pointer<X509> Function(ffi.Pointer<stack_st_X509>,
              ffi.Pointer<X509_NAME>, ffi.Pointer<ASN1_INTEGER>)>();

  ffi.Pointer<X509> X509_find_by_subject(
    ffi.Pointer<stack_st_X509> sk,
    ffi.Pointer<X509_NAME> name,
  ) {
    return _X509_find_by_subject(
      sk,
      name,
    );
  }

  late final _X509_find_by_subjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509> Function(ffi.Pointer<stack_st_X509>,
              ffi.Pointer<X509_NAME>)>>('X509_find_by_subject');
  late final _X509_find_by_subject = _X509_find_by_subjectPtr.asFunction<
      ffi.Pointer<X509> Function(
          ffi.Pointer<stack_st_X509>, ffi.Pointer<X509_NAME>)>();

  ffi.Pointer<PBEPARAM> PBEPARAM_new() {
    return _PBEPARAM_new();
  }

  late final _PBEPARAM_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PBEPARAM> Function()>>(
          'PBEPARAM_new');
  late final _PBEPARAM_new =
      _PBEPARAM_newPtr.asFunction<ffi.Pointer<PBEPARAM> Function()>();

  void PBEPARAM_free(
    ffi.Pointer<PBEPARAM> a,
  ) {
    return _PBEPARAM_free(
      a,
    );
  }

  late final _PBEPARAM_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PBEPARAM>)>>(
          'PBEPARAM_free');
  late final _PBEPARAM_free =
      _PBEPARAM_freePtr.asFunction<void Function(ffi.Pointer<PBEPARAM>)>();

  ffi.Pointer<PBEPARAM> d2i_PBEPARAM(
    ffi.Pointer<ffi.Pointer<PBEPARAM>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_PBEPARAM(
      a,
      in1,
      len,
    );
  }

  late final _d2i_PBEPARAMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PBEPARAM> Function(
              ffi.Pointer<ffi.Pointer<PBEPARAM>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PBEPARAM');
  late final _d2i_PBEPARAM = _d2i_PBEPARAMPtr.asFunction<
      ffi.Pointer<PBEPARAM> Function(ffi.Pointer<ffi.Pointer<PBEPARAM>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_PBEPARAM(
    ffi.Pointer<PBEPARAM> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_PBEPARAM(
      a,
      out,
    );
  }

  late final _i2d_PBEPARAMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PBEPARAM>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_PBEPARAM');
  late final _i2d_PBEPARAM = _i2d_PBEPARAMPtr.asFunction<
      int Function(
          ffi.Pointer<PBEPARAM>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _PBEPARAM_it =
      _lookup<ASN1_ITEM>('PBEPARAM_it');

  ffi.Pointer<ASN1_ITEM> get PBEPARAM_it => _PBEPARAM_it;

  ffi.Pointer<PBE2PARAM> PBE2PARAM_new() {
    return _PBE2PARAM_new();
  }

  late final _PBE2PARAM_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PBE2PARAM> Function()>>(
          'PBE2PARAM_new');
  late final _PBE2PARAM_new =
      _PBE2PARAM_newPtr.asFunction<ffi.Pointer<PBE2PARAM> Function()>();

  void PBE2PARAM_free(
    ffi.Pointer<PBE2PARAM> a,
  ) {
    return _PBE2PARAM_free(
      a,
    );
  }

  late final _PBE2PARAM_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PBE2PARAM>)>>(
          'PBE2PARAM_free');
  late final _PBE2PARAM_free =
      _PBE2PARAM_freePtr.asFunction<void Function(ffi.Pointer<PBE2PARAM>)>();

  ffi.Pointer<PBE2PARAM> d2i_PBE2PARAM(
    ffi.Pointer<ffi.Pointer<PBE2PARAM>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_PBE2PARAM(
      a,
      in1,
      len,
    );
  }

  late final _d2i_PBE2PARAMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PBE2PARAM> Function(
              ffi.Pointer<ffi.Pointer<PBE2PARAM>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PBE2PARAM');
  late final _d2i_PBE2PARAM = _d2i_PBE2PARAMPtr.asFunction<
      ffi.Pointer<PBE2PARAM> Function(ffi.Pointer<ffi.Pointer<PBE2PARAM>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_PBE2PARAM(
    ffi.Pointer<PBE2PARAM> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_PBE2PARAM(
      a,
      out,
    );
  }

  late final _i2d_PBE2PARAMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PBE2PARAM>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_PBE2PARAM');
  late final _i2d_PBE2PARAM = _i2d_PBE2PARAMPtr.asFunction<
      int Function(ffi.Pointer<PBE2PARAM>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _PBE2PARAM_it =
      _lookup<ASN1_ITEM>('PBE2PARAM_it');

  ffi.Pointer<ASN1_ITEM> get PBE2PARAM_it => _PBE2PARAM_it;

  ffi.Pointer<PBKDF2PARAM> PBKDF2PARAM_new() {
    return _PBKDF2PARAM_new();
  }

  late final _PBKDF2PARAM_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PBKDF2PARAM> Function()>>(
          'PBKDF2PARAM_new');
  late final _PBKDF2PARAM_new =
      _PBKDF2PARAM_newPtr.asFunction<ffi.Pointer<PBKDF2PARAM> Function()>();

  void PBKDF2PARAM_free(
    ffi.Pointer<PBKDF2PARAM> a,
  ) {
    return _PBKDF2PARAM_free(
      a,
    );
  }

  late final _PBKDF2PARAM_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PBKDF2PARAM>)>>(
          'PBKDF2PARAM_free');
  late final _PBKDF2PARAM_free = _PBKDF2PARAM_freePtr.asFunction<
      void Function(ffi.Pointer<PBKDF2PARAM>)>();

  ffi.Pointer<PBKDF2PARAM> d2i_PBKDF2PARAM(
    ffi.Pointer<ffi.Pointer<PBKDF2PARAM>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_PBKDF2PARAM(
      a,
      in1,
      len,
    );
  }

  late final _d2i_PBKDF2PARAMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PBKDF2PARAM> Function(
              ffi.Pointer<ffi.Pointer<PBKDF2PARAM>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PBKDF2PARAM');
  late final _d2i_PBKDF2PARAM = _d2i_PBKDF2PARAMPtr.asFunction<
      ffi.Pointer<PBKDF2PARAM> Function(ffi.Pointer<ffi.Pointer<PBKDF2PARAM>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  int i2d_PBKDF2PARAM(
    ffi.Pointer<PBKDF2PARAM> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_PBKDF2PARAM(
      a,
      out,
    );
  }

  late final _i2d_PBKDF2PARAMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PBKDF2PARAM>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>('i2d_PBKDF2PARAM');
  late final _i2d_PBKDF2PARAM = _i2d_PBKDF2PARAMPtr.asFunction<
      int Function(ffi.Pointer<PBKDF2PARAM>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _PBKDF2PARAM_it =
      _lookup<ASN1_ITEM>('PBKDF2PARAM_it');

  ffi.Pointer<ASN1_ITEM> get PBKDF2PARAM_it => _PBKDF2PARAM_it;

  ffi.Pointer<SCRYPT_PARAMS> SCRYPT_PARAMS_new() {
    return _SCRYPT_PARAMS_new();
  }

  late final _SCRYPT_PARAMS_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SCRYPT_PARAMS> Function()>>(
          'SCRYPT_PARAMS_new');
  late final _SCRYPT_PARAMS_new =
      _SCRYPT_PARAMS_newPtr.asFunction<ffi.Pointer<SCRYPT_PARAMS> Function()>();

  void SCRYPT_PARAMS_free(
    ffi.Pointer<SCRYPT_PARAMS> a,
  ) {
    return _SCRYPT_PARAMS_free(
      a,
    );
  }

  late final _SCRYPT_PARAMS_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SCRYPT_PARAMS>)>>(
      'SCRYPT_PARAMS_free');
  late final _SCRYPT_PARAMS_free = _SCRYPT_PARAMS_freePtr.asFunction<
      void Function(ffi.Pointer<SCRYPT_PARAMS>)>();

  ffi.Pointer<SCRYPT_PARAMS> d2i_SCRYPT_PARAMS(
    ffi.Pointer<ffi.Pointer<SCRYPT_PARAMS>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_SCRYPT_PARAMS(
      a,
      in1,
      len,
    );
  }

  late final _d2i_SCRYPT_PARAMSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SCRYPT_PARAMS> Function(
              ffi.Pointer<ffi.Pointer<SCRYPT_PARAMS>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_SCRYPT_PARAMS');
  late final _d2i_SCRYPT_PARAMS = _d2i_SCRYPT_PARAMSPtr.asFunction<
      ffi.Pointer<SCRYPT_PARAMS> Function(
          ffi.Pointer<ffi.Pointer<SCRYPT_PARAMS>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_SCRYPT_PARAMS(
    ffi.Pointer<SCRYPT_PARAMS> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_SCRYPT_PARAMS(
      a,
      out,
    );
  }

  late final _i2d_SCRYPT_PARAMSPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SCRYPT_PARAMS>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_SCRYPT_PARAMS');
  late final _i2d_SCRYPT_PARAMS = _i2d_SCRYPT_PARAMSPtr.asFunction<
      int Function(ffi.Pointer<SCRYPT_PARAMS>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _SCRYPT_PARAMS_it =
      _lookup<ASN1_ITEM>('SCRYPT_PARAMS_it');

  ffi.Pointer<ASN1_ITEM> get SCRYPT_PARAMS_it => _SCRYPT_PARAMS_it;

  int PKCS5_pbe_set0_algor(
    ffi.Pointer<X509_ALGOR> algor,
    int alg,
    int iter,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
  ) {
    return _PKCS5_pbe_set0_algor(
      algor,
      alg,
      iter,
      salt,
      saltlen,
    );
  }

  late final _PKCS5_pbe_set0_algorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<X509_ALGOR>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('PKCS5_pbe_set0_algor');
  late final _PKCS5_pbe_set0_algor = _PKCS5_pbe_set0_algorPtr.asFunction<
      int Function(ffi.Pointer<X509_ALGOR>, int, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<X509_ALGOR> PKCS5_pbe_set(
    int alg,
    int iter,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
  ) {
    return _PKCS5_pbe_set(
      alg,
      iter,
      salt,
      saltlen,
    );
  }

  late final _PKCS5_pbe_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ALGOR> Function(ffi.Int, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('PKCS5_pbe_set');
  late final _PKCS5_pbe_set = _PKCS5_pbe_setPtr.asFunction<
      ffi.Pointer<X509_ALGOR> Function(
          int, int, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<X509_ALGOR> PKCS5_pbe2_set(
    ffi.Pointer<EVP_CIPHER> cipher,
    int iter,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
  ) {
    return _PKCS5_pbe2_set(
      cipher,
      iter,
      salt,
      saltlen,
    );
  }

  late final _PKCS5_pbe2_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ALGOR> Function(ffi.Pointer<EVP_CIPHER>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('PKCS5_pbe2_set');
  late final _PKCS5_pbe2_set = _PKCS5_pbe2_setPtr.asFunction<
      ffi.Pointer<X509_ALGOR> Function(
          ffi.Pointer<EVP_CIPHER>, int, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<X509_ALGOR> PKCS5_pbe2_set_iv(
    ffi.Pointer<EVP_CIPHER> cipher,
    int iter,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
    ffi.Pointer<ffi.UnsignedChar> aiv,
    int prf_nid,
  ) {
    return _PKCS5_pbe2_set_iv(
      cipher,
      iter,
      salt,
      saltlen,
      aiv,
      prf_nid,
    );
  }

  late final _PKCS5_pbe2_set_ivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ALGOR> Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('PKCS5_pbe2_set_iv');
  late final _PKCS5_pbe2_set_iv = _PKCS5_pbe2_set_ivPtr.asFunction<
      ffi.Pointer<X509_ALGOR> Function(
          ffi.Pointer<EVP_CIPHER>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int)>();

  ffi.Pointer<X509_ALGOR> PKCS5_pbe2_set_scrypt(
    ffi.Pointer<EVP_CIPHER> cipher,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
    ffi.Pointer<ffi.UnsignedChar> aiv,
    int N,
    int r,
    int p,
  ) {
    return _PKCS5_pbe2_set_scrypt(
      cipher,
      salt,
      saltlen,
      aiv,
      N,
      r,
      p,
    );
  }

  late final _PKCS5_pbe2_set_scryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ALGOR> Function(
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Uint64)>>('PKCS5_pbe2_set_scrypt');
  late final _PKCS5_pbe2_set_scrypt = _PKCS5_pbe2_set_scryptPtr.asFunction<
      ffi.Pointer<X509_ALGOR> Function(
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          int,
          int)>();

  ffi.Pointer<X509_ALGOR> PKCS5_pbkdf2_set(
    int iter,
    ffi.Pointer<ffi.UnsignedChar> salt,
    int saltlen,
    int prf_nid,
    int keylen,
  ) {
    return _PKCS5_pbkdf2_set(
      iter,
      salt,
      saltlen,
      prf_nid,
      keylen,
    );
  }

  late final _PKCS5_pbkdf2_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_ALGOR> Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('PKCS5_pbkdf2_set');
  late final _PKCS5_pbkdf2_set = _PKCS5_pbkdf2_setPtr.asFunction<
      ffi.Pointer<X509_ALGOR> Function(
          int, ffi.Pointer<ffi.UnsignedChar>, int, int, int)>();

  ffi.Pointer<PKCS8_PRIV_KEY_INFO> PKCS8_PRIV_KEY_INFO_new() {
    return _PKCS8_PRIV_KEY_INFO_new();
  }

  late final _PKCS8_PRIV_KEY_INFO_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PKCS8_PRIV_KEY_INFO> Function()>>(
          'PKCS8_PRIV_KEY_INFO_new');
  late final _PKCS8_PRIV_KEY_INFO_new = _PKCS8_PRIV_KEY_INFO_newPtr.asFunction<
      ffi.Pointer<PKCS8_PRIV_KEY_INFO> Function()>();

  void PKCS8_PRIV_KEY_INFO_free(
    ffi.Pointer<PKCS8_PRIV_KEY_INFO> a,
  ) {
    return _PKCS8_PRIV_KEY_INFO_free(
      a,
    );
  }

  late final _PKCS8_PRIV_KEY_INFO_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>>('PKCS8_PRIV_KEY_INFO_free');
  late final _PKCS8_PRIV_KEY_INFO_free = _PKCS8_PRIV_KEY_INFO_freePtr
      .asFunction<void Function(ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>();

  ffi.Pointer<PKCS8_PRIV_KEY_INFO> d2i_PKCS8_PRIV_KEY_INFO(
    ffi.Pointer<ffi.Pointer<PKCS8_PRIV_KEY_INFO>> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int len,
  ) {
    return _d2i_PKCS8_PRIV_KEY_INFO(
      a,
      in1,
      len,
    );
  }

  late final _d2i_PKCS8_PRIV_KEY_INFOPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS8_PRIV_KEY_INFO> Function(
              ffi.Pointer<ffi.Pointer<PKCS8_PRIV_KEY_INFO>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('d2i_PKCS8_PRIV_KEY_INFO');
  late final _d2i_PKCS8_PRIV_KEY_INFO = _d2i_PKCS8_PRIV_KEY_INFOPtr.asFunction<
      ffi.Pointer<PKCS8_PRIV_KEY_INFO> Function(
          ffi.Pointer<ffi.Pointer<PKCS8_PRIV_KEY_INFO>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          int)>();

  int i2d_PKCS8_PRIV_KEY_INFO(
    ffi.Pointer<PKCS8_PRIV_KEY_INFO> a,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out,
  ) {
    return _i2d_PKCS8_PRIV_KEY_INFO(
      a,
      out,
    );
  }

  late final _i2d_PKCS8_PRIV_KEY_INFOPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<PKCS8_PRIV_KEY_INFO>,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>>(
      'i2d_PKCS8_PRIV_KEY_INFO');
  late final _i2d_PKCS8_PRIV_KEY_INFO = _i2d_PKCS8_PRIV_KEY_INFOPtr.asFunction<
      int Function(ffi.Pointer<PKCS8_PRIV_KEY_INFO>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>();

  late final ffi.Pointer<ASN1_ITEM> _PKCS8_PRIV_KEY_INFO_it =
      _lookup<ASN1_ITEM>('PKCS8_PRIV_KEY_INFO_it');

  ffi.Pointer<ASN1_ITEM> get PKCS8_PRIV_KEY_INFO_it => _PKCS8_PRIV_KEY_INFO_it;

  ffi.Pointer<EVP_PKEY> EVP_PKCS82PKEY(
    ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8,
  ) {
    return _EVP_PKCS82PKEY(
      p8,
    );
  }

  late final _EVP_PKCS82PKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>>('EVP_PKCS82PKEY');
  late final _EVP_PKCS82PKEY = _EVP_PKCS82PKEYPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>();

  ffi.Pointer<PKCS8_PRIV_KEY_INFO> EVP_PKEY2PKCS8(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _EVP_PKEY2PKCS8(
      pkey,
    );
  }

  late final _EVP_PKEY2PKCS8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS8_PRIV_KEY_INFO> Function(
              ffi.Pointer<EVP_PKEY>)>>('EVP_PKEY2PKCS8');
  late final _EVP_PKEY2PKCS8 = _EVP_PKEY2PKCS8Ptr.asFunction<
      ffi.Pointer<PKCS8_PRIV_KEY_INFO> Function(ffi.Pointer<EVP_PKEY>)>();

  int PKCS8_pkey_set0(
    ffi.Pointer<PKCS8_PRIV_KEY_INFO> priv,
    ffi.Pointer<ASN1_OBJECT> aobj,
    int version,
    int ptype,
    ffi.Pointer<ffi.Void> pval,
    ffi.Pointer<ffi.UnsignedChar> penc,
    int penclen,
  ) {
    return _PKCS8_pkey_set0(
      priv,
      aobj,
      version,
      ptype,
      pval,
      penc,
      penclen,
    );
  }

  late final _PKCS8_pkey_set0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PKCS8_PRIV_KEY_INFO>,
              ffi.Pointer<ASN1_OBJECT>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('PKCS8_pkey_set0');
  late final _PKCS8_pkey_set0 = _PKCS8_pkey_set0Ptr.asFunction<
      int Function(
          ffi.Pointer<PKCS8_PRIV_KEY_INFO>,
          ffi.Pointer<ASN1_OBJECT>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedChar>,
          int)>();

  int PKCS8_pkey_get0(
    ffi.Pointer<ffi.Pointer<ASN1_OBJECT>> ppkalg,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pk,
    ffi.Pointer<ffi.Int> ppklen,
    ffi.Pointer<ffi.Pointer<X509_ALGOR>> pa,
    ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8,
  ) {
    return _PKCS8_pkey_get0(
      ppkalg,
      pk,
      ppklen,
      pa,
      p8,
    );
  }

  late final _PKCS8_pkey_get0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ASN1_OBJECT>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<X509_ALGOR>>,
              ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>>('PKCS8_pkey_get0');
  late final _PKCS8_pkey_get0 = _PKCS8_pkey_get0Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ASN1_OBJECT>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<X509_ALGOR>>,
          ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>();

  ffi.Pointer<stack_st_X509_ATTRIBUTE> PKCS8_pkey_get0_attrs(
    ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8,
  ) {
    return _PKCS8_pkey_get0_attrs(
      p8,
    );
  }

  late final _PKCS8_pkey_get0_attrsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509_ATTRIBUTE> Function(
              ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>>('PKCS8_pkey_get0_attrs');
  late final _PKCS8_pkey_get0_attrs = _PKCS8_pkey_get0_attrsPtr.asFunction<
      ffi.Pointer<stack_st_X509_ATTRIBUTE> Function(
          ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>();

  int PKCS8_pkey_add1_attr_by_NID(
    ffi.Pointer<PKCS8_PRIV_KEY_INFO> p8,
    int nid,
    int type,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int len,
  ) {
    return _PKCS8_pkey_add1_attr_by_NID(
      p8,
      nid,
      type,
      bytes,
      len,
    );
  }

  late final _PKCS8_pkey_add1_attr_by_NIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PKCS8_PRIV_KEY_INFO>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('PKCS8_pkey_add1_attr_by_NID');
  late final _PKCS8_pkey_add1_attr_by_NID =
      _PKCS8_pkey_add1_attr_by_NIDPtr.asFunction<
          int Function(ffi.Pointer<PKCS8_PRIV_KEY_INFO>, int, int,
              ffi.Pointer<ffi.UnsignedChar>, int)>();

  int X509_PUBKEY_set0_param(
    ffi.Pointer<X509_PUBKEY> pub,
    ffi.Pointer<ASN1_OBJECT> aobj,
    int ptype,
    ffi.Pointer<ffi.Void> pval,
    ffi.Pointer<ffi.UnsignedChar> penc,
    int penclen,
  ) {
    return _X509_PUBKEY_set0_param(
      pub,
      aobj,
      ptype,
      pval,
      penc,
      penclen,
    );
  }

  late final _X509_PUBKEY_set0_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509_PUBKEY>,
              ffi.Pointer<ASN1_OBJECT>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('X509_PUBKEY_set0_param');
  late final _X509_PUBKEY_set0_param = _X509_PUBKEY_set0_paramPtr.asFunction<
      int Function(ffi.Pointer<X509_PUBKEY>, ffi.Pointer<ASN1_OBJECT>, int,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int X509_PUBKEY_get0_param(
    ffi.Pointer<ffi.Pointer<ASN1_OBJECT>> ppkalg,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pk,
    ffi.Pointer<ffi.Int> ppklen,
    ffi.Pointer<ffi.Pointer<X509_ALGOR>> pa,
    ffi.Pointer<X509_PUBKEY> pub,
  ) {
    return _X509_PUBKEY_get0_param(
      ppkalg,
      pk,
      ppklen,
      pa,
      pub,
    );
  }

  late final _X509_PUBKEY_get0_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ASN1_OBJECT>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<X509_ALGOR>>,
              ffi.Pointer<X509_PUBKEY>)>>('X509_PUBKEY_get0_param');
  late final _X509_PUBKEY_get0_param = _X509_PUBKEY_get0_paramPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ASN1_OBJECT>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<X509_ALGOR>>,
          ffi.Pointer<X509_PUBKEY>)>();

  int X509_check_trust(
    ffi.Pointer<X509> x,
    int id,
    int flags,
  ) {
    return _X509_check_trust(
      x,
      id,
      flags,
    );
  }

  late final _X509_check_trustPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<X509>, ffi.Int, ffi.Int)>>('X509_check_trust');
  late final _X509_check_trust = _X509_check_trustPtr.asFunction<
      int Function(ffi.Pointer<X509>, int, int)>();

  int X509_TRUST_get_count() {
    return _X509_TRUST_get_count();
  }

  late final _X509_TRUST_get_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('X509_TRUST_get_count');
  late final _X509_TRUST_get_count =
      _X509_TRUST_get_countPtr.asFunction<int Function()>();

  ffi.Pointer<X509_TRUST> X509_TRUST_get0(
    int idx,
  ) {
    return _X509_TRUST_get0(
      idx,
    );
  }

  late final _X509_TRUST_get0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<X509_TRUST> Function(ffi.Int)>>(
          'X509_TRUST_get0');
  late final _X509_TRUST_get0 =
      _X509_TRUST_get0Ptr.asFunction<ffi.Pointer<X509_TRUST> Function(int)>();

  int X509_TRUST_get_by_id(
    int id,
  ) {
    return _X509_TRUST_get_by_id(
      id,
    );
  }

  late final _X509_TRUST_get_by_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'X509_TRUST_get_by_id');
  late final _X509_TRUST_get_by_id =
      _X509_TRUST_get_by_idPtr.asFunction<int Function(int)>();

  int X509_TRUST_add(
    int id,
    int flags,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<X509_TRUST>, ffi.Pointer<X509>, ffi.Int)>>
        ck,
    ffi.Pointer<ffi.Char> name,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _X509_TRUST_add(
      id,
      flags,
      ck,
      name,
      arg1,
      arg2,
    );
  }

  late final _X509_TRUST_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<X509_TRUST>,
                          ffi.Pointer<X509>, ffi.Int)>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('X509_TRUST_add');
  late final _X509_TRUST_add = _X509_TRUST_addPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<X509_TRUST>, ffi.Pointer<X509>, ffi.Int)>>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Void>)>();

  void X509_TRUST_cleanup() {
    return _X509_TRUST_cleanup();
  }

  late final _X509_TRUST_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('X509_TRUST_cleanup');
  late final _X509_TRUST_cleanup =
      _X509_TRUST_cleanupPtr.asFunction<void Function()>();

  int X509_TRUST_get_flags(
    ffi.Pointer<X509_TRUST> xp,
  ) {
    return _X509_TRUST_get_flags(
      xp,
    );
  }

  late final _X509_TRUST_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_TRUST>)>>(
          'X509_TRUST_get_flags');
  late final _X509_TRUST_get_flags = _X509_TRUST_get_flagsPtr.asFunction<
      int Function(ffi.Pointer<X509_TRUST>)>();

  ffi.Pointer<ffi.Char> X509_TRUST_get0_name(
    ffi.Pointer<X509_TRUST> xp,
  ) {
    return _X509_TRUST_get0_name(
      xp,
    );
  }

  late final _X509_TRUST_get0_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<X509_TRUST>)>>('X509_TRUST_get0_name');
  late final _X509_TRUST_get0_name = _X509_TRUST_get0_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<X509_TRUST>)>();

  int X509_TRUST_get_trust(
    ffi.Pointer<X509_TRUST> xp,
  ) {
    return _X509_TRUST_get_trust(
      xp,
    );
  }

  late final _X509_TRUST_get_trustPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_TRUST>)>>(
          'X509_TRUST_get_trust');
  late final _X509_TRUST_get_trust = _X509_TRUST_get_trustPtr.asFunction<
      int Function(ffi.Pointer<X509_TRUST>)>();

  int ERR_load_PEM_strings() {
    return _ERR_load_PEM_strings();
  }

  late final _ERR_load_PEM_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_PEM_strings');
  late final _ERR_load_PEM_strings =
      _ERR_load_PEM_stringsPtr.asFunction<int Function()>();

  int PEM_get_EVP_CIPHER_INFO(
    ffi.Pointer<ffi.Char> header,
    ffi.Pointer<EVP_CIPHER_INFO> cipher,
  ) {
    return _PEM_get_EVP_CIPHER_INFO(
      header,
      cipher,
    );
  }

  late final _PEM_get_EVP_CIPHER_INFOPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<EVP_CIPHER_INFO>)>>('PEM_get_EVP_CIPHER_INFO');
  late final _PEM_get_EVP_CIPHER_INFO = _PEM_get_EVP_CIPHER_INFOPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<EVP_CIPHER_INFO>)>();

  int PEM_do_header(
    ffi.Pointer<EVP_CIPHER_INFO> cipher,
    ffi.Pointer<ffi.UnsignedChar> data,
    ffi.Pointer<ffi.Long> len,
    ffi.Pointer<pem_password_cb> callback,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_do_header(
      cipher,
      data,
      len,
      callback,
      u,
    );
  }

  late final _PEM_do_headerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_CIPHER_INFO>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_do_header');
  late final _PEM_do_header = _PEM_do_headerPtr.asFunction<
      int Function(
          ffi.Pointer<EVP_CIPHER_INFO>,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.Long>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_read_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> header,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> data,
    ffi.Pointer<ffi.Long> len,
  ) {
    return _PEM_read_bio(
      bp,
      name,
      header,
      data,
      len,
    );
  }

  late final _PEM_read_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Long>)>>('PEM_read_bio');
  late final _PEM_read_bio = _PEM_read_bioPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Long>)>();

  int PEM_read_bio_ex(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> header,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> data,
    ffi.Pointer<ffi.Long> len,
    int flags,
  ) {
    return _PEM_read_bio_ex(
      bp,
      name,
      header,
      data,
      len,
      flags,
    );
  }

  late final _PEM_read_bio_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Long>,
              ffi.UnsignedInt)>>('PEM_read_bio_ex');
  late final _PEM_read_bio_ex = _PEM_read_bio_exPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Long>,
          int)>();

  int PEM_bytes_read_bio_secmem(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pdata,
    ffi.Pointer<ffi.Long> plen,
    ffi.Pointer<ffi.Pointer<ffi.Char>> pnm,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<BIO> bp,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_bytes_read_bio_secmem(
      pdata,
      plen,
      pnm,
      name,
      bp,
      cb,
      u,
    );
  }

  late final _PEM_bytes_read_bio_secmemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<BIO>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_bytes_read_bio_secmem');
  late final _PEM_bytes_read_bio_secmem =
      _PEM_bytes_read_bio_secmemPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<BIO>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> hdr,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
  ) {
    return _PEM_write_bio(
      bp,
      name,
      hdr,
      data,
      len,
    );
  }

  late final _PEM_write_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long)>>('PEM_write_bio');
  late final _PEM_write_bio = _PEM_write_bioPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int PEM_bytes_read_bio(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pdata,
    ffi.Pointer<ffi.Long> plen,
    ffi.Pointer<ffi.Pointer<ffi.Char>> pnm,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<BIO> bp,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_bytes_read_bio(
      pdata,
      plen,
      pnm,
      name,
      bp,
      cb,
      u,
    );
  }

  late final _PEM_bytes_read_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<BIO>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_bytes_read_bio');
  late final _PEM_bytes_read_bio = _PEM_bytes_read_bioPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Long>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<BIO>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> PEM_ASN1_read_bio(
    ffi.Pointer<d2i_of_void> d2i,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<ffi.Void>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_ASN1_read_bio(
      d2i,
      name,
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_ASN1_read_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<d2i_of_void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_ASN1_read_bio');
  late final _PEM_ASN1_read_bio = _PEM_ASN1_read_bioPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<d2i_of_void>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_ASN1_write_bio(
    ffi.Pointer<i2d_of_void> i2d,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Void> x,
    ffi.Pointer<EVP_CIPHER> enc,
    ffi.Pointer<ffi.UnsignedChar> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_ASN1_write_bio(
      i2d,
      name,
      bp,
      x,
      enc,
      kstr,
      klen,
      cb,
      u,
    );
  }

  late final _PEM_ASN1_write_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<i2d_of_void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_ASN1_write_bio');
  late final _PEM_ASN1_write_bio = _PEM_ASN1_write_bioPtr.asFunction<
      int Function(
          ffi.Pointer<i2d_of_void>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<stack_st_X509_INFO> PEM_X509_INFO_read_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<stack_st_X509_INFO> sk,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_X509_INFO_read_bio(
      bp,
      sk,
      cb,
      u,
    );
  }

  late final _PEM_X509_INFO_read_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509_INFO> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<stack_st_X509_INFO>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_X509_INFO_read_bio');
  late final _PEM_X509_INFO_read_bio = _PEM_X509_INFO_read_bioPtr.asFunction<
      ffi.Pointer<stack_st_X509_INFO> Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<stack_st_X509_INFO>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_X509_INFO_write_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509_INFO> xi,
    ffi.Pointer<EVP_CIPHER> enc,
    ffi.Pointer<ffi.UnsignedChar> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cd,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_X509_INFO_write_bio(
      bp,
      xi,
      enc,
      kstr,
      klen,
      cd,
      u,
    );
  }

  late final _PEM_X509_INFO_write_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<X509_INFO>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_X509_INFO_write_bio');
  late final _PEM_X509_INFO_write_bio = _PEM_X509_INFO_write_bioPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<X509_INFO>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_read(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> header,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> data,
    ffi.Pointer<ffi.Long> len,
  ) {
    return _PEM_read(
      fp,
      name,
      header,
      data,
      len,
    );
  }

  late final _PEM_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Long>)>>('PEM_read');
  late final _PEM_read = _PEM_readPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.Long>)>();

  int PEM_write(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> hdr,
    ffi.Pointer<ffi.UnsignedChar> data,
    int len,
  ) {
    return _PEM_write(
      fp,
      name,
      hdr,
      data,
      len,
    );
  }

  late final _PEM_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long)>>('PEM_write');
  late final _PEM_write = _PEM_writePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ffi.Void> PEM_ASN1_read(
    ffi.Pointer<d2i_of_void> d2i,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<ffi.Void>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_ASN1_read(
      d2i,
      name,
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_ASN1_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<d2i_of_void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_ASN1_read');
  late final _PEM_ASN1_read = _PEM_ASN1_readPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<d2i_of_void>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_ASN1_write(
    ffi.Pointer<i2d_of_void> i2d,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Void> x,
    ffi.Pointer<EVP_CIPHER> enc,
    ffi.Pointer<ffi.UnsignedChar> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> callback,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_ASN1_write(
      i2d,
      name,
      fp,
      x,
      enc,
      kstr,
      klen,
      callback,
      u,
    );
  }

  late final _PEM_ASN1_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<i2d_of_void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_ASN1_write');
  late final _PEM_ASN1_write = _PEM_ASN1_writePtr.asFunction<
      int Function(
          ffi.Pointer<i2d_of_void>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<stack_st_X509_INFO> PEM_X509_INFO_read(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<stack_st_X509_INFO> sk,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_X509_INFO_read(
      fp,
      sk,
      cb,
      u,
    );
  }

  late final _PEM_X509_INFO_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<stack_st_X509_INFO> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<stack_st_X509_INFO>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_X509_INFO_read');
  late final _PEM_X509_INFO_read = _PEM_X509_INFO_readPtr.asFunction<
      ffi.Pointer<stack_st_X509_INFO> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<stack_st_X509_INFO>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_SignInit(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<EVP_MD> type,
  ) {
    return _PEM_SignInit(
      ctx,
      type,
    );
  }

  late final _PEM_SignInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>)>>('PEM_SignInit');
  late final _PEM_SignInit = _PEM_SignInitPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<EVP_MD>)>();

  int PEM_SignUpdate(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> d,
    int cnt,
  ) {
    return _PEM_SignUpdate(
      ctx,
      d,
      cnt,
    );
  }

  late final _PEM_SignUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt)>>('PEM_SignUpdate');
  late final _PEM_SignUpdate = _PEM_SignUpdatePtr.asFunction<
      int Function(
          ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  int PEM_SignFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.UnsignedChar> sigret,
    ffi.Pointer<ffi.UnsignedInt> siglen,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return _PEM_SignFinal(
      ctx,
      sigret,
      siglen,
      pkey,
    );
  }

  late final _PEM_SignFinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<EVP_MD_CTX>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<EVP_PKEY>)>>('PEM_SignFinal');
  late final _PEM_SignFinal = _PEM_SignFinalPtr.asFunction<
      int Function(ffi.Pointer<EVP_MD_CTX>, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<EVP_PKEY>)>();

  int PEM_def_callback(
    ffi.Pointer<ffi.Char> buf,
    int num,
    int rwflag,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _PEM_def_callback(
      buf,
      num,
      rwflag,
      userdata,
    );
  }

  late final _PEM_def_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('PEM_def_callback');
  late final _PEM_def_callback = _PEM_def_callbackPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Void>)>();

  void PEM_proc_type(
    ffi.Pointer<ffi.Char> buf,
    int type,
  ) {
    return _PEM_proc_type(
      buf,
      type,
    );
  }

  late final _PEM_proc_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('PEM_proc_type');
  late final _PEM_proc_type =
      _PEM_proc_typePtr.asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  void PEM_dek_info(
    ffi.Pointer<ffi.Char> buf,
    ffi.Pointer<ffi.Char> type,
    int len,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _PEM_dek_info(
      buf,
      type,
      len,
      str,
    );
  }

  late final _PEM_dek_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Pointer<ffi.Char>)>>('PEM_dek_info');
  late final _PEM_dek_info = _PEM_dek_infoPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<X509> PEM_read_bio_X509(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<X509>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_X509(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_X509Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<X509>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_X509');
  late final _PEM_read_bio_X509 = _PEM_read_bio_X509Ptr.asFunction<
      ffi.Pointer<X509> Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<X509>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<X509> PEM_read_X509(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<X509>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_X509(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_X509Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<X509>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_X509');
  late final _PEM_read_X509 = _PEM_read_X509Ptr.asFunction<
      ffi.Pointer<X509> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<X509>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_X509(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509> x,
  ) {
    return _PEM_write_bio_X509(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_X509Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<X509>)>>('PEM_write_bio_X509');
  late final _PEM_write_bio_X509 = _PEM_write_bio_X509Ptr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<X509>)>();

  int PEM_write_X509(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<X509> x,
  ) {
    return _PEM_write_X509(
      fp,
      x,
    );
  }

  late final _PEM_write_X509Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<X509>)>>('PEM_write_X509');
  late final _PEM_write_X509 = _PEM_write_X509Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<X509>)>();

  ffi.Pointer<X509> PEM_read_bio_X509_AUX(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<X509>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_X509_AUX(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_X509_AUXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<X509>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_X509_AUX');
  late final _PEM_read_bio_X509_AUX = _PEM_read_bio_X509_AUXPtr.asFunction<
      ffi.Pointer<X509> Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<X509>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<X509> PEM_read_X509_AUX(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<X509>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_X509_AUX(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_X509_AUXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<X509>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_X509_AUX');
  late final _PEM_read_X509_AUX = _PEM_read_X509_AUXPtr.asFunction<
      ffi.Pointer<X509> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<X509>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_X509_AUX(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509> x,
  ) {
    return _PEM_write_bio_X509_AUX(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_X509_AUXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<X509>)>>('PEM_write_bio_X509_AUX');
  late final _PEM_write_bio_X509_AUX = _PEM_write_bio_X509_AUXPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<X509>)>();

  int PEM_write_X509_AUX(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<X509> x,
  ) {
    return _PEM_write_X509_AUX(
      fp,
      x,
    );
  }

  late final _PEM_write_X509_AUXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<X509>)>>('PEM_write_X509_AUX');
  late final _PEM_write_X509_AUX = _PEM_write_X509_AUXPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<X509>)>();

  ffi.Pointer<X509_REQ> PEM_read_bio_X509_REQ(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<X509_REQ>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_X509_REQ(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_X509_REQPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_REQ> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<X509_REQ>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_X509_REQ');
  late final _PEM_read_bio_X509_REQ = _PEM_read_bio_X509_REQPtr.asFunction<
      ffi.Pointer<X509_REQ> Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<X509_REQ>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<X509_REQ> PEM_read_X509_REQ(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<X509_REQ>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_X509_REQ(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_X509_REQPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_REQ> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<X509_REQ>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_X509_REQ');
  late final _PEM_read_X509_REQ = _PEM_read_X509_REQPtr.asFunction<
      ffi.Pointer<X509_REQ> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<X509_REQ>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_X509_REQ(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509_REQ> x,
  ) {
    return _PEM_write_bio_X509_REQ(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_X509_REQPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<X509_REQ>)>>('PEM_write_bio_X509_REQ');
  late final _PEM_write_bio_X509_REQ = _PEM_write_bio_X509_REQPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_REQ>)>();

  int PEM_write_X509_REQ(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<X509_REQ> x,
  ) {
    return _PEM_write_X509_REQ(
      fp,
      x,
    );
  }

  late final _PEM_write_X509_REQPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<X509_REQ>)>>('PEM_write_X509_REQ');
  late final _PEM_write_X509_REQ = _PEM_write_X509_REQPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<X509_REQ>)>();

  int PEM_write_bio_X509_REQ_NEW(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509_REQ> x,
  ) {
    return _PEM_write_bio_X509_REQ_NEW(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_X509_REQ_NEWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<X509_REQ>)>>('PEM_write_bio_X509_REQ_NEW');
  late final _PEM_write_bio_X509_REQ_NEW = _PEM_write_bio_X509_REQ_NEWPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_REQ>)>();

  int PEM_write_X509_REQ_NEW(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<X509_REQ> x,
  ) {
    return _PEM_write_X509_REQ_NEW(
      fp,
      x,
    );
  }

  late final _PEM_write_X509_REQ_NEWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>,
              ffi.Pointer<X509_REQ>)>>('PEM_write_X509_REQ_NEW');
  late final _PEM_write_X509_REQ_NEW = _PEM_write_X509_REQ_NEWPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<X509_REQ>)>();

  ffi.Pointer<X509_CRL> PEM_read_bio_X509_CRL(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<X509_CRL>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_X509_CRL(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_X509_CRLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_CRL> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<X509_CRL>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_X509_CRL');
  late final _PEM_read_bio_X509_CRL = _PEM_read_bio_X509_CRLPtr.asFunction<
      ffi.Pointer<X509_CRL> Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<X509_CRL>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<X509_CRL> PEM_read_X509_CRL(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<X509_CRL>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_X509_CRL(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_X509_CRLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_CRL> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<X509_CRL>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_X509_CRL');
  late final _PEM_read_X509_CRL = _PEM_read_X509_CRLPtr.asFunction<
      ffi.Pointer<X509_CRL> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<X509_CRL>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_X509_CRL(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509_CRL> x,
  ) {
    return _PEM_write_bio_X509_CRL(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_X509_CRLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<X509_CRL>)>>('PEM_write_bio_X509_CRL');
  late final _PEM_write_bio_X509_CRL = _PEM_write_bio_X509_CRLPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_CRL>)>();

  int PEM_write_X509_CRL(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<X509_CRL> x,
  ) {
    return _PEM_write_X509_CRL(
      fp,
      x,
    );
  }

  late final _PEM_write_X509_CRLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<X509_CRL>)>>('PEM_write_X509_CRL');
  late final _PEM_write_X509_CRL = _PEM_write_X509_CRLPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<X509_CRL>)>();

  ffi.Pointer<PKCS7> PEM_read_bio_PKCS7(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<PKCS7>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_PKCS7(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_PKCS7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<PKCS7>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_PKCS7');
  late final _PEM_read_bio_PKCS7 = _PEM_read_bio_PKCS7Ptr.asFunction<
      ffi.Pointer<PKCS7> Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<PKCS7>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<PKCS7> PEM_read_PKCS7(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<PKCS7>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_PKCS7(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_PKCS7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS7> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<PKCS7>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_PKCS7');
  late final _PEM_read_PKCS7 = _PEM_read_PKCS7Ptr.asFunction<
      ffi.Pointer<PKCS7> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<PKCS7>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_PKCS7(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<PKCS7> x,
  ) {
    return _PEM_write_bio_PKCS7(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_PKCS7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<PKCS7>)>>('PEM_write_bio_PKCS7');
  late final _PEM_write_bio_PKCS7 = _PEM_write_bio_PKCS7Ptr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<PKCS7>)>();

  int PEM_write_PKCS7(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<PKCS7> x,
  ) {
    return _PEM_write_PKCS7(
      fp,
      x,
    );
  }

  late final _PEM_write_PKCS7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<PKCS7>)>>('PEM_write_PKCS7');
  late final _PEM_write_PKCS7 = _PEM_write_PKCS7Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<PKCS7>)>();

  ffi.Pointer<NETSCAPE_CERT_SEQUENCE> PEM_read_bio_NETSCAPE_CERT_SEQUENCE(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<NETSCAPE_CERT_SEQUENCE>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_NETSCAPE_CERT_SEQUENCE(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_NETSCAPE_CERT_SEQUENCEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NETSCAPE_CERT_SEQUENCE> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<NETSCAPE_CERT_SEQUENCE>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_NETSCAPE_CERT_SEQUENCE');
  late final _PEM_read_bio_NETSCAPE_CERT_SEQUENCE =
      _PEM_read_bio_NETSCAPE_CERT_SEQUENCEPtr.asFunction<
          ffi.Pointer<NETSCAPE_CERT_SEQUENCE> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<NETSCAPE_CERT_SEQUENCE>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<NETSCAPE_CERT_SEQUENCE> PEM_read_NETSCAPE_CERT_SEQUENCE(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<NETSCAPE_CERT_SEQUENCE>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_NETSCAPE_CERT_SEQUENCE(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_NETSCAPE_CERT_SEQUENCEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NETSCAPE_CERT_SEQUENCE> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<NETSCAPE_CERT_SEQUENCE>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_NETSCAPE_CERT_SEQUENCE');
  late final _PEM_read_NETSCAPE_CERT_SEQUENCE =
      _PEM_read_NETSCAPE_CERT_SEQUENCEPtr.asFunction<
          ffi.Pointer<NETSCAPE_CERT_SEQUENCE> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<NETSCAPE_CERT_SEQUENCE>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_NETSCAPE_CERT_SEQUENCE(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<NETSCAPE_CERT_SEQUENCE> x,
  ) {
    return _PEM_write_bio_NETSCAPE_CERT_SEQUENCE(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_NETSCAPE_CERT_SEQUENCEPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO>, ffi.Pointer<NETSCAPE_CERT_SEQUENCE>)>>(
      'PEM_write_bio_NETSCAPE_CERT_SEQUENCE');
  late final _PEM_write_bio_NETSCAPE_CERT_SEQUENCE =
      _PEM_write_bio_NETSCAPE_CERT_SEQUENCEPtr.asFunction<
          int Function(
              ffi.Pointer<BIO>, ffi.Pointer<NETSCAPE_CERT_SEQUENCE>)>();

  int PEM_write_NETSCAPE_CERT_SEQUENCE(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<NETSCAPE_CERT_SEQUENCE> x,
  ) {
    return _PEM_write_NETSCAPE_CERT_SEQUENCE(
      fp,
      x,
    );
  }

  late final _PEM_write_NETSCAPE_CERT_SEQUENCEPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<FILE>, ffi.Pointer<NETSCAPE_CERT_SEQUENCE>)>>(
      'PEM_write_NETSCAPE_CERT_SEQUENCE');
  late final _PEM_write_NETSCAPE_CERT_SEQUENCE =
      _PEM_write_NETSCAPE_CERT_SEQUENCEPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<NETSCAPE_CERT_SEQUENCE>)>();

  ffi.Pointer<X509_SIG> PEM_read_bio_PKCS8(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<X509_SIG>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_PKCS8(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_PKCS8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_SIG> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<X509_SIG>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_PKCS8');
  late final _PEM_read_bio_PKCS8 = _PEM_read_bio_PKCS8Ptr.asFunction<
      ffi.Pointer<X509_SIG> Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<X509_SIG>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<X509_SIG> PEM_read_PKCS8(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<X509_SIG>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_PKCS8(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_PKCS8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<X509_SIG> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<X509_SIG>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_PKCS8');
  late final _PEM_read_PKCS8 = _PEM_read_PKCS8Ptr.asFunction<
      ffi.Pointer<X509_SIG> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<X509_SIG>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_PKCS8(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<X509_SIG> x,
  ) {
    return _PEM_write_bio_PKCS8(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_PKCS8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<X509_SIG>)>>('PEM_write_bio_PKCS8');
  late final _PEM_write_bio_PKCS8 = _PEM_write_bio_PKCS8Ptr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<X509_SIG>)>();

  int PEM_write_PKCS8(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<X509_SIG> x,
  ) {
    return _PEM_write_PKCS8(
      fp,
      x,
    );
  }

  late final _PEM_write_PKCS8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<X509_SIG>)>>('PEM_write_PKCS8');
  late final _PEM_write_PKCS8 = _PEM_write_PKCS8Ptr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<X509_SIG>)>();

  ffi.Pointer<PKCS8_PRIV_KEY_INFO> PEM_read_bio_PKCS8_PRIV_KEY_INFO(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<PKCS8_PRIV_KEY_INFO>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_PKCS8_PRIV_KEY_INFO(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_PKCS8_PRIV_KEY_INFOPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS8_PRIV_KEY_INFO> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<PKCS8_PRIV_KEY_INFO>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_PKCS8_PRIV_KEY_INFO');
  late final _PEM_read_bio_PKCS8_PRIV_KEY_INFO =
      _PEM_read_bio_PKCS8_PRIV_KEY_INFOPtr.asFunction<
          ffi.Pointer<PKCS8_PRIV_KEY_INFO> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<PKCS8_PRIV_KEY_INFO>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<PKCS8_PRIV_KEY_INFO> PEM_read_PKCS8_PRIV_KEY_INFO(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<PKCS8_PRIV_KEY_INFO>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_PKCS8_PRIV_KEY_INFO(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_PKCS8_PRIV_KEY_INFOPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PKCS8_PRIV_KEY_INFO> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<PKCS8_PRIV_KEY_INFO>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_PKCS8_PRIV_KEY_INFO');
  late final _PEM_read_PKCS8_PRIV_KEY_INFO =
      _PEM_read_PKCS8_PRIV_KEY_INFOPtr.asFunction<
          ffi.Pointer<PKCS8_PRIV_KEY_INFO> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<PKCS8_PRIV_KEY_INFO>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_PKCS8_PRIV_KEY_INFO(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<PKCS8_PRIV_KEY_INFO> x,
  ) {
    return _PEM_write_bio_PKCS8_PRIV_KEY_INFO(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_PKCS8_PRIV_KEY_INFOPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<BIO>, ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>>(
      'PEM_write_bio_PKCS8_PRIV_KEY_INFO');
  late final _PEM_write_bio_PKCS8_PRIV_KEY_INFO =
      _PEM_write_bio_PKCS8_PRIV_KEY_INFOPtr.asFunction<
          int Function(ffi.Pointer<BIO>, ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>();

  int PEM_write_PKCS8_PRIV_KEY_INFO(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<PKCS8_PRIV_KEY_INFO> x,
  ) {
    return _PEM_write_PKCS8_PRIV_KEY_INFO(
      fp,
      x,
    );
  }

  late final _PEM_write_PKCS8_PRIV_KEY_INFOPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<FILE>, ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>>(
      'PEM_write_PKCS8_PRIV_KEY_INFO');
  late final _PEM_write_PKCS8_PRIV_KEY_INFO =
      _PEM_write_PKCS8_PRIV_KEY_INFOPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<PKCS8_PRIV_KEY_INFO>)>();

  ffi.Pointer<RSA> PEM_read_bio_RSAPrivateKey(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<RSA>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_RSAPrivateKey(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_RSAPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<RSA>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_RSAPrivateKey');
  late final _PEM_read_bio_RSAPrivateKey =
      _PEM_read_bio_RSAPrivateKeyPtr.asFunction<
          ffi.Pointer<RSA> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<RSA>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<RSA> PEM_read_RSAPrivateKey(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<RSA>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_RSAPrivateKey(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_RSAPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<RSA>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_RSAPrivateKey');
  late final _PEM_read_RSAPrivateKey = _PEM_read_RSAPrivateKeyPtr.asFunction<
      ffi.Pointer<RSA> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<RSA>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_RSAPrivateKey(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<RSA> x,
    ffi.Pointer<EVP_CIPHER> enc,
    ffi.Pointer<ffi.UnsignedChar> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_write_bio_RSAPrivateKey(
      bp,
      x,
      enc,
      kstr,
      klen,
      cb,
      u,
    );
  }

  late final _PEM_write_bio_RSAPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<RSA>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_write_bio_RSAPrivateKey');
  late final _PEM_write_bio_RSAPrivateKey =
      _PEM_write_bio_RSAPrivateKeyPtr.asFunction<
          int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<RSA>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  int PEM_write_RSAPrivateKey(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<RSA> x,
    ffi.Pointer<EVP_CIPHER> enc,
    ffi.Pointer<ffi.UnsignedChar> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_write_RSAPrivateKey(
      fp,
      x,
      enc,
      kstr,
      klen,
      cb,
      u,
    );
  }

  late final _PEM_write_RSAPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<RSA>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_write_RSAPrivateKey');
  late final _PEM_write_RSAPrivateKey = _PEM_write_RSAPrivateKeyPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<RSA>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<RSA> PEM_read_bio_RSAPublicKey(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<RSA>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_RSAPublicKey(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_RSAPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<RSA>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_RSAPublicKey');
  late final _PEM_read_bio_RSAPublicKey =
      _PEM_read_bio_RSAPublicKeyPtr.asFunction<
          ffi.Pointer<RSA> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<RSA>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<RSA> PEM_read_RSAPublicKey(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<RSA>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_RSAPublicKey(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_RSAPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<RSA>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_RSAPublicKey');
  late final _PEM_read_RSAPublicKey = _PEM_read_RSAPublicKeyPtr.asFunction<
      ffi.Pointer<RSA> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<RSA>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_RSAPublicKey(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<RSA> x,
  ) {
    return _PEM_write_bio_RSAPublicKey(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_RSAPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<RSA>)>>('PEM_write_bio_RSAPublicKey');
  late final _PEM_write_bio_RSAPublicKey = _PEM_write_bio_RSAPublicKeyPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<RSA>)>();

  int PEM_write_RSAPublicKey(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<RSA> x,
  ) {
    return _PEM_write_RSAPublicKey(
      fp,
      x,
    );
  }

  late final _PEM_write_RSAPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<RSA>)>>('PEM_write_RSAPublicKey');
  late final _PEM_write_RSAPublicKey = _PEM_write_RSAPublicKeyPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<RSA>)>();

  ffi.Pointer<RSA> PEM_read_bio_RSA_PUBKEY(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<RSA>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_RSA_PUBKEY(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_RSA_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<RSA>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_RSA_PUBKEY');
  late final _PEM_read_bio_RSA_PUBKEY = _PEM_read_bio_RSA_PUBKEYPtr.asFunction<
      ffi.Pointer<RSA> Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<RSA>>,
          ffi.Pointer<pem_password_cb>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<RSA> PEM_read_RSA_PUBKEY(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<RSA>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_RSA_PUBKEY(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_RSA_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RSA> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<RSA>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_RSA_PUBKEY');
  late final _PEM_read_RSA_PUBKEY = _PEM_read_RSA_PUBKEYPtr.asFunction<
      ffi.Pointer<RSA> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<RSA>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_RSA_PUBKEY(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<RSA> x,
  ) {
    return _PEM_write_bio_RSA_PUBKEY(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_RSA_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<RSA>)>>('PEM_write_bio_RSA_PUBKEY');
  late final _PEM_write_bio_RSA_PUBKEY = _PEM_write_bio_RSA_PUBKEYPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<RSA>)>();

  int PEM_write_RSA_PUBKEY(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<RSA> x,
  ) {
    return _PEM_write_RSA_PUBKEY(
      fp,
      x,
    );
  }

  late final _PEM_write_RSA_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<RSA>)>>('PEM_write_RSA_PUBKEY');
  late final _PEM_write_RSA_PUBKEY = _PEM_write_RSA_PUBKEYPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<RSA>)>();

  ffi.Pointer<DSA> PEM_read_bio_DSAPrivateKey(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<DSA>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_DSAPrivateKey(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_DSAPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<DSA>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_DSAPrivateKey');
  late final _PEM_read_bio_DSAPrivateKey =
      _PEM_read_bio_DSAPrivateKeyPtr.asFunction<
          ffi.Pointer<DSA> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<DSA>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<DSA> PEM_read_DSAPrivateKey(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<DSA>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_DSAPrivateKey(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_DSAPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<DSA>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_DSAPrivateKey');
  late final _PEM_read_DSAPrivateKey = _PEM_read_DSAPrivateKeyPtr.asFunction<
      ffi.Pointer<DSA> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<DSA>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_DSAPrivateKey(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<DSA> x,
    ffi.Pointer<EVP_CIPHER> enc,
    ffi.Pointer<ffi.UnsignedChar> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_write_bio_DSAPrivateKey(
      bp,
      x,
      enc,
      kstr,
      klen,
      cb,
      u,
    );
  }

  late final _PEM_write_bio_DSAPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<DSA>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_write_bio_DSAPrivateKey');
  late final _PEM_write_bio_DSAPrivateKey =
      _PEM_write_bio_DSAPrivateKeyPtr.asFunction<
          int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<DSA>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  int PEM_write_DSAPrivateKey(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<DSA> x,
    ffi.Pointer<EVP_CIPHER> enc,
    ffi.Pointer<ffi.UnsignedChar> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_write_DSAPrivateKey(
      fp,
      x,
      enc,
      kstr,
      klen,
      cb,
      u,
    );
  }

  late final _PEM_write_DSAPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<DSA>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_write_DSAPrivateKey');
  late final _PEM_write_DSAPrivateKey = _PEM_write_DSAPrivateKeyPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<DSA>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<DSA> PEM_read_bio_DSA_PUBKEY(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<DSA>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_DSA_PUBKEY(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_DSA_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<DSA>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_DSA_PUBKEY');
  late final _PEM_read_bio_DSA_PUBKEY = _PEM_read_bio_DSA_PUBKEYPtr.asFunction<
      ffi.Pointer<DSA> Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<DSA>>,
          ffi.Pointer<pem_password_cb>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<DSA> PEM_read_DSA_PUBKEY(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<DSA>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_DSA_PUBKEY(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_DSA_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<DSA>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_DSA_PUBKEY');
  late final _PEM_read_DSA_PUBKEY = _PEM_read_DSA_PUBKEYPtr.asFunction<
      ffi.Pointer<DSA> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<DSA>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_DSA_PUBKEY(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<DSA> x,
  ) {
    return _PEM_write_bio_DSA_PUBKEY(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_DSA_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<DSA>)>>('PEM_write_bio_DSA_PUBKEY');
  late final _PEM_write_bio_DSA_PUBKEY = _PEM_write_bio_DSA_PUBKEYPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<DSA>)>();

  int PEM_write_DSA_PUBKEY(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<DSA> x,
  ) {
    return _PEM_write_DSA_PUBKEY(
      fp,
      x,
    );
  }

  late final _PEM_write_DSA_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<DSA>)>>('PEM_write_DSA_PUBKEY');
  late final _PEM_write_DSA_PUBKEY = _PEM_write_DSA_PUBKEYPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<DSA>)>();

  ffi.Pointer<DSA> PEM_read_bio_DSAparams(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<DSA>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_DSAparams(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_DSAparamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<DSA>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_DSAparams');
  late final _PEM_read_bio_DSAparams = _PEM_read_bio_DSAparamsPtr.asFunction<
      ffi.Pointer<DSA> Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<DSA>>,
          ffi.Pointer<pem_password_cb>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<DSA> PEM_read_DSAparams(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<DSA>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_DSAparams(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_DSAparamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DSA> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<DSA>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_DSAparams');
  late final _PEM_read_DSAparams = _PEM_read_DSAparamsPtr.asFunction<
      ffi.Pointer<DSA> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<DSA>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_DSAparams(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<DSA> x,
  ) {
    return _PEM_write_bio_DSAparams(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_DSAparamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<DSA>)>>('PEM_write_bio_DSAparams');
  late final _PEM_write_bio_DSAparams = _PEM_write_bio_DSAparamsPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<DSA>)>();

  int PEM_write_DSAparams(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<DSA> x,
  ) {
    return _PEM_write_DSAparams(
      fp,
      x,
    );
  }

  late final _PEM_write_DSAparamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<DSA>)>>('PEM_write_DSAparams');
  late final _PEM_write_DSAparams = _PEM_write_DSAparamsPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<DSA>)>();

  ffi.Pointer<EC_GROUP> PEM_read_bio_ECPKParameters(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<EC_GROUP>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_ECPKParameters(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_ECPKParametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<EC_GROUP>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_ECPKParameters');
  late final _PEM_read_bio_ECPKParameters =
      _PEM_read_bio_ECPKParametersPtr.asFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<EC_GROUP>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<EC_GROUP> PEM_read_ECPKParameters(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<EC_GROUP>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_ECPKParameters(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_ECPKParametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_GROUP> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<EC_GROUP>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_ECPKParameters');
  late final _PEM_read_ECPKParameters = _PEM_read_ECPKParametersPtr.asFunction<
      ffi.Pointer<EC_GROUP> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<EC_GROUP>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_ECPKParameters(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EC_GROUP> x,
  ) {
    return _PEM_write_bio_ECPKParameters(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_ECPKParametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<EC_GROUP>)>>('PEM_write_bio_ECPKParameters');
  late final _PEM_write_bio_ECPKParameters = _PEM_write_bio_ECPKParametersPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_GROUP>)>();

  int PEM_write_ECPKParameters(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EC_GROUP> x,
  ) {
    return _PEM_write_ECPKParameters(
      fp,
      x,
    );
  }

  late final _PEM_write_ECPKParametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>,
              ffi.Pointer<EC_GROUP>)>>('PEM_write_ECPKParameters');
  late final _PEM_write_ECPKParameters = _PEM_write_ECPKParametersPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_GROUP>)>();

  ffi.Pointer<EC_KEY> PEM_read_bio_ECPrivateKey(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<EC_KEY>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_ECPrivateKey(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_ECPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<EC_KEY>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_ECPrivateKey');
  late final _PEM_read_bio_ECPrivateKey =
      _PEM_read_bio_ECPrivateKeyPtr.asFunction<
          ffi.Pointer<EC_KEY> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<EC_KEY>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<EC_KEY> PEM_read_ECPrivateKey(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<EC_KEY>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_ECPrivateKey(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_ECPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<EC_KEY>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_ECPrivateKey');
  late final _PEM_read_ECPrivateKey = _PEM_read_ECPrivateKeyPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<EC_KEY>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_ECPrivateKey(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EC_KEY> x,
    ffi.Pointer<EVP_CIPHER> enc,
    ffi.Pointer<ffi.UnsignedChar> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_write_bio_ECPrivateKey(
      bp,
      x,
      enc,
      kstr,
      klen,
      cb,
      u,
    );
  }

  late final _PEM_write_bio_ECPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<EC_KEY>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_write_bio_ECPrivateKey');
  late final _PEM_write_bio_ECPrivateKey =
      _PEM_write_bio_ECPrivateKeyPtr.asFunction<
          int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<EC_KEY>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  int PEM_write_ECPrivateKey(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EC_KEY> x,
    ffi.Pointer<EVP_CIPHER> enc,
    ffi.Pointer<ffi.UnsignedChar> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_write_ECPrivateKey(
      fp,
      x,
      enc,
      kstr,
      klen,
      cb,
      u,
    );
  }

  late final _PEM_write_ECPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<EC_KEY>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_write_ECPrivateKey');
  late final _PEM_write_ECPrivateKey = _PEM_write_ECPrivateKeyPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<EC_KEY>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<EC_KEY> PEM_read_bio_EC_PUBKEY(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<EC_KEY>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_EC_PUBKEY(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_EC_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<EC_KEY>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_EC_PUBKEY');
  late final _PEM_read_bio_EC_PUBKEY = _PEM_read_bio_EC_PUBKEYPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<EC_KEY>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<EC_KEY> PEM_read_EC_PUBKEY(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<EC_KEY>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_EC_PUBKEY(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_EC_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EC_KEY> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<EC_KEY>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_EC_PUBKEY');
  late final _PEM_read_EC_PUBKEY = _PEM_read_EC_PUBKEYPtr.asFunction<
      ffi.Pointer<EC_KEY> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<EC_KEY>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_EC_PUBKEY(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EC_KEY> x,
  ) {
    return _PEM_write_bio_EC_PUBKEY(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_EC_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<EC_KEY>)>>('PEM_write_bio_EC_PUBKEY');
  late final _PEM_write_bio_EC_PUBKEY = _PEM_write_bio_EC_PUBKEYPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EC_KEY>)>();

  int PEM_write_EC_PUBKEY(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EC_KEY> x,
  ) {
    return _PEM_write_EC_PUBKEY(
      fp,
      x,
    );
  }

  late final _PEM_write_EC_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<EC_KEY>)>>('PEM_write_EC_PUBKEY');
  late final _PEM_write_EC_PUBKEY = _PEM_write_EC_PUBKEYPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<EC_KEY>)>();

  ffi.Pointer<DH> PEM_read_bio_DHparams(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<DH>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_DHparams(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_DHparamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DH> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<DH>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_DHparams');
  late final _PEM_read_bio_DHparams = _PEM_read_bio_DHparamsPtr.asFunction<
      ffi.Pointer<DH> Function(ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<DH>>,
          ffi.Pointer<pem_password_cb>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<DH> PEM_read_DHparams(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<DH>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_DHparams(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_DHparamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DH> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<DH>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_DHparams');
  late final _PEM_read_DHparams = _PEM_read_DHparamsPtr.asFunction<
      ffi.Pointer<DH> Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Pointer<DH>>,
          ffi.Pointer<pem_password_cb>, ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_DHparams(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<DH> x,
  ) {
    return _PEM_write_bio_DHparams(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_DHparamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<DH>)>>('PEM_write_bio_DHparams');
  late final _PEM_write_bio_DHparams = _PEM_write_bio_DHparamsPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<DH>)>();

  int PEM_write_DHparams(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<DH> x,
  ) {
    return _PEM_write_DHparams(
      fp,
      x,
    );
  }

  late final _PEM_write_DHparamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<DH>)>>('PEM_write_DHparams');
  late final _PEM_write_DHparams = _PEM_write_DHparamsPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<DH>)>();

  int PEM_write_bio_DHxparams(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<DH> x,
  ) {
    return _PEM_write_bio_DHxparams(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_DHxparamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<DH>)>>('PEM_write_bio_DHxparams');
  late final _PEM_write_bio_DHxparams = _PEM_write_bio_DHxparamsPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<DH>)>();

  int PEM_write_DHxparams(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<DH> x,
  ) {
    return _PEM_write_DHxparams(
      fp,
      x,
    );
  }

  late final _PEM_write_DHxparamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<DH>)>>('PEM_write_DHxparams');
  late final _PEM_write_DHxparams = _PEM_write_DHxparamsPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<DH>)>();

  ffi.Pointer<EVP_PKEY> PEM_read_bio_PrivateKey(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_PrivateKey(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_PrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_PrivateKey');
  late final _PEM_read_bio_PrivateKey = _PEM_read_bio_PrivateKeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<EVP_PKEY> PEM_read_PrivateKey(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_PrivateKey(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_PrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_PrivateKey');
  late final _PEM_read_PrivateKey = _PEM_read_PrivateKeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_PrivateKey(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EVP_PKEY> x,
    ffi.Pointer<EVP_CIPHER> enc,
    ffi.Pointer<ffi.UnsignedChar> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_write_bio_PrivateKey(
      bp,
      x,
      enc,
      kstr,
      klen,
      cb,
      u,
    );
  }

  late final _PEM_write_bio_PrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_write_bio_PrivateKey');
  late final _PEM_write_bio_PrivateKey =
      _PEM_write_bio_PrivateKeyPtr.asFunction<
          int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  int PEM_write_PrivateKey(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EVP_PKEY> x,
    ffi.Pointer<EVP_CIPHER> enc,
    ffi.Pointer<ffi.UnsignedChar> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_write_PrivateKey(
      fp,
      x,
      enc,
      kstr,
      klen,
      cb,
      u,
    );
  }

  late final _PEM_write_PrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_write_PrivateKey');
  late final _PEM_write_PrivateKey = _PEM_write_PrivateKeyPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<EVP_PKEY> PEM_read_bio_PUBKEY(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_bio_PUBKEY(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_bio_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_bio_PUBKEY');
  late final _PEM_read_bio_PUBKEY = _PEM_read_bio_PUBKEYPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<EVP_PKEY> PEM_read_PUBKEY(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_read_PUBKEY(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _PEM_read_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_read_PUBKEY');
  late final _PEM_read_PUBKEY = _PEM_read_PUBKEYPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_PUBKEY(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EVP_PKEY> x,
  ) {
    return _PEM_write_bio_PUBKEY(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<EVP_PKEY>)>>('PEM_write_bio_PUBKEY');
  late final _PEM_write_bio_PUBKEY = _PEM_write_bio_PUBKEYPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>)>();

  int PEM_write_PUBKEY(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EVP_PKEY> x,
  ) {
    return _PEM_write_PUBKEY(
      fp,
      x,
    );
  }

  late final _PEM_write_PUBKEYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<EVP_PKEY>)>>('PEM_write_PUBKEY');
  late final _PEM_write_PUBKEY = _PEM_write_PUBKEYPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<EVP_PKEY>)>();

  int PEM_write_bio_PrivateKey_traditional(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EVP_PKEY> x,
    ffi.Pointer<EVP_CIPHER> enc,
    ffi.Pointer<ffi.UnsignedChar> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_write_bio_PrivateKey_traditional(
      bp,
      x,
      enc,
      kstr,
      klen,
      cb,
      u,
    );
  }

  late final _PEM_write_bio_PrivateKey_traditionalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_write_bio_PrivateKey_traditional');
  late final _PEM_write_bio_PrivateKey_traditional =
      _PEM_write_bio_PrivateKey_traditionalPtr.asFunction<
          int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_PKCS8PrivateKey_nid(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EVP_PKEY> x,
    int nid,
    ffi.Pointer<ffi.Char> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_write_bio_PKCS8PrivateKey_nid(
      bp,
      x,
      nid,
      kstr,
      klen,
      cb,
      u,
    );
  }

  late final _PEM_write_bio_PKCS8PrivateKey_nidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_write_bio_PKCS8PrivateKey_nid');
  late final _PEM_write_bio_PKCS8PrivateKey_nid =
      _PEM_write_bio_PKCS8PrivateKey_nidPtr.asFunction<
          int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<EVP_PKEY>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  int PEM_write_bio_PKCS8PrivateKey(
    ffi.Pointer<BIO> arg0,
    ffi.Pointer<EVP_PKEY> arg1,
    ffi.Pointer<EVP_CIPHER> arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
    ffi.Pointer<pem_password_cb> arg5,
    ffi.Pointer<ffi.Void> arg6,
  ) {
    return _PEM_write_bio_PKCS8PrivateKey(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _PEM_write_bio_PKCS8PrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_write_bio_PKCS8PrivateKey');
  late final _PEM_write_bio_PKCS8PrivateKey =
      _PEM_write_bio_PKCS8PrivateKeyPtr.asFunction<
          int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  int i2d_PKCS8PrivateKey_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EVP_PKEY> x,
    ffi.Pointer<EVP_CIPHER> enc,
    ffi.Pointer<ffi.Char> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _i2d_PKCS8PrivateKey_bio(
      bp,
      x,
      enc,
      kstr,
      klen,
      cb,
      u,
    );
  }

  late final _i2d_PKCS8PrivateKey_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('i2d_PKCS8PrivateKey_bio');
  late final _i2d_PKCS8PrivateKey_bio = _i2d_PKCS8PrivateKey_bioPtr.asFunction<
      int Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int i2d_PKCS8PrivateKey_nid_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EVP_PKEY> x,
    int nid,
    ffi.Pointer<ffi.Char> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _i2d_PKCS8PrivateKey_nid_bio(
      bp,
      x,
      nid,
      kstr,
      klen,
      cb,
      u,
    );
  }

  late final _i2d_PKCS8PrivateKey_nid_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('i2d_PKCS8PrivateKey_nid_bio');
  late final _i2d_PKCS8PrivateKey_nid_bio =
      _i2d_PKCS8PrivateKey_nid_bioPtr.asFunction<
          int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<EVP_PKEY>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<EVP_PKEY> d2i_PKCS8PrivateKey_bio(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _d2i_PKCS8PrivateKey_bio(
      bp,
      x,
      cb,
      u,
    );
  }

  late final _d2i_PKCS8PrivateKey_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('d2i_PKCS8PrivateKey_bio');
  late final _d2i_PKCS8PrivateKey_bio = _d2i_PKCS8PrivateKey_bioPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          ffi.Pointer<BIO>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int i2d_PKCS8PrivateKey_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EVP_PKEY> x,
    ffi.Pointer<EVP_CIPHER> enc,
    ffi.Pointer<ffi.Char> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _i2d_PKCS8PrivateKey_fp(
      fp,
      x,
      enc,
      kstr,
      klen,
      cb,
      u,
    );
  }

  late final _i2d_PKCS8PrivateKey_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('i2d_PKCS8PrivateKey_fp');
  late final _i2d_PKCS8PrivateKey_fp = _i2d_PKCS8PrivateKey_fpPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<EVP_PKEY>,
          ffi.Pointer<EVP_CIPHER>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int i2d_PKCS8PrivateKey_nid_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EVP_PKEY> x,
    int nid,
    ffi.Pointer<ffi.Char> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _i2d_PKCS8PrivateKey_nid_fp(
      fp,
      x,
      nid,
      kstr,
      klen,
      cb,
      u,
    );
  }

  late final _i2d_PKCS8PrivateKey_nid_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('i2d_PKCS8PrivateKey_nid_fp');
  late final _i2d_PKCS8PrivateKey_nid_fp =
      _i2d_PKCS8PrivateKey_nid_fpPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<EVP_PKEY>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  int PEM_write_PKCS8PrivateKey_nid(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EVP_PKEY> x,
    int nid,
    ffi.Pointer<ffi.Char> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_write_PKCS8PrivateKey_nid(
      fp,
      x,
      nid,
      kstr,
      klen,
      cb,
      u,
    );
  }

  late final _PEM_write_PKCS8PrivateKey_nidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_write_PKCS8PrivateKey_nid');
  late final _PEM_write_PKCS8PrivateKey_nid =
      _PEM_write_PKCS8PrivateKey_nidPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<EVP_PKEY>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<EVP_PKEY> d2i_PKCS8PrivateKey_fp(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> x,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _d2i_PKCS8PrivateKey_fp(
      fp,
      x,
      cb,
      u,
    );
  }

  late final _d2i_PKCS8PrivateKey_fpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('d2i_PKCS8PrivateKey_fp');
  late final _d2i_PKCS8PrivateKey_fp = _d2i_PKCS8PrivateKey_fpPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          ffi.Pointer<FILE>,
          ffi.Pointer<ffi.Pointer<EVP_PKEY>>,
          ffi.Pointer<pem_password_cb>,
          ffi.Pointer<ffi.Void>)>();

  int PEM_write_PKCS8PrivateKey(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<EVP_PKEY> x,
    ffi.Pointer<EVP_CIPHER> enc,
    ffi.Pointer<ffi.Char> kstr,
    int klen,
    ffi.Pointer<pem_password_cb> cd,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _PEM_write_PKCS8PrivateKey(
      fp,
      x,
      enc,
      kstr,
      klen,
      cd,
      u,
    );
  }

  late final _PEM_write_PKCS8PrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('PEM_write_PKCS8PrivateKey');
  late final _PEM_write_PKCS8PrivateKey =
      _PEM_write_PKCS8PrivateKeyPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Pointer<EVP_CIPHER>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<EVP_PKEY> PEM_read_bio_Parameters(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<ffi.Pointer<EVP_PKEY>> x,
  ) {
    return _PEM_read_bio_Parameters(
      bp,
      x,
    );
  }

  late final _PEM_read_bio_ParametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<BIO>,
              ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>>('PEM_read_bio_Parameters');
  late final _PEM_read_bio_Parameters = _PEM_read_bio_ParametersPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          ffi.Pointer<BIO>, ffi.Pointer<ffi.Pointer<EVP_PKEY>>)>();

  int PEM_write_bio_Parameters(
    ffi.Pointer<BIO> bp,
    ffi.Pointer<EVP_PKEY> x,
  ) {
    return _PEM_write_bio_Parameters(
      bp,
      x,
    );
  }

  late final _PEM_write_bio_ParametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<BIO>,
              ffi.Pointer<EVP_PKEY>)>>('PEM_write_bio_Parameters');
  late final _PEM_write_bio_Parameters = _PEM_write_bio_ParametersPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY> b2i_PrivateKey(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int length,
  ) {
    return _b2i_PrivateKey(
      in1,
      length,
    );
  }

  late final _b2i_PrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('b2i_PrivateKey');
  late final _b2i_PrivateKey = _b2i_PrivateKeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  ffi.Pointer<EVP_PKEY> b2i_PublicKey(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> in1,
    int length,
  ) {
    return _b2i_PublicKey(
      in1,
      length,
    );
  }

  late final _b2i_PublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Long)>>('b2i_PublicKey');
  late final _b2i_PublicKey = _b2i_PublicKeyPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int)>();

  ffi.Pointer<EVP_PKEY> b2i_PrivateKey_bio(
    ffi.Pointer<BIO> in1,
  ) {
    return _b2i_PrivateKey_bio(
      in1,
    );
  }

  late final _b2i_PrivateKey_bioPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<BIO>)>>(
      'b2i_PrivateKey_bio');
  late final _b2i_PrivateKey_bio = _b2i_PrivateKey_bioPtr
      .asFunction<ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<BIO>)>();

  ffi.Pointer<EVP_PKEY> b2i_PublicKey_bio(
    ffi.Pointer<BIO> in1,
  ) {
    return _b2i_PublicKey_bio(
      in1,
    );
  }

  late final _b2i_PublicKey_bioPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<BIO>)>>(
      'b2i_PublicKey_bio');
  late final _b2i_PublicKey_bio = _b2i_PublicKey_bioPtr
      .asFunction<ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<BIO>)>();

  int i2b_PrivateKey_bio(
    ffi.Pointer<BIO> out,
    ffi.Pointer<EVP_PKEY> pk,
  ) {
    return _i2b_PrivateKey_bio(
      out,
      pk,
    );
  }

  late final _i2b_PrivateKey_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>)>>('i2b_PrivateKey_bio');
  late final _i2b_PrivateKey_bio = _i2b_PrivateKey_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>)>();

  int i2b_PublicKey_bio(
    ffi.Pointer<BIO> out,
    ffi.Pointer<EVP_PKEY> pk,
  ) {
    return _i2b_PublicKey_bio(
      out,
      pk,
    );
  }

  late final _i2b_PublicKey_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>)>>('i2b_PublicKey_bio');
  late final _i2b_PublicKey_bio = _i2b_PublicKey_bioPtr
      .asFunction<int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>)>();

  ffi.Pointer<EVP_PKEY> b2i_PVK_bio(
    ffi.Pointer<BIO> in1,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _b2i_PVK_bio(
      in1,
      cb,
      u,
    );
  }

  late final _b2i_PVK_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EVP_PKEY> Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('b2i_PVK_bio');
  late final _b2i_PVK_bio = _b2i_PVK_bioPtr.asFunction<
      ffi.Pointer<EVP_PKEY> Function(ffi.Pointer<BIO>,
          ffi.Pointer<pem_password_cb>, ffi.Pointer<ffi.Void>)>();

  int i2b_PVK_bio(
    ffi.Pointer<BIO> out,
    ffi.Pointer<EVP_PKEY> pk,
    int enclevel,
    ffi.Pointer<pem_password_cb> cb,
    ffi.Pointer<ffi.Void> u,
  ) {
    return _i2b_PVK_bio(
      out,
      pk,
      enclevel,
      cb,
      u,
    );
  }

  late final _i2b_PVK_bioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<BIO>,
              ffi.Pointer<EVP_PKEY>,
              ffi.Int,
              ffi.Pointer<pem_password_cb>,
              ffi.Pointer<ffi.Void>)>>('i2b_PVK_bio');
  late final _i2b_PVK_bio = _i2b_PVK_bioPtr.asFunction<
      int Function(ffi.Pointer<BIO>, ffi.Pointer<EVP_PKEY>, int,
          ffi.Pointer<pem_password_cb>, ffi.Pointer<ffi.Void>)>();

  int ERR_load_UI_strings() {
    return _ERR_load_UI_strings();
  }

  late final _ERR_load_UI_stringsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ERR_load_UI_strings');
  late final _ERR_load_UI_strings =
      _ERR_load_UI_stringsPtr.asFunction<int Function()>();

  ffi.Pointer<UI> UI_new() {
    return _UI_new();
  }

  late final _UI_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UI> Function()>>('UI_new');
  late final _UI_new = _UI_newPtr.asFunction<ffi.Pointer<UI> Function()>();

  ffi.Pointer<UI> UI_new_method(
    ffi.Pointer<UI_METHOD> method,
  ) {
    return _UI_new_method(
      method,
    );
  }

  late final _UI_new_methodPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UI> Function(ffi.Pointer<UI_METHOD>)>>(
      'UI_new_method');
  late final _UI_new_method = _UI_new_methodPtr.asFunction<
      ffi.Pointer<UI> Function(ffi.Pointer<UI_METHOD>)>();

  void UI_free(
    ffi.Pointer<UI> ui,
  ) {
    return _UI_free(
      ui,
    );
  }

  late final _UI_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UI>)>>(
          'UI_free');
  late final _UI_free =
      _UI_freePtr.asFunction<void Function(ffi.Pointer<UI>)>();

  int UI_add_input_string(
    ffi.Pointer<UI> ui,
    ffi.Pointer<ffi.Char> prompt,
    int flags,
    ffi.Pointer<ffi.Char> result_buf,
    int minsize,
    int maxsize,
  ) {
    return _UI_add_input_string(
      ui,
      prompt,
      flags,
      result_buf,
      minsize,
      maxsize,
    );
  }

  late final _UI_add_input_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<UI>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('UI_add_input_string');
  late final _UI_add_input_string = _UI_add_input_stringPtr.asFunction<
      int Function(ffi.Pointer<UI>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int, int)>();

  int UI_dup_input_string(
    ffi.Pointer<UI> ui,
    ffi.Pointer<ffi.Char> prompt,
    int flags,
    ffi.Pointer<ffi.Char> result_buf,
    int minsize,
    int maxsize,
  ) {
    return _UI_dup_input_string(
      ui,
      prompt,
      flags,
      result_buf,
      minsize,
      maxsize,
    );
  }

  late final _UI_dup_input_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<UI>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('UI_dup_input_string');
  late final _UI_dup_input_string = _UI_dup_input_stringPtr.asFunction<
      int Function(ffi.Pointer<UI>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int, int)>();

  int UI_add_verify_string(
    ffi.Pointer<UI> ui,
    ffi.Pointer<ffi.Char> prompt,
    int flags,
    ffi.Pointer<ffi.Char> result_buf,
    int minsize,
    int maxsize,
    ffi.Pointer<ffi.Char> test_buf,
  ) {
    return _UI_add_verify_string(
      ui,
      prompt,
      flags,
      result_buf,
      minsize,
      maxsize,
      test_buf,
    );
  }

  late final _UI_add_verify_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<UI>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('UI_add_verify_string');
  late final _UI_add_verify_string = _UI_add_verify_stringPtr.asFunction<
      int Function(ffi.Pointer<UI>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int UI_dup_verify_string(
    ffi.Pointer<UI> ui,
    ffi.Pointer<ffi.Char> prompt,
    int flags,
    ffi.Pointer<ffi.Char> result_buf,
    int minsize,
    int maxsize,
    ffi.Pointer<ffi.Char> test_buf,
  ) {
    return _UI_dup_verify_string(
      ui,
      prompt,
      flags,
      result_buf,
      minsize,
      maxsize,
      test_buf,
    );
  }

  late final _UI_dup_verify_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<UI>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('UI_dup_verify_string');
  late final _UI_dup_verify_string = _UI_dup_verify_stringPtr.asFunction<
      int Function(ffi.Pointer<UI>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int UI_add_input_boolean(
    ffi.Pointer<UI> ui,
    ffi.Pointer<ffi.Char> prompt,
    ffi.Pointer<ffi.Char> action_desc,
    ffi.Pointer<ffi.Char> ok_chars,
    ffi.Pointer<ffi.Char> cancel_chars,
    int flags,
    ffi.Pointer<ffi.Char> result_buf,
  ) {
    return _UI_add_input_boolean(
      ui,
      prompt,
      action_desc,
      ok_chars,
      cancel_chars,
      flags,
      result_buf,
    );
  }

  late final _UI_add_input_booleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<UI>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('UI_add_input_boolean');
  late final _UI_add_input_boolean = _UI_add_input_booleanPtr.asFunction<
      int Function(
          ffi.Pointer<UI>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>)>();

  int UI_dup_input_boolean(
    ffi.Pointer<UI> ui,
    ffi.Pointer<ffi.Char> prompt,
    ffi.Pointer<ffi.Char> action_desc,
    ffi.Pointer<ffi.Char> ok_chars,
    ffi.Pointer<ffi.Char> cancel_chars,
    int flags,
    ffi.Pointer<ffi.Char> result_buf,
  ) {
    return _UI_dup_input_boolean(
      ui,
      prompt,
      action_desc,
      ok_chars,
      cancel_chars,
      flags,
      result_buf,
    );
  }

  late final _UI_dup_input_booleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<UI>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('UI_dup_input_boolean');
  late final _UI_dup_input_boolean = _UI_dup_input_booleanPtr.asFunction<
      int Function(
          ffi.Pointer<UI>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>)>();

  int UI_add_info_string(
    ffi.Pointer<UI> ui,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _UI_add_info_string(
      ui,
      text,
    );
  }

  late final _UI_add_info_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<UI>, ffi.Pointer<ffi.Char>)>>('UI_add_info_string');
  late final _UI_add_info_string = _UI_add_info_stringPtr.asFunction<
      int Function(ffi.Pointer<UI>, ffi.Pointer<ffi.Char>)>();

  int UI_dup_info_string(
    ffi.Pointer<UI> ui,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _UI_dup_info_string(
      ui,
      text,
    );
  }

  late final _UI_dup_info_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<UI>, ffi.Pointer<ffi.Char>)>>('UI_dup_info_string');
  late final _UI_dup_info_string = _UI_dup_info_stringPtr.asFunction<
      int Function(ffi.Pointer<UI>, ffi.Pointer<ffi.Char>)>();

  int UI_add_error_string(
    ffi.Pointer<UI> ui,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _UI_add_error_string(
      ui,
      text,
    );
  }

  late final _UI_add_error_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<UI>, ffi.Pointer<ffi.Char>)>>('UI_add_error_string');
  late final _UI_add_error_string = _UI_add_error_stringPtr.asFunction<
      int Function(ffi.Pointer<UI>, ffi.Pointer<ffi.Char>)>();

  int UI_dup_error_string(
    ffi.Pointer<UI> ui,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _UI_dup_error_string(
      ui,
      text,
    );
  }

  late final _UI_dup_error_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<UI>, ffi.Pointer<ffi.Char>)>>('UI_dup_error_string');
  late final _UI_dup_error_string = _UI_dup_error_stringPtr.asFunction<
      int Function(ffi.Pointer<UI>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> UI_construct_prompt(
    ffi.Pointer<UI> ui_method,
    ffi.Pointer<ffi.Char> object_desc,
    ffi.Pointer<ffi.Char> object_name,
  ) {
    return _UI_construct_prompt(
      ui_method,
      object_desc,
      object_name,
    );
  }

  late final _UI_construct_promptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<UI>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('UI_construct_prompt');
  late final _UI_construct_prompt = _UI_construct_promptPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<UI>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> UI_add_user_data(
    ffi.Pointer<UI> ui,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _UI_add_user_data(
      ui,
      user_data,
    );
  }

  late final _UI_add_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<UI>, ffi.Pointer<ffi.Void>)>>('UI_add_user_data');
  late final _UI_add_user_data = _UI_add_user_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<UI>, ffi.Pointer<ffi.Void>)>();

  int UI_dup_user_data(
    ffi.Pointer<UI> ui,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _UI_dup_user_data(
      ui,
      user_data,
    );
  }

  late final _UI_dup_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<UI>, ffi.Pointer<ffi.Void>)>>('UI_dup_user_data');
  late final _UI_dup_user_data = _UI_dup_user_dataPtr.asFunction<
      int Function(ffi.Pointer<UI>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> UI_get0_user_data(
    ffi.Pointer<UI> ui,
  ) {
    return _UI_get0_user_data(
      ui,
    );
  }

  late final _UI_get0_user_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<UI>)>>(
      'UI_get0_user_data');
  late final _UI_get0_user_data = _UI_get0_user_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<UI>)>();

  ffi.Pointer<ffi.Char> UI_get0_result(
    ffi.Pointer<UI> ui,
    int i,
  ) {
    return _UI_get0_result(
      ui,
      i,
    );
  }

  late final _UI_get0_resultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<UI>, ffi.Int)>>('UI_get0_result');
  late final _UI_get0_result = _UI_get0_resultPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<UI>, int)>();

  int UI_get_result_length(
    ffi.Pointer<UI> ui,
    int i,
  ) {
    return _UI_get_result_length(
      ui,
      i,
    );
  }

  late final _UI_get_result_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>, ffi.Int)>>(
          'UI_get_result_length');
  late final _UI_get_result_length =
      _UI_get_result_lengthPtr.asFunction<int Function(ffi.Pointer<UI>, int)>();

  int UI_process(
    ffi.Pointer<UI> ui,
  ) {
    return _UI_process(
      ui,
    );
  }

  late final _UI_processPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>>(
          'UI_process');
  late final _UI_process =
      _UI_processPtr.asFunction<int Function(ffi.Pointer<UI>)>();

  int UI_ctrl(
    ffi.Pointer<UI> ui,
    int cmd,
    int i,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> f,
  ) {
    return _UI_ctrl(
      ui,
      cmd,
      i,
      p,
      f,
    );
  }

  late final _UI_ctrlPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<UI>,
                  ffi.Int,
                  ffi.Long,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'UI_ctrl');
  late final _UI_ctrl = _UI_ctrlPtr.asFunction<
      int Function(ffi.Pointer<UI>, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int UI_set_ex_data(
    ffi.Pointer<UI> r,
    int idx,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _UI_set_ex_data(
      r,
      idx,
      arg,
    );
  }

  late final _UI_set_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<UI>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('UI_set_ex_data');
  late final _UI_set_ex_data = _UI_set_ex_dataPtr.asFunction<
      int Function(ffi.Pointer<UI>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> UI_get_ex_data(
    ffi.Pointer<UI> r,
    int idx,
  ) {
    return _UI_get_ex_data(
      r,
      idx,
    );
  }

  late final _UI_get_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<UI>, ffi.Int)>>('UI_get_ex_data');
  late final _UI_get_ex_data = _UI_get_ex_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<UI>, int)>();

  void UI_set_default_method(
    ffi.Pointer<UI_METHOD> meth,
  ) {
    return _UI_set_default_method(
      meth,
    );
  }

  late final _UI_set_default_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UI_METHOD>)>>(
          'UI_set_default_method');
  late final _UI_set_default_method = _UI_set_default_methodPtr.asFunction<
      void Function(ffi.Pointer<UI_METHOD>)>();

  ffi.Pointer<UI_METHOD> UI_get_default_method() {
    return _UI_get_default_method();
  }

  late final _UI_get_default_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UI_METHOD> Function()>>(
          'UI_get_default_method');
  late final _UI_get_default_method =
      _UI_get_default_methodPtr.asFunction<ffi.Pointer<UI_METHOD> Function()>();

  ffi.Pointer<UI_METHOD> UI_get_method(
    ffi.Pointer<UI> ui,
  ) {
    return _UI_get_method(
      ui,
    );
  }

  late final _UI_get_methodPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UI_METHOD> Function(ffi.Pointer<UI>)>>(
      'UI_get_method');
  late final _UI_get_method = _UI_get_methodPtr.asFunction<
      ffi.Pointer<UI_METHOD> Function(ffi.Pointer<UI>)>();

  ffi.Pointer<UI_METHOD> UI_set_method(
    ffi.Pointer<UI> ui,
    ffi.Pointer<UI_METHOD> meth,
  ) {
    return _UI_set_method(
      ui,
      meth,
    );
  }

  late final _UI_set_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UI_METHOD> Function(
              ffi.Pointer<UI>, ffi.Pointer<UI_METHOD>)>>('UI_set_method');
  late final _UI_set_method = _UI_set_methodPtr.asFunction<
      ffi.Pointer<UI_METHOD> Function(
          ffi.Pointer<UI>, ffi.Pointer<UI_METHOD>)>();

  ffi.Pointer<UI_METHOD> UI_OpenSSL() {
    return _UI_OpenSSL();
  }

  late final _UI_OpenSSLPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UI_METHOD> Function()>>(
          'UI_OpenSSL');
  late final _UI_OpenSSL =
      _UI_OpenSSLPtr.asFunction<ffi.Pointer<UI_METHOD> Function()>();

  ffi.Pointer<UI_METHOD> UI_null() {
    return _UI_null();
  }

  late final _UI_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UI_METHOD> Function()>>('UI_null');
  late final _UI_null =
      _UI_nullPtr.asFunction<ffi.Pointer<UI_METHOD> Function()>();

  ffi.Pointer<UI_METHOD> UI_create_method(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _UI_create_method(
      name,
    );
  }

  late final _UI_create_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UI_METHOD> Function(
              ffi.Pointer<ffi.Char>)>>('UI_create_method');
  late final _UI_create_method = _UI_create_methodPtr.asFunction<
      ffi.Pointer<UI_METHOD> Function(ffi.Pointer<ffi.Char>)>();

  void UI_destroy_method(
    ffi.Pointer<UI_METHOD> ui_method,
  ) {
    return _UI_destroy_method(
      ui_method,
    );
  }

  late final _UI_destroy_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UI_METHOD>)>>(
          'UI_destroy_method');
  late final _UI_destroy_method =
      _UI_destroy_methodPtr.asFunction<void Function(ffi.Pointer<UI_METHOD>)>();

  int UI_method_set_opener(
    ffi.Pointer<UI_METHOD> method,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>> opener,
  ) {
    return _UI_method_set_opener(
      method,
      opener,
    );
  }

  late final _UI_method_set_openerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<UI_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>>)>>(
      'UI_method_set_opener');
  late final _UI_method_set_opener = _UI_method_set_openerPtr.asFunction<
      int Function(
          ffi.Pointer<UI_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>>)>();

  int UI_method_set_writer(
    ffi.Pointer<UI_METHOD> method,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<UI>, ffi.Pointer<UI_STRING>)>>
        writer,
  ) {
    return _UI_method_set_writer(
      method,
      writer,
    );
  }

  late final _UI_method_set_writerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<UI_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<UI>,
                          ffi.Pointer<UI_STRING>)>>)>>('UI_method_set_writer');
  late final _UI_method_set_writer = _UI_method_set_writerPtr.asFunction<
      int Function(
          ffi.Pointer<UI_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<UI>, ffi.Pointer<UI_STRING>)>>)>();

  int UI_method_set_flusher(
    ffi.Pointer<UI_METHOD> method,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>> flusher,
  ) {
    return _UI_method_set_flusher(
      method,
      flusher,
    );
  }

  late final _UI_method_set_flusherPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<UI_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>>)>>(
      'UI_method_set_flusher');
  late final _UI_method_set_flusher = _UI_method_set_flusherPtr.asFunction<
      int Function(
          ffi.Pointer<UI_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>>)>();

  int UI_method_set_reader(
    ffi.Pointer<UI_METHOD> method,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<UI>, ffi.Pointer<UI_STRING>)>>
        reader,
  ) {
    return _UI_method_set_reader(
      method,
      reader,
    );
  }

  late final _UI_method_set_readerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<UI_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<UI>,
                          ffi.Pointer<UI_STRING>)>>)>>('UI_method_set_reader');
  late final _UI_method_set_reader = _UI_method_set_readerPtr.asFunction<
      int Function(
          ffi.Pointer<UI_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<UI>, ffi.Pointer<UI_STRING>)>>)>();

  int UI_method_set_closer(
    ffi.Pointer<UI_METHOD> method,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>> closer,
  ) {
    return _UI_method_set_closer(
      method,
      closer,
    );
  }

  late final _UI_method_set_closerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<UI_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>>)>>(
      'UI_method_set_closer');
  late final _UI_method_set_closer = _UI_method_set_closerPtr.asFunction<
      int Function(
          ffi.Pointer<UI_METHOD>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>>)>();

  int UI_method_set_data_duplicator(
    ffi.Pointer<UI_METHOD> method,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(
                    ffi.Pointer<UI>, ffi.Pointer<ffi.Void>)>>
        duplicator,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<UI>, ffi.Pointer<ffi.Void>)>>
        destructor,
  ) {
    return _UI_method_set_data_duplicator(
      method,
      duplicator,
      destructor,
    );
  }

  late final _UI_method_set_data_duplicatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<UI_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Void> Function(
                              ffi.Pointer<UI>, ffi.Pointer<ffi.Void>)>>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<UI>, ffi.Pointer<ffi.Void>)>>)>>(
      'UI_method_set_data_duplicator');
  late final _UI_method_set_data_duplicator =
      _UI_method_set_data_duplicatorPtr.asFunction<
          int Function(
              ffi.Pointer<UI_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(
                          ffi.Pointer<UI>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<UI>, ffi.Pointer<ffi.Void>)>>)>();

  int UI_method_set_prompt_constructor(
    ffi.Pointer<UI_METHOD> method,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Char> Function(ffi.Pointer<UI>,
                    ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
        prompt_constructor,
  ) {
    return _UI_method_set_prompt_constructor(
      method,
      prompt_constructor,
    );
  }

  late final _UI_method_set_prompt_constructorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<UI_METHOD>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Char> Function(
                              ffi.Pointer<UI>,
                              ffi.Pointer<ffi.Char>,
                              ffi.Pointer<ffi.Char>)>>)>>(
      'UI_method_set_prompt_constructor');
  late final _UI_method_set_prompt_constructor =
      _UI_method_set_prompt_constructorPtr.asFunction<
          int Function(
              ffi.Pointer<UI_METHOD>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(ffi.Pointer<UI>,
                          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>)>();

  int UI_method_set_ex_data(
    ffi.Pointer<UI_METHOD> method,
    int idx,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _UI_method_set_ex_data(
      method,
      idx,
      data,
    );
  }

  late final _UI_method_set_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<UI_METHOD>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('UI_method_set_ex_data');
  late final _UI_method_set_ex_data = _UI_method_set_ex_dataPtr.asFunction<
      int Function(ffi.Pointer<UI_METHOD>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>>
      UI_method_get_opener(
    ffi.Pointer<UI_METHOD> method,
  ) {
    return _UI_method_get_opener(
      method,
    );
  }

  late final _UI_method_get_openerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>>
              Function(ffi.Pointer<UI_METHOD>)>>('UI_method_get_opener');
  late final _UI_method_get_opener = _UI_method_get_openerPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>>
          Function(ffi.Pointer<UI_METHOD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<UI>, ffi.Pointer<UI_STRING>)>>
      UI_method_get_writer(
    ffi.Pointer<UI_METHOD> method,
  ) {
    return _UI_method_get_writer(
      method,
    );
  }

  late final _UI_method_get_writerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<UI>, ffi.Pointer<UI_STRING>)>>
              Function(ffi.Pointer<UI_METHOD>)>>('UI_method_get_writer');
  late final _UI_method_get_writer = _UI_method_get_writerPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<UI>, ffi.Pointer<UI_STRING>)>>
          Function(ffi.Pointer<UI_METHOD>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>>
      UI_method_get_flusher(
    ffi.Pointer<UI_METHOD> method,
  ) {
    return _UI_method_get_flusher(
      method,
    );
  }

  late final _UI_method_get_flusherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>>
              Function(ffi.Pointer<UI_METHOD>)>>('UI_method_get_flusher');
  late final _UI_method_get_flusher = _UI_method_get_flusherPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>>
          Function(ffi.Pointer<UI_METHOD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<UI>, ffi.Pointer<UI_STRING>)>>
      UI_method_get_reader(
    ffi.Pointer<UI_METHOD> method,
  ) {
    return _UI_method_get_reader(
      method,
    );
  }

  late final _UI_method_get_readerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<UI>, ffi.Pointer<UI_STRING>)>>
              Function(ffi.Pointer<UI_METHOD>)>>('UI_method_get_reader');
  late final _UI_method_get_reader = _UI_method_get_readerPtr.asFunction<
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<UI>, ffi.Pointer<UI_STRING>)>>
          Function(ffi.Pointer<UI_METHOD>)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>>
      UI_method_get_closer(
    ffi.Pointer<UI_METHOD> method,
  ) {
    return _UI_method_get_closer(
      method,
    );
  }

  late final _UI_method_get_closerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>>
              Function(ffi.Pointer<UI_METHOD>)>>('UI_method_get_closer');
  late final _UI_method_get_closer = _UI_method_get_closerPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI>)>>
          Function(ffi.Pointer<UI_METHOD>)>();

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<UI>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>> UI_method_get_prompt_constructor(
    ffi.Pointer<UI_METHOD> method,
  ) {
    return _UI_method_get_prompt_constructor(
      method,
    );
  }

  late final _UI_method_get_prompt_constructorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Char> Function(ffi.Pointer<UI>,
                              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
                  Function(ffi.Pointer<UI_METHOD>)>>(
      'UI_method_get_prompt_constructor');
  late final _UI_method_get_prompt_constructor =
      _UI_method_get_prompt_constructorPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(ffi.Pointer<UI>,
                          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
              Function(ffi.Pointer<UI_METHOD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<UI>, ffi.Pointer<ffi.Void>)>>
      UI_method_get_data_duplicator(
    ffi.Pointer<UI_METHOD> method,
  ) {
    return _UI_method_get_data_duplicator(
      method,
    );
  }

  late final _UI_method_get_data_duplicatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Void> Function(
                              ffi.Pointer<UI>, ffi.Pointer<ffi.Void>)>>
                  Function(ffi.Pointer<UI_METHOD>)>>(
      'UI_method_get_data_duplicator');
  late final _UI_method_get_data_duplicator =
      _UI_method_get_data_duplicatorPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(
                          ffi.Pointer<UI>, ffi.Pointer<ffi.Void>)>>
              Function(ffi.Pointer<UI_METHOD>)>();

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UI>, ffi.Pointer<ffi.Void>)>>
      UI_method_get_data_destructor(
    ffi.Pointer<UI_METHOD> method,
  ) {
    return _UI_method_get_data_destructor(
      method,
    );
  }

  late final _UI_method_get_data_destructorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<UI>, ffi.Pointer<ffi.Void>)>>
                  Function(ffi.Pointer<UI_METHOD>)>>(
      'UI_method_get_data_destructor');
  late final _UI_method_get_data_destructor =
      _UI_method_get_data_destructorPtr.asFunction<
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<UI>, ffi.Pointer<ffi.Void>)>>
              Function(ffi.Pointer<UI_METHOD>)>();

  ffi.Pointer<ffi.Void> UI_method_get_ex_data(
    ffi.Pointer<UI_METHOD> method,
    int idx,
  ) {
    return _UI_method_get_ex_data(
      method,
      idx,
    );
  }

  late final _UI_method_get_ex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<UI_METHOD>, ffi.Int)>>('UI_method_get_ex_data');
  late final _UI_method_get_ex_data = _UI_method_get_ex_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<UI_METHOD>, int)>();

  int UI_get_string_type(
    ffi.Pointer<UI_STRING> uis,
  ) {
    return _UI_get_string_type(
      uis,
    );
  }

  late final _UI_get_string_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<UI_STRING>)>>(
          'UI_get_string_type');
  late final _UI_get_string_type =
      _UI_get_string_typePtr.asFunction<int Function(ffi.Pointer<UI_STRING>)>();

  int UI_get_input_flags(
    ffi.Pointer<UI_STRING> uis,
  ) {
    return _UI_get_input_flags(
      uis,
    );
  }

  late final _UI_get_input_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI_STRING>)>>(
          'UI_get_input_flags');
  late final _UI_get_input_flags =
      _UI_get_input_flagsPtr.asFunction<int Function(ffi.Pointer<UI_STRING>)>();

  ffi.Pointer<ffi.Char> UI_get0_output_string(
    ffi.Pointer<UI_STRING> uis,
  ) {
    return _UI_get0_output_string(
      uis,
    );
  }

  late final _UI_get0_output_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<UI_STRING>)>>('UI_get0_output_string');
  late final _UI_get0_output_string = _UI_get0_output_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<UI_STRING>)>();

  ffi.Pointer<ffi.Char> UI_get0_action_string(
    ffi.Pointer<UI_STRING> uis,
  ) {
    return _UI_get0_action_string(
      uis,
    );
  }

  late final _UI_get0_action_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<UI_STRING>)>>('UI_get0_action_string');
  late final _UI_get0_action_string = _UI_get0_action_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<UI_STRING>)>();

  ffi.Pointer<ffi.Char> UI_get0_result_string(
    ffi.Pointer<UI_STRING> uis,
  ) {
    return _UI_get0_result_string(
      uis,
    );
  }

  late final _UI_get0_result_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<UI_STRING>)>>('UI_get0_result_string');
  late final _UI_get0_result_string = _UI_get0_result_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<UI_STRING>)>();

  int UI_get_result_string_length(
    ffi.Pointer<UI_STRING> uis,
  ) {
    return _UI_get_result_string_length(
      uis,
    );
  }

  late final _UI_get_result_string_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI_STRING>)>>(
          'UI_get_result_string_length');
  late final _UI_get_result_string_length = _UI_get_result_string_lengthPtr
      .asFunction<int Function(ffi.Pointer<UI_STRING>)>();

  ffi.Pointer<ffi.Char> UI_get0_test_string(
    ffi.Pointer<UI_STRING> uis,
  ) {
    return _UI_get0_test_string(
      uis,
    );
  }

  late final _UI_get0_test_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<UI_STRING>)>>('UI_get0_test_string');
  late final _UI_get0_test_string = _UI_get0_test_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<UI_STRING>)>();

  int UI_get_result_minsize(
    ffi.Pointer<UI_STRING> uis,
  ) {
    return _UI_get_result_minsize(
      uis,
    );
  }

  late final _UI_get_result_minsizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI_STRING>)>>(
          'UI_get_result_minsize');
  late final _UI_get_result_minsize = _UI_get_result_minsizePtr.asFunction<
      int Function(ffi.Pointer<UI_STRING>)>();

  int UI_get_result_maxsize(
    ffi.Pointer<UI_STRING> uis,
  ) {
    return _UI_get_result_maxsize(
      uis,
    );
  }

  late final _UI_get_result_maxsizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UI_STRING>)>>(
          'UI_get_result_maxsize');
  late final _UI_get_result_maxsize = _UI_get_result_maxsizePtr.asFunction<
      int Function(ffi.Pointer<UI_STRING>)>();

  int UI_set_result(
    ffi.Pointer<UI> ui,
    ffi.Pointer<UI_STRING> uis,
    ffi.Pointer<ffi.Char> result,
  ) {
    return _UI_set_result(
      ui,
      uis,
      result,
    );
  }

  late final _UI_set_resultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<UI>, ffi.Pointer<UI_STRING>,
              ffi.Pointer<ffi.Char>)>>('UI_set_result');
  late final _UI_set_result = _UI_set_resultPtr.asFunction<
      int Function(
          ffi.Pointer<UI>, ffi.Pointer<UI_STRING>, ffi.Pointer<ffi.Char>)>();

  int UI_set_result_ex(
    ffi.Pointer<UI> ui,
    ffi.Pointer<UI_STRING> uis,
    ffi.Pointer<ffi.Char> result,
    int len,
  ) {
    return _UI_set_result_ex(
      ui,
      uis,
      result,
      len,
    );
  }

  late final _UI_set_result_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<UI>, ffi.Pointer<UI_STRING>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('UI_set_result_ex');
  late final _UI_set_result_ex = _UI_set_result_exPtr.asFunction<
      int Function(ffi.Pointer<UI>, ffi.Pointer<UI_STRING>,
          ffi.Pointer<ffi.Char>, int)>();

  int UI_UTIL_read_pw_string(
    ffi.Pointer<ffi.Char> buf,
    int length,
    ffi.Pointer<ffi.Char> prompt,
    int verify,
  ) {
    return _UI_UTIL_read_pw_string(
      buf,
      length,
      prompt,
      verify,
    );
  }

  late final _UI_UTIL_read_pw_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('UI_UTIL_read_pw_string');
  late final _UI_UTIL_read_pw_string = _UI_UTIL_read_pw_stringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int UI_UTIL_read_pw(
    ffi.Pointer<ffi.Char> buf,
    ffi.Pointer<ffi.Char> buff,
    int size,
    ffi.Pointer<ffi.Char> prompt,
    int verify,
  ) {
    return _UI_UTIL_read_pw(
      buf,
      buff,
      size,
      prompt,
      verify,
    );
  }

  late final _UI_UTIL_read_pwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('UI_UTIL_read_pw');
  late final _UI_UTIL_read_pw = _UI_UTIL_read_pwPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<UI_METHOD> UI_UTIL_wrap_read_pem_callback(
    ffi.Pointer<pem_password_cb1> cb,
    int rwflag,
  ) {
    return _UI_UTIL_wrap_read_pem_callback(
      cb,
      rwflag,
    );
  }

  late final _UI_UTIL_wrap_read_pem_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UI_METHOD> Function(ffi.Pointer<pem_password_cb1>,
              ffi.Int)>>('UI_UTIL_wrap_read_pem_callback');
  late final _UI_UTIL_wrap_read_pem_callback =
      _UI_UTIL_wrap_read_pem_callbackPtr.asFunction<
          ffi.Pointer<UI_METHOD> Function(
              ffi.Pointer<pem_password_cb1>, int)>();
}

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

class imaxdiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

typedef intmax_t = __intmax_t;
typedef __intmax_t = ffi.Long;
typedef uintmax_t = __uintmax_t;
typedef __uintmax_t = ffi.UnsignedLong;
typedef __gwchar_t = ffi.Int;

class __mbstate_t extends ffi.Struct {
  @ffi.Int()
  external int __count;

  external UnnamedUnion1 __value;
}

class UnnamedUnion1 extends ffi.Union {
  @ffi.UnsignedInt()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __wchb;
}

class _G_fpos_t extends ffi.Struct {
  @__off_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off_t = ffi.Long;

class _G_fpos64_t extends ffi.Struct {
  @__off64_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off64_t = ffi.Long;

class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Int()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Char()
  external int _unused2;
}

class _IO_marker extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;

class _IO_codecvt extends ffi.Opaque {}

class _IO_wide_data extends ffi.Opaque {}

typedef FILE = _IO_FILE;
typedef __ssize_t = ffi.Long;
typedef fpos_t = __fpos_t;
typedef __fpos_t = _G_fpos_t;

class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Long;
typedef __suseconds_t = ffi.Long;

class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Long;

class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Long;

class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

class __once_flag extends ffi.Struct {
  @ffi.Int()
  external int __data;
}

class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int()
  external int rand_type;

  @ffi.Int()
  external int rand_deg;

  @ffi.Int()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __old_x;

  @ffi.UnsignedShort()
  external int __c;

  @ffi.UnsignedShort()
  external int __init;

  @ffi.UnsignedLongLong()
  external int __a;
}

typedef __uint32_t = ffi.UnsignedInt;
typedef __compar_fn_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

class itimerspec extends ffi.Struct {
  external timespec it_interval;

  external timespec it_value;
}

class sigevent extends ffi.Opaque {}

class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.UnsignedShort> __ctype_b;

  external ffi.Pointer<ffi.Int> __ctype_tolower;

  external ffi.Pointer<ffi.Int> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Char>> __names;
}

class __locale_data extends ffi.Opaque {}

typedef clock_t = __clock_t;
typedef __clock_t = ffi.Long;
typedef time_t = __time_t;
typedef locale_t = __locale_t;
typedef __locale_t = ffi.Pointer<__locale_struct>;
typedef clockid_t = __clockid_t;
typedef __clockid_t = ffi.Int;
typedef pid_t = __pid_t;
typedef __pid_t = ffi.Int;
typedef timer_t = __timer_t;
typedef __timer_t = ffi.Pointer<ffi.Void>;

class stack_st extends ffi.Opaque {}

typedef OPENSSL_STACK = stack_st;
typedef OPENSSL_sk_compfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef OPENSSL_sk_copyfunc = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>;
typedef OPENSSL_sk_freefunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;

class stack_st_OPENSSL_STRING extends ffi.Opaque {}

class stack_st_OPENSSL_CSTRING extends ffi.Opaque {}

class stack_st_OPENSSL_BLOCK extends ffi.Opaque {}

class asn1_string_st extends ffi.Opaque {}

class asn1_object_st extends ffi.Opaque {}

class ASN1_ITEM_st extends ffi.Opaque {}

class asn1_pctx_st extends ffi.Opaque {}

class asn1_sctx_st extends ffi.Opaque {}

class dane_st extends ffi.Opaque {}

class bio_st extends ffi.Opaque {}

class bignum_st extends ffi.Opaque {}

class bignum_ctx extends ffi.Opaque {}

class bn_blinding_st extends ffi.Opaque {}

class bn_mont_ctx_st extends ffi.Opaque {}

class bn_recp_ctx_st extends ffi.Opaque {}

class bn_gencb_st extends ffi.Opaque {}

class buf_mem_st extends ffi.Opaque {}

class evp_cipher_st extends ffi.Opaque {}

class evp_cipher_ctx_st extends ffi.Opaque {}

class evp_md_st extends ffi.Opaque {}

class evp_md_ctx_st extends ffi.Opaque {}

class evp_pkey_st extends ffi.Opaque {}

class evp_pkey_asn1_method_st extends ffi.Opaque {}

class evp_pkey_method_st extends ffi.Opaque {}

class evp_pkey_ctx_st extends ffi.Opaque {}

class evp_Encode_Ctx_st extends ffi.Opaque {}

class hmac_ctx_st extends ffi.Opaque {}

class dh_st extends ffi.Opaque {}

class dh_method extends ffi.Opaque {}

class dsa_st extends ffi.Opaque {}

class dsa_method extends ffi.Opaque {}

class rsa_st extends ffi.Opaque {}

class rsa_meth_st extends ffi.Opaque {}

class rsa_pss_params_st extends ffi.Opaque {}

class ec_key_st extends ffi.Opaque {}

class ec_key_method_st extends ffi.Opaque {}

class rand_meth_st extends ffi.Opaque {}

class rand_drbg_st extends ffi.Opaque {}

class ssl_dane_st extends ffi.Opaque {}

class x509_st extends ffi.Opaque {}

class X509_algor_st extends ffi.Opaque {}

class X509_crl_st extends ffi.Opaque {}

class x509_crl_method_st extends ffi.Opaque {}

class x509_revoked_st extends ffi.Opaque {}

class X509_name_st extends ffi.Opaque {}

class X509_pubkey_st extends ffi.Opaque {}

class x509_store_st extends ffi.Opaque {}

class x509_store_ctx_st extends ffi.Opaque {}

class x509_object_st extends ffi.Opaque {}

class x509_lookup_st extends ffi.Opaque {}

class x509_lookup_method_st extends ffi.Opaque {}

class X509_VERIFY_PARAM_st extends ffi.Opaque {}

class x509_sig_info_st extends ffi.Opaque {}

class pkcs8_priv_key_info_st extends ffi.Opaque {}

class v3_ext_ctx extends ffi.Opaque {}

class conf_st extends ffi.Opaque {}

class ossl_init_settings_st extends ffi.Opaque {}

class ui_st extends ffi.Opaque {}

class ui_method_st extends ffi.Opaque {}

class engine_st extends ffi.Opaque {}

class ssl_st extends ffi.Opaque {}

class ssl_ctx_st extends ffi.Opaque {}

class comp_ctx_st extends ffi.Opaque {}

class comp_method_st extends ffi.Opaque {}

class X509_POLICY_NODE_st extends ffi.Opaque {}

class X509_POLICY_LEVEL_st extends ffi.Opaque {}

class X509_POLICY_TREE_st extends ffi.Opaque {}

class X509_POLICY_CACHE_st extends ffi.Opaque {}

class AUTHORITY_KEYID_st extends ffi.Opaque {}

class DIST_POINT_st extends ffi.Opaque {}

class ISSUING_DIST_POINT_st extends ffi.Opaque {}

class NAME_CONSTRAINTS_st extends ffi.Opaque {}

class crypto_ex_data_st extends ffi.Struct {
  external ffi.Pointer<stack_st_void> sk;
}

class stack_st_void extends ffi.Opaque {}

class ocsp_req_ctx_st extends ffi.Opaque {}

class ocsp_response_st extends ffi.Opaque {}

class ocsp_responder_id_st extends ffi.Opaque {}

class sct_st extends ffi.Opaque {}

class sct_ctx_st extends ffi.Opaque {}

class ctlog_st extends ffi.Opaque {}

class ctlog_store_st extends ffi.Opaque {}

class ct_policy_eval_ctx_st extends ffi.Opaque {}

class ossl_store_info_st extends ffi.Opaque {}

class ossl_store_search_st extends ffi.Opaque {}

class CRYPTO_dynlock extends ffi.Struct {
  @ffi.Int()
  external int dummy;
}

typedef CRYPTO_RWLOCK = ffi.Void;
typedef CRYPTO_EX_new = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
        ffi.Pointer<CRYPTO_EX_DATA>, ffi.Int, ffi.Long, ffi.Pointer<ffi.Void>)>;
typedef CRYPTO_EX_DATA = crypto_ex_data_st;
typedef CRYPTO_EX_dup = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<CRYPTO_EX_DATA>, ffi.Pointer<CRYPTO_EX_DATA>,
        ffi.Pointer<ffi.Void>, ffi.Int, ffi.Long, ffi.Pointer<ffi.Void>)>;
typedef CRYPTO_EX_free = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
        ffi.Pointer<CRYPTO_EX_DATA>, ffi.Int, ffi.Long, ffi.Pointer<ffi.Void>)>;

class crypto_threadid_st extends ffi.Struct {
  @ffi.Int()
  external int dummy;
}

typedef OPENSSL_INIT_SETTINGS = ossl_init_settings_st;

class sched_param extends ffi.Struct {
  @ffi.Int()
  external int sched_priority;
}

class cpu_set_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__cpu_mask> __bits;
}

typedef __cpu_mask = ffi.UnsignedLong;

class __jmp_buf_tag extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Long> __jmpbuf;

  @ffi.Int()
  external int __mask_was_saved;

  external __sigset_t __saved_mask;
}

class _pthread_cleanup_buffer extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  @ffi.Int()
  external int __canceltype;

  external ffi.Pointer<_pthread_cleanup_buffer> __prev;
}

typedef pthread_t = ffi.UnsignedLong;
typedef pthread_once_t = ffi.Int;

class __cancel_jmp_buf_tag extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Long> __cancel_jmp_buf;

  @ffi.Int()
  external int __mask_was_saved;
}

class __pthread_unwind_buf_t extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<__cancel_jmp_buf_tag> __cancel_jmp_buf;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> __pad;
}

class __pthread_cleanup_frame extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __cancel_routine;

  external ffi.Pointer<ffi.Void> __cancel_arg;

  @ffi.Int()
  external int __do_it;

  @ffi.Int()
  external int __cancel_type;
}

typedef pthread_key_t = ffi.UnsignedInt;
typedef CRYPTO_ONCE = pthread_once_t;
typedef CRYPTO_THREAD_LOCAL = pthread_key_t;
typedef CRYPTO_THREAD_ID = pthread_t;

class bio_addr_st extends ffi.Opaque {}

class bio_addrinfo_st extends ffi.Opaque {}

typedef BIO = bio_st;
typedef BIO_callback_fn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<ffi.Char>,
            ffi.Int, ffi.Long, ffi.Long)>>;
typedef BIO_callback_fn_ex = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Long Function(ffi.Pointer<BIO>, ffi.Int, ffi.Pointer<ffi.Char>,
            ffi.Int, ffi.Int, ffi.Long, ffi.Int, ffi.Pointer<ffi.Int>)>>;

class bio_method_st extends ffi.Opaque {}

class stack_st_BIO extends ffi.Opaque {}

typedef asn1_ps_func = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<BIO>,
        ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Void>)>;
typedef BIO_METHOD = bio_method_st;
typedef BIO_info_cb
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<BIO>, ffi.Int, ffi.Int)>;
typedef BIO_ADDR = bio_addr_st;
typedef BIO_ADDRINFO = bio_addrinfo_st;

abstract class BIO_hostserv_priorities {
  static const int BIO_PARSE_PRIO_HOST = 0;
  static const int BIO_PARSE_PRIO_SERV = 1;
}

abstract class BIO_lookup_type {
  static const int BIO_LOOKUP_CLIENT = 0;
  static const int BIO_LOOKUP_SERVER = 1;
}

class hostent extends ffi.Opaque {}

class BIO_sock_info_u extends ffi.Union {
  external ffi.Pointer<BIO_ADDR> addr;
}

abstract class BIO_sock_info_type {
  static const int BIO_SOCK_INFO_ADDRESS = 0;
}

typedef va_list = ffi.Int;

class lhash_node_st extends ffi.Opaque {}

class lhash_st extends ffi.Opaque {}

typedef OPENSSL_LHASH = lhash_st;
typedef OPENSSL_LH_HASHFUNC = ffi.Pointer<
    ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>;
typedef OPENSSL_LH_COMPFUNC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef OPENSSL_LH_DOALL_FUNC
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef OPENSSL_LH_DOALL_FUNCARG = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class lhash_st_OPENSSL_STRING extends ffi.Struct {
  external lh_OPENSSL_STRING_dummy dummy;
}

class lh_OPENSSL_STRING_dummy extends ffi.Union {
  external ffi.Pointer<ffi.Void> d1;

  @ffi.UnsignedLong()
  external int d2;

  @ffi.Int()
  external int d3;
}

class lhash_st_OPENSSL_CSTRING extends ffi.Struct {
  external lh_OPENSSL_CSTRING_dummy dummy;
}

class lh_OPENSSL_CSTRING_dummy extends ffi.Union {
  external ffi.Pointer<ffi.Void> d1;

  @ffi.UnsignedLong()
  external int d2;

  @ffi.Int()
  external int d3;
}

class CONF_VALUE extends ffi.Struct {
  external ffi.Pointer<ffi.Char> section;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> value;
}

class stack_st_CONF_VALUE extends ffi.Opaque {}

class lhash_st_CONF_VALUE extends ffi.Struct {
  external lh_CONF_VALUE_dummy dummy;
}

class lh_CONF_VALUE_dummy extends ffi.Union {
  external ffi.Pointer<ffi.Void> d1;

  @ffi.UnsignedLong()
  external int d2;

  @ffi.Int()
  external int d3;
}

class conf_method_st extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<CONF> Function(ffi.Pointer<CONF_METHOD>)>> create;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CONF>)>>
      init;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CONF>)>>
      destroy;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CONF>)>>
      destroy_data;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<CONF>, ffi.Pointer<BIO>, ffi.Pointer<ffi.Long>)>>
      load_bio;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CONF>, ffi.Pointer<BIO>)>> dump;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CONF>, ffi.Char)>>
      is_number;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CONF>, ffi.Char)>> to_int;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CONF>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>> load;
}

typedef CONF = conf_st;
typedef CONF_METHOD = conf_method_st;

class conf_imodule_st extends ffi.Opaque {}

class conf_module_st extends ffi.Opaque {}

class stack_st_CONF_MODULE extends ffi.Opaque {}

class stack_st_CONF_IMODULE extends ffi.Opaque {}

typedef conf_init_func = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<CONF_IMODULE>, ffi.Pointer<CONF>)>;
typedef CONF_IMODULE = conf_imodule_st;
typedef conf_finish_func
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CONF_IMODULE>)>;
typedef CONF_MODULE = conf_module_st;

class err_state_st extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int> err_flags;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> err_buffer;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Pointer<ffi.Char>> err_data;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int> err_data_flags;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Pointer<ffi.Char>> err_file;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int> err_line;

  @ffi.Int()
  external int top;

  @ffi.Int()
  external int bottom;
}

class ERR_string_data_st extends ffi.Struct {
  @ffi.UnsignedLong()
  external int error;

  external ffi.Pointer<ffi.Char> string;
}

class lhash_st_ERR_STRING_DATA extends ffi.Struct {
  external lh_ERR_STRING_DATA_dummy dummy;
}

class lh_ERR_STRING_DATA_dummy extends ffi.Union {
  external ffi.Pointer<ffi.Void> d1;

  @ffi.UnsignedLong()
  external int d2;

  @ffi.Int()
  external int d3;
}

typedef ERR_STRING_DATA = ERR_string_data_st;
typedef ERR_STATE = err_state_st;
typedef BIGNUM = bignum_st;
typedef BN_GENCB = bn_gencb_st;
typedef BN_CTX = bignum_ctx;
typedef BN_MONT_CTX = bn_mont_ctx_st;
typedef BN_BLINDING = bn_blinding_st;
typedef BN_RECP_CTX = bn_recp_ctx_st;

class stack_st_X509_ALGOR extends ffi.Opaque {}

class ASN1_ENCODING_st extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> enc;

  @ffi.Long()
  external int len;

  @ffi.Int()
  external int modified;
}

class asn1_string_table_st extends ffi.Struct {
  @ffi.Int()
  external int nid;

  @ffi.Long()
  external int minsize;

  @ffi.Long()
  external int maxsize;

  @ffi.UnsignedLong()
  external int mask;

  @ffi.UnsignedLong()
  external int flags;
}

class stack_st_ASN1_STRING_TABLE extends ffi.Opaque {}

class ASN1_TEMPLATE_st extends ffi.Opaque {}

class ASN1_TLC_st extends ffi.Opaque {}

class ASN1_VALUE_st extends ffi.Opaque {}

class stack_st_ASN1_INTEGER extends ffi.Opaque {}

class stack_st_ASN1_GENERALSTRING extends ffi.Opaque {}

class stack_st_ASN1_UTF8STRING extends ffi.Opaque {}

class asn1_type_st extends ffi.Struct {
  @ffi.Int()
  external int type;

  external UnnamedUnion2 value;
}

class UnnamedUnion2 extends ffi.Union {
  external ffi.Pointer<ffi.Char> ptr;

  @ASN1_BOOLEAN()
  external int boolean;

  external ffi.Pointer<ASN1_STRING> asn1_string;

  external ffi.Pointer<ASN1_OBJECT> object;

  external ffi.Pointer<ASN1_INTEGER> integer;

  external ffi.Pointer<ASN1_ENUMERATED> enumerated;

  external ffi.Pointer<ASN1_BIT_STRING> bit_string;

  external ffi.Pointer<ASN1_OCTET_STRING> octet_string;

  external ffi.Pointer<ASN1_PRINTABLESTRING> printablestring;

  external ffi.Pointer<ASN1_T61STRING> t61string;

  external ffi.Pointer<ASN1_IA5STRING> ia5string;

  external ffi.Pointer<ASN1_GENERALSTRING> generalstring;

  external ffi.Pointer<ASN1_BMPSTRING> bmpstring;

  external ffi.Pointer<ASN1_UNIVERSALSTRING> universalstring;

  external ffi.Pointer<ASN1_UTCTIME> utctime;

  external ffi.Pointer<ASN1_GENERALIZEDTIME> generalizedtime;

  external ffi.Pointer<ASN1_VISIBLESTRING> visiblestring;

  external ffi.Pointer<ASN1_UTF8STRING> utf8string;

  external ffi.Pointer<ASN1_STRING> set1;

  external ffi.Pointer<ASN1_STRING> sequence;

  external ffi.Pointer<ASN1_VALUE> asn1_value;
}

typedef ASN1_BOOLEAN = ffi.Int;
typedef ASN1_STRING = asn1_string_st;
typedef ASN1_OBJECT = asn1_object_st;
typedef ASN1_INTEGER = asn1_string_st;
typedef ASN1_ENUMERATED = asn1_string_st;
typedef ASN1_BIT_STRING = asn1_string_st;
typedef ASN1_OCTET_STRING = asn1_string_st;
typedef ASN1_PRINTABLESTRING = asn1_string_st;
typedef ASN1_T61STRING = asn1_string_st;
typedef ASN1_IA5STRING = asn1_string_st;
typedef ASN1_GENERALSTRING = asn1_string_st;
typedef ASN1_BMPSTRING = asn1_string_st;
typedef ASN1_UNIVERSALSTRING = asn1_string_st;
typedef ASN1_UTCTIME = asn1_string_st;
typedef ASN1_GENERALIZEDTIME = asn1_string_st;
typedef ASN1_VISIBLESTRING = asn1_string_st;
typedef ASN1_UTF8STRING = asn1_string_st;
typedef ASN1_VALUE = ASN1_VALUE_st;

class stack_st_ASN1_TYPE extends ffi.Opaque {}

typedef ASN1_SEQUENCE_ANY = stack_st_ASN1_TYPE;
typedef ASN1_ITEM = ASN1_ITEM_st;

class BIT_STRING_BITNAME_st extends ffi.Struct {
  @ffi.Int()
  external int bitnum;

  external ffi.Pointer<ffi.Char> lname;

  external ffi.Pointer<ffi.Char> sname;
}

typedef ASN1_TYPE = asn1_type_st;

class stack_st_ASN1_OBJECT extends ffi.Opaque {}

typedef BIT_STRING_BITNAME = BIT_STRING_BITNAME_st;
typedef ASN1_TIME = asn1_string_st;
typedef ASN1_NULL = ffi.Int;
typedef i2d_of_void = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>)>;
typedef d2i_of_void = ffi.NativeFunction<
    ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Pointer<ffi.Void>>,
        ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Long)>;
typedef ASN1_STRING_TABLE = asn1_string_table_st;
typedef X509V3_CTX = v3_ext_ctx;
typedef ASN1_PCTX = asn1_pctx_st;
typedef ASN1_SCTX = asn1_sctx_st;
typedef ASN1_TEMPLATE = ASN1_TEMPLATE_st;
typedef BIO_METHOD1 = bio_method_st;

class obj_name_st extends ffi.Struct {
  @ffi.Int()
  external int type;

  @ffi.Int()
  external int alias;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> data;
}

typedef OBJ_NAME = obj_name_st;
typedef EVP_MD = evp_md_st;
typedef EVP_MD_CTX = evp_md_ctx_st;
typedef EVP_CIPHER = evp_cipher_st;
typedef EVP_CIPHER_CTX = evp_cipher_ctx_st;

class evp_cipher_info_st extends ffi.Struct {
  external ffi.Pointer<EVP_CIPHER> cipher;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedChar> iv;
}

typedef EVP_PKEY_CTX = evp_pkey_ctx_st;
typedef ENGINE = engine_st;
typedef EVP_PKEY = evp_pkey_st;
typedef EVP_ENCODE_CTX = evp_Encode_Ctx_st;
typedef EVP_PBE_KEYGEN = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<EVP_CIPHER_CTX>,
        ffi.Pointer<ffi.Char>,
        ffi.Int,
        ffi.Pointer<ASN1_TYPE>,
        ffi.Pointer<EVP_CIPHER>,
        ffi.Pointer<EVP_MD>,
        ffi.Int)>;
typedef EVP_PKEY_ASN1_METHOD = evp_pkey_asn1_method_st;
typedef X509_PUBKEY = X509_pubkey_st;
typedef PKCS8_PRIV_KEY_INFO = pkcs8_priv_key_info_st;
typedef X509_ALGOR = X509_algor_st;
typedef X509_SIG_INFO = x509_sig_info_st;
typedef EVP_PKEY_METHOD = evp_pkey_method_st;
typedef EVP_PKEY_gen_cb
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<EVP_PKEY_CTX>)>;
typedef HMAC_CTX = hmac_ctx_st;
typedef BUF_MEM = buf_mem_st;

abstract class point_conversion_form_t {
  static const int POINT_CONVERSION_COMPRESSED = 2;
  static const int POINT_CONVERSION_UNCOMPRESSED = 4;
  static const int POINT_CONVERSION_HYBRID = 6;
}

class ec_method_st extends ffi.Opaque {}

class ec_group_st extends ffi.Opaque {}

class ec_point_st extends ffi.Opaque {}

class ecpk_parameters_st extends ffi.Opaque {}

class ec_parameters_st extends ffi.Opaque {}

typedef EC_METHOD = ec_method_st;
typedef EC_GROUP = ec_group_st;
typedef EC_POINT = ec_point_st;
typedef ECPARAMETERS = ec_parameters_st;
typedef ECPKPARAMETERS = ecpk_parameters_st;

class EC_builtin_curve extends ffi.Struct {
  @ffi.Int()
  external int nid;

  external ffi.Pointer<ffi.Char> comment;
}

typedef EC_KEY = ec_key_st;
typedef EC_KEY_METHOD = ec_key_method_st;

class ECDSA_SIG_st extends ffi.Opaque {}

typedef ECDSA_SIG = ECDSA_SIG_st;
typedef RSA = rsa_st;
typedef RSA_PSS_PARAMS = rsa_pss_params_st;
typedef RSA_METHOD = rsa_meth_st;

class rsa_oaep_params_st extends ffi.Struct {
  external ffi.Pointer<X509_ALGOR> hashFunc;

  external ffi.Pointer<X509_ALGOR> maskGenFunc;

  external ffi.Pointer<X509_ALGOR> pSourceFunc;

  external ffi.Pointer<X509_ALGOR> maskHash;
}

typedef RSA_OAEP_PARAMS = rsa_oaep_params_st;
typedef DH = dh_st;
typedef DH_METHOD = dh_method;

class DSA_SIG_st extends ffi.Opaque {}

typedef DSA = dsa_st;
typedef DSA_SIG = DSA_SIG_st;
typedef DSA_METHOD = dsa_method;

class SHAstate_st extends ffi.Struct {
  @ffi.UnsignedInt()
  external int h0;

  @ffi.UnsignedInt()
  external int h1;

  @ffi.UnsignedInt()
  external int h2;

  @ffi.UnsignedInt()
  external int h3;

  @ffi.UnsignedInt()
  external int h4;

  @ffi.UnsignedInt()
  external int Nl;

  @ffi.UnsignedInt()
  external int Nh;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedInt> data;

  @ffi.UnsignedInt()
  external int num;
}

typedef SHA_CTX = SHAstate_st;

class SHA256state_st extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedInt> h;

  @ffi.UnsignedInt()
  external int Nl;

  @ffi.UnsignedInt()
  external int Nh;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedInt> data;

  @ffi.UnsignedInt()
  external int num;

  @ffi.UnsignedInt()
  external int md_len;
}

typedef SHA256_CTX = SHA256state_st;

class SHA512state_st extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedLongLong> h;

  @ffi.UnsignedLongLong()
  external int Nl;

  @ffi.UnsignedLongLong()
  external int Nh;

  external UnnamedUnion3 u;

  @ffi.UnsignedInt()
  external int num;

  @ffi.UnsignedInt()
  external int md_len;
}

class UnnamedUnion3 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLongLong> d;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.UnsignedChar> p;
}

typedef SHA512_CTX = SHA512state_st;

class X509_val_st extends ffi.Struct {
  external ffi.Pointer<ASN1_TIME> notBefore;

  external ffi.Pointer<ASN1_TIME> notAfter;
}

class X509_sig_st extends ffi.Opaque {}

class X509_name_entry_st extends ffi.Opaque {}

class stack_st_X509_NAME_ENTRY extends ffi.Opaque {}

class stack_st_X509_NAME extends ffi.Opaque {}

class X509_extension_st extends ffi.Opaque {}

class stack_st_X509_EXTENSION extends ffi.Opaque {}

class x509_attributes_st extends ffi.Opaque {}

class stack_st_X509_ATTRIBUTE extends ffi.Opaque {}

class X509_req_info_st extends ffi.Opaque {}

class X509_req_st extends ffi.Opaque {}

class x509_cert_aux_st extends ffi.Opaque {}

class x509_cinf_st extends ffi.Opaque {}

class stack_st_X509 extends ffi.Opaque {}

class x509_trust_st extends ffi.Struct {
  @ffi.Int()
  external int trust;

  @ffi.Int()
  external int flags;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<x509_trust_st>, ffi.Pointer<X509>, ffi.Int)>>
      check_trust;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Int()
  external int arg1;

  external ffi.Pointer<ffi.Void> arg2;
}

typedef X509 = x509_st;

class stack_st_X509_TRUST extends ffi.Opaque {}

class stack_st_X509_REVOKED extends ffi.Opaque {}

class X509_crl_info_st extends ffi.Opaque {}

class stack_st_X509_CRL extends ffi.Opaque {}

class private_key_st extends ffi.Struct {
  @ffi.Int()
  external int version;

  external ffi.Pointer<X509_ALGOR> enc_algor;

  external ffi.Pointer<ASN1_OCTET_STRING> enc_pkey;

  external ffi.Pointer<EVP_PKEY> dec_pkey;

  @ffi.Int()
  external int key_length;

  external ffi.Pointer<ffi.Char> key_data;

  @ffi.Int()
  external int key_free;

  external EVP_CIPHER_INFO cipher;
}

typedef EVP_CIPHER_INFO = evp_cipher_info_st;

class X509_info_st extends ffi.Struct {
  external ffi.Pointer<X509> x509;

  external ffi.Pointer<X509_CRL> crl;

  external ffi.Pointer<X509_PKEY> x_pkey;

  external EVP_CIPHER_INFO enc_cipher;

  @ffi.Int()
  external int enc_len;

  external ffi.Pointer<ffi.Char> enc_data;
}

typedef X509_CRL = X509_crl_st;
typedef X509_PKEY = private_key_st;

class stack_st_X509_INFO extends ffi.Opaque {}

class Netscape_spkac_st extends ffi.Struct {
  external ffi.Pointer<X509_PUBKEY> pubkey;

  external ffi.Pointer<ASN1_IA5STRING> challenge;
}

class Netscape_spki_st extends ffi.Opaque {}

class Netscape_certificate_sequence extends ffi.Struct {
  external ffi.Pointer<ASN1_OBJECT> type;

  external ffi.Pointer<stack_st_X509> certs;
}

class PBEPARAM_st extends ffi.Struct {
  external ffi.Pointer<ASN1_OCTET_STRING> salt;

  external ffi.Pointer<ASN1_INTEGER> iter;
}

class PBE2PARAM_st extends ffi.Struct {
  external ffi.Pointer<X509_ALGOR> keyfunc;

  external ffi.Pointer<X509_ALGOR> encryption;
}

class PBKDF2PARAM_st extends ffi.Struct {
  external ffi.Pointer<ASN1_TYPE> salt;

  external ffi.Pointer<ASN1_INTEGER> iter;

  external ffi.Pointer<ASN1_INTEGER> keylength;

  external ffi.Pointer<X509_ALGOR> prf;
}

class SCRYPT_PARAMS_st extends ffi.Struct {
  external ffi.Pointer<ASN1_OCTET_STRING> salt;

  external ffi.Pointer<ASN1_INTEGER> costParameter;

  external ffi.Pointer<ASN1_INTEGER> blockSize;

  external ffi.Pointer<ASN1_INTEGER> parallelizationParameter;

  external ffi.Pointer<ASN1_INTEGER> keyLength;
}

abstract class X509_LOOKUP_TYPE {
  static const int X509_LU_NONE = 0;
  static const int X509_LU_X509 = 1;
  static const int X509_LU_CRL = 2;
}

class stack_st_X509_LOOKUP extends ffi.Opaque {}

class stack_st_X509_OBJECT extends ffi.Opaque {}

class stack_st_X509_VERIFY_PARAM extends ffi.Opaque {}

typedef X509_STORE = x509_store_st;
typedef X509_STORE_CTX = x509_store_ctx_st;
typedef X509_NAME = X509_name_st;
typedef X509_OBJECT = x509_object_st;
typedef X509_VERIFY_PARAM = X509_VERIFY_PARAM_st;
typedef X509_STORE_CTX_verify_fn = ffi
    .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_STORE_CTX>)>>;
typedef X509_STORE_CTX_verify_cb = ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<X509_STORE_CTX>)>>;
typedef X509_STORE_CTX_get_issuer_fn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Pointer<X509>>,
            ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<X509>)>>;
typedef X509_STORE_CTX_check_issued_fn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<X509>,
            ffi.Pointer<X509>)>>;
typedef X509_STORE_CTX_check_revocation_fn = ffi
    .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_STORE_CTX>)>>;
typedef X509_STORE_CTX_get_crl_fn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<X509_STORE_CTX>,
            ffi.Pointer<ffi.Pointer<X509_CRL>>, ffi.Pointer<X509>)>>;
typedef X509_STORE_CTX_check_crl_fn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<X509_CRL>)>>;
typedef X509_STORE_CTX_cert_crl_fn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<X509_CRL>,
            ffi.Pointer<X509>)>>;
typedef X509_STORE_CTX_check_policy_fn = ffi
    .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_STORE_CTX>)>>;
typedef X509_STORE_CTX_lookup_certs_fn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<stack_st_X509> Function(
            ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<X509_NAME>)>>;
typedef X509_STORE_CTX_lookup_crls_fn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<stack_st_X509_CRL> Function(
            ffi.Pointer<X509_STORE_CTX>, ffi.Pointer<X509_NAME>)>>;
typedef X509_STORE_CTX_cleanup_fn = ffi
    .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<X509_STORE_CTX>)>>;
typedef X509_LOOKUP = x509_lookup_st;
typedef X509_LOOKUP_METHOD = x509_lookup_method_st;
typedef X509_LOOKUP_ctrl_fn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Pointer<X509_LOOKUP>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Long,
            ffi.Pointer<ffi.Pointer<ffi.Char>>)>>;
typedef X509_LOOKUP_get_by_subject_fn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<X509_LOOKUP>, ffi.Int32,
            ffi.Pointer<X509_NAME>, ffi.Pointer<X509_OBJECT>)>>;
typedef X509_LOOKUP_get_by_issuer_serial_fn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Pointer<X509_LOOKUP>,
            ffi.Int32,
            ffi.Pointer<X509_NAME>,
            ffi.Pointer<ASN1_INTEGER>,
            ffi.Pointer<X509_OBJECT>)>>;
typedef X509_LOOKUP_get_by_fingerprint_fn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<X509_LOOKUP>, ffi.Int32,
            ffi.Pointer<ffi.UnsignedChar>, ffi.Int, ffi.Pointer<X509_OBJECT>)>>;
typedef X509_LOOKUP_get_by_alias_fn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<X509_LOOKUP>, ffi.Int32,
            ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<X509_OBJECT>)>>;
typedef X509_POLICY_TREE = X509_POLICY_TREE_st;
typedef SSL_DANE = ssl_dane_st;
typedef X509_POLICY_LEVEL = X509_POLICY_LEVEL_st;

class stack_st_X509_POLICY_NODE extends ffi.Opaque {}

typedef X509_POLICY_NODE = X509_POLICY_NODE_st;

class stack_st_POLICYQUALINFO extends ffi.Opaque {}

class pkcs7_issuer_and_serial_st extends ffi.Struct {
  external ffi.Pointer<X509_NAME> issuer;

  external ffi.Pointer<ASN1_INTEGER> serial;
}

class pkcs7_signer_info_st extends ffi.Struct {
  external ffi.Pointer<ASN1_INTEGER> version;

  external ffi.Pointer<PKCS7_ISSUER_AND_SERIAL> issuer_and_serial;

  external ffi.Pointer<X509_ALGOR> digest_alg;

  external ffi.Pointer<stack_st_X509_ATTRIBUTE> auth_attr;

  external ffi.Pointer<X509_ALGOR> digest_enc_alg;

  external ffi.Pointer<ASN1_OCTET_STRING> enc_digest;

  external ffi.Pointer<stack_st_X509_ATTRIBUTE> unauth_attr;

  external ffi.Pointer<EVP_PKEY> pkey;
}

typedef PKCS7_ISSUER_AND_SERIAL = pkcs7_issuer_and_serial_st;

class stack_st_PKCS7_SIGNER_INFO extends ffi.Opaque {}

class pkcs7_recip_info_st extends ffi.Struct {
  external ffi.Pointer<ASN1_INTEGER> version;

  external ffi.Pointer<PKCS7_ISSUER_AND_SERIAL> issuer_and_serial;

  external ffi.Pointer<X509_ALGOR> key_enc_algor;

  external ffi.Pointer<ASN1_OCTET_STRING> enc_key;

  external ffi.Pointer<X509> cert;
}

class stack_st_PKCS7_RECIP_INFO extends ffi.Opaque {}

class pkcs7_signed_st extends ffi.Struct {
  external ffi.Pointer<ASN1_INTEGER> version;

  external ffi.Pointer<stack_st_X509_ALGOR> md_algs;

  external ffi.Pointer<stack_st_X509> cert;

  external ffi.Pointer<stack_st_X509_CRL> crl;

  external ffi.Pointer<stack_st_PKCS7_SIGNER_INFO> signer_info;

  external ffi.Pointer<pkcs7_st> contents;
}

class pkcs7_st extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> asn1;

  @ffi.Long()
  external int length;

  @ffi.Int()
  external int state;

  @ffi.Int()
  external int detached;

  external ffi.Pointer<ASN1_OBJECT> type;

  external UnnamedUnion4 d;
}

class UnnamedUnion4 extends ffi.Union {
  external ffi.Pointer<ffi.Char> ptr;

  external ffi.Pointer<ASN1_OCTET_STRING> data;

  external ffi.Pointer<PKCS7_SIGNED> sign;

  external ffi.Pointer<PKCS7_ENVELOPE> enveloped;

  external ffi.Pointer<PKCS7_SIGN_ENVELOPE> signed_and_enveloped;

  external ffi.Pointer<PKCS7_DIGEST> digest;

  external ffi.Pointer<PKCS7_ENCRYPT> encrypted;

  external ffi.Pointer<ASN1_TYPE> other;
}

typedef PKCS7_SIGNED = pkcs7_signed_st;
typedef PKCS7_ENVELOPE = pkcs7_enveloped_st;

class pkcs7_enveloped_st extends ffi.Struct {
  external ffi.Pointer<ASN1_INTEGER> version;

  external ffi.Pointer<stack_st_PKCS7_RECIP_INFO> recipientinfo;

  external ffi.Pointer<PKCS7_ENC_CONTENT> enc_data;
}

typedef PKCS7_ENC_CONTENT = pkcs7_enc_content_st;

class pkcs7_enc_content_st extends ffi.Struct {
  external ffi.Pointer<ASN1_OBJECT> content_type;

  external ffi.Pointer<X509_ALGOR> algorithm;

  external ffi.Pointer<ASN1_OCTET_STRING> enc_data;

  external ffi.Pointer<EVP_CIPHER> cipher;
}

typedef PKCS7_SIGN_ENVELOPE = pkcs7_signedandenveloped_st;

class pkcs7_signedandenveloped_st extends ffi.Struct {
  external ffi.Pointer<ASN1_INTEGER> version;

  external ffi.Pointer<stack_st_X509_ALGOR> md_algs;

  external ffi.Pointer<stack_st_X509> cert;

  external ffi.Pointer<stack_st_X509_CRL> crl;

  external ffi.Pointer<stack_st_PKCS7_SIGNER_INFO> signer_info;

  external ffi.Pointer<PKCS7_ENC_CONTENT> enc_data;

  external ffi.Pointer<stack_st_PKCS7_RECIP_INFO> recipientinfo;
}

typedef PKCS7_DIGEST = pkcs7_digest_st;

class pkcs7_digest_st extends ffi.Struct {
  external ffi.Pointer<ASN1_INTEGER> version;

  external ffi.Pointer<X509_ALGOR> md;

  external ffi.Pointer<pkcs7_st> contents;

  external ffi.Pointer<ASN1_OCTET_STRING> digest;
}

typedef PKCS7_ENCRYPT = pkcs7_encrypted_st;

class pkcs7_encrypted_st extends ffi.Struct {
  external ffi.Pointer<ASN1_INTEGER> version;

  external ffi.Pointer<PKCS7_ENC_CONTENT> enc_data;
}

class stack_st_PKCS7 extends ffi.Opaque {}

typedef PKCS7 = pkcs7_st;
typedef PKCS7_SIGNER_INFO = pkcs7_signer_info_st;
typedef PKCS7_RECIP_INFO = pkcs7_recip_info_st;
typedef X509_CRL_METHOD = x509_crl_method_st;
typedef X509_REVOKED = x509_revoked_st;
typedef X509_REQ = X509_req_st;
typedef NETSCAPE_SPKI = Netscape_spki_st;
typedef OCSP_REQ_CTX = ocsp_req_ctx_st;
typedef X509_SIG = X509_sig_st;
typedef X509_ATTRIBUTE = x509_attributes_st;
typedef X509_EXTENSION = X509_extension_st;
typedef X509_NAME_ENTRY = X509_name_entry_st;
typedef X509_ALGORS = stack_st_X509_ALGOR;
typedef X509_VAL = X509_val_st;
typedef X509_REQ_INFO = X509_req_info_st;
typedef X509_EXTENSIONS = stack_st_X509_EXTENSION;
typedef X509_CINF = x509_cinf_st;
typedef X509_CERT_AUX = x509_cert_aux_st;
typedef X509_CRL_INFO = X509_crl_info_st;
typedef NETSCAPE_SPKAC = Netscape_spkac_st;
typedef NETSCAPE_CERT_SEQUENCE = Netscape_certificate_sequence;
typedef X509_INFO = X509_info_st;
typedef PBEPARAM = PBEPARAM_st;
typedef PBE2PARAM = PBE2PARAM_st;
typedef PBKDF2PARAM = PBKDF2PARAM_st;
typedef SCRYPT_PARAMS = SCRYPT_PARAMS_st;
typedef X509_TRUST = x509_trust_st;
typedef pem_password_cb = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>;
typedef UI = ui_st;
typedef UI_METHOD = ui_method_st;

class ui_string_st extends ffi.Opaque {}

class stack_st_UI_STRING extends ffi.Opaque {}

abstract class UI_string_types {
  static const int UIT_NONE = 0;
  static const int UIT_PROMPT = 1;
  static const int UIT_VERIFY = 2;
  static const int UIT_BOOLEAN = 3;
  static const int UIT_INFO = 4;
  static const int UIT_ERROR = 5;
}

typedef UI_STRING = ui_string_st;
typedef pem_password_cb1 = ffi.NativeFunction<
    ffi.Int Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>)>;

const int PTHREAD_CREATE_JOINABLE = 0;

const int PTHREAD_CREATE_DETACHED = 1;

const int PTHREAD_MUTEX_TIMED_NP = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP = 3;

const int PTHREAD_MUTEX_NORMAL = 0;

const int PTHREAD_MUTEX_RECURSIVE = 1;

const int PTHREAD_MUTEX_ERRORCHECK = 2;

const int PTHREAD_MUTEX_DEFAULT = 0;

const int PTHREAD_MUTEX_STALLED = 0;

const int PTHREAD_MUTEX_STALLED_NP = 0;

const int PTHREAD_MUTEX_ROBUST = 1;

const int PTHREAD_MUTEX_ROBUST_NP = 1;

const int PTHREAD_PRIO_NONE = 0;

const int PTHREAD_PRIO_INHERIT = 1;

const int PTHREAD_PRIO_PROTECT = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP = 0;

const int PTHREAD_INHERIT_SCHED = 0;

const int PTHREAD_EXPLICIT_SCHED = 1;

const int PTHREAD_SCOPE_SYSTEM = 0;

const int PTHREAD_SCOPE_PROCESS = 1;

const int PTHREAD_PROCESS_PRIVATE = 0;

const int PTHREAD_PROCESS_SHARED = 1;

const int PTHREAD_CANCEL_ENABLE = 0;

const int PTHREAD_CANCEL_DISABLE = 1;

const int PTHREAD_CANCEL_DEFERRED = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS = 1;

const int OPENSSL_VERSION_NUMBER = 269488415;

const String OPENSSL_VERSION_TEXT = 'OpenSSL 1.1.1q  5 Jul 2022';

const String SHLIB_VERSION_HISTORY = '';

const String SHLIB_VERSION_NUMBER = '1.1';

const String OPENSSL_FILE = 'temp_for_macros.hpp';

const int OPENSSL_LINE = 40;

const int OPENSSL_MIN_API = 0;

const int OPENSSL_API_COMPAT = 0;

const int OSSL_SSIZE_MAX = 9223372036854775807;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 36;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int _STDINT_H = 1;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int _STDIO_H = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int _BITS_STDIO_LIM_H = 1;

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _ALLOCA_H = 1;

const int _TIME_H = 1;

const int _BITS_TIME_H = 1;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_REALTIME_COARSE = 5;

const int CLOCK_MONOTONIC_COARSE = 6;

const int CLOCK_BOOTTIME = 7;

const int CLOCK_REALTIME_ALARM = 8;

const int CLOCK_BOOTTIME_ALARM = 9;

const int CLOCK_TAI = 11;

const int TIMER_ABSTIME = 1;

const int __struct_tm_defined = 1;

const int __itimerspec_defined = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int TIME_UTC = 1;

const int _LIBC_LIMITS_H_ = 1;

const int MB_LEN_MAX = 16;

const int LLONG_MIN = -9223372036854775808;

const int LLONG_MAX = 9223372036854775807;

const int ULLONG_MAX = -1;

const int _BITS_POSIX1_LIM_H = 1;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_RE_DUP_MAX = 255;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int NGROUPS_MAX = 65536;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int NAME_MAX = 255;

const int PATH_MAX = 4096;

const int PIPE_BUF = 4096;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

const int XATTR_LIST_MAX = 65536;

const int RTSIG_MAX = 32;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int PTHREAD_KEYS_MAX = 1024;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int AIO_PRIO_DELTA_MAX = 20;

const int DELAYTIMER_MAX = 2147483647;

const int TTY_NAME_MAX = 32;

const int LOGIN_NAME_MAX = 256;

const int HOST_NAME_MAX = 64;

const int MQ_PRIO_MAX = 32768;

const int SEM_VALUE_MAX = 2147483647;

const int _BITS_POSIX2_LIM_H = 1;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int COLL_WEIGHTS_MAX = 255;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int CHARCLASS_NAME_MAX = 2048;

const int RE_DUP_MAX = 32767;

const int CRYPTO_F_CMAC_CTX_NEW = 120;

const int CRYPTO_F_CRYPTO_DUP_EX_DATA = 110;

const int CRYPTO_F_CRYPTO_FREE_EX_DATA = 111;

const int CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX = 100;

const int CRYPTO_F_CRYPTO_MEMDUP = 115;

const int CRYPTO_F_CRYPTO_NEW_EX_DATA = 112;

const int CRYPTO_F_CRYPTO_OCB128_COPY_CTX = 121;

const int CRYPTO_F_CRYPTO_OCB128_INIT = 122;

const int CRYPTO_F_CRYPTO_SET_EX_DATA = 102;

const int CRYPTO_F_FIPS_MODE_SET = 109;

const int CRYPTO_F_GET_AND_LOCK = 113;

const int CRYPTO_F_OPENSSL_ATEXIT = 114;

const int CRYPTO_F_OPENSSL_BUF2HEXSTR = 117;

const int CRYPTO_F_OPENSSL_FOPEN = 119;

const int CRYPTO_F_OPENSSL_HEXSTR2BUF = 118;

const int CRYPTO_F_OPENSSL_INIT_CRYPTO = 116;

const int CRYPTO_F_OPENSSL_LH_NEW = 126;

const int CRYPTO_F_OPENSSL_SK_DEEP_COPY = 127;

const int CRYPTO_F_OPENSSL_SK_DUP = 128;

const int CRYPTO_F_PKEY_HMAC_INIT = 123;

const int CRYPTO_F_PKEY_POLY1305_INIT = 124;

const int CRYPTO_F_PKEY_SIPHASH_INIT = 125;

const int CRYPTO_F_SK_RESERVE = 129;

const int CRYPTO_R_FIPS_MODE_NOT_SUPPORTED = 101;

const int CRYPTO_R_ILLEGAL_HEX_DIGIT = 102;

const int CRYPTO_R_ODD_NUMBER_OF_DIGITS = 103;

const int SSLEAY_VERSION_NUMBER = 269488415;

const int SSLEAY_VERSION = 0;

const int SSLEAY_CFLAGS = 1;

const int SSLEAY_BUILT_ON = 2;

const int SSLEAY_PLATFORM = 3;

const int SSLEAY_DIR = 4;

const int CRYPTO_MEM_CHECK_OFF = 0;

const int CRYPTO_MEM_CHECK_ON = 1;

const int CRYPTO_MEM_CHECK_ENABLE = 2;

const int CRYPTO_MEM_CHECK_DISABLE = 3;

const int CRYPTO_EX_INDEX_SSL = 0;

const int CRYPTO_EX_INDEX_SSL_CTX = 1;

const int CRYPTO_EX_INDEX_SSL_SESSION = 2;

const int CRYPTO_EX_INDEX_X509 = 3;

const int CRYPTO_EX_INDEX_X509_STORE = 4;

const int CRYPTO_EX_INDEX_X509_STORE_CTX = 5;

const int CRYPTO_EX_INDEX_DH = 6;

const int CRYPTO_EX_INDEX_DSA = 7;

const int CRYPTO_EX_INDEX_EC_KEY = 8;

const int CRYPTO_EX_INDEX_RSA = 9;

const int CRYPTO_EX_INDEX_ENGINE = 10;

const int CRYPTO_EX_INDEX_UI = 11;

const int CRYPTO_EX_INDEX_BIO = 12;

const int CRYPTO_EX_INDEX_APP = 13;

const int CRYPTO_EX_INDEX_UI_METHOD = 14;

const int CRYPTO_EX_INDEX_DRBG = 15;

const int CRYPTO_EX_INDEX__COUNT = 16;

const int OPENSSL_VERSION = 0;

const int OPENSSL_CFLAGS = 1;

const int OPENSSL_BUILT_ON = 2;

const int OPENSSL_PLATFORM = 3;

const int OPENSSL_DIR = 4;

const int OPENSSL_ENGINES_DIR = 5;

const int CRYPTO_LOCK = 1;

const int CRYPTO_UNLOCK = 2;

const int CRYPTO_READ = 4;

const int CRYPTO_WRITE = 8;

const int OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS = 1;

const int OPENSSL_INIT_LOAD_CRYPTO_STRINGS = 2;

const int OPENSSL_INIT_ADD_ALL_CIPHERS = 4;

const int OPENSSL_INIT_ADD_ALL_DIGESTS = 8;

const int OPENSSL_INIT_NO_ADD_ALL_CIPHERS = 16;

const int OPENSSL_INIT_NO_ADD_ALL_DIGESTS = 32;

const int OPENSSL_INIT_LOAD_CONFIG = 64;

const int OPENSSL_INIT_NO_LOAD_CONFIG = 128;

const int OPENSSL_INIT_ASYNC = 256;

const int OPENSSL_INIT_ENGINE_RDRAND = 512;

const int OPENSSL_INIT_ENGINE_DYNAMIC = 1024;

const int OPENSSL_INIT_ENGINE_OPENSSL = 2048;

const int OPENSSL_INIT_ENGINE_CRYPTODEV = 4096;

const int OPENSSL_INIT_ENGINE_CAPI = 8192;

const int OPENSSL_INIT_ENGINE_PADLOCK = 16384;

const int OPENSSL_INIT_ENGINE_AFALG = 32768;

const int OPENSSL_INIT_ATFORK = 131072;

const int OPENSSL_INIT_NO_ATEXIT = 524288;

const int OPENSSL_INIT_ENGINE_ALL_BUILTIN = 30208;

const int _PTHREAD_H = 1;

const int _SCHED_H = 1;

const int _BITS_SCHED_H = 1;

const int SCHED_OTHER = 0;

const int SCHED_FIFO = 1;

const int SCHED_RR = 2;

const int _BITS_TYPES_STRUCT_SCHED_PARAM = 1;

const int _BITS_CPU_SET_H = 1;

const int __CPU_SETSIZE = 1024;

const int __NCPUBITS = 64;

const int _BITS_SETJMP_H = 1;

const int __jmp_buf_tag_defined = 1;

const int PTHREAD_CREATE_JOINABLE1 = 0;

const int PTHREAD_CREATE_DETACHED1 = 1;

const int PTHREAD_INHERIT_SCHED1 = 0;

const int PTHREAD_EXPLICIT_SCHED1 = 1;

const int PTHREAD_SCOPE_SYSTEM1 = 0;

const int PTHREAD_SCOPE_PROCESS1 = 1;

const int PTHREAD_PROCESS_PRIVATE1 = 0;

const int PTHREAD_PROCESS_SHARED1 = 1;

const int PTHREAD_CANCEL_ENABLE1 = 0;

const int PTHREAD_CANCEL_DISABLE1 = 1;

const int PTHREAD_CANCEL_DEFERRED1 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS1 = 1;

const int PTHREAD_ONCE_INIT = 0;

const int PTHREAD_BARRIER_SERIAL_THREAD = -1;

const int CRYPTO_ONCE_STATIC_INIT = 0;

const int BIO_F_ACPT_STATE = 100;

const int BIO_F_ADDRINFO_WRAP = 148;

const int BIO_F_ADDR_STRINGS = 134;

const int BIO_F_BIO_ACCEPT = 101;

const int BIO_F_BIO_ACCEPT_EX = 137;

const int BIO_F_BIO_ACCEPT_NEW = 152;

const int BIO_F_BIO_ADDR_NEW = 144;

const int BIO_F_BIO_BIND = 147;

const int BIO_F_BIO_CALLBACK_CTRL = 131;

const int BIO_F_BIO_CONNECT = 138;

const int BIO_F_BIO_CONNECT_NEW = 153;

const int BIO_F_BIO_CTRL = 103;

const int BIO_F_BIO_GETS = 104;

const int BIO_F_BIO_GET_HOST_IP = 106;

const int BIO_F_BIO_GET_NEW_INDEX = 102;

const int BIO_F_BIO_GET_PORT = 107;

const int BIO_F_BIO_LISTEN = 139;

const int BIO_F_BIO_LOOKUP = 135;

const int BIO_F_BIO_LOOKUP_EX = 143;

const int BIO_F_BIO_MAKE_PAIR = 121;

const int BIO_F_BIO_METH_NEW = 146;

const int BIO_F_BIO_NEW = 108;

const int BIO_F_BIO_NEW_DGRAM_SCTP = 145;

const int BIO_F_BIO_NEW_FILE = 109;

const int BIO_F_BIO_NEW_MEM_BUF = 126;

const int BIO_F_BIO_NREAD = 123;

const int BIO_F_BIO_NREAD0 = 124;

const int BIO_F_BIO_NWRITE = 125;

const int BIO_F_BIO_NWRITE0 = 122;

const int BIO_F_BIO_PARSE_HOSTSERV = 136;

const int BIO_F_BIO_PUTS = 110;

const int BIO_F_BIO_READ = 111;

const int BIO_F_BIO_READ_EX = 105;

const int BIO_F_BIO_READ_INTERN = 120;

const int BIO_F_BIO_SOCKET = 140;

const int BIO_F_BIO_SOCKET_NBIO = 142;

const int BIO_F_BIO_SOCK_INFO = 141;

const int BIO_F_BIO_SOCK_INIT = 112;

const int BIO_F_BIO_WRITE = 113;

const int BIO_F_BIO_WRITE_EX = 119;

const int BIO_F_BIO_WRITE_INTERN = 128;

const int BIO_F_BUFFER_CTRL = 114;

const int BIO_F_CONN_CTRL = 127;

const int BIO_F_CONN_STATE = 115;

const int BIO_F_DGRAM_SCTP_NEW = 149;

const int BIO_F_DGRAM_SCTP_READ = 132;

const int BIO_F_DGRAM_SCTP_WRITE = 133;

const int BIO_F_DOAPR_OUTCH = 150;

const int BIO_F_FILE_CTRL = 116;

const int BIO_F_FILE_READ = 130;

const int BIO_F_LINEBUFFER_CTRL = 129;

const int BIO_F_LINEBUFFER_NEW = 151;

const int BIO_F_MEM_WRITE = 117;

const int BIO_F_NBIOF_NEW = 154;

const int BIO_F_SLG_WRITE = 155;

const int BIO_F_SSL_NEW = 118;

const int BIO_R_ACCEPT_ERROR = 100;

const int BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET = 141;

const int BIO_R_AMBIGUOUS_HOST_OR_SERVICE = 129;

const int BIO_R_BAD_FOPEN_MODE = 101;

const int BIO_R_BROKEN_PIPE = 124;

const int BIO_R_CONNECT_ERROR = 103;

const int BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET = 107;

const int BIO_R_GETSOCKNAME_ERROR = 132;

const int BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS = 133;

const int BIO_R_GETTING_SOCKTYPE = 134;

const int BIO_R_INVALID_ARGUMENT = 125;

const int BIO_R_INVALID_SOCKET = 135;

const int BIO_R_IN_USE = 123;

const int BIO_R_LENGTH_TOO_LONG = 102;

const int BIO_R_LISTEN_V6_ONLY = 136;

const int BIO_R_LOOKUP_RETURNED_NOTHING = 142;

const int BIO_R_MALFORMED_HOST_OR_SERVICE = 130;

const int BIO_R_NBIO_CONNECT_ERROR = 110;

const int BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED = 143;

const int BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED = 144;

const int BIO_R_NO_PORT_DEFINED = 113;

const int BIO_R_NO_SUCH_FILE = 128;

const int BIO_R_NULL_PARAMETER = 115;

const int BIO_R_UNABLE_TO_BIND_SOCKET = 117;

const int BIO_R_UNABLE_TO_CREATE_SOCKET = 118;

const int BIO_R_UNABLE_TO_KEEPALIVE = 137;

const int BIO_R_UNABLE_TO_LISTEN_SOCKET = 119;

const int BIO_R_UNABLE_TO_NODELAY = 138;

const int BIO_R_UNABLE_TO_REUSEADDR = 139;

const int BIO_R_UNAVAILABLE_IP_FAMILY = 145;

const int BIO_R_UNINITIALIZED = 120;

const int BIO_R_UNKNOWN_INFO_TYPE = 140;

const int BIO_R_UNSUPPORTED_IP_FAMILY = 146;

const int BIO_R_UNSUPPORTED_METHOD = 121;

const int BIO_R_UNSUPPORTED_PROTOCOL_FAMILY = 131;

const int BIO_R_WRITE_TO_READ_ONLY_BIO = 126;

const int BIO_R_WSASTARTUP = 122;

const int BIO_TYPE_DESCRIPTOR = 256;

const int BIO_TYPE_FILTER = 512;

const int BIO_TYPE_SOURCE_SINK = 1024;

const int BIO_TYPE_NONE = 0;

const int BIO_TYPE_MEM = 1025;

const int BIO_TYPE_FILE = 1026;

const int BIO_TYPE_FD = 1284;

const int BIO_TYPE_SOCKET = 1285;

const int BIO_TYPE_NULL = 1030;

const int BIO_TYPE_SSL = 519;

const int BIO_TYPE_MD = 520;

const int BIO_TYPE_BUFFER = 521;

const int BIO_TYPE_CIPHER = 522;

const int BIO_TYPE_BASE64 = 523;

const int BIO_TYPE_CONNECT = 1292;

const int BIO_TYPE_ACCEPT = 1293;

const int BIO_TYPE_NBIO_TEST = 528;

const int BIO_TYPE_NULL_FILTER = 529;

const int BIO_TYPE_BIO = 1043;

const int BIO_TYPE_LINEBUFFER = 532;

const int BIO_TYPE_DGRAM = 1301;

const int BIO_TYPE_ASN1 = 534;

const int BIO_TYPE_COMP = 535;

const int BIO_TYPE_START = 128;

const int BIO_NOCLOSE = 0;

const int BIO_CLOSE = 1;

const int BIO_CTRL_RESET = 1;

const int BIO_CTRL_EOF = 2;

const int BIO_CTRL_INFO = 3;

const int BIO_CTRL_SET = 4;

const int BIO_CTRL_GET = 5;

const int BIO_CTRL_PUSH = 6;

const int BIO_CTRL_POP = 7;

const int BIO_CTRL_GET_CLOSE = 8;

const int BIO_CTRL_SET_CLOSE = 9;

const int BIO_CTRL_PENDING = 10;

const int BIO_CTRL_FLUSH = 11;

const int BIO_CTRL_DUP = 12;

const int BIO_CTRL_WPENDING = 13;

const int BIO_CTRL_SET_CALLBACK = 14;

const int BIO_CTRL_GET_CALLBACK = 15;

const int BIO_CTRL_PEEK = 29;

const int BIO_CTRL_SET_FILENAME = 30;

const int BIO_CTRL_DGRAM_CONNECT = 31;

const int BIO_CTRL_DGRAM_SET_CONNECTED = 32;

const int BIO_CTRL_DGRAM_SET_RECV_TIMEOUT = 33;

const int BIO_CTRL_DGRAM_GET_RECV_TIMEOUT = 34;

const int BIO_CTRL_DGRAM_SET_SEND_TIMEOUT = 35;

const int BIO_CTRL_DGRAM_GET_SEND_TIMEOUT = 36;

const int BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP = 37;

const int BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP = 38;

const int BIO_CTRL_DGRAM_MTU_DISCOVER = 39;

const int BIO_CTRL_DGRAM_QUERY_MTU = 40;

const int BIO_CTRL_DGRAM_GET_FALLBACK_MTU = 47;

const int BIO_CTRL_DGRAM_GET_MTU = 41;

const int BIO_CTRL_DGRAM_SET_MTU = 42;

const int BIO_CTRL_DGRAM_MTU_EXCEEDED = 43;

const int BIO_CTRL_DGRAM_GET_PEER = 46;

const int BIO_CTRL_DGRAM_SET_PEER = 44;

const int BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT = 45;

const int BIO_CTRL_DGRAM_SET_DONT_FRAG = 48;

const int BIO_CTRL_DGRAM_GET_MTU_OVERHEAD = 49;

const int BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE = 50;

const int BIO_CTRL_DGRAM_SET_PEEK_MODE = 71;

const int BIO_FP_READ = 2;

const int BIO_FP_WRITE = 4;

const int BIO_FP_APPEND = 8;

const int BIO_FP_TEXT = 16;

const int BIO_FLAGS_READ = 1;

const int BIO_FLAGS_WRITE = 2;

const int BIO_FLAGS_IO_SPECIAL = 4;

const int BIO_FLAGS_RWS = 7;

const int BIO_FLAGS_SHOULD_RETRY = 8;

const int BIO_FLAGS_UPLINK = 0;

const int BIO_FLAGS_BASE64_NO_NL = 256;

const int BIO_FLAGS_MEM_RDONLY = 512;

const int BIO_FLAGS_NONCLEAR_RST = 1024;

const int BIO_FLAGS_IN_EOF = 2048;

const int BIO_RR_SSL_X509_LOOKUP = 1;

const int BIO_RR_CONNECT = 2;

const int BIO_RR_ACCEPT = 3;

const int BIO_CB_FREE = 1;

const int BIO_CB_READ = 2;

const int BIO_CB_WRITE = 3;

const int BIO_CB_PUTS = 4;

const int BIO_CB_GETS = 5;

const int BIO_CB_CTRL = 6;

const int BIO_CB_RETURN = 128;

const int BIO_C_SET_CONNECT = 100;

const int BIO_C_DO_STATE_MACHINE = 101;

const int BIO_C_SET_NBIO = 102;

const int BIO_C_SET_FD = 104;

const int BIO_C_GET_FD = 105;

const int BIO_C_SET_FILE_PTR = 106;

const int BIO_C_GET_FILE_PTR = 107;

const int BIO_C_SET_FILENAME = 108;

const int BIO_C_SET_SSL = 109;

const int BIO_C_GET_SSL = 110;

const int BIO_C_SET_MD = 111;

const int BIO_C_GET_MD = 112;

const int BIO_C_GET_CIPHER_STATUS = 113;

const int BIO_C_SET_BUF_MEM = 114;

const int BIO_C_GET_BUF_MEM_PTR = 115;

const int BIO_C_GET_BUFF_NUM_LINES = 116;

const int BIO_C_SET_BUFF_SIZE = 117;

const int BIO_C_SET_ACCEPT = 118;

const int BIO_C_SSL_MODE = 119;

const int BIO_C_GET_MD_CTX = 120;

const int BIO_C_SET_BUFF_READ_DATA = 122;

const int BIO_C_GET_CONNECT = 123;

const int BIO_C_GET_ACCEPT = 124;

const int BIO_C_SET_SSL_RENEGOTIATE_BYTES = 125;

const int BIO_C_GET_SSL_NUM_RENEGOTIATES = 126;

const int BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT = 127;

const int BIO_C_FILE_SEEK = 128;

const int BIO_C_GET_CIPHER_CTX = 129;

const int BIO_C_SET_BUF_MEM_EOF_RETURN = 130;

const int BIO_C_SET_BIND_MODE = 131;

const int BIO_C_GET_BIND_MODE = 132;

const int BIO_C_FILE_TELL = 133;

const int BIO_C_GET_SOCKS = 134;

const int BIO_C_SET_SOCKS = 135;

const int BIO_C_SET_WRITE_BUF_SIZE = 136;

const int BIO_C_GET_WRITE_BUF_SIZE = 137;

const int BIO_C_MAKE_BIO_PAIR = 138;

const int BIO_C_DESTROY_BIO_PAIR = 139;

const int BIO_C_GET_WRITE_GUARANTEE = 140;

const int BIO_C_GET_READ_REQUEST = 141;

const int BIO_C_SHUTDOWN_WR = 142;

const int BIO_C_NREAD0 = 143;

const int BIO_C_NREAD = 144;

const int BIO_C_NWRITE0 = 145;

const int BIO_C_NWRITE = 146;

const int BIO_C_RESET_READ_REQUEST = 147;

const int BIO_C_SET_MD_CTX = 148;

const int BIO_C_SET_PREFIX = 149;

const int BIO_C_GET_PREFIX = 150;

const int BIO_C_SET_SUFFIX = 151;

const int BIO_C_GET_SUFFIX = 152;

const int BIO_C_SET_EX_ARG = 153;

const int BIO_C_GET_EX_ARG = 154;

const int BIO_C_SET_CONNECT_MODE = 155;

const int BIO_FAMILY_IPV4 = 4;

const int BIO_FAMILY_IPV6 = 6;

const int BIO_FAMILY_IPANY = 256;

const int BIO_BIND_NORMAL = 0;

const int BIO_BIND_REUSEADDR = 1;

const int BIO_BIND_REUSEADDR_IF_UNUSED = 1;

const int BIO_SOCK_REUSEADDR = 1;

const int BIO_SOCK_V6_ONLY = 2;

const int BIO_SOCK_KEEPALIVE = 4;

const int BIO_SOCK_NONBLOCK = 8;

const int BIO_SOCK_NODELAY = 16;

const int LH_LOAD_MULT = 256;

const int CONF_F_CONF_DUMP_FP = 104;

const int CONF_F_CONF_LOAD = 100;

const int CONF_F_CONF_LOAD_FP = 103;

const int CONF_F_CONF_PARSE_LIST = 119;

const int CONF_F_DEF_LOAD = 120;

const int CONF_F_DEF_LOAD_BIO = 121;

const int CONF_F_GET_NEXT_FILE = 107;

const int CONF_F_MODULE_ADD = 122;

const int CONF_F_MODULE_INIT = 115;

const int CONF_F_MODULE_LOAD_DSO = 117;

const int CONF_F_MODULE_RUN = 118;

const int CONF_F_NCONF_DUMP_BIO = 105;

const int CONF_F_NCONF_DUMP_FP = 106;

const int CONF_F_NCONF_GET_NUMBER_E = 112;

const int CONF_F_NCONF_GET_SECTION = 108;

const int CONF_F_NCONF_GET_STRING = 109;

const int CONF_F_NCONF_LOAD = 113;

const int CONF_F_NCONF_LOAD_BIO = 110;

const int CONF_F_NCONF_LOAD_FP = 114;

const int CONF_F_NCONF_NEW = 111;

const int CONF_F_PROCESS_INCLUDE = 116;

const int CONF_F_SSL_MODULE_INIT = 123;

const int CONF_F_STR_COPY = 101;

const int CONF_R_ERROR_LOADING_DSO = 110;

const int CONF_R_LIST_CANNOT_BE_NULL = 115;

const int CONF_R_MISSING_CLOSE_SQUARE_BRACKET = 100;

const int CONF_R_MISSING_EQUAL_SIGN = 101;

const int CONF_R_MISSING_INIT_FUNCTION = 112;

const int CONF_R_MODULE_INITIALIZATION_ERROR = 109;

const int CONF_R_NO_CLOSE_BRACE = 102;

const int CONF_R_NO_CONF = 105;

const int CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE = 106;

const int CONF_R_NO_SECTION = 107;

const int CONF_R_NO_SUCH_FILE = 114;

const int CONF_R_NO_VALUE = 108;

const int CONF_R_NUMBER_TOO_LARGE = 121;

const int CONF_R_RECURSIVE_DIRECTORY_INCLUDE = 111;

const int CONF_R_SSL_COMMAND_SECTION_EMPTY = 117;

const int CONF_R_SSL_COMMAND_SECTION_NOT_FOUND = 118;

const int CONF_R_SSL_SECTION_EMPTY = 119;

const int CONF_R_SSL_SECTION_NOT_FOUND = 120;

const int CONF_R_UNABLE_TO_CREATE_NEW_SECTION = 103;

const int CONF_R_UNKNOWN_MODULE_NAME = 113;

const int CONF_R_VARIABLE_EXPANSION_TOO_LONG = 116;

const int CONF_R_VARIABLE_HAS_NO_VALUE = 104;

const int CONF_MFLAGS_IGNORE_ERRORS = 1;

const int CONF_MFLAGS_IGNORE_RETURN_CODES = 2;

const int CONF_MFLAGS_SILENT = 4;

const int CONF_MFLAGS_NO_DSO = 8;

const int CONF_MFLAGS_IGNORE_MISSING_FILE = 16;

const int CONF_MFLAGS_DEFAULT_SECTION = 32;

const int _ERRNO_H = 1;

const int _BITS_ERRNO_H = 1;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int ENOTBLK = 15;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int EINVAL = 22;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int ETXTBSY = 26;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int ERANGE = 34;

const int EDEADLK = 35;

const int ENAMETOOLONG = 36;

const int ENOLCK = 37;

const int ENOSYS = 38;

const int ENOTEMPTY = 39;

const int ELOOP = 40;

const int EWOULDBLOCK = 11;

const int ENOMSG = 42;

const int EIDRM = 43;

const int ECHRNG = 44;

const int EL2NSYNC = 45;

const int EL3HLT = 46;

const int EL3RST = 47;

const int ELNRNG = 48;

const int EUNATCH = 49;

const int ENOCSI = 50;

const int EL2HLT = 51;

const int EBADE = 52;

const int EBADR = 53;

const int EXFULL = 54;

const int ENOANO = 55;

const int EBADRQC = 56;

const int EBADSLT = 57;

const int EDEADLOCK = 35;

const int EBFONT = 59;

const int ENOSTR = 60;

const int ENODATA = 61;

const int ETIME = 62;

const int ENOSR = 63;

const int ENONET = 64;

const int ENOPKG = 65;

const int EREMOTE = 66;

const int ENOLINK = 67;

const int EADV = 68;

const int ESRMNT = 69;

const int ECOMM = 70;

const int EPROTO = 71;

const int EMULTIHOP = 72;

const int EDOTDOT = 73;

const int EBADMSG = 74;

const int EOVERFLOW = 75;

const int ENOTUNIQ = 76;

const int EBADFD = 77;

const int EREMCHG = 78;

const int ELIBACC = 79;

const int ELIBBAD = 80;

const int ELIBSCN = 81;

const int ELIBMAX = 82;

const int ELIBEXEC = 83;

const int EILSEQ = 84;

const int ERESTART = 85;

const int ESTRPIPE = 86;

const int EUSERS = 87;

const int ENOTSOCK = 88;

const int EDESTADDRREQ = 89;

const int EMSGSIZE = 90;

const int EPROTOTYPE = 91;

const int ENOPROTOOPT = 92;

const int EPROTONOSUPPORT = 93;

const int ESOCKTNOSUPPORT = 94;

const int EOPNOTSUPP = 95;

const int EPFNOSUPPORT = 96;

const int EAFNOSUPPORT = 97;

const int EADDRINUSE = 98;

const int EADDRNOTAVAIL = 99;

const int ENETDOWN = 100;

const int ENETUNREACH = 101;

const int ENETRESET = 102;

const int ECONNABORTED = 103;

const int ECONNRESET = 104;

const int ENOBUFS = 105;

const int EISCONN = 106;

const int ENOTCONN = 107;

const int ESHUTDOWN = 108;

const int ETOOMANYREFS = 109;

const int ETIMEDOUT = 110;

const int ECONNREFUSED = 111;

const int EHOSTDOWN = 112;

const int EHOSTUNREACH = 113;

const int EALREADY = 114;

const int EINPROGRESS = 115;

const int ESTALE = 116;

const int EUCLEAN = 117;

const int ENOTNAM = 118;

const int ENAVAIL = 119;

const int EISNAM = 120;

const int EREMOTEIO = 121;

const int EDQUOT = 122;

const int ENOMEDIUM = 123;

const int EMEDIUMTYPE = 124;

const int ECANCELED = 125;

const int ENOKEY = 126;

const int EKEYEXPIRED = 127;

const int EKEYREVOKED = 128;

const int EKEYREJECTED = 129;

const int EOWNERDEAD = 130;

const int ENOTRECOVERABLE = 131;

const int ERFKILL = 132;

const int EHWPOISON = 133;

const int ENOTSUP = 95;

const int ERR_TXT_MALLOCED = 1;

const int ERR_TXT_STRING = 2;

const int ERR_FLAG_MARK = 1;

const int ERR_FLAG_CLEAR = 2;

const int ERR_NUM_ERRORS = 16;

const int ERR_LIB_NONE = 1;

const int ERR_LIB_SYS = 2;

const int ERR_LIB_BN = 3;

const int ERR_LIB_RSA = 4;

const int ERR_LIB_DH = 5;

const int ERR_LIB_EVP = 6;

const int ERR_LIB_BUF = 7;

const int ERR_LIB_OBJ = 8;

const int ERR_LIB_PEM = 9;

const int ERR_LIB_DSA = 10;

const int ERR_LIB_X509 = 11;

const int ERR_LIB_ASN1 = 13;

const int ERR_LIB_CONF = 14;

const int ERR_LIB_CRYPTO = 15;

const int ERR_LIB_EC = 16;

const int ERR_LIB_SSL = 20;

const int ERR_LIB_BIO = 32;

const int ERR_LIB_PKCS7 = 33;

const int ERR_LIB_X509V3 = 34;

const int ERR_LIB_PKCS12 = 35;

const int ERR_LIB_RAND = 36;

const int ERR_LIB_DSO = 37;

const int ERR_LIB_ENGINE = 38;

const int ERR_LIB_OCSP = 39;

const int ERR_LIB_UI = 40;

const int ERR_LIB_COMP = 41;

const int ERR_LIB_ECDSA = 42;

const int ERR_LIB_ECDH = 43;

const int ERR_LIB_OSSL_STORE = 44;

const int ERR_LIB_FIPS = 45;

const int ERR_LIB_CMS = 46;

const int ERR_LIB_TS = 47;

const int ERR_LIB_HMAC = 48;

const int ERR_LIB_CT = 50;

const int ERR_LIB_ASYNC = 51;

const int ERR_LIB_KDF = 52;

const int ERR_LIB_SM2 = 53;

const int ERR_LIB_USER = 128;

const int SYS_F_FOPEN = 1;

const int SYS_F_CONNECT = 2;

const int SYS_F_GETSERVBYNAME = 3;

const int SYS_F_SOCKET = 4;

const int SYS_F_IOCTLSOCKET = 5;

const int SYS_F_BIND = 6;

const int SYS_F_LISTEN = 7;

const int SYS_F_ACCEPT = 8;

const int SYS_F_WSASTARTUP = 9;

const int SYS_F_OPENDIR = 10;

const int SYS_F_FREAD = 11;

const int SYS_F_GETADDRINFO = 12;

const int SYS_F_GETNAMEINFO = 13;

const int SYS_F_SETSOCKOPT = 14;

const int SYS_F_GETSOCKOPT = 15;

const int SYS_F_GETSOCKNAME = 16;

const int SYS_F_GETHOSTBYNAME = 17;

const int SYS_F_FFLUSH = 18;

const int SYS_F_OPEN = 19;

const int SYS_F_CLOSE = 20;

const int SYS_F_IOCTL = 21;

const int SYS_F_STAT = 22;

const int SYS_F_FCNTL = 23;

const int SYS_F_FSTAT = 24;

const int ERR_R_SYS_LIB = 2;

const int ERR_R_BN_LIB = 3;

const int ERR_R_RSA_LIB = 4;

const int ERR_R_DH_LIB = 5;

const int ERR_R_EVP_LIB = 6;

const int ERR_R_BUF_LIB = 7;

const int ERR_R_OBJ_LIB = 8;

const int ERR_R_PEM_LIB = 9;

const int ERR_R_DSA_LIB = 10;

const int ERR_R_X509_LIB = 11;

const int ERR_R_ASN1_LIB = 13;

const int ERR_R_EC_LIB = 16;

const int ERR_R_BIO_LIB = 32;

const int ERR_R_PKCS7_LIB = 33;

const int ERR_R_X509V3_LIB = 34;

const int ERR_R_ENGINE_LIB = 38;

const int ERR_R_UI_LIB = 40;

const int ERR_R_ECDSA_LIB = 42;

const int ERR_R_OSSL_STORE_LIB = 44;

const int ERR_R_NESTED_ASN1_ERROR = 58;

const int ERR_R_MISSING_ASN1_EOS = 63;

const int ERR_R_FATAL = 64;

const int ERR_R_MALLOC_FAILURE = 65;

const int ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED = 66;

const int ERR_R_PASSED_NULL_PARAMETER = 67;

const int ERR_R_INTERNAL_ERROR = 68;

const int ERR_R_DISABLED = 69;

const int ERR_R_INIT_FAIL = 70;

const int ERR_R_PASSED_INVALID_ARGUMENT = 7;

const int ERR_R_OPERATION_FAIL = 72;

const int EVP_F_AESNI_INIT_KEY = 165;

const int EVP_F_AESNI_XTS_INIT_KEY = 207;

const int EVP_F_AES_GCM_CTRL = 196;

const int EVP_F_AES_INIT_KEY = 133;

const int EVP_F_AES_OCB_CIPHER = 169;

const int EVP_F_AES_T4_INIT_KEY = 178;

const int EVP_F_AES_T4_XTS_INIT_KEY = 208;

const int EVP_F_AES_WRAP_CIPHER = 170;

const int EVP_F_AES_XTS_INIT_KEY = 209;

const int EVP_F_ALG_MODULE_INIT = 177;

const int EVP_F_ARIA_CCM_INIT_KEY = 175;

const int EVP_F_ARIA_GCM_CTRL = 197;

const int EVP_F_ARIA_GCM_INIT_KEY = 176;

const int EVP_F_ARIA_INIT_KEY = 185;

const int EVP_F_B64_NEW = 198;

const int EVP_F_CAMELLIA_INIT_KEY = 159;

const int EVP_F_CHACHA20_POLY1305_CTRL = 182;

const int EVP_F_CMLL_T4_INIT_KEY = 179;

const int EVP_F_DES_EDE3_WRAP_CIPHER = 171;

const int EVP_F_DO_SIGVER_INIT = 161;

const int EVP_F_ENC_NEW = 199;

const int EVP_F_EVP_CIPHERINIT_EX = 123;

const int EVP_F_EVP_CIPHER_ASN1_TO_PARAM = 204;

const int EVP_F_EVP_CIPHER_CTX_COPY = 163;

const int EVP_F_EVP_CIPHER_CTX_CTRL = 124;

const int EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH = 122;

const int EVP_F_EVP_CIPHER_PARAM_TO_ASN1 = 205;

const int EVP_F_EVP_DECRYPTFINAL_EX = 101;

const int EVP_F_EVP_DECRYPTUPDATE = 166;

const int EVP_F_EVP_DIGESTFINALXOF = 174;

const int EVP_F_EVP_DIGESTINIT_EX = 128;

const int EVP_F_EVP_ENCRYPTDECRYPTUPDATE = 219;

const int EVP_F_EVP_ENCRYPTFINAL_EX = 127;

const int EVP_F_EVP_ENCRYPTUPDATE = 167;

const int EVP_F_EVP_MD_CTX_COPY_EX = 110;

const int EVP_F_EVP_MD_SIZE = 162;

const int EVP_F_EVP_OPENINIT = 102;

const int EVP_F_EVP_PBE_ALG_ADD = 115;

const int EVP_F_EVP_PBE_ALG_ADD_TYPE = 160;

const int EVP_F_EVP_PBE_CIPHERINIT = 116;

const int EVP_F_EVP_PBE_SCRYPT = 181;

const int EVP_F_EVP_PKCS82PKEY = 111;

const int EVP_F_EVP_PKEY2PKCS8 = 113;

const int EVP_F_EVP_PKEY_ASN1_ADD0 = 188;

const int EVP_F_EVP_PKEY_CHECK = 186;

const int EVP_F_EVP_PKEY_COPY_PARAMETERS = 103;

const int EVP_F_EVP_PKEY_CTX_CTRL = 137;

const int EVP_F_EVP_PKEY_CTX_CTRL_STR = 150;

const int EVP_F_EVP_PKEY_CTX_DUP = 156;

const int EVP_F_EVP_PKEY_CTX_MD = 168;

const int EVP_F_EVP_PKEY_DECRYPT = 104;

const int EVP_F_EVP_PKEY_DECRYPT_INIT = 138;

const int EVP_F_EVP_PKEY_DECRYPT_OLD = 151;

const int EVP_F_EVP_PKEY_DERIVE = 153;

const int EVP_F_EVP_PKEY_DERIVE_INIT = 154;

const int EVP_F_EVP_PKEY_DERIVE_SET_PEER = 155;

const int EVP_F_EVP_PKEY_ENCRYPT = 105;

const int EVP_F_EVP_PKEY_ENCRYPT_INIT = 139;

const int EVP_F_EVP_PKEY_ENCRYPT_OLD = 152;

const int EVP_F_EVP_PKEY_GET0_DH = 119;

const int EVP_F_EVP_PKEY_GET0_DSA = 120;

const int EVP_F_EVP_PKEY_GET0_EC_KEY = 131;

const int EVP_F_EVP_PKEY_GET0_HMAC = 183;

const int EVP_F_EVP_PKEY_GET0_POLY1305 = 184;

const int EVP_F_EVP_PKEY_GET0_RSA = 121;

const int EVP_F_EVP_PKEY_GET0_SIPHASH = 172;

const int EVP_F_EVP_PKEY_GET_RAW_PRIVATE_KEY = 202;

const int EVP_F_EVP_PKEY_GET_RAW_PUBLIC_KEY = 203;

const int EVP_F_EVP_PKEY_KEYGEN = 146;

const int EVP_F_EVP_PKEY_KEYGEN_INIT = 147;

const int EVP_F_EVP_PKEY_METH_ADD0 = 194;

const int EVP_F_EVP_PKEY_METH_NEW = 195;

const int EVP_F_EVP_PKEY_NEW = 106;

const int EVP_F_EVP_PKEY_NEW_CMAC_KEY = 193;

const int EVP_F_EVP_PKEY_NEW_RAW_PRIVATE_KEY = 191;

const int EVP_F_EVP_PKEY_NEW_RAW_PUBLIC_KEY = 192;

const int EVP_F_EVP_PKEY_PARAMGEN = 148;

const int EVP_F_EVP_PKEY_PARAMGEN_INIT = 149;

const int EVP_F_EVP_PKEY_PARAM_CHECK = 189;

const int EVP_F_EVP_PKEY_PUBLIC_CHECK = 190;

const int EVP_F_EVP_PKEY_SET1_ENGINE = 187;

const int EVP_F_EVP_PKEY_SET_ALIAS_TYPE = 206;

const int EVP_F_EVP_PKEY_SIGN = 140;

const int EVP_F_EVP_PKEY_SIGN_INIT = 141;

const int EVP_F_EVP_PKEY_VERIFY = 142;

const int EVP_F_EVP_PKEY_VERIFY_INIT = 143;

const int EVP_F_EVP_PKEY_VERIFY_RECOVER = 144;

const int EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT = 145;

const int EVP_F_EVP_SIGNFINAL = 107;

const int EVP_F_EVP_VERIFYFINAL = 108;

const int EVP_F_INT_CTX_NEW = 157;

const int EVP_F_OK_NEW = 200;

const int EVP_F_PKCS5_PBE_KEYIVGEN = 117;

const int EVP_F_PKCS5_V2_PBE_KEYIVGEN = 118;

const int EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN = 164;

const int EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN = 180;

const int EVP_F_PKEY_SET_TYPE = 158;

const int EVP_F_RC2_MAGIC_TO_METH = 109;

const int EVP_F_RC5_CTRL = 125;

const int EVP_F_R_32_12_16_INIT_KEY = 242;

const int EVP_F_S390X_AES_GCM_CTRL = 201;

const int EVP_F_UPDATE = 173;

const int EVP_R_AES_KEY_SETUP_FAILED = 143;

const int EVP_R_ARIA_KEY_SETUP_FAILED = 176;

const int EVP_R_BAD_DECRYPT = 100;

const int EVP_R_BAD_KEY_LENGTH = 195;

const int EVP_R_BUFFER_TOO_SMALL = 155;

const int EVP_R_CAMELLIA_KEY_SETUP_FAILED = 157;

const int EVP_R_CIPHER_PARAMETER_ERROR = 122;

const int EVP_R_COMMAND_NOT_SUPPORTED = 147;

const int EVP_R_COPY_ERROR = 173;

const int EVP_R_CTRL_NOT_IMPLEMENTED = 132;

const int EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED = 133;

const int EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH = 138;

const int EVP_R_DECODE_ERROR = 114;

const int EVP_R_DIFFERENT_KEY_TYPES = 101;

const int EVP_R_DIFFERENT_PARAMETERS = 153;

const int EVP_R_ERROR_LOADING_SECTION = 165;

const int EVP_R_ERROR_SETTING_FIPS_MODE = 166;

const int EVP_R_EXPECTING_AN_HMAC_KEY = 174;

const int EVP_R_EXPECTING_AN_RSA_KEY = 127;

const int EVP_R_EXPECTING_A_DH_KEY = 128;

const int EVP_R_EXPECTING_A_DSA_KEY = 129;

const int EVP_R_EXPECTING_A_EC_KEY = 142;

const int EVP_R_EXPECTING_A_POLY1305_KEY = 164;

const int EVP_R_EXPECTING_A_SIPHASH_KEY = 175;

const int EVP_R_FIPS_MODE_NOT_SUPPORTED = 167;

const int EVP_R_GET_RAW_KEY_FAILED = 182;

const int EVP_R_ILLEGAL_SCRYPT_PARAMETERS = 171;

const int EVP_R_INITIALIZATION_ERROR = 134;

const int EVP_R_INPUT_NOT_INITIALIZED = 111;

const int EVP_R_INVALID_DIGEST = 152;

const int EVP_R_INVALID_FIPS_MODE = 168;

const int EVP_R_INVALID_IV_LENGTH = 194;

const int EVP_R_INVALID_KEY = 163;

const int EVP_R_INVALID_KEY_LENGTH = 130;

const int EVP_R_INVALID_OPERATION = 148;

const int EVP_R_KEYGEN_FAILURE = 120;

const int EVP_R_KEY_SETUP_FAILED = 180;

const int EVP_R_MEMORY_LIMIT_EXCEEDED = 172;

const int EVP_R_MESSAGE_DIGEST_IS_NULL = 159;

const int EVP_R_METHOD_NOT_SUPPORTED = 144;

const int EVP_R_MISSING_PARAMETERS = 103;

const int EVP_R_NOT_XOF_OR_INVALID_LENGTH = 178;

const int EVP_R_NO_CIPHER_SET = 131;

const int EVP_R_NO_DEFAULT_DIGEST = 158;

const int EVP_R_NO_DIGEST_SET = 139;

const int EVP_R_NO_KEY_SET = 154;

const int EVP_R_NO_OPERATION_SET = 149;

const int EVP_R_ONLY_ONESHOT_SUPPORTED = 177;

const int EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE = 150;

const int EVP_R_OPERATON_NOT_INITIALIZED = 151;

const int EVP_R_OUTPUT_WOULD_OVERFLOW = 184;

const int EVP_R_PARTIALLY_OVERLAPPING = 162;

const int EVP_R_PBKDF2_ERROR = 181;

const int EVP_R_PKEY_APPLICATION_ASN1_METHOD_ALREADY_REGISTERED = 179;

const int EVP_R_PRIVATE_KEY_DECODE_ERROR = 145;

const int EVP_R_PRIVATE_KEY_ENCODE_ERROR = 146;

const int EVP_R_PUBLIC_KEY_NOT_RSA = 106;

const int EVP_R_UNKNOWN_CIPHER = 160;

const int EVP_R_UNKNOWN_DIGEST = 161;

const int EVP_R_UNKNOWN_OPTION = 169;

const int EVP_R_UNKNOWN_PBE_ALGORITHM = 121;

const int EVP_R_UNSUPPORTED_ALGORITHM = 156;

const int EVP_R_UNSUPPORTED_CIPHER = 107;

const int EVP_R_UNSUPPORTED_KEYLENGTH = 123;

const int EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION = 124;

const int EVP_R_UNSUPPORTED_KEY_SIZE = 108;

const int EVP_R_UNSUPPORTED_NUMBER_OF_ROUNDS = 135;

const int EVP_R_UNSUPPORTED_PRF = 125;

const int EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM = 118;

const int EVP_R_UNSUPPORTED_SALT_TYPE = 126;

const int EVP_R_WRAP_MODE_NOT_ALLOWED = 170;

const int EVP_R_WRONG_FINAL_BLOCK_LENGTH = 109;

const int EVP_R_XTS_DUPLICATED_KEYS = 183;

const int EVP_MAX_MD_SIZE = 64;

const int EVP_MAX_KEY_LENGTH = 64;

const int EVP_MAX_IV_LENGTH = 16;

const int EVP_MAX_BLOCK_LENGTH = 32;

const int PKCS5_SALT_LEN = 8;

const int PKCS5_DEFAULT_ITER = 2048;

const String SN_undef = 'UNDEF';

const String LN_undef = 'undefined';

const int NID_undef = 0;

const int OBJ_undef = 0;

const String SN_itu_t = 'ITU-T';

const String LN_itu_t = 'itu-t';

const int NID_itu_t = 645;

const int OBJ_itu_t = 0;

const int NID_ccitt = 404;

const int OBJ_ccitt = 0;

const String SN_iso = 'ISO';

const String LN_iso = 'iso';

const int NID_iso = 181;

const int OBJ_iso = 1;

const String SN_joint_iso_itu_t = 'JOINT-ISO-ITU-T';

const String LN_joint_iso_itu_t = 'joint-iso-itu-t';

const int NID_joint_iso_itu_t = 646;

const int OBJ_joint_iso_itu_t = 2;

const int NID_joint_iso_ccitt = 393;

const int OBJ_joint_iso_ccitt = 2;

const String SN_member_body = 'member-body';

const String LN_member_body = 'ISO Member Body';

const int NID_member_body = 182;

const int OBJ_member_body = 1;

const String SN_identified_organization = 'identified-organization';

const int NID_identified_organization = 676;

const int OBJ_identified_organization = 1;

const String SN_hmac_md5 = 'HMAC-MD5';

const String LN_hmac_md5 = 'hmac-md5';

const int NID_hmac_md5 = 780;

const int OBJ_hmac_md5 = 1;

const String SN_hmac_sha1 = 'HMAC-SHA1';

const String LN_hmac_sha1 = 'hmac-sha1';

const int NID_hmac_sha1 = 781;

const int OBJ_hmac_sha1 = 1;

const String SN_x509ExtAdmission = 'x509ExtAdmission';

const String LN_x509ExtAdmission =
    'Professional Information or basis for Admission';

const int NID_x509ExtAdmission = 1093;

const int OBJ_x509ExtAdmission = 1;

const String SN_certicom_arc = 'certicom-arc';

const int NID_certicom_arc = 677;

const int OBJ_certicom_arc = 1;

const String SN_ieee = 'ieee';

const int NID_ieee = 1170;

const int OBJ_ieee = 1;

const String SN_ieee_siswg = 'ieee-siswg';

const String LN_ieee_siswg = 'IEEE Security in Storage Working Group';

const int NID_ieee_siswg = 1171;

const int OBJ_ieee_siswg = 1;

const String SN_international_organizations = 'international-organizations';

const String LN_international_organizations = 'International Organizations';

const int NID_international_organizations = 647;

const int OBJ_international_organizations = 2;

const String SN_wap = 'wap';

const int NID_wap = 678;

const int OBJ_wap = 2;

const String SN_wap_wsg = 'wap-wsg';

const int NID_wap_wsg = 679;

const int OBJ_wap_wsg = 2;

const String SN_selected_attribute_types = 'selected-attribute-types';

const String LN_selected_attribute_types = 'Selected Attribute Types';

const int NID_selected_attribute_types = 394;

const int OBJ_selected_attribute_types = 2;

const String SN_clearance = 'clearance';

const int NID_clearance = 395;

const int OBJ_clearance = 2;

const String SN_ISO_US = 'ISO-US';

const String LN_ISO_US = 'ISO US Member Body';

const int NID_ISO_US = 183;

const int OBJ_ISO_US = 1;

const String SN_X9_57 = 'X9-57';

const String LN_X9_57 = 'X9.57';

const int NID_X9_57 = 184;

const int OBJ_X9_57 = 1;

const String SN_X9cm = 'X9cm';

const String LN_X9cm = 'X9.57 CM ?';

const int NID_X9cm = 185;

const int OBJ_X9cm = 1;

const String SN_ISO_CN = 'ISO-CN';

const String LN_ISO_CN = 'ISO CN Member Body';

const int NID_ISO_CN = 1140;

const int OBJ_ISO_CN = 1;

const String SN_oscca = 'oscca';

const int NID_oscca = 1141;

const int OBJ_oscca = 1;

const String SN_sm_scheme = 'sm-scheme';

const int NID_sm_scheme = 1142;

const int OBJ_sm_scheme = 1;

const String SN_dsa = 'DSA';

const String LN_dsa = 'dsaEncryption';

const int NID_dsa = 116;

const int OBJ_dsa = 1;

const String SN_dsaWithSHA1 = 'DSA-SHA1';

const String LN_dsaWithSHA1 = 'dsaWithSHA1';

const int NID_dsaWithSHA1 = 113;

const int OBJ_dsaWithSHA1 = 1;

const String SN_ansi_X9_62 = 'ansi-X9-62';

const String LN_ansi_X9_62 = 'ANSI X9.62';

const int NID_ansi_X9_62 = 405;

const int OBJ_ansi_X9_62 = 1;

const int OBJ_X9_62_id_fieldType = 1;

const String SN_X9_62_prime_field = 'prime-field';

const int NID_X9_62_prime_field = 406;

const int OBJ_X9_62_prime_field = 1;

const String SN_X9_62_characteristic_two_field = 'characteristic-two-field';

const int NID_X9_62_characteristic_two_field = 407;

const int OBJ_X9_62_characteristic_two_field = 1;

const String SN_X9_62_id_characteristic_two_basis =
    'id-characteristic-two-basis';

const int NID_X9_62_id_characteristic_two_basis = 680;

const int OBJ_X9_62_id_characteristic_two_basis = 1;

const String SN_X9_62_onBasis = 'onBasis';

const int NID_X9_62_onBasis = 681;

const int OBJ_X9_62_onBasis = 1;

const String SN_X9_62_tpBasis = 'tpBasis';

const int NID_X9_62_tpBasis = 682;

const int OBJ_X9_62_tpBasis = 1;

const String SN_X9_62_ppBasis = 'ppBasis';

const int NID_X9_62_ppBasis = 683;

const int OBJ_X9_62_ppBasis = 1;

const int OBJ_X9_62_id_publicKeyType = 1;

const String SN_X9_62_id_ecPublicKey = 'id-ecPublicKey';

const int NID_X9_62_id_ecPublicKey = 408;

const int OBJ_X9_62_id_ecPublicKey = 1;

const int OBJ_X9_62_ellipticCurve = 1;

const int OBJ_X9_62_c_TwoCurve = 1;

const String SN_X9_62_c2pnb163v1 = 'c2pnb163v1';

const int NID_X9_62_c2pnb163v1 = 684;

const int OBJ_X9_62_c2pnb163v1 = 1;

const String SN_X9_62_c2pnb163v2 = 'c2pnb163v2';

const int NID_X9_62_c2pnb163v2 = 685;

const int OBJ_X9_62_c2pnb163v2 = 1;

const String SN_X9_62_c2pnb163v3 = 'c2pnb163v3';

const int NID_X9_62_c2pnb163v3 = 686;

const int OBJ_X9_62_c2pnb163v3 = 1;

const String SN_X9_62_c2pnb176v1 = 'c2pnb176v1';

const int NID_X9_62_c2pnb176v1 = 687;

const int OBJ_X9_62_c2pnb176v1 = 1;

const String SN_X9_62_c2tnb191v1 = 'c2tnb191v1';

const int NID_X9_62_c2tnb191v1 = 688;

const int OBJ_X9_62_c2tnb191v1 = 1;

const String SN_X9_62_c2tnb191v2 = 'c2tnb191v2';

const int NID_X9_62_c2tnb191v2 = 689;

const int OBJ_X9_62_c2tnb191v2 = 1;

const String SN_X9_62_c2tnb191v3 = 'c2tnb191v3';

const int NID_X9_62_c2tnb191v3 = 690;

const int OBJ_X9_62_c2tnb191v3 = 1;

const String SN_X9_62_c2onb191v4 = 'c2onb191v4';

const int NID_X9_62_c2onb191v4 = 691;

const int OBJ_X9_62_c2onb191v4 = 1;

const String SN_X9_62_c2onb191v5 = 'c2onb191v5';

const int NID_X9_62_c2onb191v5 = 692;

const int OBJ_X9_62_c2onb191v5 = 1;

const String SN_X9_62_c2pnb208w1 = 'c2pnb208w1';

const int NID_X9_62_c2pnb208w1 = 693;

const int OBJ_X9_62_c2pnb208w1 = 1;

const String SN_X9_62_c2tnb239v1 = 'c2tnb239v1';

const int NID_X9_62_c2tnb239v1 = 694;

const int OBJ_X9_62_c2tnb239v1 = 1;

const String SN_X9_62_c2tnb239v2 = 'c2tnb239v2';

const int NID_X9_62_c2tnb239v2 = 695;

const int OBJ_X9_62_c2tnb239v2 = 1;

const String SN_X9_62_c2tnb239v3 = 'c2tnb239v3';

const int NID_X9_62_c2tnb239v3 = 696;

const int OBJ_X9_62_c2tnb239v3 = 1;

const String SN_X9_62_c2onb239v4 = 'c2onb239v4';

const int NID_X9_62_c2onb239v4 = 697;

const int OBJ_X9_62_c2onb239v4 = 1;

const String SN_X9_62_c2onb239v5 = 'c2onb239v5';

const int NID_X9_62_c2onb239v5 = 698;

const int OBJ_X9_62_c2onb239v5 = 1;

const String SN_X9_62_c2pnb272w1 = 'c2pnb272w1';

const int NID_X9_62_c2pnb272w1 = 699;

const int OBJ_X9_62_c2pnb272w1 = 1;

const String SN_X9_62_c2pnb304w1 = 'c2pnb304w1';

const int NID_X9_62_c2pnb304w1 = 700;

const int OBJ_X9_62_c2pnb304w1 = 1;

const String SN_X9_62_c2tnb359v1 = 'c2tnb359v1';

const int NID_X9_62_c2tnb359v1 = 701;

const int OBJ_X9_62_c2tnb359v1 = 1;

const String SN_X9_62_c2pnb368w1 = 'c2pnb368w1';

const int NID_X9_62_c2pnb368w1 = 702;

const int OBJ_X9_62_c2pnb368w1 = 1;

const String SN_X9_62_c2tnb431r1 = 'c2tnb431r1';

const int NID_X9_62_c2tnb431r1 = 703;

const int OBJ_X9_62_c2tnb431r1 = 1;

const int OBJ_X9_62_primeCurve = 1;

const String SN_X9_62_prime192v1 = 'prime192v1';

const int NID_X9_62_prime192v1 = 409;

const int OBJ_X9_62_prime192v1 = 1;

const String SN_X9_62_prime192v2 = 'prime192v2';

const int NID_X9_62_prime192v2 = 410;

const int OBJ_X9_62_prime192v2 = 1;

const String SN_X9_62_prime192v3 = 'prime192v3';

const int NID_X9_62_prime192v3 = 411;

const int OBJ_X9_62_prime192v3 = 1;

const String SN_X9_62_prime239v1 = 'prime239v1';

const int NID_X9_62_prime239v1 = 412;

const int OBJ_X9_62_prime239v1 = 1;

const String SN_X9_62_prime239v2 = 'prime239v2';

const int NID_X9_62_prime239v2 = 413;

const int OBJ_X9_62_prime239v2 = 1;

const String SN_X9_62_prime239v3 = 'prime239v3';

const int NID_X9_62_prime239v3 = 414;

const int OBJ_X9_62_prime239v3 = 1;

const String SN_X9_62_prime256v1 = 'prime256v1';

const int NID_X9_62_prime256v1 = 415;

const int OBJ_X9_62_prime256v1 = 1;

const int OBJ_X9_62_id_ecSigType = 1;

const String SN_ecdsa_with_SHA1 = 'ecdsa-with-SHA1';

const int NID_ecdsa_with_SHA1 = 416;

const int OBJ_ecdsa_with_SHA1 = 1;

const String SN_ecdsa_with_Recommended = 'ecdsa-with-Recommended';

const int NID_ecdsa_with_Recommended = 791;

const int OBJ_ecdsa_with_Recommended = 1;

const String SN_ecdsa_with_Specified = 'ecdsa-with-Specified';

const int NID_ecdsa_with_Specified = 792;

const int OBJ_ecdsa_with_Specified = 1;

const String SN_ecdsa_with_SHA224 = 'ecdsa-with-SHA224';

const int NID_ecdsa_with_SHA224 = 793;

const int OBJ_ecdsa_with_SHA224 = 1;

const String SN_ecdsa_with_SHA256 = 'ecdsa-with-SHA256';

const int NID_ecdsa_with_SHA256 = 794;

const int OBJ_ecdsa_with_SHA256 = 1;

const String SN_ecdsa_with_SHA384 = 'ecdsa-with-SHA384';

const int NID_ecdsa_with_SHA384 = 795;

const int OBJ_ecdsa_with_SHA384 = 1;

const String SN_ecdsa_with_SHA512 = 'ecdsa-with-SHA512';

const int NID_ecdsa_with_SHA512 = 796;

const int OBJ_ecdsa_with_SHA512 = 1;

const int OBJ_secg_ellipticCurve = 1;

const String SN_secp112r1 = 'secp112r1';

const int NID_secp112r1 = 704;

const int OBJ_secp112r1 = 1;

const String SN_secp112r2 = 'secp112r2';

const int NID_secp112r2 = 705;

const int OBJ_secp112r2 = 1;

const String SN_secp128r1 = 'secp128r1';

const int NID_secp128r1 = 706;

const int OBJ_secp128r1 = 1;

const String SN_secp128r2 = 'secp128r2';

const int NID_secp128r2 = 707;

const int OBJ_secp128r2 = 1;

const String SN_secp160k1 = 'secp160k1';

const int NID_secp160k1 = 708;

const int OBJ_secp160k1 = 1;

const String SN_secp160r1 = 'secp160r1';

const int NID_secp160r1 = 709;

const int OBJ_secp160r1 = 1;

const String SN_secp160r2 = 'secp160r2';

const int NID_secp160r2 = 710;

const int OBJ_secp160r2 = 1;

const String SN_secp192k1 = 'secp192k1';

const int NID_secp192k1 = 711;

const int OBJ_secp192k1 = 1;

const String SN_secp224k1 = 'secp224k1';

const int NID_secp224k1 = 712;

const int OBJ_secp224k1 = 1;

const String SN_secp224r1 = 'secp224r1';

const int NID_secp224r1 = 713;

const int OBJ_secp224r1 = 1;

const String SN_secp256k1 = 'secp256k1';

const int NID_secp256k1 = 714;

const int OBJ_secp256k1 = 1;

const String SN_secp384r1 = 'secp384r1';

const int NID_secp384r1 = 715;

const int OBJ_secp384r1 = 1;

const String SN_secp521r1 = 'secp521r1';

const int NID_secp521r1 = 716;

const int OBJ_secp521r1 = 1;

const String SN_sect113r1 = 'sect113r1';

const int NID_sect113r1 = 717;

const int OBJ_sect113r1 = 1;

const String SN_sect113r2 = 'sect113r2';

const int NID_sect113r2 = 718;

const int OBJ_sect113r2 = 1;

const String SN_sect131r1 = 'sect131r1';

const int NID_sect131r1 = 719;

const int OBJ_sect131r1 = 1;

const String SN_sect131r2 = 'sect131r2';

const int NID_sect131r2 = 720;

const int OBJ_sect131r2 = 1;

const String SN_sect163k1 = 'sect163k1';

const int NID_sect163k1 = 721;

const int OBJ_sect163k1 = 1;

const String SN_sect163r1 = 'sect163r1';

const int NID_sect163r1 = 722;

const int OBJ_sect163r1 = 1;

const String SN_sect163r2 = 'sect163r2';

const int NID_sect163r2 = 723;

const int OBJ_sect163r2 = 1;

const String SN_sect193r1 = 'sect193r1';

const int NID_sect193r1 = 724;

const int OBJ_sect193r1 = 1;

const String SN_sect193r2 = 'sect193r2';

const int NID_sect193r2 = 725;

const int OBJ_sect193r2 = 1;

const String SN_sect233k1 = 'sect233k1';

const int NID_sect233k1 = 726;

const int OBJ_sect233k1 = 1;

const String SN_sect233r1 = 'sect233r1';

const int NID_sect233r1 = 727;

const int OBJ_sect233r1 = 1;

const String SN_sect239k1 = 'sect239k1';

const int NID_sect239k1 = 728;

const int OBJ_sect239k1 = 1;

const String SN_sect283k1 = 'sect283k1';

const int NID_sect283k1 = 729;

const int OBJ_sect283k1 = 1;

const String SN_sect283r1 = 'sect283r1';

const int NID_sect283r1 = 730;

const int OBJ_sect283r1 = 1;

const String SN_sect409k1 = 'sect409k1';

const int NID_sect409k1 = 731;

const int OBJ_sect409k1 = 1;

const String SN_sect409r1 = 'sect409r1';

const int NID_sect409r1 = 732;

const int OBJ_sect409r1 = 1;

const String SN_sect571k1 = 'sect571k1';

const int NID_sect571k1 = 733;

const int OBJ_sect571k1 = 1;

const String SN_sect571r1 = 'sect571r1';

const int NID_sect571r1 = 734;

const int OBJ_sect571r1 = 1;

const int OBJ_wap_wsg_idm_ecid = 2;

const String SN_wap_wsg_idm_ecid_wtls1 = 'wap-wsg-idm-ecid-wtls1';

const int NID_wap_wsg_idm_ecid_wtls1 = 735;

const int OBJ_wap_wsg_idm_ecid_wtls1 = 2;

const String SN_wap_wsg_idm_ecid_wtls3 = 'wap-wsg-idm-ecid-wtls3';

const int NID_wap_wsg_idm_ecid_wtls3 = 736;

const int OBJ_wap_wsg_idm_ecid_wtls3 = 2;

const String SN_wap_wsg_idm_ecid_wtls4 = 'wap-wsg-idm-ecid-wtls4';

const int NID_wap_wsg_idm_ecid_wtls4 = 737;

const int OBJ_wap_wsg_idm_ecid_wtls4 = 2;

const String SN_wap_wsg_idm_ecid_wtls5 = 'wap-wsg-idm-ecid-wtls5';

const int NID_wap_wsg_idm_ecid_wtls5 = 738;

const int OBJ_wap_wsg_idm_ecid_wtls5 = 2;

const String SN_wap_wsg_idm_ecid_wtls6 = 'wap-wsg-idm-ecid-wtls6';

const int NID_wap_wsg_idm_ecid_wtls6 = 739;

const int OBJ_wap_wsg_idm_ecid_wtls6 = 2;

const String SN_wap_wsg_idm_ecid_wtls7 = 'wap-wsg-idm-ecid-wtls7';

const int NID_wap_wsg_idm_ecid_wtls7 = 740;

const int OBJ_wap_wsg_idm_ecid_wtls7 = 2;

const String SN_wap_wsg_idm_ecid_wtls8 = 'wap-wsg-idm-ecid-wtls8';

const int NID_wap_wsg_idm_ecid_wtls8 = 741;

const int OBJ_wap_wsg_idm_ecid_wtls8 = 2;

const String SN_wap_wsg_idm_ecid_wtls9 = 'wap-wsg-idm-ecid-wtls9';

const int NID_wap_wsg_idm_ecid_wtls9 = 742;

const int OBJ_wap_wsg_idm_ecid_wtls9 = 2;

const String SN_wap_wsg_idm_ecid_wtls10 = 'wap-wsg-idm-ecid-wtls10';

const int NID_wap_wsg_idm_ecid_wtls10 = 743;

const int OBJ_wap_wsg_idm_ecid_wtls10 = 2;

const String SN_wap_wsg_idm_ecid_wtls11 = 'wap-wsg-idm-ecid-wtls11';

const int NID_wap_wsg_idm_ecid_wtls11 = 744;

const int OBJ_wap_wsg_idm_ecid_wtls11 = 2;

const String SN_wap_wsg_idm_ecid_wtls12 = 'wap-wsg-idm-ecid-wtls12';

const int NID_wap_wsg_idm_ecid_wtls12 = 745;

const int OBJ_wap_wsg_idm_ecid_wtls12 = 2;

const String SN_cast5_cbc = 'CAST5-CBC';

const String LN_cast5_cbc = 'cast5-cbc';

const int NID_cast5_cbc = 108;

const int OBJ_cast5_cbc = 1;

const String SN_cast5_ecb = 'CAST5-ECB';

const String LN_cast5_ecb = 'cast5-ecb';

const int NID_cast5_ecb = 109;

const String SN_cast5_cfb64 = 'CAST5-CFB';

const String LN_cast5_cfb64 = 'cast5-cfb';

const int NID_cast5_cfb64 = 110;

const String SN_cast5_ofb64 = 'CAST5-OFB';

const String LN_cast5_ofb64 = 'cast5-ofb';

const int NID_cast5_ofb64 = 111;

const String LN_pbeWithMD5AndCast5_CBC = 'pbeWithMD5AndCast5CBC';

const int NID_pbeWithMD5AndCast5_CBC = 112;

const int OBJ_pbeWithMD5AndCast5_CBC = 1;

const String SN_id_PasswordBasedMAC = 'id-PasswordBasedMAC';

const String LN_id_PasswordBasedMAC = 'password based MAC';

const int NID_id_PasswordBasedMAC = 782;

const int OBJ_id_PasswordBasedMAC = 1;

const String SN_id_DHBasedMac = 'id-DHBasedMac';

const String LN_id_DHBasedMac = 'Diffie-Hellman based MAC';

const int NID_id_DHBasedMac = 783;

const int OBJ_id_DHBasedMac = 1;

const String SN_rsadsi = 'rsadsi';

const String LN_rsadsi = 'RSA Data Security, Inc.';

const int NID_rsadsi = 1;

const int OBJ_rsadsi = 1;

const String SN_pkcs = 'pkcs';

const String LN_pkcs = 'RSA Data Security, Inc. PKCS';

const int NID_pkcs = 2;

const int OBJ_pkcs = 1;

const String SN_pkcs1 = 'pkcs1';

const int NID_pkcs1 = 186;

const int OBJ_pkcs1 = 1;

const String LN_rsaEncryption = 'rsaEncryption';

const int NID_rsaEncryption = 6;

const int OBJ_rsaEncryption = 1;

const String SN_md2WithRSAEncryption = 'RSA-MD2';

const String LN_md2WithRSAEncryption = 'md2WithRSAEncryption';

const int NID_md2WithRSAEncryption = 7;

const int OBJ_md2WithRSAEncryption = 1;

const String SN_md4WithRSAEncryption = 'RSA-MD4';

const String LN_md4WithRSAEncryption = 'md4WithRSAEncryption';

const int NID_md4WithRSAEncryption = 396;

const int OBJ_md4WithRSAEncryption = 1;

const String SN_md5WithRSAEncryption = 'RSA-MD5';

const String LN_md5WithRSAEncryption = 'md5WithRSAEncryption';

const int NID_md5WithRSAEncryption = 8;

const int OBJ_md5WithRSAEncryption = 1;

const String SN_sha1WithRSAEncryption = 'RSA-SHA1';

const String LN_sha1WithRSAEncryption = 'sha1WithRSAEncryption';

const int NID_sha1WithRSAEncryption = 65;

const int OBJ_sha1WithRSAEncryption = 1;

const String SN_rsaesOaep = 'RSAES-OAEP';

const String LN_rsaesOaep = 'rsaesOaep';

const int NID_rsaesOaep = 919;

const int OBJ_rsaesOaep = 1;

const String SN_mgf1 = 'MGF1';

const String LN_mgf1 = 'mgf1';

const int NID_mgf1 = 911;

const int OBJ_mgf1 = 1;

const String SN_pSpecified = 'PSPECIFIED';

const String LN_pSpecified = 'pSpecified';

const int NID_pSpecified = 935;

const int OBJ_pSpecified = 1;

const String SN_rsassaPss = 'RSASSA-PSS';

const String LN_rsassaPss = 'rsassaPss';

const int NID_rsassaPss = 912;

const int OBJ_rsassaPss = 1;

const String SN_sha256WithRSAEncryption = 'RSA-SHA256';

const String LN_sha256WithRSAEncryption = 'sha256WithRSAEncryption';

const int NID_sha256WithRSAEncryption = 668;

const int OBJ_sha256WithRSAEncryption = 1;

const String SN_sha384WithRSAEncryption = 'RSA-SHA384';

const String LN_sha384WithRSAEncryption = 'sha384WithRSAEncryption';

const int NID_sha384WithRSAEncryption = 669;

const int OBJ_sha384WithRSAEncryption = 1;

const String SN_sha512WithRSAEncryption = 'RSA-SHA512';

const String LN_sha512WithRSAEncryption = 'sha512WithRSAEncryption';

const int NID_sha512WithRSAEncryption = 670;

const int OBJ_sha512WithRSAEncryption = 1;

const String SN_sha224WithRSAEncryption = 'RSA-SHA224';

const String LN_sha224WithRSAEncryption = 'sha224WithRSAEncryption';

const int NID_sha224WithRSAEncryption = 671;

const int OBJ_sha224WithRSAEncryption = 1;

const String SN_sha512_224WithRSAEncryption = 'RSA-SHA512/224';

const String LN_sha512_224WithRSAEncryption = 'sha512-224WithRSAEncryption';

const int NID_sha512_224WithRSAEncryption = 1145;

const int OBJ_sha512_224WithRSAEncryption = 1;

const String SN_sha512_256WithRSAEncryption = 'RSA-SHA512/256';

const String LN_sha512_256WithRSAEncryption = 'sha512-256WithRSAEncryption';

const int NID_sha512_256WithRSAEncryption = 1146;

const int OBJ_sha512_256WithRSAEncryption = 1;

const String SN_pkcs3 = 'pkcs3';

const int NID_pkcs3 = 27;

const int OBJ_pkcs3 = 1;

const String LN_dhKeyAgreement = 'dhKeyAgreement';

const int NID_dhKeyAgreement = 28;

const int OBJ_dhKeyAgreement = 1;

const String SN_pkcs5 = 'pkcs5';

const int NID_pkcs5 = 187;

const int OBJ_pkcs5 = 1;

const String SN_pbeWithMD2AndDES_CBC = 'PBE-MD2-DES';

const String LN_pbeWithMD2AndDES_CBC = 'pbeWithMD2AndDES-CBC';

const int NID_pbeWithMD2AndDES_CBC = 9;

const int OBJ_pbeWithMD2AndDES_CBC = 1;

const String SN_pbeWithMD5AndDES_CBC = 'PBE-MD5-DES';

const String LN_pbeWithMD5AndDES_CBC = 'pbeWithMD5AndDES-CBC';

const int NID_pbeWithMD5AndDES_CBC = 10;

const int OBJ_pbeWithMD5AndDES_CBC = 1;

const String SN_pbeWithMD2AndRC2_CBC = 'PBE-MD2-RC2-64';

const String LN_pbeWithMD2AndRC2_CBC = 'pbeWithMD2AndRC2-CBC';

const int NID_pbeWithMD2AndRC2_CBC = 168;

const int OBJ_pbeWithMD2AndRC2_CBC = 1;

const String SN_pbeWithMD5AndRC2_CBC = 'PBE-MD5-RC2-64';

const String LN_pbeWithMD5AndRC2_CBC = 'pbeWithMD5AndRC2-CBC';

const int NID_pbeWithMD5AndRC2_CBC = 169;

const int OBJ_pbeWithMD5AndRC2_CBC = 1;

const String SN_pbeWithSHA1AndDES_CBC = 'PBE-SHA1-DES';

const String LN_pbeWithSHA1AndDES_CBC = 'pbeWithSHA1AndDES-CBC';

const int NID_pbeWithSHA1AndDES_CBC = 170;

const int OBJ_pbeWithSHA1AndDES_CBC = 1;

const String SN_pbeWithSHA1AndRC2_CBC = 'PBE-SHA1-RC2-64';

const String LN_pbeWithSHA1AndRC2_CBC = 'pbeWithSHA1AndRC2-CBC';

const int NID_pbeWithSHA1AndRC2_CBC = 68;

const int OBJ_pbeWithSHA1AndRC2_CBC = 1;

const String LN_id_pbkdf2 = 'PBKDF2';

const int NID_id_pbkdf2 = 69;

const int OBJ_id_pbkdf2 = 1;

const String LN_pbes2 = 'PBES2';

const int NID_pbes2 = 161;

const int OBJ_pbes2 = 1;

const String LN_pbmac1 = 'PBMAC1';

const int NID_pbmac1 = 162;

const int OBJ_pbmac1 = 1;

const String SN_pkcs7 = 'pkcs7';

const int NID_pkcs7 = 20;

const int OBJ_pkcs7 = 1;

const String LN_pkcs7_data = 'pkcs7-data';

const int NID_pkcs7_data = 21;

const int OBJ_pkcs7_data = 1;

const String LN_pkcs7_signed = 'pkcs7-signedData';

const int NID_pkcs7_signed = 22;

const int OBJ_pkcs7_signed = 1;

const String LN_pkcs7_enveloped = 'pkcs7-envelopedData';

const int NID_pkcs7_enveloped = 23;

const int OBJ_pkcs7_enveloped = 1;

const String LN_pkcs7_signedAndEnveloped = 'pkcs7-signedAndEnvelopedData';

const int NID_pkcs7_signedAndEnveloped = 24;

const int OBJ_pkcs7_signedAndEnveloped = 1;

const String LN_pkcs7_digest = 'pkcs7-digestData';

const int NID_pkcs7_digest = 25;

const int OBJ_pkcs7_digest = 1;

const String LN_pkcs7_encrypted = 'pkcs7-encryptedData';

const int NID_pkcs7_encrypted = 26;

const int OBJ_pkcs7_encrypted = 1;

const String SN_pkcs9 = 'pkcs9';

const int NID_pkcs9 = 47;

const int OBJ_pkcs9 = 1;

const String LN_pkcs9_emailAddress = 'emailAddress';

const int NID_pkcs9_emailAddress = 48;

const int OBJ_pkcs9_emailAddress = 1;

const String LN_pkcs9_unstructuredName = 'unstructuredName';

const int NID_pkcs9_unstructuredName = 49;

const int OBJ_pkcs9_unstructuredName = 1;

const String LN_pkcs9_contentType = 'contentType';

const int NID_pkcs9_contentType = 50;

const int OBJ_pkcs9_contentType = 1;

const String LN_pkcs9_messageDigest = 'messageDigest';

const int NID_pkcs9_messageDigest = 51;

const int OBJ_pkcs9_messageDigest = 1;

const String LN_pkcs9_signingTime = 'signingTime';

const int NID_pkcs9_signingTime = 52;

const int OBJ_pkcs9_signingTime = 1;

const String LN_pkcs9_countersignature = 'countersignature';

const int NID_pkcs9_countersignature = 53;

const int OBJ_pkcs9_countersignature = 1;

const String LN_pkcs9_challengePassword = 'challengePassword';

const int NID_pkcs9_challengePassword = 54;

const int OBJ_pkcs9_challengePassword = 1;

const String LN_pkcs9_unstructuredAddress = 'unstructuredAddress';

const int NID_pkcs9_unstructuredAddress = 55;

const int OBJ_pkcs9_unstructuredAddress = 1;

const String LN_pkcs9_extCertAttributes = 'extendedCertificateAttributes';

const int NID_pkcs9_extCertAttributes = 56;

const int OBJ_pkcs9_extCertAttributes = 1;

const String SN_ext_req = 'extReq';

const String LN_ext_req = 'Extension Request';

const int NID_ext_req = 172;

const int OBJ_ext_req = 1;

const String SN_SMIMECapabilities = 'SMIME-CAPS';

const String LN_SMIMECapabilities = 'S/MIME Capabilities';

const int NID_SMIMECapabilities = 167;

const int OBJ_SMIMECapabilities = 1;

const String SN_SMIME = 'SMIME';

const String LN_SMIME = 'S/MIME';

const int NID_SMIME = 188;

const int OBJ_SMIME = 1;

const String SN_id_smime_mod = 'id-smime-mod';

const int NID_id_smime_mod = 189;

const int OBJ_id_smime_mod = 1;

const String SN_id_smime_ct = 'id-smime-ct';

const int NID_id_smime_ct = 190;

const int OBJ_id_smime_ct = 1;

const String SN_id_smime_aa = 'id-smime-aa';

const int NID_id_smime_aa = 191;

const int OBJ_id_smime_aa = 1;

const String SN_id_smime_alg = 'id-smime-alg';

const int NID_id_smime_alg = 192;

const int OBJ_id_smime_alg = 1;

const String SN_id_smime_cd = 'id-smime-cd';

const int NID_id_smime_cd = 193;

const int OBJ_id_smime_cd = 1;

const String SN_id_smime_spq = 'id-smime-spq';

const int NID_id_smime_spq = 194;

const int OBJ_id_smime_spq = 1;

const String SN_id_smime_cti = 'id-smime-cti';

const int NID_id_smime_cti = 195;

const int OBJ_id_smime_cti = 1;

const String SN_id_smime_mod_cms = 'id-smime-mod-cms';

const int NID_id_smime_mod_cms = 196;

const int OBJ_id_smime_mod_cms = 1;

const String SN_id_smime_mod_ess = 'id-smime-mod-ess';

const int NID_id_smime_mod_ess = 197;

const int OBJ_id_smime_mod_ess = 1;

const String SN_id_smime_mod_oid = 'id-smime-mod-oid';

const int NID_id_smime_mod_oid = 198;

const int OBJ_id_smime_mod_oid = 1;

const String SN_id_smime_mod_msg_v3 = 'id-smime-mod-msg-v3';

const int NID_id_smime_mod_msg_v3 = 199;

const int OBJ_id_smime_mod_msg_v3 = 1;

const String SN_id_smime_mod_ets_eSignature_88 =
    'id-smime-mod-ets-eSignature-88';

const int NID_id_smime_mod_ets_eSignature_88 = 200;

const int OBJ_id_smime_mod_ets_eSignature_88 = 1;

const String SN_id_smime_mod_ets_eSignature_97 =
    'id-smime-mod-ets-eSignature-97';

const int NID_id_smime_mod_ets_eSignature_97 = 201;

const int OBJ_id_smime_mod_ets_eSignature_97 = 1;

const String SN_id_smime_mod_ets_eSigPolicy_88 =
    'id-smime-mod-ets-eSigPolicy-88';

const int NID_id_smime_mod_ets_eSigPolicy_88 = 202;

const int OBJ_id_smime_mod_ets_eSigPolicy_88 = 1;

const String SN_id_smime_mod_ets_eSigPolicy_97 =
    'id-smime-mod-ets-eSigPolicy-97';

const int NID_id_smime_mod_ets_eSigPolicy_97 = 203;

const int OBJ_id_smime_mod_ets_eSigPolicy_97 = 1;

const String SN_id_smime_ct_receipt = 'id-smime-ct-receipt';

const int NID_id_smime_ct_receipt = 204;

const int OBJ_id_smime_ct_receipt = 1;

const String SN_id_smime_ct_authData = 'id-smime-ct-authData';

const int NID_id_smime_ct_authData = 205;

const int OBJ_id_smime_ct_authData = 1;

const String SN_id_smime_ct_publishCert = 'id-smime-ct-publishCert';

const int NID_id_smime_ct_publishCert = 206;

const int OBJ_id_smime_ct_publishCert = 1;

const String SN_id_smime_ct_TSTInfo = 'id-smime-ct-TSTInfo';

const int NID_id_smime_ct_TSTInfo = 207;

const int OBJ_id_smime_ct_TSTInfo = 1;

const String SN_id_smime_ct_TDTInfo = 'id-smime-ct-TDTInfo';

const int NID_id_smime_ct_TDTInfo = 208;

const int OBJ_id_smime_ct_TDTInfo = 1;

const String SN_id_smime_ct_contentInfo = 'id-smime-ct-contentInfo';

const int NID_id_smime_ct_contentInfo = 209;

const int OBJ_id_smime_ct_contentInfo = 1;

const String SN_id_smime_ct_DVCSRequestData = 'id-smime-ct-DVCSRequestData';

const int NID_id_smime_ct_DVCSRequestData = 210;

const int OBJ_id_smime_ct_DVCSRequestData = 1;

const String SN_id_smime_ct_DVCSResponseData = 'id-smime-ct-DVCSResponseData';

const int NID_id_smime_ct_DVCSResponseData = 211;

const int OBJ_id_smime_ct_DVCSResponseData = 1;

const String SN_id_smime_ct_compressedData = 'id-smime-ct-compressedData';

const int NID_id_smime_ct_compressedData = 786;

const int OBJ_id_smime_ct_compressedData = 1;

const String SN_id_smime_ct_contentCollection = 'id-smime-ct-contentCollection';

const int NID_id_smime_ct_contentCollection = 1058;

const int OBJ_id_smime_ct_contentCollection = 1;

const String SN_id_smime_ct_authEnvelopedData = 'id-smime-ct-authEnvelopedData';

const int NID_id_smime_ct_authEnvelopedData = 1059;

const int OBJ_id_smime_ct_authEnvelopedData = 1;

const String SN_id_ct_asciiTextWithCRLF = 'id-ct-asciiTextWithCRLF';

const int NID_id_ct_asciiTextWithCRLF = 787;

const int OBJ_id_ct_asciiTextWithCRLF = 1;

const String SN_id_ct_xml = 'id-ct-xml';

const int NID_id_ct_xml = 1060;

const int OBJ_id_ct_xml = 1;

const String SN_id_smime_aa_receiptRequest = 'id-smime-aa-receiptRequest';

const int NID_id_smime_aa_receiptRequest = 212;

const int OBJ_id_smime_aa_receiptRequest = 1;

const String SN_id_smime_aa_securityLabel = 'id-smime-aa-securityLabel';

const int NID_id_smime_aa_securityLabel = 213;

const int OBJ_id_smime_aa_securityLabel = 1;

const String SN_id_smime_aa_mlExpandHistory = 'id-smime-aa-mlExpandHistory';

const int NID_id_smime_aa_mlExpandHistory = 214;

const int OBJ_id_smime_aa_mlExpandHistory = 1;

const String SN_id_smime_aa_contentHint = 'id-smime-aa-contentHint';

const int NID_id_smime_aa_contentHint = 215;

const int OBJ_id_smime_aa_contentHint = 1;

const String SN_id_smime_aa_msgSigDigest = 'id-smime-aa-msgSigDigest';

const int NID_id_smime_aa_msgSigDigest = 216;

const int OBJ_id_smime_aa_msgSigDigest = 1;

const String SN_id_smime_aa_encapContentType = 'id-smime-aa-encapContentType';

const int NID_id_smime_aa_encapContentType = 217;

const int OBJ_id_smime_aa_encapContentType = 1;

const String SN_id_smime_aa_contentIdentifier = 'id-smime-aa-contentIdentifier';

const int NID_id_smime_aa_contentIdentifier = 218;

const int OBJ_id_smime_aa_contentIdentifier = 1;

const String SN_id_smime_aa_macValue = 'id-smime-aa-macValue';

const int NID_id_smime_aa_macValue = 219;

const int OBJ_id_smime_aa_macValue = 1;

const String SN_id_smime_aa_equivalentLabels = 'id-smime-aa-equivalentLabels';

const int NID_id_smime_aa_equivalentLabels = 220;

const int OBJ_id_smime_aa_equivalentLabels = 1;

const String SN_id_smime_aa_contentReference = 'id-smime-aa-contentReference';

const int NID_id_smime_aa_contentReference = 221;

const int OBJ_id_smime_aa_contentReference = 1;

const String SN_id_smime_aa_encrypKeyPref = 'id-smime-aa-encrypKeyPref';

const int NID_id_smime_aa_encrypKeyPref = 222;

const int OBJ_id_smime_aa_encrypKeyPref = 1;

const String SN_id_smime_aa_signingCertificate =
    'id-smime-aa-signingCertificate';

const int NID_id_smime_aa_signingCertificate = 223;

const int OBJ_id_smime_aa_signingCertificate = 1;

const String SN_id_smime_aa_smimeEncryptCerts = 'id-smime-aa-smimeEncryptCerts';

const int NID_id_smime_aa_smimeEncryptCerts = 224;

const int OBJ_id_smime_aa_smimeEncryptCerts = 1;

const String SN_id_smime_aa_timeStampToken = 'id-smime-aa-timeStampToken';

const int NID_id_smime_aa_timeStampToken = 225;

const int OBJ_id_smime_aa_timeStampToken = 1;

const String SN_id_smime_aa_ets_sigPolicyId = 'id-smime-aa-ets-sigPolicyId';

const int NID_id_smime_aa_ets_sigPolicyId = 226;

const int OBJ_id_smime_aa_ets_sigPolicyId = 1;

const String SN_id_smime_aa_ets_commitmentType =
    'id-smime-aa-ets-commitmentType';

const int NID_id_smime_aa_ets_commitmentType = 227;

const int OBJ_id_smime_aa_ets_commitmentType = 1;

const String SN_id_smime_aa_ets_signerLocation =
    'id-smime-aa-ets-signerLocation';

const int NID_id_smime_aa_ets_signerLocation = 228;

const int OBJ_id_smime_aa_ets_signerLocation = 1;

const String SN_id_smime_aa_ets_signerAttr = 'id-smime-aa-ets-signerAttr';

const int NID_id_smime_aa_ets_signerAttr = 229;

const int OBJ_id_smime_aa_ets_signerAttr = 1;

const String SN_id_smime_aa_ets_otherSigCert = 'id-smime-aa-ets-otherSigCert';

const int NID_id_smime_aa_ets_otherSigCert = 230;

const int OBJ_id_smime_aa_ets_otherSigCert = 1;

const String SN_id_smime_aa_ets_contentTimestamp =
    'id-smime-aa-ets-contentTimestamp';

const int NID_id_smime_aa_ets_contentTimestamp = 231;

const int OBJ_id_smime_aa_ets_contentTimestamp = 1;

const String SN_id_smime_aa_ets_CertificateRefs =
    'id-smime-aa-ets-CertificateRefs';

const int NID_id_smime_aa_ets_CertificateRefs = 232;

const int OBJ_id_smime_aa_ets_CertificateRefs = 1;

const String SN_id_smime_aa_ets_RevocationRefs =
    'id-smime-aa-ets-RevocationRefs';

const int NID_id_smime_aa_ets_RevocationRefs = 233;

const int OBJ_id_smime_aa_ets_RevocationRefs = 1;

const String SN_id_smime_aa_ets_certValues = 'id-smime-aa-ets-certValues';

const int NID_id_smime_aa_ets_certValues = 234;

const int OBJ_id_smime_aa_ets_certValues = 1;

const String SN_id_smime_aa_ets_revocationValues =
    'id-smime-aa-ets-revocationValues';

const int NID_id_smime_aa_ets_revocationValues = 235;

const int OBJ_id_smime_aa_ets_revocationValues = 1;

const String SN_id_smime_aa_ets_escTimeStamp = 'id-smime-aa-ets-escTimeStamp';

const int NID_id_smime_aa_ets_escTimeStamp = 236;

const int OBJ_id_smime_aa_ets_escTimeStamp = 1;

const String SN_id_smime_aa_ets_certCRLTimestamp =
    'id-smime-aa-ets-certCRLTimestamp';

const int NID_id_smime_aa_ets_certCRLTimestamp = 237;

const int OBJ_id_smime_aa_ets_certCRLTimestamp = 1;

const String SN_id_smime_aa_ets_archiveTimeStamp =
    'id-smime-aa-ets-archiveTimeStamp';

const int NID_id_smime_aa_ets_archiveTimeStamp = 238;

const int OBJ_id_smime_aa_ets_archiveTimeStamp = 1;

const String SN_id_smime_aa_signatureType = 'id-smime-aa-signatureType';

const int NID_id_smime_aa_signatureType = 239;

const int OBJ_id_smime_aa_signatureType = 1;

const String SN_id_smime_aa_dvcs_dvc = 'id-smime-aa-dvcs-dvc';

const int NID_id_smime_aa_dvcs_dvc = 240;

const int OBJ_id_smime_aa_dvcs_dvc = 1;

const String SN_id_smime_aa_signingCertificateV2 =
    'id-smime-aa-signingCertificateV2';

const int NID_id_smime_aa_signingCertificateV2 = 1086;

const int OBJ_id_smime_aa_signingCertificateV2 = 1;

const String SN_id_smime_alg_ESDHwith3DES = 'id-smime-alg-ESDHwith3DES';

const int NID_id_smime_alg_ESDHwith3DES = 241;

const int OBJ_id_smime_alg_ESDHwith3DES = 1;

const String SN_id_smime_alg_ESDHwithRC2 = 'id-smime-alg-ESDHwithRC2';

const int NID_id_smime_alg_ESDHwithRC2 = 242;

const int OBJ_id_smime_alg_ESDHwithRC2 = 1;

const String SN_id_smime_alg_3DESwrap = 'id-smime-alg-3DESwrap';

const int NID_id_smime_alg_3DESwrap = 243;

const int OBJ_id_smime_alg_3DESwrap = 1;

const String SN_id_smime_alg_RC2wrap = 'id-smime-alg-RC2wrap';

const int NID_id_smime_alg_RC2wrap = 244;

const int OBJ_id_smime_alg_RC2wrap = 1;

const String SN_id_smime_alg_ESDH = 'id-smime-alg-ESDH';

const int NID_id_smime_alg_ESDH = 245;

const int OBJ_id_smime_alg_ESDH = 1;

const String SN_id_smime_alg_CMS3DESwrap = 'id-smime-alg-CMS3DESwrap';

const int NID_id_smime_alg_CMS3DESwrap = 246;

const int OBJ_id_smime_alg_CMS3DESwrap = 1;

const String SN_id_smime_alg_CMSRC2wrap = 'id-smime-alg-CMSRC2wrap';

const int NID_id_smime_alg_CMSRC2wrap = 247;

const int OBJ_id_smime_alg_CMSRC2wrap = 1;

const String SN_id_alg_PWRI_KEK = 'id-alg-PWRI-KEK';

const int NID_id_alg_PWRI_KEK = 893;

const int OBJ_id_alg_PWRI_KEK = 1;

const String SN_id_smime_cd_ldap = 'id-smime-cd-ldap';

const int NID_id_smime_cd_ldap = 248;

const int OBJ_id_smime_cd_ldap = 1;

const String SN_id_smime_spq_ets_sqt_uri = 'id-smime-spq-ets-sqt-uri';

const int NID_id_smime_spq_ets_sqt_uri = 249;

const int OBJ_id_smime_spq_ets_sqt_uri = 1;

const String SN_id_smime_spq_ets_sqt_unotice = 'id-smime-spq-ets-sqt-unotice';

const int NID_id_smime_spq_ets_sqt_unotice = 250;

const int OBJ_id_smime_spq_ets_sqt_unotice = 1;

const String SN_id_smime_cti_ets_proofOfOrigin =
    'id-smime-cti-ets-proofOfOrigin';

const int NID_id_smime_cti_ets_proofOfOrigin = 251;

const int OBJ_id_smime_cti_ets_proofOfOrigin = 1;

const String SN_id_smime_cti_ets_proofOfReceipt =
    'id-smime-cti-ets-proofOfReceipt';

const int NID_id_smime_cti_ets_proofOfReceipt = 252;

const int OBJ_id_smime_cti_ets_proofOfReceipt = 1;

const String SN_id_smime_cti_ets_proofOfDelivery =
    'id-smime-cti-ets-proofOfDelivery';

const int NID_id_smime_cti_ets_proofOfDelivery = 253;

const int OBJ_id_smime_cti_ets_proofOfDelivery = 1;

const String SN_id_smime_cti_ets_proofOfSender =
    'id-smime-cti-ets-proofOfSender';

const int NID_id_smime_cti_ets_proofOfSender = 254;

const int OBJ_id_smime_cti_ets_proofOfSender = 1;

const String SN_id_smime_cti_ets_proofOfApproval =
    'id-smime-cti-ets-proofOfApproval';

const int NID_id_smime_cti_ets_proofOfApproval = 255;

const int OBJ_id_smime_cti_ets_proofOfApproval = 1;

const String SN_id_smime_cti_ets_proofOfCreation =
    'id-smime-cti-ets-proofOfCreation';

const int NID_id_smime_cti_ets_proofOfCreation = 256;

const int OBJ_id_smime_cti_ets_proofOfCreation = 1;

const String LN_friendlyName = 'friendlyName';

const int NID_friendlyName = 156;

const int OBJ_friendlyName = 1;

const String LN_localKeyID = 'localKeyID';

const int NID_localKeyID = 157;

const int OBJ_localKeyID = 1;

const String SN_ms_csp_name = 'CSPName';

const String LN_ms_csp_name = 'Microsoft CSP Name';

const int NID_ms_csp_name = 417;

const int OBJ_ms_csp_name = 1;

const String SN_LocalKeySet = 'LocalKeySet';

const String LN_LocalKeySet = 'Microsoft Local Key set';

const int NID_LocalKeySet = 856;

const int OBJ_LocalKeySet = 1;

const int OBJ_certTypes = 1;

const String LN_x509Certificate = 'x509Certificate';

const int NID_x509Certificate = 158;

const int OBJ_x509Certificate = 1;

const String LN_sdsiCertificate = 'sdsiCertificate';

const int NID_sdsiCertificate = 159;

const int OBJ_sdsiCertificate = 1;

const int OBJ_crlTypes = 1;

const String LN_x509Crl = 'x509Crl';

const int NID_x509Crl = 160;

const int OBJ_x509Crl = 1;

const int OBJ_pkcs12 = 1;

const int OBJ_pkcs12_pbeids = 1;

const String SN_pbe_WithSHA1And128BitRC4 = 'PBE-SHA1-RC4-128';

const String LN_pbe_WithSHA1And128BitRC4 = 'pbeWithSHA1And128BitRC4';

const int NID_pbe_WithSHA1And128BitRC4 = 144;

const int OBJ_pbe_WithSHA1And128BitRC4 = 1;

const String SN_pbe_WithSHA1And40BitRC4 = 'PBE-SHA1-RC4-40';

const String LN_pbe_WithSHA1And40BitRC4 = 'pbeWithSHA1And40BitRC4';

const int NID_pbe_WithSHA1And40BitRC4 = 145;

const int OBJ_pbe_WithSHA1And40BitRC4 = 1;

const String SN_pbe_WithSHA1And3_Key_TripleDES_CBC = 'PBE-SHA1-3DES';

const String LN_pbe_WithSHA1And3_Key_TripleDES_CBC =
    'pbeWithSHA1And3-KeyTripleDES-CBC';

const int NID_pbe_WithSHA1And3_Key_TripleDES_CBC = 146;

const int OBJ_pbe_WithSHA1And3_Key_TripleDES_CBC = 1;

const String SN_pbe_WithSHA1And2_Key_TripleDES_CBC = 'PBE-SHA1-2DES';

const String LN_pbe_WithSHA1And2_Key_TripleDES_CBC =
    'pbeWithSHA1And2-KeyTripleDES-CBC';

const int NID_pbe_WithSHA1And2_Key_TripleDES_CBC = 147;

const int OBJ_pbe_WithSHA1And2_Key_TripleDES_CBC = 1;

const String SN_pbe_WithSHA1And128BitRC2_CBC = 'PBE-SHA1-RC2-128';

const String LN_pbe_WithSHA1And128BitRC2_CBC = 'pbeWithSHA1And128BitRC2-CBC';

const int NID_pbe_WithSHA1And128BitRC2_CBC = 148;

const int OBJ_pbe_WithSHA1And128BitRC2_CBC = 1;

const String SN_pbe_WithSHA1And40BitRC2_CBC = 'PBE-SHA1-RC2-40';

const String LN_pbe_WithSHA1And40BitRC2_CBC = 'pbeWithSHA1And40BitRC2-CBC';

const int NID_pbe_WithSHA1And40BitRC2_CBC = 149;

const int OBJ_pbe_WithSHA1And40BitRC2_CBC = 1;

const int OBJ_pkcs12_Version1 = 1;

const int OBJ_pkcs12_BagIds = 1;

const String LN_keyBag = 'keyBag';

const int NID_keyBag = 150;

const int OBJ_keyBag = 1;

const String LN_pkcs8ShroudedKeyBag = 'pkcs8ShroudedKeyBag';

const int NID_pkcs8ShroudedKeyBag = 151;

const int OBJ_pkcs8ShroudedKeyBag = 1;

const String LN_certBag = 'certBag';

const int NID_certBag = 152;

const int OBJ_certBag = 1;

const String LN_crlBag = 'crlBag';

const int NID_crlBag = 153;

const int OBJ_crlBag = 1;

const String LN_secretBag = 'secretBag';

const int NID_secretBag = 154;

const int OBJ_secretBag = 1;

const String LN_safeContentsBag = 'safeContentsBag';

const int NID_safeContentsBag = 155;

const int OBJ_safeContentsBag = 1;

const String SN_md2 = 'MD2';

const String LN_md2 = 'md2';

const int NID_md2 = 3;

const int OBJ_md2 = 1;

const String SN_md4 = 'MD4';

const String LN_md4 = 'md4';

const int NID_md4 = 257;

const int OBJ_md4 = 1;

const String SN_md5 = 'MD5';

const String LN_md5 = 'md5';

const int NID_md5 = 4;

const int OBJ_md5 = 1;

const String SN_md5_sha1 = 'MD5-SHA1';

const String LN_md5_sha1 = 'md5-sha1';

const int NID_md5_sha1 = 114;

const String LN_hmacWithMD5 = 'hmacWithMD5';

const int NID_hmacWithMD5 = 797;

const int OBJ_hmacWithMD5 = 1;

const String LN_hmacWithSHA1 = 'hmacWithSHA1';

const int NID_hmacWithSHA1 = 163;

const int OBJ_hmacWithSHA1 = 1;

const String SN_sm2 = 'SM2';

const String LN_sm2 = 'sm2';

const int NID_sm2 = 1172;

const int OBJ_sm2 = 1;

const String SN_sm3 = 'SM3';

const String LN_sm3 = 'sm3';

const int NID_sm3 = 1143;

const int OBJ_sm3 = 1;

const String SN_sm3WithRSAEncryption = 'RSA-SM3';

const String LN_sm3WithRSAEncryption = 'sm3WithRSAEncryption';

const int NID_sm3WithRSAEncryption = 1144;

const int OBJ_sm3WithRSAEncryption = 1;

const String LN_hmacWithSHA224 = 'hmacWithSHA224';

const int NID_hmacWithSHA224 = 798;

const int OBJ_hmacWithSHA224 = 1;

const String LN_hmacWithSHA256 = 'hmacWithSHA256';

const int NID_hmacWithSHA256 = 799;

const int OBJ_hmacWithSHA256 = 1;

const String LN_hmacWithSHA384 = 'hmacWithSHA384';

const int NID_hmacWithSHA384 = 800;

const int OBJ_hmacWithSHA384 = 1;

const String LN_hmacWithSHA512 = 'hmacWithSHA512';

const int NID_hmacWithSHA512 = 801;

const int OBJ_hmacWithSHA512 = 1;

const String LN_hmacWithSHA512_224 = 'hmacWithSHA512-224';

const int NID_hmacWithSHA512_224 = 1193;

const int OBJ_hmacWithSHA512_224 = 1;

const String LN_hmacWithSHA512_256 = 'hmacWithSHA512-256';

const int NID_hmacWithSHA512_256 = 1194;

const int OBJ_hmacWithSHA512_256 = 1;

const String SN_rc2_cbc = 'RC2-CBC';

const String LN_rc2_cbc = 'rc2-cbc';

const int NID_rc2_cbc = 37;

const int OBJ_rc2_cbc = 1;

const String SN_rc2_ecb = 'RC2-ECB';

const String LN_rc2_ecb = 'rc2-ecb';

const int NID_rc2_ecb = 38;

const String SN_rc2_cfb64 = 'RC2-CFB';

const String LN_rc2_cfb64 = 'rc2-cfb';

const int NID_rc2_cfb64 = 39;

const String SN_rc2_ofb64 = 'RC2-OFB';

const String LN_rc2_ofb64 = 'rc2-ofb';

const int NID_rc2_ofb64 = 40;

const String SN_rc2_40_cbc = 'RC2-40-CBC';

const String LN_rc2_40_cbc = 'rc2-40-cbc';

const int NID_rc2_40_cbc = 98;

const String SN_rc2_64_cbc = 'RC2-64-CBC';

const String LN_rc2_64_cbc = 'rc2-64-cbc';

const int NID_rc2_64_cbc = 166;

const String SN_rc4 = 'RC4';

const String LN_rc4 = 'rc4';

const int NID_rc4 = 5;

const int OBJ_rc4 = 1;

const String SN_rc4_40 = 'RC4-40';

const String LN_rc4_40 = 'rc4-40';

const int NID_rc4_40 = 97;

const String SN_des_ede3_cbc = 'DES-EDE3-CBC';

const String LN_des_ede3_cbc = 'des-ede3-cbc';

const int NID_des_ede3_cbc = 44;

const int OBJ_des_ede3_cbc = 1;

const String SN_rc5_cbc = 'RC5-CBC';

const String LN_rc5_cbc = 'rc5-cbc';

const int NID_rc5_cbc = 120;

const int OBJ_rc5_cbc = 1;

const String SN_rc5_ecb = 'RC5-ECB';

const String LN_rc5_ecb = 'rc5-ecb';

const int NID_rc5_ecb = 121;

const String SN_rc5_cfb64 = 'RC5-CFB';

const String LN_rc5_cfb64 = 'rc5-cfb';

const int NID_rc5_cfb64 = 122;

const String SN_rc5_ofb64 = 'RC5-OFB';

const String LN_rc5_ofb64 = 'rc5-ofb';

const int NID_rc5_ofb64 = 123;

const String SN_ms_ext_req = 'msExtReq';

const String LN_ms_ext_req = 'Microsoft Extension Request';

const int NID_ms_ext_req = 171;

const int OBJ_ms_ext_req = 1;

const String SN_ms_code_ind = 'msCodeInd';

const String LN_ms_code_ind = 'Microsoft Individual Code Signing';

const int NID_ms_code_ind = 134;

const int OBJ_ms_code_ind = 1;

const String SN_ms_code_com = 'msCodeCom';

const String LN_ms_code_com = 'Microsoft Commercial Code Signing';

const int NID_ms_code_com = 135;

const int OBJ_ms_code_com = 1;

const String SN_ms_ctl_sign = 'msCTLSign';

const String LN_ms_ctl_sign = 'Microsoft Trust List Signing';

const int NID_ms_ctl_sign = 136;

const int OBJ_ms_ctl_sign = 1;

const String SN_ms_sgc = 'msSGC';

const String LN_ms_sgc = 'Microsoft Server Gated Crypto';

const int NID_ms_sgc = 137;

const int OBJ_ms_sgc = 1;

const String SN_ms_efs = 'msEFS';

const String LN_ms_efs = 'Microsoft Encrypted File System';

const int NID_ms_efs = 138;

const int OBJ_ms_efs = 1;

const String SN_ms_smartcard_login = 'msSmartcardLogin';

const String LN_ms_smartcard_login = 'Microsoft Smartcard Login';

const int NID_ms_smartcard_login = 648;

const int OBJ_ms_smartcard_login = 1;

const String SN_ms_upn = 'msUPN';

const String LN_ms_upn = 'Microsoft User Principal Name';

const int NID_ms_upn = 649;

const int OBJ_ms_upn = 1;

const String SN_idea_cbc = 'IDEA-CBC';

const String LN_idea_cbc = 'idea-cbc';

const int NID_idea_cbc = 34;

const int OBJ_idea_cbc = 1;

const String SN_idea_ecb = 'IDEA-ECB';

const String LN_idea_ecb = 'idea-ecb';

const int NID_idea_ecb = 36;

const String SN_idea_cfb64 = 'IDEA-CFB';

const String LN_idea_cfb64 = 'idea-cfb';

const int NID_idea_cfb64 = 35;

const String SN_idea_ofb64 = 'IDEA-OFB';

const String LN_idea_ofb64 = 'idea-ofb';

const int NID_idea_ofb64 = 46;

const String SN_bf_cbc = 'BF-CBC';

const String LN_bf_cbc = 'bf-cbc';

const int NID_bf_cbc = 91;

const int OBJ_bf_cbc = 1;

const String SN_bf_ecb = 'BF-ECB';

const String LN_bf_ecb = 'bf-ecb';

const int NID_bf_ecb = 92;

const String SN_bf_cfb64 = 'BF-CFB';

const String LN_bf_cfb64 = 'bf-cfb';

const int NID_bf_cfb64 = 93;

const String SN_bf_ofb64 = 'BF-OFB';

const String LN_bf_ofb64 = 'bf-ofb';

const int NID_bf_ofb64 = 94;

const String SN_id_pkix = 'PKIX';

const int NID_id_pkix = 127;

const int OBJ_id_pkix = 1;

const String SN_id_pkix_mod = 'id-pkix-mod';

const int NID_id_pkix_mod = 258;

const int OBJ_id_pkix_mod = 1;

const String SN_id_pe = 'id-pe';

const int NID_id_pe = 175;

const int OBJ_id_pe = 1;

const String SN_id_qt = 'id-qt';

const int NID_id_qt = 259;

const int OBJ_id_qt = 1;

const String SN_id_kp = 'id-kp';

const int NID_id_kp = 128;

const int OBJ_id_kp = 1;

const String SN_id_it = 'id-it';

const int NID_id_it = 260;

const int OBJ_id_it = 1;

const String SN_id_pkip = 'id-pkip';

const int NID_id_pkip = 261;

const int OBJ_id_pkip = 1;

const String SN_id_alg = 'id-alg';

const int NID_id_alg = 262;

const int OBJ_id_alg = 1;

const String SN_id_cmc = 'id-cmc';

const int NID_id_cmc = 263;

const int OBJ_id_cmc = 1;

const String SN_id_on = 'id-on';

const int NID_id_on = 264;

const int OBJ_id_on = 1;

const String SN_id_pda = 'id-pda';

const int NID_id_pda = 265;

const int OBJ_id_pda = 1;

const String SN_id_aca = 'id-aca';

const int NID_id_aca = 266;

const int OBJ_id_aca = 1;

const String SN_id_qcs = 'id-qcs';

const int NID_id_qcs = 267;

const int OBJ_id_qcs = 1;

const String SN_id_cct = 'id-cct';

const int NID_id_cct = 268;

const int OBJ_id_cct = 1;

const String SN_id_ppl = 'id-ppl';

const int NID_id_ppl = 662;

const int OBJ_id_ppl = 1;

const String SN_id_ad = 'id-ad';

const int NID_id_ad = 176;

const int OBJ_id_ad = 1;

const String SN_id_pkix1_explicit_88 = 'id-pkix1-explicit-88';

const int NID_id_pkix1_explicit_88 = 269;

const int OBJ_id_pkix1_explicit_88 = 1;

const String SN_id_pkix1_implicit_88 = 'id-pkix1-implicit-88';

const int NID_id_pkix1_implicit_88 = 270;

const int OBJ_id_pkix1_implicit_88 = 1;

const String SN_id_pkix1_explicit_93 = 'id-pkix1-explicit-93';

const int NID_id_pkix1_explicit_93 = 271;

const int OBJ_id_pkix1_explicit_93 = 1;

const String SN_id_pkix1_implicit_93 = 'id-pkix1-implicit-93';

const int NID_id_pkix1_implicit_93 = 272;

const int OBJ_id_pkix1_implicit_93 = 1;

const String SN_id_mod_crmf = 'id-mod-crmf';

const int NID_id_mod_crmf = 273;

const int OBJ_id_mod_crmf = 1;

const String SN_id_mod_cmc = 'id-mod-cmc';

const int NID_id_mod_cmc = 274;

const int OBJ_id_mod_cmc = 1;

const String SN_id_mod_kea_profile_88 = 'id-mod-kea-profile-88';

const int NID_id_mod_kea_profile_88 = 275;

const int OBJ_id_mod_kea_profile_88 = 1;

const String SN_id_mod_kea_profile_93 = 'id-mod-kea-profile-93';

const int NID_id_mod_kea_profile_93 = 276;

const int OBJ_id_mod_kea_profile_93 = 1;

const String SN_id_mod_cmp = 'id-mod-cmp';

const int NID_id_mod_cmp = 277;

const int OBJ_id_mod_cmp = 1;

const String SN_id_mod_qualified_cert_88 = 'id-mod-qualified-cert-88';

const int NID_id_mod_qualified_cert_88 = 278;

const int OBJ_id_mod_qualified_cert_88 = 1;

const String SN_id_mod_qualified_cert_93 = 'id-mod-qualified-cert-93';

const int NID_id_mod_qualified_cert_93 = 279;

const int OBJ_id_mod_qualified_cert_93 = 1;

const String SN_id_mod_attribute_cert = 'id-mod-attribute-cert';

const int NID_id_mod_attribute_cert = 280;

const int OBJ_id_mod_attribute_cert = 1;

const String SN_id_mod_timestamp_protocol = 'id-mod-timestamp-protocol';

const int NID_id_mod_timestamp_protocol = 281;

const int OBJ_id_mod_timestamp_protocol = 1;

const String SN_id_mod_ocsp = 'id-mod-ocsp';

const int NID_id_mod_ocsp = 282;

const int OBJ_id_mod_ocsp = 1;

const String SN_id_mod_dvcs = 'id-mod-dvcs';

const int NID_id_mod_dvcs = 283;

const int OBJ_id_mod_dvcs = 1;

const String SN_id_mod_cmp2000 = 'id-mod-cmp2000';

const int NID_id_mod_cmp2000 = 284;

const int OBJ_id_mod_cmp2000 = 1;

const String SN_info_access = 'authorityInfoAccess';

const String LN_info_access = 'Authority Information Access';

const int NID_info_access = 177;

const int OBJ_info_access = 1;

const String SN_biometricInfo = 'biometricInfo';

const String LN_biometricInfo = 'Biometric Info';

const int NID_biometricInfo = 285;

const int OBJ_biometricInfo = 1;

const String SN_qcStatements = 'qcStatements';

const int NID_qcStatements = 286;

const int OBJ_qcStatements = 1;

const String SN_ac_auditEntity = 'ac-auditEntity';

const int NID_ac_auditEntity = 287;

const int OBJ_ac_auditEntity = 1;

const String SN_ac_targeting = 'ac-targeting';

const int NID_ac_targeting = 288;

const int OBJ_ac_targeting = 1;

const String SN_aaControls = 'aaControls';

const int NID_aaControls = 289;

const int OBJ_aaControls = 1;

const String SN_sbgp_ipAddrBlock = 'sbgp-ipAddrBlock';

const int NID_sbgp_ipAddrBlock = 290;

const int OBJ_sbgp_ipAddrBlock = 1;

const String SN_sbgp_autonomousSysNum = 'sbgp-autonomousSysNum';

const int NID_sbgp_autonomousSysNum = 291;

const int OBJ_sbgp_autonomousSysNum = 1;

const String SN_sbgp_routerIdentifier = 'sbgp-routerIdentifier';

const int NID_sbgp_routerIdentifier = 292;

const int OBJ_sbgp_routerIdentifier = 1;

const String SN_ac_proxying = 'ac-proxying';

const int NID_ac_proxying = 397;

const int OBJ_ac_proxying = 1;

const String SN_sinfo_access = 'subjectInfoAccess';

const String LN_sinfo_access = 'Subject Information Access';

const int NID_sinfo_access = 398;

const int OBJ_sinfo_access = 1;

const String SN_proxyCertInfo = 'proxyCertInfo';

const String LN_proxyCertInfo = 'Proxy Certificate Information';

const int NID_proxyCertInfo = 663;

const int OBJ_proxyCertInfo = 1;

const String SN_tlsfeature = 'tlsfeature';

const String LN_tlsfeature = 'TLS Feature';

const int NID_tlsfeature = 1020;

const int OBJ_tlsfeature = 1;

const String SN_id_qt_cps = 'id-qt-cps';

const String LN_id_qt_cps = 'Policy Qualifier CPS';

const int NID_id_qt_cps = 164;

const int OBJ_id_qt_cps = 1;

const String SN_id_qt_unotice = 'id-qt-unotice';

const String LN_id_qt_unotice = 'Policy Qualifier User Notice';

const int NID_id_qt_unotice = 165;

const int OBJ_id_qt_unotice = 1;

const String SN_textNotice = 'textNotice';

const int NID_textNotice = 293;

const int OBJ_textNotice = 1;

const String SN_server_auth = 'serverAuth';

const String LN_server_auth = 'TLS Web Server Authentication';

const int NID_server_auth = 129;

const int OBJ_server_auth = 1;

const String SN_client_auth = 'clientAuth';

const String LN_client_auth = 'TLS Web Client Authentication';

const int NID_client_auth = 130;

const int OBJ_client_auth = 1;

const String SN_code_sign = 'codeSigning';

const String LN_code_sign = 'Code Signing';

const int NID_code_sign = 131;

const int OBJ_code_sign = 1;

const String SN_email_protect = 'emailProtection';

const String LN_email_protect = 'E-mail Protection';

const int NID_email_protect = 132;

const int OBJ_email_protect = 1;

const String SN_ipsecEndSystem = 'ipsecEndSystem';

const String LN_ipsecEndSystem = 'IPSec End System';

const int NID_ipsecEndSystem = 294;

const int OBJ_ipsecEndSystem = 1;

const String SN_ipsecTunnel = 'ipsecTunnel';

const String LN_ipsecTunnel = 'IPSec Tunnel';

const int NID_ipsecTunnel = 295;

const int OBJ_ipsecTunnel = 1;

const String SN_ipsecUser = 'ipsecUser';

const String LN_ipsecUser = 'IPSec User';

const int NID_ipsecUser = 296;

const int OBJ_ipsecUser = 1;

const String SN_time_stamp = 'timeStamping';

const String LN_time_stamp = 'Time Stamping';

const int NID_time_stamp = 133;

const int OBJ_time_stamp = 1;

const String SN_OCSP_sign = 'OCSPSigning';

const String LN_OCSP_sign = 'OCSP Signing';

const int NID_OCSP_sign = 180;

const int OBJ_OCSP_sign = 1;

const String SN_dvcs = 'DVCS';

const String LN_dvcs = 'dvcs';

const int NID_dvcs = 297;

const int OBJ_dvcs = 1;

const String SN_ipsec_IKE = 'ipsecIKE';

const String LN_ipsec_IKE = 'ipsec Internet Key Exchange';

const int NID_ipsec_IKE = 1022;

const int OBJ_ipsec_IKE = 1;

const String SN_capwapAC = 'capwapAC';

const String LN_capwapAC = 'Ctrl/provision WAP Access';

const int NID_capwapAC = 1023;

const int OBJ_capwapAC = 1;

const String SN_capwapWTP = 'capwapWTP';

const String LN_capwapWTP = 'Ctrl/Provision WAP Termination';

const int NID_capwapWTP = 1024;

const int OBJ_capwapWTP = 1;

const String SN_sshClient = 'secureShellClient';

const String LN_sshClient = 'SSH Client';

const int NID_sshClient = 1025;

const int OBJ_sshClient = 1;

const String SN_sshServer = 'secureShellServer';

const String LN_sshServer = 'SSH Server';

const int NID_sshServer = 1026;

const int OBJ_sshServer = 1;

const String SN_sendRouter = 'sendRouter';

const String LN_sendRouter = 'Send Router';

const int NID_sendRouter = 1027;

const int OBJ_sendRouter = 1;

const String SN_sendProxiedRouter = 'sendProxiedRouter';

const String LN_sendProxiedRouter = 'Send Proxied Router';

const int NID_sendProxiedRouter = 1028;

const int OBJ_sendProxiedRouter = 1;

const String SN_sendOwner = 'sendOwner';

const String LN_sendOwner = 'Send Owner';

const int NID_sendOwner = 1029;

const int OBJ_sendOwner = 1;

const String SN_sendProxiedOwner = 'sendProxiedOwner';

const String LN_sendProxiedOwner = 'Send Proxied Owner';

const int NID_sendProxiedOwner = 1030;

const int OBJ_sendProxiedOwner = 1;

const String SN_cmcCA = 'cmcCA';

const String LN_cmcCA = 'CMC Certificate Authority';

const int NID_cmcCA = 1131;

const int OBJ_cmcCA = 1;

const String SN_cmcRA = 'cmcRA';

const String LN_cmcRA = 'CMC Registration Authority';

const int NID_cmcRA = 1132;

const int OBJ_cmcRA = 1;

const String SN_id_it_caProtEncCert = 'id-it-caProtEncCert';

const int NID_id_it_caProtEncCert = 298;

const int OBJ_id_it_caProtEncCert = 1;

const String SN_id_it_signKeyPairTypes = 'id-it-signKeyPairTypes';

const int NID_id_it_signKeyPairTypes = 299;

const int OBJ_id_it_signKeyPairTypes = 1;

const String SN_id_it_encKeyPairTypes = 'id-it-encKeyPairTypes';

const int NID_id_it_encKeyPairTypes = 300;

const int OBJ_id_it_encKeyPairTypes = 1;

const String SN_id_it_preferredSymmAlg = 'id-it-preferredSymmAlg';

const int NID_id_it_preferredSymmAlg = 301;

const int OBJ_id_it_preferredSymmAlg = 1;

const String SN_id_it_caKeyUpdateInfo = 'id-it-caKeyUpdateInfo';

const int NID_id_it_caKeyUpdateInfo = 302;

const int OBJ_id_it_caKeyUpdateInfo = 1;

const String SN_id_it_currentCRL = 'id-it-currentCRL';

const int NID_id_it_currentCRL = 303;

const int OBJ_id_it_currentCRL = 1;

const String SN_id_it_unsupportedOIDs = 'id-it-unsupportedOIDs';

const int NID_id_it_unsupportedOIDs = 304;

const int OBJ_id_it_unsupportedOIDs = 1;

const String SN_id_it_subscriptionRequest = 'id-it-subscriptionRequest';

const int NID_id_it_subscriptionRequest = 305;

const int OBJ_id_it_subscriptionRequest = 1;

const String SN_id_it_subscriptionResponse = 'id-it-subscriptionResponse';

const int NID_id_it_subscriptionResponse = 306;

const int OBJ_id_it_subscriptionResponse = 1;

const String SN_id_it_keyPairParamReq = 'id-it-keyPairParamReq';

const int NID_id_it_keyPairParamReq = 307;

const int OBJ_id_it_keyPairParamReq = 1;

const String SN_id_it_keyPairParamRep = 'id-it-keyPairParamRep';

const int NID_id_it_keyPairParamRep = 308;

const int OBJ_id_it_keyPairParamRep = 1;

const String SN_id_it_revPassphrase = 'id-it-revPassphrase';

const int NID_id_it_revPassphrase = 309;

const int OBJ_id_it_revPassphrase = 1;

const String SN_id_it_implicitConfirm = 'id-it-implicitConfirm';

const int NID_id_it_implicitConfirm = 310;

const int OBJ_id_it_implicitConfirm = 1;

const String SN_id_it_confirmWaitTime = 'id-it-confirmWaitTime';

const int NID_id_it_confirmWaitTime = 311;

const int OBJ_id_it_confirmWaitTime = 1;

const String SN_id_it_origPKIMessage = 'id-it-origPKIMessage';

const int NID_id_it_origPKIMessage = 312;

const int OBJ_id_it_origPKIMessage = 1;

const String SN_id_it_suppLangTags = 'id-it-suppLangTags';

const int NID_id_it_suppLangTags = 784;

const int OBJ_id_it_suppLangTags = 1;

const String SN_id_regCtrl = 'id-regCtrl';

const int NID_id_regCtrl = 313;

const int OBJ_id_regCtrl = 1;

const String SN_id_regInfo = 'id-regInfo';

const int NID_id_regInfo = 314;

const int OBJ_id_regInfo = 1;

const String SN_id_regCtrl_regToken = 'id-regCtrl-regToken';

const int NID_id_regCtrl_regToken = 315;

const int OBJ_id_regCtrl_regToken = 1;

const String SN_id_regCtrl_authenticator = 'id-regCtrl-authenticator';

const int NID_id_regCtrl_authenticator = 316;

const int OBJ_id_regCtrl_authenticator = 1;

const String SN_id_regCtrl_pkiPublicationInfo = 'id-regCtrl-pkiPublicationInfo';

const int NID_id_regCtrl_pkiPublicationInfo = 317;

const int OBJ_id_regCtrl_pkiPublicationInfo = 1;

const String SN_id_regCtrl_pkiArchiveOptions = 'id-regCtrl-pkiArchiveOptions';

const int NID_id_regCtrl_pkiArchiveOptions = 318;

const int OBJ_id_regCtrl_pkiArchiveOptions = 1;

const String SN_id_regCtrl_oldCertID = 'id-regCtrl-oldCertID';

const int NID_id_regCtrl_oldCertID = 319;

const int OBJ_id_regCtrl_oldCertID = 1;

const String SN_id_regCtrl_protocolEncrKey = 'id-regCtrl-protocolEncrKey';

const int NID_id_regCtrl_protocolEncrKey = 320;

const int OBJ_id_regCtrl_protocolEncrKey = 1;

const String SN_id_regInfo_utf8Pairs = 'id-regInfo-utf8Pairs';

const int NID_id_regInfo_utf8Pairs = 321;

const int OBJ_id_regInfo_utf8Pairs = 1;

const String SN_id_regInfo_certReq = 'id-regInfo-certReq';

const int NID_id_regInfo_certReq = 322;

const int OBJ_id_regInfo_certReq = 1;

const String SN_id_alg_des40 = 'id-alg-des40';

const int NID_id_alg_des40 = 323;

const int OBJ_id_alg_des40 = 1;

const String SN_id_alg_noSignature = 'id-alg-noSignature';

const int NID_id_alg_noSignature = 324;

const int OBJ_id_alg_noSignature = 1;

const String SN_id_alg_dh_sig_hmac_sha1 = 'id-alg-dh-sig-hmac-sha1';

const int NID_id_alg_dh_sig_hmac_sha1 = 325;

const int OBJ_id_alg_dh_sig_hmac_sha1 = 1;

const String SN_id_alg_dh_pop = 'id-alg-dh-pop';

const int NID_id_alg_dh_pop = 326;

const int OBJ_id_alg_dh_pop = 1;

const String SN_id_cmc_statusInfo = 'id-cmc-statusInfo';

const int NID_id_cmc_statusInfo = 327;

const int OBJ_id_cmc_statusInfo = 1;

const String SN_id_cmc_identification = 'id-cmc-identification';

const int NID_id_cmc_identification = 328;

const int OBJ_id_cmc_identification = 1;

const String SN_id_cmc_identityProof = 'id-cmc-identityProof';

const int NID_id_cmc_identityProof = 329;

const int OBJ_id_cmc_identityProof = 1;

const String SN_id_cmc_dataReturn = 'id-cmc-dataReturn';

const int NID_id_cmc_dataReturn = 330;

const int OBJ_id_cmc_dataReturn = 1;

const String SN_id_cmc_transactionId = 'id-cmc-transactionId';

const int NID_id_cmc_transactionId = 331;

const int OBJ_id_cmc_transactionId = 1;

const String SN_id_cmc_senderNonce = 'id-cmc-senderNonce';

const int NID_id_cmc_senderNonce = 332;

const int OBJ_id_cmc_senderNonce = 1;

const String SN_id_cmc_recipientNonce = 'id-cmc-recipientNonce';

const int NID_id_cmc_recipientNonce = 333;

const int OBJ_id_cmc_recipientNonce = 1;

const String SN_id_cmc_addExtensions = 'id-cmc-addExtensions';

const int NID_id_cmc_addExtensions = 334;

const int OBJ_id_cmc_addExtensions = 1;

const String SN_id_cmc_encryptedPOP = 'id-cmc-encryptedPOP';

const int NID_id_cmc_encryptedPOP = 335;

const int OBJ_id_cmc_encryptedPOP = 1;

const String SN_id_cmc_decryptedPOP = 'id-cmc-decryptedPOP';

const int NID_id_cmc_decryptedPOP = 336;

const int OBJ_id_cmc_decryptedPOP = 1;

const String SN_id_cmc_lraPOPWitness = 'id-cmc-lraPOPWitness';

const int NID_id_cmc_lraPOPWitness = 337;

const int OBJ_id_cmc_lraPOPWitness = 1;

const String SN_id_cmc_getCert = 'id-cmc-getCert';

const int NID_id_cmc_getCert = 338;

const int OBJ_id_cmc_getCert = 1;

const String SN_id_cmc_getCRL = 'id-cmc-getCRL';

const int NID_id_cmc_getCRL = 339;

const int OBJ_id_cmc_getCRL = 1;

const String SN_id_cmc_revokeRequest = 'id-cmc-revokeRequest';

const int NID_id_cmc_revokeRequest = 340;

const int OBJ_id_cmc_revokeRequest = 1;

const String SN_id_cmc_regInfo = 'id-cmc-regInfo';

const int NID_id_cmc_regInfo = 341;

const int OBJ_id_cmc_regInfo = 1;

const String SN_id_cmc_responseInfo = 'id-cmc-responseInfo';

const int NID_id_cmc_responseInfo = 342;

const int OBJ_id_cmc_responseInfo = 1;

const String SN_id_cmc_queryPending = 'id-cmc-queryPending';

const int NID_id_cmc_queryPending = 343;

const int OBJ_id_cmc_queryPending = 1;

const String SN_id_cmc_popLinkRandom = 'id-cmc-popLinkRandom';

const int NID_id_cmc_popLinkRandom = 344;

const int OBJ_id_cmc_popLinkRandom = 1;

const String SN_id_cmc_popLinkWitness = 'id-cmc-popLinkWitness';

const int NID_id_cmc_popLinkWitness = 345;

const int OBJ_id_cmc_popLinkWitness = 1;

const String SN_id_cmc_confirmCertAcceptance = 'id-cmc-confirmCertAcceptance';

const int NID_id_cmc_confirmCertAcceptance = 346;

const int OBJ_id_cmc_confirmCertAcceptance = 1;

const String SN_id_on_personalData = 'id-on-personalData';

const int NID_id_on_personalData = 347;

const int OBJ_id_on_personalData = 1;

const String SN_id_on_permanentIdentifier = 'id-on-permanentIdentifier';

const String LN_id_on_permanentIdentifier = 'Permanent Identifier';

const int NID_id_on_permanentIdentifier = 858;

const int OBJ_id_on_permanentIdentifier = 1;

const String SN_id_pda_dateOfBirth = 'id-pda-dateOfBirth';

const int NID_id_pda_dateOfBirth = 348;

const int OBJ_id_pda_dateOfBirth = 1;

const String SN_id_pda_placeOfBirth = 'id-pda-placeOfBirth';

const int NID_id_pda_placeOfBirth = 349;

const int OBJ_id_pda_placeOfBirth = 1;

const String SN_id_pda_gender = 'id-pda-gender';

const int NID_id_pda_gender = 351;

const int OBJ_id_pda_gender = 1;

const String SN_id_pda_countryOfCitizenship = 'id-pda-countryOfCitizenship';

const int NID_id_pda_countryOfCitizenship = 352;

const int OBJ_id_pda_countryOfCitizenship = 1;

const String SN_id_pda_countryOfResidence = 'id-pda-countryOfResidence';

const int NID_id_pda_countryOfResidence = 353;

const int OBJ_id_pda_countryOfResidence = 1;

const String SN_id_aca_authenticationInfo = 'id-aca-authenticationInfo';

const int NID_id_aca_authenticationInfo = 354;

const int OBJ_id_aca_authenticationInfo = 1;

const String SN_id_aca_accessIdentity = 'id-aca-accessIdentity';

const int NID_id_aca_accessIdentity = 355;

const int OBJ_id_aca_accessIdentity = 1;

const String SN_id_aca_chargingIdentity = 'id-aca-chargingIdentity';

const int NID_id_aca_chargingIdentity = 356;

const int OBJ_id_aca_chargingIdentity = 1;

const String SN_id_aca_group = 'id-aca-group';

const int NID_id_aca_group = 357;

const int OBJ_id_aca_group = 1;

const String SN_id_aca_role = 'id-aca-role';

const int NID_id_aca_role = 358;

const int OBJ_id_aca_role = 1;

const String SN_id_aca_encAttrs = 'id-aca-encAttrs';

const int NID_id_aca_encAttrs = 399;

const int OBJ_id_aca_encAttrs = 1;

const String SN_id_qcs_pkixQCSyntax_v1 = 'id-qcs-pkixQCSyntax-v1';

const int NID_id_qcs_pkixQCSyntax_v1 = 359;

const int OBJ_id_qcs_pkixQCSyntax_v1 = 1;

const String SN_id_cct_crs = 'id-cct-crs';

const int NID_id_cct_crs = 360;

const int OBJ_id_cct_crs = 1;

const String SN_id_cct_PKIData = 'id-cct-PKIData';

const int NID_id_cct_PKIData = 361;

const int OBJ_id_cct_PKIData = 1;

const String SN_id_cct_PKIResponse = 'id-cct-PKIResponse';

const int NID_id_cct_PKIResponse = 362;

const int OBJ_id_cct_PKIResponse = 1;

const String SN_id_ppl_anyLanguage = 'id-ppl-anyLanguage';

const String LN_id_ppl_anyLanguage = 'Any language';

const int NID_id_ppl_anyLanguage = 664;

const int OBJ_id_ppl_anyLanguage = 1;

const String SN_id_ppl_inheritAll = 'id-ppl-inheritAll';

const String LN_id_ppl_inheritAll = 'Inherit all';

const int NID_id_ppl_inheritAll = 665;

const int OBJ_id_ppl_inheritAll = 1;

const String SN_Independent = 'id-ppl-independent';

const String LN_Independent = 'Independent';

const int NID_Independent = 667;

const int OBJ_Independent = 1;

const String SN_ad_OCSP = 'OCSP';

const String LN_ad_OCSP = 'OCSP';

const int NID_ad_OCSP = 178;

const int OBJ_ad_OCSP = 1;

const String SN_ad_ca_issuers = 'caIssuers';

const String LN_ad_ca_issuers = 'CA Issuers';

const int NID_ad_ca_issuers = 179;

const int OBJ_ad_ca_issuers = 1;

const String SN_ad_timeStamping = 'ad_timestamping';

const String LN_ad_timeStamping = 'AD Time Stamping';

const int NID_ad_timeStamping = 363;

const int OBJ_ad_timeStamping = 1;

const String SN_ad_dvcs = 'AD_DVCS';

const String LN_ad_dvcs = 'ad dvcs';

const int NID_ad_dvcs = 364;

const int OBJ_ad_dvcs = 1;

const String SN_caRepository = 'caRepository';

const String LN_caRepository = 'CA Repository';

const int NID_caRepository = 785;

const int OBJ_caRepository = 1;

const int OBJ_id_pkix_OCSP = 1;

const String SN_id_pkix_OCSP_basic = 'basicOCSPResponse';

const String LN_id_pkix_OCSP_basic = 'Basic OCSP Response';

const int NID_id_pkix_OCSP_basic = 365;

const int OBJ_id_pkix_OCSP_basic = 1;

const String SN_id_pkix_OCSP_Nonce = 'Nonce';

const String LN_id_pkix_OCSP_Nonce = 'OCSP Nonce';

const int NID_id_pkix_OCSP_Nonce = 366;

const int OBJ_id_pkix_OCSP_Nonce = 1;

const String SN_id_pkix_OCSP_CrlID = 'CrlID';

const String LN_id_pkix_OCSP_CrlID = 'OCSP CRL ID';

const int NID_id_pkix_OCSP_CrlID = 367;

const int OBJ_id_pkix_OCSP_CrlID = 1;

const String SN_id_pkix_OCSP_acceptableResponses = 'acceptableResponses';

const String LN_id_pkix_OCSP_acceptableResponses = 'Acceptable OCSP Responses';

const int NID_id_pkix_OCSP_acceptableResponses = 368;

const int OBJ_id_pkix_OCSP_acceptableResponses = 1;

const String SN_id_pkix_OCSP_noCheck = 'noCheck';

const String LN_id_pkix_OCSP_noCheck = 'OCSP No Check';

const int NID_id_pkix_OCSP_noCheck = 369;

const int OBJ_id_pkix_OCSP_noCheck = 1;

const String SN_id_pkix_OCSP_archiveCutoff = 'archiveCutoff';

const String LN_id_pkix_OCSP_archiveCutoff = 'OCSP Archive Cutoff';

const int NID_id_pkix_OCSP_archiveCutoff = 370;

const int OBJ_id_pkix_OCSP_archiveCutoff = 1;

const String SN_id_pkix_OCSP_serviceLocator = 'serviceLocator';

const String LN_id_pkix_OCSP_serviceLocator = 'OCSP Service Locator';

const int NID_id_pkix_OCSP_serviceLocator = 371;

const int OBJ_id_pkix_OCSP_serviceLocator = 1;

const String SN_id_pkix_OCSP_extendedStatus = 'extendedStatus';

const String LN_id_pkix_OCSP_extendedStatus = 'Extended OCSP Status';

const int NID_id_pkix_OCSP_extendedStatus = 372;

const int OBJ_id_pkix_OCSP_extendedStatus = 1;

const String SN_id_pkix_OCSP_valid = 'valid';

const int NID_id_pkix_OCSP_valid = 373;

const int OBJ_id_pkix_OCSP_valid = 1;

const String SN_id_pkix_OCSP_path = 'path';

const int NID_id_pkix_OCSP_path = 374;

const int OBJ_id_pkix_OCSP_path = 1;

const String SN_id_pkix_OCSP_trustRoot = 'trustRoot';

const String LN_id_pkix_OCSP_trustRoot = 'Trust Root';

const int NID_id_pkix_OCSP_trustRoot = 375;

const int OBJ_id_pkix_OCSP_trustRoot = 1;

const String SN_algorithm = 'algorithm';

const String LN_algorithm = 'algorithm';

const int NID_algorithm = 376;

const int OBJ_algorithm = 1;

const String SN_md5WithRSA = 'RSA-NP-MD5';

const String LN_md5WithRSA = 'md5WithRSA';

const int NID_md5WithRSA = 104;

const int OBJ_md5WithRSA = 1;

const String SN_des_ecb = 'DES-ECB';

const String LN_des_ecb = 'des-ecb';

const int NID_des_ecb = 29;

const int OBJ_des_ecb = 1;

const String SN_des_cbc = 'DES-CBC';

const String LN_des_cbc = 'des-cbc';

const int NID_des_cbc = 31;

const int OBJ_des_cbc = 1;

const String SN_des_ofb64 = 'DES-OFB';

const String LN_des_ofb64 = 'des-ofb';

const int NID_des_ofb64 = 45;

const int OBJ_des_ofb64 = 1;

const String SN_des_cfb64 = 'DES-CFB';

const String LN_des_cfb64 = 'des-cfb';

const int NID_des_cfb64 = 30;

const int OBJ_des_cfb64 = 1;

const String SN_rsaSignature = 'rsaSignature';

const int NID_rsaSignature = 377;

const int OBJ_rsaSignature = 1;

const String SN_dsa_2 = 'DSA-old';

const String LN_dsa_2 = 'dsaEncryption-old';

const int NID_dsa_2 = 67;

const int OBJ_dsa_2 = 1;

const String SN_dsaWithSHA = 'DSA-SHA';

const String LN_dsaWithSHA = 'dsaWithSHA';

const int NID_dsaWithSHA = 66;

const int OBJ_dsaWithSHA = 1;

const String SN_shaWithRSAEncryption = 'RSA-SHA';

const String LN_shaWithRSAEncryption = 'shaWithRSAEncryption';

const int NID_shaWithRSAEncryption = 42;

const int OBJ_shaWithRSAEncryption = 1;

const String SN_des_ede_ecb = 'DES-EDE';

const String LN_des_ede_ecb = 'des-ede';

const int NID_des_ede_ecb = 32;

const int OBJ_des_ede_ecb = 1;

const String SN_des_ede3_ecb = 'DES-EDE3';

const String LN_des_ede3_ecb = 'des-ede3';

const int NID_des_ede3_ecb = 33;

const String SN_des_ede_cbc = 'DES-EDE-CBC';

const String LN_des_ede_cbc = 'des-ede-cbc';

const int NID_des_ede_cbc = 43;

const String SN_des_ede_cfb64 = 'DES-EDE-CFB';

const String LN_des_ede_cfb64 = 'des-ede-cfb';

const int NID_des_ede_cfb64 = 60;

const String SN_des_ede3_cfb64 = 'DES-EDE3-CFB';

const String LN_des_ede3_cfb64 = 'des-ede3-cfb';

const int NID_des_ede3_cfb64 = 61;

const String SN_des_ede_ofb64 = 'DES-EDE-OFB';

const String LN_des_ede_ofb64 = 'des-ede-ofb';

const int NID_des_ede_ofb64 = 62;

const String SN_des_ede3_ofb64 = 'DES-EDE3-OFB';

const String LN_des_ede3_ofb64 = 'des-ede3-ofb';

const int NID_des_ede3_ofb64 = 63;

const String SN_desx_cbc = 'DESX-CBC';

const String LN_desx_cbc = 'desx-cbc';

const int NID_desx_cbc = 80;

const String SN_sha = 'SHA';

const String LN_sha = 'sha';

const int NID_sha = 41;

const int OBJ_sha = 1;

const String SN_sha1 = 'SHA1';

const String LN_sha1 = 'sha1';

const int NID_sha1 = 64;

const int OBJ_sha1 = 1;

const String SN_dsaWithSHA1_2 = 'DSA-SHA1-old';

const String LN_dsaWithSHA1_2 = 'dsaWithSHA1-old';

const int NID_dsaWithSHA1_2 = 70;

const int OBJ_dsaWithSHA1_2 = 1;

const String SN_sha1WithRSA = 'RSA-SHA1-2';

const String LN_sha1WithRSA = 'sha1WithRSA';

const int NID_sha1WithRSA = 115;

const int OBJ_sha1WithRSA = 1;

const String SN_ripemd160 = 'RIPEMD160';

const String LN_ripemd160 = 'ripemd160';

const int NID_ripemd160 = 117;

const int OBJ_ripemd160 = 1;

const String SN_ripemd160WithRSA = 'RSA-RIPEMD160';

const String LN_ripemd160WithRSA = 'ripemd160WithRSA';

const int NID_ripemd160WithRSA = 119;

const int OBJ_ripemd160WithRSA = 1;

const String SN_blake2b512 = 'BLAKE2b512';

const String LN_blake2b512 = 'blake2b512';

const int NID_blake2b512 = 1056;

const int OBJ_blake2b512 = 1;

const String SN_blake2s256 = 'BLAKE2s256';

const String LN_blake2s256 = 'blake2s256';

const int NID_blake2s256 = 1057;

const int OBJ_blake2s256 = 1;

const String SN_sxnet = 'SXNetID';

const String LN_sxnet = 'Strong Extranet ID';

const int NID_sxnet = 143;

const int OBJ_sxnet = 1;

const String SN_X500 = 'X500';

const String LN_X500 = 'directory services (X.500)';

const int NID_X500 = 11;

const int OBJ_X500 = 2;

const String SN_X509 = 'X509';

const int NID_X509 = 12;

const int OBJ_X509 = 2;

const String SN_commonName = 'CN';

const String LN_commonName = 'commonName';

const int NID_commonName = 13;

const int OBJ_commonName = 2;

const String SN_surname = 'SN';

const String LN_surname = 'surname';

const int NID_surname = 100;

const int OBJ_surname = 2;

const String LN_serialNumber = 'serialNumber';

const int NID_serialNumber = 105;

const int OBJ_serialNumber = 2;

const String SN_countryName = 'C';

const String LN_countryName = 'countryName';

const int NID_countryName = 14;

const int OBJ_countryName = 2;

const String SN_localityName = 'L';

const String LN_localityName = 'localityName';

const int NID_localityName = 15;

const int OBJ_localityName = 2;

const String SN_stateOrProvinceName = 'ST';

const String LN_stateOrProvinceName = 'stateOrProvinceName';

const int NID_stateOrProvinceName = 16;

const int OBJ_stateOrProvinceName = 2;

const String SN_streetAddress = 'street';

const String LN_streetAddress = 'streetAddress';

const int NID_streetAddress = 660;

const int OBJ_streetAddress = 2;

const String SN_organizationName = 'O';

const String LN_organizationName = 'organizationName';

const int NID_organizationName = 17;

const int OBJ_organizationName = 2;

const String SN_organizationalUnitName = 'OU';

const String LN_organizationalUnitName = 'organizationalUnitName';

const int NID_organizationalUnitName = 18;

const int OBJ_organizationalUnitName = 2;

const String SN_title = 'title';

const String LN_title = 'title';

const int NID_title = 106;

const int OBJ_title = 2;

const String LN_description = 'description';

const int NID_description = 107;

const int OBJ_description = 2;

const String LN_searchGuide = 'searchGuide';

const int NID_searchGuide = 859;

const int OBJ_searchGuide = 2;

const String LN_businessCategory = 'businessCategory';

const int NID_businessCategory = 860;

const int OBJ_businessCategory = 2;

const String LN_postalAddress = 'postalAddress';

const int NID_postalAddress = 861;

const int OBJ_postalAddress = 2;

const String LN_postalCode = 'postalCode';

const int NID_postalCode = 661;

const int OBJ_postalCode = 2;

const String LN_postOfficeBox = 'postOfficeBox';

const int NID_postOfficeBox = 862;

const int OBJ_postOfficeBox = 2;

const String LN_physicalDeliveryOfficeName = 'physicalDeliveryOfficeName';

const int NID_physicalDeliveryOfficeName = 863;

const int OBJ_physicalDeliveryOfficeName = 2;

const String LN_telephoneNumber = 'telephoneNumber';

const int NID_telephoneNumber = 864;

const int OBJ_telephoneNumber = 2;

const String LN_telexNumber = 'telexNumber';

const int NID_telexNumber = 865;

const int OBJ_telexNumber = 2;

const String LN_teletexTerminalIdentifier = 'teletexTerminalIdentifier';

const int NID_teletexTerminalIdentifier = 866;

const int OBJ_teletexTerminalIdentifier = 2;

const String LN_facsimileTelephoneNumber = 'facsimileTelephoneNumber';

const int NID_facsimileTelephoneNumber = 867;

const int OBJ_facsimileTelephoneNumber = 2;

const String LN_x121Address = 'x121Address';

const int NID_x121Address = 868;

const int OBJ_x121Address = 2;

const String LN_internationaliSDNNumber = 'internationaliSDNNumber';

const int NID_internationaliSDNNumber = 869;

const int OBJ_internationaliSDNNumber = 2;

const String LN_registeredAddress = 'registeredAddress';

const int NID_registeredAddress = 870;

const int OBJ_registeredAddress = 2;

const String LN_destinationIndicator = 'destinationIndicator';

const int NID_destinationIndicator = 871;

const int OBJ_destinationIndicator = 2;

const String LN_preferredDeliveryMethod = 'preferredDeliveryMethod';

const int NID_preferredDeliveryMethod = 872;

const int OBJ_preferredDeliveryMethod = 2;

const String LN_presentationAddress = 'presentationAddress';

const int NID_presentationAddress = 873;

const int OBJ_presentationAddress = 2;

const String LN_supportedApplicationContext = 'supportedApplicationContext';

const int NID_supportedApplicationContext = 874;

const int OBJ_supportedApplicationContext = 2;

const String SN_member = 'member';

const int NID_member = 875;

const int OBJ_member = 2;

const String SN_owner = 'owner';

const int NID_owner = 876;

const int OBJ_owner = 2;

const String LN_roleOccupant = 'roleOccupant';

const int NID_roleOccupant = 877;

const int OBJ_roleOccupant = 2;

const String SN_seeAlso = 'seeAlso';

const int NID_seeAlso = 878;

const int OBJ_seeAlso = 2;

const String LN_userPassword = 'userPassword';

const int NID_userPassword = 879;

const int OBJ_userPassword = 2;

const String LN_userCertificate = 'userCertificate';

const int NID_userCertificate = 880;

const int OBJ_userCertificate = 2;

const String LN_cACertificate = 'cACertificate';

const int NID_cACertificate = 881;

const int OBJ_cACertificate = 2;

const String LN_authorityRevocationList = 'authorityRevocationList';

const int NID_authorityRevocationList = 882;

const int OBJ_authorityRevocationList = 2;

const String LN_certificateRevocationList = 'certificateRevocationList';

const int NID_certificateRevocationList = 883;

const int OBJ_certificateRevocationList = 2;

const String LN_crossCertificatePair = 'crossCertificatePair';

const int NID_crossCertificatePair = 884;

const int OBJ_crossCertificatePair = 2;

const String SN_name = 'name';

const String LN_name = 'name';

const int NID_name = 173;

const int OBJ_name = 2;

const String SN_givenName = 'GN';

const String LN_givenName = 'givenName';

const int NID_givenName = 99;

const int OBJ_givenName = 2;

const String SN_initials = 'initials';

const String LN_initials = 'initials';

const int NID_initials = 101;

const int OBJ_initials = 2;

const String LN_generationQualifier = 'generationQualifier';

const int NID_generationQualifier = 509;

const int OBJ_generationQualifier = 2;

const String LN_x500UniqueIdentifier = 'x500UniqueIdentifier';

const int NID_x500UniqueIdentifier = 503;

const int OBJ_x500UniqueIdentifier = 2;

const String SN_dnQualifier = 'dnQualifier';

const String LN_dnQualifier = 'dnQualifier';

const int NID_dnQualifier = 174;

const int OBJ_dnQualifier = 2;

const String LN_enhancedSearchGuide = 'enhancedSearchGuide';

const int NID_enhancedSearchGuide = 885;

const int OBJ_enhancedSearchGuide = 2;

const String LN_protocolInformation = 'protocolInformation';

const int NID_protocolInformation = 886;

const int OBJ_protocolInformation = 2;

const String LN_distinguishedName = 'distinguishedName';

const int NID_distinguishedName = 887;

const int OBJ_distinguishedName = 2;

const String LN_uniqueMember = 'uniqueMember';

const int NID_uniqueMember = 888;

const int OBJ_uniqueMember = 2;

const String LN_houseIdentifier = 'houseIdentifier';

const int NID_houseIdentifier = 889;

const int OBJ_houseIdentifier = 2;

const String LN_supportedAlgorithms = 'supportedAlgorithms';

const int NID_supportedAlgorithms = 890;

const int OBJ_supportedAlgorithms = 2;

const String LN_deltaRevocationList = 'deltaRevocationList';

const int NID_deltaRevocationList = 891;

const int OBJ_deltaRevocationList = 2;

const String SN_dmdName = 'dmdName';

const int NID_dmdName = 892;

const int OBJ_dmdName = 2;

const String LN_pseudonym = 'pseudonym';

const int NID_pseudonym = 510;

const int OBJ_pseudonym = 2;

const String SN_role = 'role';

const String LN_role = 'role';

const int NID_role = 400;

const int OBJ_role = 2;

const String LN_organizationIdentifier = 'organizationIdentifier';

const int NID_organizationIdentifier = 1089;

const int OBJ_organizationIdentifier = 2;

const String SN_countryCode3c = 'c3';

const String LN_countryCode3c = 'countryCode3c';

const int NID_countryCode3c = 1090;

const int OBJ_countryCode3c = 2;

const String SN_countryCode3n = 'n3';

const String LN_countryCode3n = 'countryCode3n';

const int NID_countryCode3n = 1091;

const int OBJ_countryCode3n = 2;

const String LN_dnsName = 'dnsName';

const int NID_dnsName = 1092;

const int OBJ_dnsName = 2;

const String SN_X500algorithms = 'X500algorithms';

const String LN_X500algorithms = 'directory services - algorithms';

const int NID_X500algorithms = 378;

const int OBJ_X500algorithms = 2;

const String SN_rsa = 'RSA';

const String LN_rsa = 'rsa';

const int NID_rsa = 19;

const int OBJ_rsa = 2;

const String SN_mdc2WithRSA = 'RSA-MDC2';

const String LN_mdc2WithRSA = 'mdc2WithRSA';

const int NID_mdc2WithRSA = 96;

const int OBJ_mdc2WithRSA = 2;

const String SN_mdc2 = 'MDC2';

const String LN_mdc2 = 'mdc2';

const int NID_mdc2 = 95;

const int OBJ_mdc2 = 2;

const String SN_id_ce = 'id-ce';

const int NID_id_ce = 81;

const int OBJ_id_ce = 2;

const String SN_subject_directory_attributes = 'subjectDirectoryAttributes';

const String LN_subject_directory_attributes =
    'X509v3 Subject Directory Attributes';

const int NID_subject_directory_attributes = 769;

const int OBJ_subject_directory_attributes = 2;

const String SN_subject_key_identifier = 'subjectKeyIdentifier';

const String LN_subject_key_identifier = 'X509v3 Subject Key Identifier';

const int NID_subject_key_identifier = 82;

const int OBJ_subject_key_identifier = 2;

const String SN_key_usage = 'keyUsage';

const String LN_key_usage = 'X509v3 Key Usage';

const int NID_key_usage = 83;

const int OBJ_key_usage = 2;

const String SN_private_key_usage_period = 'privateKeyUsagePeriod';

const String LN_private_key_usage_period = 'X509v3 Private Key Usage Period';

const int NID_private_key_usage_period = 84;

const int OBJ_private_key_usage_period = 2;

const String SN_subject_alt_name = 'subjectAltName';

const String LN_subject_alt_name = 'X509v3 Subject Alternative Name';

const int NID_subject_alt_name = 85;

const int OBJ_subject_alt_name = 2;

const String SN_issuer_alt_name = 'issuerAltName';

const String LN_issuer_alt_name = 'X509v3 Issuer Alternative Name';

const int NID_issuer_alt_name = 86;

const int OBJ_issuer_alt_name = 2;

const String SN_basic_constraints = 'basicConstraints';

const String LN_basic_constraints = 'X509v3 Basic Constraints';

const int NID_basic_constraints = 87;

const int OBJ_basic_constraints = 2;

const String SN_crl_number = 'crlNumber';

const String LN_crl_number = 'X509v3 CRL Number';

const int NID_crl_number = 88;

const int OBJ_crl_number = 2;

const String SN_crl_reason = 'CRLReason';

const String LN_crl_reason = 'X509v3 CRL Reason Code';

const int NID_crl_reason = 141;

const int OBJ_crl_reason = 2;

const String SN_invalidity_date = 'invalidityDate';

const String LN_invalidity_date = 'Invalidity Date';

const int NID_invalidity_date = 142;

const int OBJ_invalidity_date = 2;

const String SN_delta_crl = 'deltaCRL';

const String LN_delta_crl = 'X509v3 Delta CRL Indicator';

const int NID_delta_crl = 140;

const int OBJ_delta_crl = 2;

const String SN_issuing_distribution_point = 'issuingDistributionPoint';

const String LN_issuing_distribution_point =
    'X509v3 Issuing Distribution Point';

const int NID_issuing_distribution_point = 770;

const int OBJ_issuing_distribution_point = 2;

const String SN_certificate_issuer = 'certificateIssuer';

const String LN_certificate_issuer = 'X509v3 Certificate Issuer';

const int NID_certificate_issuer = 771;

const int OBJ_certificate_issuer = 2;

const String SN_name_constraints = 'nameConstraints';

const String LN_name_constraints = 'X509v3 Name Constraints';

const int NID_name_constraints = 666;

const int OBJ_name_constraints = 2;

const String SN_crl_distribution_points = 'crlDistributionPoints';

const String LN_crl_distribution_points = 'X509v3 CRL Distribution Points';

const int NID_crl_distribution_points = 103;

const int OBJ_crl_distribution_points = 2;

const String SN_certificate_policies = 'certificatePolicies';

const String LN_certificate_policies = 'X509v3 Certificate Policies';

const int NID_certificate_policies = 89;

const int OBJ_certificate_policies = 2;

const String SN_any_policy = 'anyPolicy';

const String LN_any_policy = 'X509v3 Any Policy';

const int NID_any_policy = 746;

const int OBJ_any_policy = 2;

const String SN_policy_mappings = 'policyMappings';

const String LN_policy_mappings = 'X509v3 Policy Mappings';

const int NID_policy_mappings = 747;

const int OBJ_policy_mappings = 2;

const String SN_authority_key_identifier = 'authorityKeyIdentifier';

const String LN_authority_key_identifier = 'X509v3 Authority Key Identifier';

const int NID_authority_key_identifier = 90;

const int OBJ_authority_key_identifier = 2;

const String SN_policy_constraints = 'policyConstraints';

const String LN_policy_constraints = 'X509v3 Policy Constraints';

const int NID_policy_constraints = 401;

const int OBJ_policy_constraints = 2;

const String SN_ext_key_usage = 'extendedKeyUsage';

const String LN_ext_key_usage = 'X509v3 Extended Key Usage';

const int NID_ext_key_usage = 126;

const int OBJ_ext_key_usage = 2;

const String SN_freshest_crl = 'freshestCRL';

const String LN_freshest_crl = 'X509v3 Freshest CRL';

const int NID_freshest_crl = 857;

const int OBJ_freshest_crl = 2;

const String SN_inhibit_any_policy = 'inhibitAnyPolicy';

const String LN_inhibit_any_policy = 'X509v3 Inhibit Any Policy';

const int NID_inhibit_any_policy = 748;

const int OBJ_inhibit_any_policy = 2;

const String SN_target_information = 'targetInformation';

const String LN_target_information = 'X509v3 AC Targeting';

const int NID_target_information = 402;

const int OBJ_target_information = 2;

const String SN_no_rev_avail = 'noRevAvail';

const String LN_no_rev_avail = 'X509v3 No Revocation Available';

const int NID_no_rev_avail = 403;

const int OBJ_no_rev_avail = 2;

const String SN_anyExtendedKeyUsage = 'anyExtendedKeyUsage';

const String LN_anyExtendedKeyUsage = 'Any Extended Key Usage';

const int NID_anyExtendedKeyUsage = 910;

const int OBJ_anyExtendedKeyUsage = 2;

const String SN_netscape = 'Netscape';

const String LN_netscape = 'Netscape Communications Corp.';

const int NID_netscape = 57;

const int OBJ_netscape = 2;

const String SN_netscape_cert_extension = 'nsCertExt';

const String LN_netscape_cert_extension = 'Netscape Certificate Extension';

const int NID_netscape_cert_extension = 58;

const int OBJ_netscape_cert_extension = 2;

const String SN_netscape_data_type = 'nsDataType';

const String LN_netscape_data_type = 'Netscape Data Type';

const int NID_netscape_data_type = 59;

const int OBJ_netscape_data_type = 2;

const String SN_netscape_cert_type = 'nsCertType';

const String LN_netscape_cert_type = 'Netscape Cert Type';

const int NID_netscape_cert_type = 71;

const int OBJ_netscape_cert_type = 2;

const String SN_netscape_base_url = 'nsBaseUrl';

const String LN_netscape_base_url = 'Netscape Base Url';

const int NID_netscape_base_url = 72;

const int OBJ_netscape_base_url = 2;

const String SN_netscape_revocation_url = 'nsRevocationUrl';

const String LN_netscape_revocation_url = 'Netscape Revocation Url';

const int NID_netscape_revocation_url = 73;

const int OBJ_netscape_revocation_url = 2;

const String SN_netscape_ca_revocation_url = 'nsCaRevocationUrl';

const String LN_netscape_ca_revocation_url = 'Netscape CA Revocation Url';

const int NID_netscape_ca_revocation_url = 74;

const int OBJ_netscape_ca_revocation_url = 2;

const String SN_netscape_renewal_url = 'nsRenewalUrl';

const String LN_netscape_renewal_url = 'Netscape Renewal Url';

const int NID_netscape_renewal_url = 75;

const int OBJ_netscape_renewal_url = 2;

const String SN_netscape_ca_policy_url = 'nsCaPolicyUrl';

const String LN_netscape_ca_policy_url = 'Netscape CA Policy Url';

const int NID_netscape_ca_policy_url = 76;

const int OBJ_netscape_ca_policy_url = 2;

const String SN_netscape_ssl_server_name = 'nsSslServerName';

const String LN_netscape_ssl_server_name = 'Netscape SSL Server Name';

const int NID_netscape_ssl_server_name = 77;

const int OBJ_netscape_ssl_server_name = 2;

const String SN_netscape_comment = 'nsComment';

const String LN_netscape_comment = 'Netscape Comment';

const int NID_netscape_comment = 78;

const int OBJ_netscape_comment = 2;

const String SN_netscape_cert_sequence = 'nsCertSequence';

const String LN_netscape_cert_sequence = 'Netscape Certificate Sequence';

const int NID_netscape_cert_sequence = 79;

const int OBJ_netscape_cert_sequence = 2;

const String SN_ns_sgc = 'nsSGC';

const String LN_ns_sgc = 'Netscape Server Gated Crypto';

const int NID_ns_sgc = 139;

const int OBJ_ns_sgc = 2;

const String SN_org = 'ORG';

const String LN_org = 'org';

const int NID_org = 379;

const int OBJ_org = 1;

const String SN_dod = 'DOD';

const String LN_dod = 'dod';

const int NID_dod = 380;

const int OBJ_dod = 1;

const String SN_iana = 'IANA';

const String LN_iana = 'iana';

const int NID_iana = 381;

const int OBJ_iana = 1;

const int OBJ_internet = 1;

const String SN_Directory = 'directory';

const String LN_Directory = 'Directory';

const int NID_Directory = 382;

const int OBJ_Directory = 1;

const String SN_Management = 'mgmt';

const String LN_Management = 'Management';

const int NID_Management = 383;

const int OBJ_Management = 1;

const String SN_Experimental = 'experimental';

const String LN_Experimental = 'Experimental';

const int NID_Experimental = 384;

const int OBJ_Experimental = 1;

const String SN_Private = 'private';

const String LN_Private = 'Private';

const int NID_Private = 385;

const int OBJ_Private = 1;

const String SN_Security = 'security';

const String LN_Security = 'Security';

const int NID_Security = 386;

const int OBJ_Security = 1;

const String SN_SNMPv2 = 'snmpv2';

const String LN_SNMPv2 = 'SNMPv2';

const int NID_SNMPv2 = 387;

const int OBJ_SNMPv2 = 1;

const String LN_Mail = 'Mail';

const int NID_Mail = 388;

const int OBJ_Mail = 1;

const String SN_Enterprises = 'enterprises';

const String LN_Enterprises = 'Enterprises';

const int NID_Enterprises = 389;

const int OBJ_Enterprises = 1;

const String SN_dcObject = 'dcobject';

const String LN_dcObject = 'dcObject';

const int NID_dcObject = 390;

const int OBJ_dcObject = 1;

const String SN_mime_mhs = 'mime-mhs';

const String LN_mime_mhs = 'MIME MHS';

const int NID_mime_mhs = 504;

const int OBJ_mime_mhs = 1;

const String SN_mime_mhs_headings = 'mime-mhs-headings';

const String LN_mime_mhs_headings = 'mime-mhs-headings';

const int NID_mime_mhs_headings = 505;

const int OBJ_mime_mhs_headings = 1;

const String SN_mime_mhs_bodies = 'mime-mhs-bodies';

const String LN_mime_mhs_bodies = 'mime-mhs-bodies';

const int NID_mime_mhs_bodies = 506;

const int OBJ_mime_mhs_bodies = 1;

const String SN_id_hex_partial_message = 'id-hex-partial-message';

const String LN_id_hex_partial_message = 'id-hex-partial-message';

const int NID_id_hex_partial_message = 507;

const int OBJ_id_hex_partial_message = 1;

const String SN_id_hex_multipart_message = 'id-hex-multipart-message';

const String LN_id_hex_multipart_message = 'id-hex-multipart-message';

const int NID_id_hex_multipart_message = 508;

const int OBJ_id_hex_multipart_message = 1;

const String SN_zlib_compression = 'ZLIB';

const String LN_zlib_compression = 'zlib compression';

const int NID_zlib_compression = 125;

const int OBJ_zlib_compression = 1;

const int OBJ_csor = 2;

const int OBJ_nistAlgorithms = 2;

const int OBJ_aes = 2;

const String SN_aes_128_ecb = 'AES-128-ECB';

const String LN_aes_128_ecb = 'aes-128-ecb';

const int NID_aes_128_ecb = 418;

const int OBJ_aes_128_ecb = 2;

const String SN_aes_128_cbc = 'AES-128-CBC';

const String LN_aes_128_cbc = 'aes-128-cbc';

const int NID_aes_128_cbc = 419;

const int OBJ_aes_128_cbc = 2;

const String SN_aes_128_ofb128 = 'AES-128-OFB';

const String LN_aes_128_ofb128 = 'aes-128-ofb';

const int NID_aes_128_ofb128 = 420;

const int OBJ_aes_128_ofb128 = 2;

const String SN_aes_128_cfb128 = 'AES-128-CFB';

const String LN_aes_128_cfb128 = 'aes-128-cfb';

const int NID_aes_128_cfb128 = 421;

const int OBJ_aes_128_cfb128 = 2;

const String SN_id_aes128_wrap = 'id-aes128-wrap';

const int NID_id_aes128_wrap = 788;

const int OBJ_id_aes128_wrap = 2;

const String SN_aes_128_gcm = 'id-aes128-GCM';

const String LN_aes_128_gcm = 'aes-128-gcm';

const int NID_aes_128_gcm = 895;

const int OBJ_aes_128_gcm = 2;

const String SN_aes_128_ccm = 'id-aes128-CCM';

const String LN_aes_128_ccm = 'aes-128-ccm';

const int NID_aes_128_ccm = 896;

const int OBJ_aes_128_ccm = 2;

const String SN_id_aes128_wrap_pad = 'id-aes128-wrap-pad';

const int NID_id_aes128_wrap_pad = 897;

const int OBJ_id_aes128_wrap_pad = 2;

const String SN_aes_192_ecb = 'AES-192-ECB';

const String LN_aes_192_ecb = 'aes-192-ecb';

const int NID_aes_192_ecb = 422;

const int OBJ_aes_192_ecb = 2;

const String SN_aes_192_cbc = 'AES-192-CBC';

const String LN_aes_192_cbc = 'aes-192-cbc';

const int NID_aes_192_cbc = 423;

const int OBJ_aes_192_cbc = 2;

const String SN_aes_192_ofb128 = 'AES-192-OFB';

const String LN_aes_192_ofb128 = 'aes-192-ofb';

const int NID_aes_192_ofb128 = 424;

const int OBJ_aes_192_ofb128 = 2;

const String SN_aes_192_cfb128 = 'AES-192-CFB';

const String LN_aes_192_cfb128 = 'aes-192-cfb';

const int NID_aes_192_cfb128 = 425;

const int OBJ_aes_192_cfb128 = 2;

const String SN_id_aes192_wrap = 'id-aes192-wrap';

const int NID_id_aes192_wrap = 789;

const int OBJ_id_aes192_wrap = 2;

const String SN_aes_192_gcm = 'id-aes192-GCM';

const String LN_aes_192_gcm = 'aes-192-gcm';

const int NID_aes_192_gcm = 898;

const int OBJ_aes_192_gcm = 2;

const String SN_aes_192_ccm = 'id-aes192-CCM';

const String LN_aes_192_ccm = 'aes-192-ccm';

const int NID_aes_192_ccm = 899;

const int OBJ_aes_192_ccm = 2;

const String SN_id_aes192_wrap_pad = 'id-aes192-wrap-pad';

const int NID_id_aes192_wrap_pad = 900;

const int OBJ_id_aes192_wrap_pad = 2;

const String SN_aes_256_ecb = 'AES-256-ECB';

const String LN_aes_256_ecb = 'aes-256-ecb';

const int NID_aes_256_ecb = 426;

const int OBJ_aes_256_ecb = 2;

const String SN_aes_256_cbc = 'AES-256-CBC';

const String LN_aes_256_cbc = 'aes-256-cbc';

const int NID_aes_256_cbc = 427;

const int OBJ_aes_256_cbc = 2;

const String SN_aes_256_ofb128 = 'AES-256-OFB';

const String LN_aes_256_ofb128 = 'aes-256-ofb';

const int NID_aes_256_ofb128 = 428;

const int OBJ_aes_256_ofb128 = 2;

const String SN_aes_256_cfb128 = 'AES-256-CFB';

const String LN_aes_256_cfb128 = 'aes-256-cfb';

const int NID_aes_256_cfb128 = 429;

const int OBJ_aes_256_cfb128 = 2;

const String SN_id_aes256_wrap = 'id-aes256-wrap';

const int NID_id_aes256_wrap = 790;

const int OBJ_id_aes256_wrap = 2;

const String SN_aes_256_gcm = 'id-aes256-GCM';

const String LN_aes_256_gcm = 'aes-256-gcm';

const int NID_aes_256_gcm = 901;

const int OBJ_aes_256_gcm = 2;

const String SN_aes_256_ccm = 'id-aes256-CCM';

const String LN_aes_256_ccm = 'aes-256-ccm';

const int NID_aes_256_ccm = 902;

const int OBJ_aes_256_ccm = 2;

const String SN_id_aes256_wrap_pad = 'id-aes256-wrap-pad';

const int NID_id_aes256_wrap_pad = 903;

const int OBJ_id_aes256_wrap_pad = 2;

const String SN_aes_128_xts = 'AES-128-XTS';

const String LN_aes_128_xts = 'aes-128-xts';

const int NID_aes_128_xts = 913;

const int OBJ_aes_128_xts = 1;

const String SN_aes_256_xts = 'AES-256-XTS';

const String LN_aes_256_xts = 'aes-256-xts';

const int NID_aes_256_xts = 914;

const int OBJ_aes_256_xts = 1;

const String SN_aes_128_cfb1 = 'AES-128-CFB1';

const String LN_aes_128_cfb1 = 'aes-128-cfb1';

const int NID_aes_128_cfb1 = 650;

const String SN_aes_192_cfb1 = 'AES-192-CFB1';

const String LN_aes_192_cfb1 = 'aes-192-cfb1';

const int NID_aes_192_cfb1 = 651;

const String SN_aes_256_cfb1 = 'AES-256-CFB1';

const String LN_aes_256_cfb1 = 'aes-256-cfb1';

const int NID_aes_256_cfb1 = 652;

const String SN_aes_128_cfb8 = 'AES-128-CFB8';

const String LN_aes_128_cfb8 = 'aes-128-cfb8';

const int NID_aes_128_cfb8 = 653;

const String SN_aes_192_cfb8 = 'AES-192-CFB8';

const String LN_aes_192_cfb8 = 'aes-192-cfb8';

const int NID_aes_192_cfb8 = 654;

const String SN_aes_256_cfb8 = 'AES-256-CFB8';

const String LN_aes_256_cfb8 = 'aes-256-cfb8';

const int NID_aes_256_cfb8 = 655;

const String SN_aes_128_ctr = 'AES-128-CTR';

const String LN_aes_128_ctr = 'aes-128-ctr';

const int NID_aes_128_ctr = 904;

const String SN_aes_192_ctr = 'AES-192-CTR';

const String LN_aes_192_ctr = 'aes-192-ctr';

const int NID_aes_192_ctr = 905;

const String SN_aes_256_ctr = 'AES-256-CTR';

const String LN_aes_256_ctr = 'aes-256-ctr';

const int NID_aes_256_ctr = 906;

const String SN_aes_128_ocb = 'AES-128-OCB';

const String LN_aes_128_ocb = 'aes-128-ocb';

const int NID_aes_128_ocb = 958;

const String SN_aes_192_ocb = 'AES-192-OCB';

const String LN_aes_192_ocb = 'aes-192-ocb';

const int NID_aes_192_ocb = 959;

const String SN_aes_256_ocb = 'AES-256-OCB';

const String LN_aes_256_ocb = 'aes-256-ocb';

const int NID_aes_256_ocb = 960;

const String SN_des_cfb1 = 'DES-CFB1';

const String LN_des_cfb1 = 'des-cfb1';

const int NID_des_cfb1 = 656;

const String SN_des_cfb8 = 'DES-CFB8';

const String LN_des_cfb8 = 'des-cfb8';

const int NID_des_cfb8 = 657;

const String SN_des_ede3_cfb1 = 'DES-EDE3-CFB1';

const String LN_des_ede3_cfb1 = 'des-ede3-cfb1';

const int NID_des_ede3_cfb1 = 658;

const String SN_des_ede3_cfb8 = 'DES-EDE3-CFB8';

const String LN_des_ede3_cfb8 = 'des-ede3-cfb8';

const int NID_des_ede3_cfb8 = 659;

const int OBJ_nist_hashalgs = 2;

const String SN_sha256 = 'SHA256';

const String LN_sha256 = 'sha256';

const int NID_sha256 = 672;

const int OBJ_sha256 = 2;

const String SN_sha384 = 'SHA384';

const String LN_sha384 = 'sha384';

const int NID_sha384 = 673;

const int OBJ_sha384 = 2;

const String SN_sha512 = 'SHA512';

const String LN_sha512 = 'sha512';

const int NID_sha512 = 674;

const int OBJ_sha512 = 2;

const String SN_sha224 = 'SHA224';

const String LN_sha224 = 'sha224';

const int NID_sha224 = 675;

const int OBJ_sha224 = 2;

const String SN_sha512_224 = 'SHA512-224';

const String LN_sha512_224 = 'sha512-224';

const int NID_sha512_224 = 1094;

const int OBJ_sha512_224 = 2;

const String SN_sha512_256 = 'SHA512-256';

const String LN_sha512_256 = 'sha512-256';

const int NID_sha512_256 = 1095;

const int OBJ_sha512_256 = 2;

const String SN_sha3_224 = 'SHA3-224';

const String LN_sha3_224 = 'sha3-224';

const int NID_sha3_224 = 1096;

const int OBJ_sha3_224 = 2;

const String SN_sha3_256 = 'SHA3-256';

const String LN_sha3_256 = 'sha3-256';

const int NID_sha3_256 = 1097;

const int OBJ_sha3_256 = 2;

const String SN_sha3_384 = 'SHA3-384';

const String LN_sha3_384 = 'sha3-384';

const int NID_sha3_384 = 1098;

const int OBJ_sha3_384 = 2;

const String SN_sha3_512 = 'SHA3-512';

const String LN_sha3_512 = 'sha3-512';

const int NID_sha3_512 = 1099;

const int OBJ_sha3_512 = 2;

const String SN_shake128 = 'SHAKE128';

const String LN_shake128 = 'shake128';

const int NID_shake128 = 1100;

const int OBJ_shake128 = 2;

const String SN_shake256 = 'SHAKE256';

const String LN_shake256 = 'shake256';

const int NID_shake256 = 1101;

const int OBJ_shake256 = 2;

const String SN_hmac_sha3_224 = 'id-hmacWithSHA3-224';

const String LN_hmac_sha3_224 = 'hmac-sha3-224';

const int NID_hmac_sha3_224 = 1102;

const int OBJ_hmac_sha3_224 = 2;

const String SN_hmac_sha3_256 = 'id-hmacWithSHA3-256';

const String LN_hmac_sha3_256 = 'hmac-sha3-256';

const int NID_hmac_sha3_256 = 1103;

const int OBJ_hmac_sha3_256 = 2;

const String SN_hmac_sha3_384 = 'id-hmacWithSHA3-384';

const String LN_hmac_sha3_384 = 'hmac-sha3-384';

const int NID_hmac_sha3_384 = 1104;

const int OBJ_hmac_sha3_384 = 2;

const String SN_hmac_sha3_512 = 'id-hmacWithSHA3-512';

const String LN_hmac_sha3_512 = 'hmac-sha3-512';

const int NID_hmac_sha3_512 = 1105;

const int OBJ_hmac_sha3_512 = 2;

const int OBJ_dsa_with_sha2 = 2;

const String SN_dsa_with_SHA224 = 'dsa_with_SHA224';

const int NID_dsa_with_SHA224 = 802;

const int OBJ_dsa_with_SHA224 = 2;

const String SN_dsa_with_SHA256 = 'dsa_with_SHA256';

const int NID_dsa_with_SHA256 = 803;

const int OBJ_dsa_with_SHA256 = 2;

const int OBJ_sigAlgs = 2;

const String SN_dsa_with_SHA384 = 'id-dsa-with-sha384';

const String LN_dsa_with_SHA384 = 'dsa_with_SHA384';

const int NID_dsa_with_SHA384 = 1106;

const int OBJ_dsa_with_SHA384 = 2;

const String SN_dsa_with_SHA512 = 'id-dsa-with-sha512';

const String LN_dsa_with_SHA512 = 'dsa_with_SHA512';

const int NID_dsa_with_SHA512 = 1107;

const int OBJ_dsa_with_SHA512 = 2;

const String SN_dsa_with_SHA3_224 = 'id-dsa-with-sha3-224';

const String LN_dsa_with_SHA3_224 = 'dsa_with_SHA3-224';

const int NID_dsa_with_SHA3_224 = 1108;

const int OBJ_dsa_with_SHA3_224 = 2;

const String SN_dsa_with_SHA3_256 = 'id-dsa-with-sha3-256';

const String LN_dsa_with_SHA3_256 = 'dsa_with_SHA3-256';

const int NID_dsa_with_SHA3_256 = 1109;

const int OBJ_dsa_with_SHA3_256 = 2;

const String SN_dsa_with_SHA3_384 = 'id-dsa-with-sha3-384';

const String LN_dsa_with_SHA3_384 = 'dsa_with_SHA3-384';

const int NID_dsa_with_SHA3_384 = 1110;

const int OBJ_dsa_with_SHA3_384 = 2;

const String SN_dsa_with_SHA3_512 = 'id-dsa-with-sha3-512';

const String LN_dsa_with_SHA3_512 = 'dsa_with_SHA3-512';

const int NID_dsa_with_SHA3_512 = 1111;

const int OBJ_dsa_with_SHA3_512 = 2;

const String SN_ecdsa_with_SHA3_224 = 'id-ecdsa-with-sha3-224';

const String LN_ecdsa_with_SHA3_224 = 'ecdsa_with_SHA3-224';

const int NID_ecdsa_with_SHA3_224 = 1112;

const int OBJ_ecdsa_with_SHA3_224 = 2;

const String SN_ecdsa_with_SHA3_256 = 'id-ecdsa-with-sha3-256';

const String LN_ecdsa_with_SHA3_256 = 'ecdsa_with_SHA3-256';

const int NID_ecdsa_with_SHA3_256 = 1113;

const int OBJ_ecdsa_with_SHA3_256 = 2;

const String SN_ecdsa_with_SHA3_384 = 'id-ecdsa-with-sha3-384';

const String LN_ecdsa_with_SHA3_384 = 'ecdsa_with_SHA3-384';

const int NID_ecdsa_with_SHA3_384 = 1114;

const int OBJ_ecdsa_with_SHA3_384 = 2;

const String SN_ecdsa_with_SHA3_512 = 'id-ecdsa-with-sha3-512';

const String LN_ecdsa_with_SHA3_512 = 'ecdsa_with_SHA3-512';

const int NID_ecdsa_with_SHA3_512 = 1115;

const int OBJ_ecdsa_with_SHA3_512 = 2;

const String SN_RSA_SHA3_224 = 'id-rsassa-pkcs1-v1_5-with-sha3-224';

const String LN_RSA_SHA3_224 = 'RSA-SHA3-224';

const int NID_RSA_SHA3_224 = 1116;

const int OBJ_RSA_SHA3_224 = 2;

const String SN_RSA_SHA3_256 = 'id-rsassa-pkcs1-v1_5-with-sha3-256';

const String LN_RSA_SHA3_256 = 'RSA-SHA3-256';

const int NID_RSA_SHA3_256 = 1117;

const int OBJ_RSA_SHA3_256 = 2;

const String SN_RSA_SHA3_384 = 'id-rsassa-pkcs1-v1_5-with-sha3-384';

const String LN_RSA_SHA3_384 = 'RSA-SHA3-384';

const int NID_RSA_SHA3_384 = 1118;

const int OBJ_RSA_SHA3_384 = 2;

const String SN_RSA_SHA3_512 = 'id-rsassa-pkcs1-v1_5-with-sha3-512';

const String LN_RSA_SHA3_512 = 'RSA-SHA3-512';

const int NID_RSA_SHA3_512 = 1119;

const int OBJ_RSA_SHA3_512 = 2;

const String SN_hold_instruction_code = 'holdInstructionCode';

const String LN_hold_instruction_code = 'Hold Instruction Code';

const int NID_hold_instruction_code = 430;

const int OBJ_hold_instruction_code = 2;

const int OBJ_holdInstruction = 1;

const String SN_hold_instruction_none = 'holdInstructionNone';

const String LN_hold_instruction_none = 'Hold Instruction None';

const int NID_hold_instruction_none = 431;

const int OBJ_hold_instruction_none = 1;

const String SN_hold_instruction_call_issuer = 'holdInstructionCallIssuer';

const String LN_hold_instruction_call_issuer = 'Hold Instruction Call Issuer';

const int NID_hold_instruction_call_issuer = 432;

const int OBJ_hold_instruction_call_issuer = 1;

const String SN_hold_instruction_reject = 'holdInstructionReject';

const String LN_hold_instruction_reject = 'Hold Instruction Reject';

const int NID_hold_instruction_reject = 433;

const int OBJ_hold_instruction_reject = 1;

const String SN_data = 'data';

const int NID_data = 434;

const int OBJ_data = 0;

const String SN_pss = 'pss';

const int NID_pss = 435;

const int OBJ_pss = 0;

const String SN_ucl = 'ucl';

const int NID_ucl = 436;

const int OBJ_ucl = 0;

const String SN_pilot = 'pilot';

const int NID_pilot = 437;

const int OBJ_pilot = 0;

const String LN_pilotAttributeType = 'pilotAttributeType';

const int NID_pilotAttributeType = 438;

const int OBJ_pilotAttributeType = 0;

const String LN_pilotAttributeSyntax = 'pilotAttributeSyntax';

const int NID_pilotAttributeSyntax = 439;

const int OBJ_pilotAttributeSyntax = 0;

const String LN_pilotObjectClass = 'pilotObjectClass';

const int NID_pilotObjectClass = 440;

const int OBJ_pilotObjectClass = 0;

const String LN_pilotGroups = 'pilotGroups';

const int NID_pilotGroups = 441;

const int OBJ_pilotGroups = 0;

const String LN_iA5StringSyntax = 'iA5StringSyntax';

const int NID_iA5StringSyntax = 442;

const int OBJ_iA5StringSyntax = 0;

const String LN_caseIgnoreIA5StringSyntax = 'caseIgnoreIA5StringSyntax';

const int NID_caseIgnoreIA5StringSyntax = 443;

const int OBJ_caseIgnoreIA5StringSyntax = 0;

const String LN_pilotObject = 'pilotObject';

const int NID_pilotObject = 444;

const int OBJ_pilotObject = 0;

const String LN_pilotPerson = 'pilotPerson';

const int NID_pilotPerson = 445;

const int OBJ_pilotPerson = 0;

const String SN_account = 'account';

const int NID_account = 446;

const int OBJ_account = 0;

const String SN_document = 'document';

const int NID_document = 447;

const int OBJ_document = 0;

const String SN_room = 'room';

const int NID_room = 448;

const int OBJ_room = 0;

const String LN_documentSeries = 'documentSeries';

const int NID_documentSeries = 449;

const int OBJ_documentSeries = 0;

const String SN_Domain = 'domain';

const String LN_Domain = 'Domain';

const int NID_Domain = 392;

const int OBJ_Domain = 0;

const String LN_rFC822localPart = 'rFC822localPart';

const int NID_rFC822localPart = 450;

const int OBJ_rFC822localPart = 0;

const String LN_dNSDomain = 'dNSDomain';

const int NID_dNSDomain = 451;

const int OBJ_dNSDomain = 0;

const String LN_domainRelatedObject = 'domainRelatedObject';

const int NID_domainRelatedObject = 452;

const int OBJ_domainRelatedObject = 0;

const String LN_friendlyCountry = 'friendlyCountry';

const int NID_friendlyCountry = 453;

const int OBJ_friendlyCountry = 0;

const String LN_simpleSecurityObject = 'simpleSecurityObject';

const int NID_simpleSecurityObject = 454;

const int OBJ_simpleSecurityObject = 0;

const String LN_pilotOrganization = 'pilotOrganization';

const int NID_pilotOrganization = 455;

const int OBJ_pilotOrganization = 0;

const String LN_pilotDSA = 'pilotDSA';

const int NID_pilotDSA = 456;

const int OBJ_pilotDSA = 0;

const String LN_qualityLabelledData = 'qualityLabelledData';

const int NID_qualityLabelledData = 457;

const int OBJ_qualityLabelledData = 0;

const String SN_userId = 'UID';

const String LN_userId = 'userId';

const int NID_userId = 458;

const int OBJ_userId = 0;

const String LN_textEncodedORAddress = 'textEncodedORAddress';

const int NID_textEncodedORAddress = 459;

const int OBJ_textEncodedORAddress = 0;

const String SN_rfc822Mailbox = 'mail';

const String LN_rfc822Mailbox = 'rfc822Mailbox';

const int NID_rfc822Mailbox = 460;

const int OBJ_rfc822Mailbox = 0;

const String SN_info = 'info';

const int NID_info = 461;

const int OBJ_info = 0;

const String LN_favouriteDrink = 'favouriteDrink';

const int NID_favouriteDrink = 462;

const int OBJ_favouriteDrink = 0;

const String LN_roomNumber = 'roomNumber';

const int NID_roomNumber = 463;

const int OBJ_roomNumber = 0;

const String SN_photo = 'photo';

const int NID_photo = 464;

const int OBJ_photo = 0;

const String LN_userClass = 'userClass';

const int NID_userClass = 465;

const int OBJ_userClass = 0;

const String SN_host = 'host';

const int NID_host = 466;

const int OBJ_host = 0;

const String SN_manager = 'manager';

const int NID_manager = 467;

const int OBJ_manager = 0;

const String LN_documentIdentifier = 'documentIdentifier';

const int NID_documentIdentifier = 468;

const int OBJ_documentIdentifier = 0;

const String LN_documentTitle = 'documentTitle';

const int NID_documentTitle = 469;

const int OBJ_documentTitle = 0;

const String LN_documentVersion = 'documentVersion';

const int NID_documentVersion = 470;

const int OBJ_documentVersion = 0;

const String LN_documentAuthor = 'documentAuthor';

const int NID_documentAuthor = 471;

const int OBJ_documentAuthor = 0;

const String LN_documentLocation = 'documentLocation';

const int NID_documentLocation = 472;

const int OBJ_documentLocation = 0;

const String LN_homeTelephoneNumber = 'homeTelephoneNumber';

const int NID_homeTelephoneNumber = 473;

const int OBJ_homeTelephoneNumber = 0;

const String SN_secretary = 'secretary';

const int NID_secretary = 474;

const int OBJ_secretary = 0;

const String LN_otherMailbox = 'otherMailbox';

const int NID_otherMailbox = 475;

const int OBJ_otherMailbox = 0;

const String LN_lastModifiedTime = 'lastModifiedTime';

const int NID_lastModifiedTime = 476;

const int OBJ_lastModifiedTime = 0;

const String LN_lastModifiedBy = 'lastModifiedBy';

const int NID_lastModifiedBy = 477;

const int OBJ_lastModifiedBy = 0;

const String SN_domainComponent = 'DC';

const String LN_domainComponent = 'domainComponent';

const int NID_domainComponent = 391;

const int OBJ_domainComponent = 0;

const String LN_aRecord = 'aRecord';

const int NID_aRecord = 478;

const int OBJ_aRecord = 0;

const String LN_pilotAttributeType27 = 'pilotAttributeType27';

const int NID_pilotAttributeType27 = 479;

const int OBJ_pilotAttributeType27 = 0;

const String LN_mXRecord = 'mXRecord';

const int NID_mXRecord = 480;

const int OBJ_mXRecord = 0;

const String LN_nSRecord = 'nSRecord';

const int NID_nSRecord = 481;

const int OBJ_nSRecord = 0;

const String LN_sOARecord = 'sOARecord';

const int NID_sOARecord = 482;

const int OBJ_sOARecord = 0;

const String LN_cNAMERecord = 'cNAMERecord';

const int NID_cNAMERecord = 483;

const int OBJ_cNAMERecord = 0;

const String LN_associatedDomain = 'associatedDomain';

const int NID_associatedDomain = 484;

const int OBJ_associatedDomain = 0;

const String LN_associatedName = 'associatedName';

const int NID_associatedName = 485;

const int OBJ_associatedName = 0;

const String LN_homePostalAddress = 'homePostalAddress';

const int NID_homePostalAddress = 486;

const int OBJ_homePostalAddress = 0;

const String LN_personalTitle = 'personalTitle';

const int NID_personalTitle = 487;

const int OBJ_personalTitle = 0;

const String LN_mobileTelephoneNumber = 'mobileTelephoneNumber';

const int NID_mobileTelephoneNumber = 488;

const int OBJ_mobileTelephoneNumber = 0;

const String LN_pagerTelephoneNumber = 'pagerTelephoneNumber';

const int NID_pagerTelephoneNumber = 489;

const int OBJ_pagerTelephoneNumber = 0;

const String LN_friendlyCountryName = 'friendlyCountryName';

const int NID_friendlyCountryName = 490;

const int OBJ_friendlyCountryName = 0;

const String SN_uniqueIdentifier = 'uid';

const String LN_uniqueIdentifier = 'uniqueIdentifier';

const int NID_uniqueIdentifier = 102;

const int OBJ_uniqueIdentifier = 0;

const String LN_organizationalStatus = 'organizationalStatus';

const int NID_organizationalStatus = 491;

const int OBJ_organizationalStatus = 0;

const String LN_janetMailbox = 'janetMailbox';

const int NID_janetMailbox = 492;

const int OBJ_janetMailbox = 0;

const String LN_mailPreferenceOption = 'mailPreferenceOption';

const int NID_mailPreferenceOption = 493;

const int OBJ_mailPreferenceOption = 0;

const String LN_buildingName = 'buildingName';

const int NID_buildingName = 494;

const int OBJ_buildingName = 0;

const String LN_dSAQuality = 'dSAQuality';

const int NID_dSAQuality = 495;

const int OBJ_dSAQuality = 0;

const String LN_singleLevelQuality = 'singleLevelQuality';

const int NID_singleLevelQuality = 496;

const int OBJ_singleLevelQuality = 0;

const String LN_subtreeMinimumQuality = 'subtreeMinimumQuality';

const int NID_subtreeMinimumQuality = 497;

const int OBJ_subtreeMinimumQuality = 0;

const String LN_subtreeMaximumQuality = 'subtreeMaximumQuality';

const int NID_subtreeMaximumQuality = 498;

const int OBJ_subtreeMaximumQuality = 0;

const String LN_personalSignature = 'personalSignature';

const int NID_personalSignature = 499;

const int OBJ_personalSignature = 0;

const String LN_dITRedirect = 'dITRedirect';

const int NID_dITRedirect = 500;

const int OBJ_dITRedirect = 0;

const String SN_audio = 'audio';

const int NID_audio = 501;

const int OBJ_audio = 0;

const String LN_documentPublisher = 'documentPublisher';

const int NID_documentPublisher = 502;

const int OBJ_documentPublisher = 0;

const String SN_id_set = 'id-set';

const String LN_id_set = 'Secure Electronic Transactions';

const int NID_id_set = 512;

const int OBJ_id_set = 2;

const String SN_set_ctype = 'set-ctype';

const String LN_set_ctype = 'content types';

const int NID_set_ctype = 513;

const int OBJ_set_ctype = 2;

const String SN_set_msgExt = 'set-msgExt';

const String LN_set_msgExt = 'message extensions';

const int NID_set_msgExt = 514;

const int OBJ_set_msgExt = 2;

const String SN_set_attr = 'set-attr';

const int NID_set_attr = 515;

const int OBJ_set_attr = 2;

const String SN_set_policy = 'set-policy';

const int NID_set_policy = 516;

const int OBJ_set_policy = 2;

const String SN_set_certExt = 'set-certExt';

const String LN_set_certExt = 'certificate extensions';

const int NID_set_certExt = 517;

const int OBJ_set_certExt = 2;

const String SN_set_brand = 'set-brand';

const int NID_set_brand = 518;

const int OBJ_set_brand = 2;

const String SN_setct_PANData = 'setct-PANData';

const int NID_setct_PANData = 519;

const int OBJ_setct_PANData = 2;

const String SN_setct_PANToken = 'setct-PANToken';

const int NID_setct_PANToken = 520;

const int OBJ_setct_PANToken = 2;

const String SN_setct_PANOnly = 'setct-PANOnly';

const int NID_setct_PANOnly = 521;

const int OBJ_setct_PANOnly = 2;

const String SN_setct_OIData = 'setct-OIData';

const int NID_setct_OIData = 522;

const int OBJ_setct_OIData = 2;

const String SN_setct_PI = 'setct-PI';

const int NID_setct_PI = 523;

const int OBJ_setct_PI = 2;

const String SN_setct_PIData = 'setct-PIData';

const int NID_setct_PIData = 524;

const int OBJ_setct_PIData = 2;

const String SN_setct_PIDataUnsigned = 'setct-PIDataUnsigned';

const int NID_setct_PIDataUnsigned = 525;

const int OBJ_setct_PIDataUnsigned = 2;

const String SN_setct_HODInput = 'setct-HODInput';

const int NID_setct_HODInput = 526;

const int OBJ_setct_HODInput = 2;

const String SN_setct_AuthResBaggage = 'setct-AuthResBaggage';

const int NID_setct_AuthResBaggage = 527;

const int OBJ_setct_AuthResBaggage = 2;

const String SN_setct_AuthRevReqBaggage = 'setct-AuthRevReqBaggage';

const int NID_setct_AuthRevReqBaggage = 528;

const int OBJ_setct_AuthRevReqBaggage = 2;

const String SN_setct_AuthRevResBaggage = 'setct-AuthRevResBaggage';

const int NID_setct_AuthRevResBaggage = 529;

const int OBJ_setct_AuthRevResBaggage = 2;

const String SN_setct_CapTokenSeq = 'setct-CapTokenSeq';

const int NID_setct_CapTokenSeq = 530;

const int OBJ_setct_CapTokenSeq = 2;

const String SN_setct_PInitResData = 'setct-PInitResData';

const int NID_setct_PInitResData = 531;

const int OBJ_setct_PInitResData = 2;

const String SN_setct_PI_TBS = 'setct-PI-TBS';

const int NID_setct_PI_TBS = 532;

const int OBJ_setct_PI_TBS = 2;

const String SN_setct_PResData = 'setct-PResData';

const int NID_setct_PResData = 533;

const int OBJ_setct_PResData = 2;

const String SN_setct_AuthReqTBS = 'setct-AuthReqTBS';

const int NID_setct_AuthReqTBS = 534;

const int OBJ_setct_AuthReqTBS = 2;

const String SN_setct_AuthResTBS = 'setct-AuthResTBS';

const int NID_setct_AuthResTBS = 535;

const int OBJ_setct_AuthResTBS = 2;

const String SN_setct_AuthResTBSX = 'setct-AuthResTBSX';

const int NID_setct_AuthResTBSX = 536;

const int OBJ_setct_AuthResTBSX = 2;

const String SN_setct_AuthTokenTBS = 'setct-AuthTokenTBS';

const int NID_setct_AuthTokenTBS = 537;

const int OBJ_setct_AuthTokenTBS = 2;

const String SN_setct_CapTokenData = 'setct-CapTokenData';

const int NID_setct_CapTokenData = 538;

const int OBJ_setct_CapTokenData = 2;

const String SN_setct_CapTokenTBS = 'setct-CapTokenTBS';

const int NID_setct_CapTokenTBS = 539;

const int OBJ_setct_CapTokenTBS = 2;

const String SN_setct_AcqCardCodeMsg = 'setct-AcqCardCodeMsg';

const int NID_setct_AcqCardCodeMsg = 540;

const int OBJ_setct_AcqCardCodeMsg = 2;

const String SN_setct_AuthRevReqTBS = 'setct-AuthRevReqTBS';

const int NID_setct_AuthRevReqTBS = 541;

const int OBJ_setct_AuthRevReqTBS = 2;

const String SN_setct_AuthRevResData = 'setct-AuthRevResData';

const int NID_setct_AuthRevResData = 542;

const int OBJ_setct_AuthRevResData = 2;

const String SN_setct_AuthRevResTBS = 'setct-AuthRevResTBS';

const int NID_setct_AuthRevResTBS = 543;

const int OBJ_setct_AuthRevResTBS = 2;

const String SN_setct_CapReqTBS = 'setct-CapReqTBS';

const int NID_setct_CapReqTBS = 544;

const int OBJ_setct_CapReqTBS = 2;

const String SN_setct_CapReqTBSX = 'setct-CapReqTBSX';

const int NID_setct_CapReqTBSX = 545;

const int OBJ_setct_CapReqTBSX = 2;

const String SN_setct_CapResData = 'setct-CapResData';

const int NID_setct_CapResData = 546;

const int OBJ_setct_CapResData = 2;

const String SN_setct_CapRevReqTBS = 'setct-CapRevReqTBS';

const int NID_setct_CapRevReqTBS = 547;

const int OBJ_setct_CapRevReqTBS = 2;

const String SN_setct_CapRevReqTBSX = 'setct-CapRevReqTBSX';

const int NID_setct_CapRevReqTBSX = 548;

const int OBJ_setct_CapRevReqTBSX = 2;

const String SN_setct_CapRevResData = 'setct-CapRevResData';

const int NID_setct_CapRevResData = 549;

const int OBJ_setct_CapRevResData = 2;

const String SN_setct_CredReqTBS = 'setct-CredReqTBS';

const int NID_setct_CredReqTBS = 550;

const int OBJ_setct_CredReqTBS = 2;

const String SN_setct_CredReqTBSX = 'setct-CredReqTBSX';

const int NID_setct_CredReqTBSX = 551;

const int OBJ_setct_CredReqTBSX = 2;

const String SN_setct_CredResData = 'setct-CredResData';

const int NID_setct_CredResData = 552;

const int OBJ_setct_CredResData = 2;

const String SN_setct_CredRevReqTBS = 'setct-CredRevReqTBS';

const int NID_setct_CredRevReqTBS = 553;

const int OBJ_setct_CredRevReqTBS = 2;

const String SN_setct_CredRevReqTBSX = 'setct-CredRevReqTBSX';

const int NID_setct_CredRevReqTBSX = 554;

const int OBJ_setct_CredRevReqTBSX = 2;

const String SN_setct_CredRevResData = 'setct-CredRevResData';

const int NID_setct_CredRevResData = 555;

const int OBJ_setct_CredRevResData = 2;

const String SN_setct_PCertReqData = 'setct-PCertReqData';

const int NID_setct_PCertReqData = 556;

const int OBJ_setct_PCertReqData = 2;

const String SN_setct_PCertResTBS = 'setct-PCertResTBS';

const int NID_setct_PCertResTBS = 557;

const int OBJ_setct_PCertResTBS = 2;

const String SN_setct_BatchAdminReqData = 'setct-BatchAdminReqData';

const int NID_setct_BatchAdminReqData = 558;

const int OBJ_setct_BatchAdminReqData = 2;

const String SN_setct_BatchAdminResData = 'setct-BatchAdminResData';

const int NID_setct_BatchAdminResData = 559;

const int OBJ_setct_BatchAdminResData = 2;

const String SN_setct_CardCInitResTBS = 'setct-CardCInitResTBS';

const int NID_setct_CardCInitResTBS = 560;

const int OBJ_setct_CardCInitResTBS = 2;

const String SN_setct_MeAqCInitResTBS = 'setct-MeAqCInitResTBS';

const int NID_setct_MeAqCInitResTBS = 561;

const int OBJ_setct_MeAqCInitResTBS = 2;

const String SN_setct_RegFormResTBS = 'setct-RegFormResTBS';

const int NID_setct_RegFormResTBS = 562;

const int OBJ_setct_RegFormResTBS = 2;

const String SN_setct_CertReqData = 'setct-CertReqData';

const int NID_setct_CertReqData = 563;

const int OBJ_setct_CertReqData = 2;

const String SN_setct_CertReqTBS = 'setct-CertReqTBS';

const int NID_setct_CertReqTBS = 564;

const int OBJ_setct_CertReqTBS = 2;

const String SN_setct_CertResData = 'setct-CertResData';

const int NID_setct_CertResData = 565;

const int OBJ_setct_CertResData = 2;

const String SN_setct_CertInqReqTBS = 'setct-CertInqReqTBS';

const int NID_setct_CertInqReqTBS = 566;

const int OBJ_setct_CertInqReqTBS = 2;

const String SN_setct_ErrorTBS = 'setct-ErrorTBS';

const int NID_setct_ErrorTBS = 567;

const int OBJ_setct_ErrorTBS = 2;

const String SN_setct_PIDualSignedTBE = 'setct-PIDualSignedTBE';

const int NID_setct_PIDualSignedTBE = 568;

const int OBJ_setct_PIDualSignedTBE = 2;

const String SN_setct_PIUnsignedTBE = 'setct-PIUnsignedTBE';

const int NID_setct_PIUnsignedTBE = 569;

const int OBJ_setct_PIUnsignedTBE = 2;

const String SN_setct_AuthReqTBE = 'setct-AuthReqTBE';

const int NID_setct_AuthReqTBE = 570;

const int OBJ_setct_AuthReqTBE = 2;

const String SN_setct_AuthResTBE = 'setct-AuthResTBE';

const int NID_setct_AuthResTBE = 571;

const int OBJ_setct_AuthResTBE = 2;

const String SN_setct_AuthResTBEX = 'setct-AuthResTBEX';

const int NID_setct_AuthResTBEX = 572;

const int OBJ_setct_AuthResTBEX = 2;

const String SN_setct_AuthTokenTBE = 'setct-AuthTokenTBE';

const int NID_setct_AuthTokenTBE = 573;

const int OBJ_setct_AuthTokenTBE = 2;

const String SN_setct_CapTokenTBE = 'setct-CapTokenTBE';

const int NID_setct_CapTokenTBE = 574;

const int OBJ_setct_CapTokenTBE = 2;

const String SN_setct_CapTokenTBEX = 'setct-CapTokenTBEX';

const int NID_setct_CapTokenTBEX = 575;

const int OBJ_setct_CapTokenTBEX = 2;

const String SN_setct_AcqCardCodeMsgTBE = 'setct-AcqCardCodeMsgTBE';

const int NID_setct_AcqCardCodeMsgTBE = 576;

const int OBJ_setct_AcqCardCodeMsgTBE = 2;

const String SN_setct_AuthRevReqTBE = 'setct-AuthRevReqTBE';

const int NID_setct_AuthRevReqTBE = 577;

const int OBJ_setct_AuthRevReqTBE = 2;

const String SN_setct_AuthRevResTBE = 'setct-AuthRevResTBE';

const int NID_setct_AuthRevResTBE = 578;

const int OBJ_setct_AuthRevResTBE = 2;

const String SN_setct_AuthRevResTBEB = 'setct-AuthRevResTBEB';

const int NID_setct_AuthRevResTBEB = 579;

const int OBJ_setct_AuthRevResTBEB = 2;

const String SN_setct_CapReqTBE = 'setct-CapReqTBE';

const int NID_setct_CapReqTBE = 580;

const int OBJ_setct_CapReqTBE = 2;

const String SN_setct_CapReqTBEX = 'setct-CapReqTBEX';

const int NID_setct_CapReqTBEX = 581;

const int OBJ_setct_CapReqTBEX = 2;

const String SN_setct_CapResTBE = 'setct-CapResTBE';

const int NID_setct_CapResTBE = 582;

const int OBJ_setct_CapResTBE = 2;

const String SN_setct_CapRevReqTBE = 'setct-CapRevReqTBE';

const int NID_setct_CapRevReqTBE = 583;

const int OBJ_setct_CapRevReqTBE = 2;

const String SN_setct_CapRevReqTBEX = 'setct-CapRevReqTBEX';

const int NID_setct_CapRevReqTBEX = 584;

const int OBJ_setct_CapRevReqTBEX = 2;

const String SN_setct_CapRevResTBE = 'setct-CapRevResTBE';

const int NID_setct_CapRevResTBE = 585;

const int OBJ_setct_CapRevResTBE = 2;

const String SN_setct_CredReqTBE = 'setct-CredReqTBE';

const int NID_setct_CredReqTBE = 586;

const int OBJ_setct_CredReqTBE = 2;

const String SN_setct_CredReqTBEX = 'setct-CredReqTBEX';

const int NID_setct_CredReqTBEX = 587;

const int OBJ_setct_CredReqTBEX = 2;

const String SN_setct_CredResTBE = 'setct-CredResTBE';

const int NID_setct_CredResTBE = 588;

const int OBJ_setct_CredResTBE = 2;

const String SN_setct_CredRevReqTBE = 'setct-CredRevReqTBE';

const int NID_setct_CredRevReqTBE = 589;

const int OBJ_setct_CredRevReqTBE = 2;

const String SN_setct_CredRevReqTBEX = 'setct-CredRevReqTBEX';

const int NID_setct_CredRevReqTBEX = 590;

const int OBJ_setct_CredRevReqTBEX = 2;

const String SN_setct_CredRevResTBE = 'setct-CredRevResTBE';

const int NID_setct_CredRevResTBE = 591;

const int OBJ_setct_CredRevResTBE = 2;

const String SN_setct_BatchAdminReqTBE = 'setct-BatchAdminReqTBE';

const int NID_setct_BatchAdminReqTBE = 592;

const int OBJ_setct_BatchAdminReqTBE = 2;

const String SN_setct_BatchAdminResTBE = 'setct-BatchAdminResTBE';

const int NID_setct_BatchAdminResTBE = 593;

const int OBJ_setct_BatchAdminResTBE = 2;

const String SN_setct_RegFormReqTBE = 'setct-RegFormReqTBE';

const int NID_setct_RegFormReqTBE = 594;

const int OBJ_setct_RegFormReqTBE = 2;

const String SN_setct_CertReqTBE = 'setct-CertReqTBE';

const int NID_setct_CertReqTBE = 595;

const int OBJ_setct_CertReqTBE = 2;

const String SN_setct_CertReqTBEX = 'setct-CertReqTBEX';

const int NID_setct_CertReqTBEX = 596;

const int OBJ_setct_CertReqTBEX = 2;

const String SN_setct_CertResTBE = 'setct-CertResTBE';

const int NID_setct_CertResTBE = 597;

const int OBJ_setct_CertResTBE = 2;

const String SN_setct_CRLNotificationTBS = 'setct-CRLNotificationTBS';

const int NID_setct_CRLNotificationTBS = 598;

const int OBJ_setct_CRLNotificationTBS = 2;

const String SN_setct_CRLNotificationResTBS = 'setct-CRLNotificationResTBS';

const int NID_setct_CRLNotificationResTBS = 599;

const int OBJ_setct_CRLNotificationResTBS = 2;

const String SN_setct_BCIDistributionTBS = 'setct-BCIDistributionTBS';

const int NID_setct_BCIDistributionTBS = 600;

const int OBJ_setct_BCIDistributionTBS = 2;

const String SN_setext_genCrypt = 'setext-genCrypt';

const String LN_setext_genCrypt = 'generic cryptogram';

const int NID_setext_genCrypt = 601;

const int OBJ_setext_genCrypt = 2;

const String SN_setext_miAuth = 'setext-miAuth';

const String LN_setext_miAuth = 'merchant initiated auth';

const int NID_setext_miAuth = 602;

const int OBJ_setext_miAuth = 2;

const String SN_setext_pinSecure = 'setext-pinSecure';

const int NID_setext_pinSecure = 603;

const int OBJ_setext_pinSecure = 2;

const String SN_setext_pinAny = 'setext-pinAny';

const int NID_setext_pinAny = 604;

const int OBJ_setext_pinAny = 2;

const String SN_setext_track2 = 'setext-track2';

const int NID_setext_track2 = 605;

const int OBJ_setext_track2 = 2;

const String SN_setext_cv = 'setext-cv';

const String LN_setext_cv = 'additional verification';

const int NID_setext_cv = 606;

const int OBJ_setext_cv = 2;

const String SN_set_policy_root = 'set-policy-root';

const int NID_set_policy_root = 607;

const int OBJ_set_policy_root = 2;

const String SN_setCext_hashedRoot = 'setCext-hashedRoot';

const int NID_setCext_hashedRoot = 608;

const int OBJ_setCext_hashedRoot = 2;

const String SN_setCext_certType = 'setCext-certType';

const int NID_setCext_certType = 609;

const int OBJ_setCext_certType = 2;

const String SN_setCext_merchData = 'setCext-merchData';

const int NID_setCext_merchData = 610;

const int OBJ_setCext_merchData = 2;

const String SN_setCext_cCertRequired = 'setCext-cCertRequired';

const int NID_setCext_cCertRequired = 611;

const int OBJ_setCext_cCertRequired = 2;

const String SN_setCext_tunneling = 'setCext-tunneling';

const int NID_setCext_tunneling = 612;

const int OBJ_setCext_tunneling = 2;

const String SN_setCext_setExt = 'setCext-setExt';

const int NID_setCext_setExt = 613;

const int OBJ_setCext_setExt = 2;

const String SN_setCext_setQualf = 'setCext-setQualf';

const int NID_setCext_setQualf = 614;

const int OBJ_setCext_setQualf = 2;

const String SN_setCext_PGWYcapabilities = 'setCext-PGWYcapabilities';

const int NID_setCext_PGWYcapabilities = 615;

const int OBJ_setCext_PGWYcapabilities = 2;

const String SN_setCext_TokenIdentifier = 'setCext-TokenIdentifier';

const int NID_setCext_TokenIdentifier = 616;

const int OBJ_setCext_TokenIdentifier = 2;

const String SN_setCext_Track2Data = 'setCext-Track2Data';

const int NID_setCext_Track2Data = 617;

const int OBJ_setCext_Track2Data = 2;

const String SN_setCext_TokenType = 'setCext-TokenType';

const int NID_setCext_TokenType = 618;

const int OBJ_setCext_TokenType = 2;

const String SN_setCext_IssuerCapabilities = 'setCext-IssuerCapabilities';

const int NID_setCext_IssuerCapabilities = 619;

const int OBJ_setCext_IssuerCapabilities = 2;

const String SN_setAttr_Cert = 'setAttr-Cert';

const int NID_setAttr_Cert = 620;

const int OBJ_setAttr_Cert = 2;

const String SN_setAttr_PGWYcap = 'setAttr-PGWYcap';

const String LN_setAttr_PGWYcap = 'payment gateway capabilities';

const int NID_setAttr_PGWYcap = 621;

const int OBJ_setAttr_PGWYcap = 2;

const String SN_setAttr_TokenType = 'setAttr-TokenType';

const int NID_setAttr_TokenType = 622;

const int OBJ_setAttr_TokenType = 2;

const String SN_setAttr_IssCap = 'setAttr-IssCap';

const String LN_setAttr_IssCap = 'issuer capabilities';

const int NID_setAttr_IssCap = 623;

const int OBJ_setAttr_IssCap = 2;

const String SN_set_rootKeyThumb = 'set-rootKeyThumb';

const int NID_set_rootKeyThumb = 624;

const int OBJ_set_rootKeyThumb = 2;

const String SN_set_addPolicy = 'set-addPolicy';

const int NID_set_addPolicy = 625;

const int OBJ_set_addPolicy = 2;

const String SN_setAttr_Token_EMV = 'setAttr-Token-EMV';

const int NID_setAttr_Token_EMV = 626;

const int OBJ_setAttr_Token_EMV = 2;

const String SN_setAttr_Token_B0Prime = 'setAttr-Token-B0Prime';

const int NID_setAttr_Token_B0Prime = 627;

const int OBJ_setAttr_Token_B0Prime = 2;

const String SN_setAttr_IssCap_CVM = 'setAttr-IssCap-CVM';

const int NID_setAttr_IssCap_CVM = 628;

const int OBJ_setAttr_IssCap_CVM = 2;

const String SN_setAttr_IssCap_T2 = 'setAttr-IssCap-T2';

const int NID_setAttr_IssCap_T2 = 629;

const int OBJ_setAttr_IssCap_T2 = 2;

const String SN_setAttr_IssCap_Sig = 'setAttr-IssCap-Sig';

const int NID_setAttr_IssCap_Sig = 630;

const int OBJ_setAttr_IssCap_Sig = 2;

const String SN_setAttr_GenCryptgrm = 'setAttr-GenCryptgrm';

const String LN_setAttr_GenCryptgrm = 'generate cryptogram';

const int NID_setAttr_GenCryptgrm = 631;

const int OBJ_setAttr_GenCryptgrm = 2;

const String SN_setAttr_T2Enc = 'setAttr-T2Enc';

const String LN_setAttr_T2Enc = 'encrypted track 2';

const int NID_setAttr_T2Enc = 632;

const int OBJ_setAttr_T2Enc = 2;

const String SN_setAttr_T2cleartxt = 'setAttr-T2cleartxt';

const String LN_setAttr_T2cleartxt = 'cleartext track 2';

const int NID_setAttr_T2cleartxt = 633;

const int OBJ_setAttr_T2cleartxt = 2;

const String SN_setAttr_TokICCsig = 'setAttr-TokICCsig';

const String LN_setAttr_TokICCsig = 'ICC or token signature';

const int NID_setAttr_TokICCsig = 634;

const int OBJ_setAttr_TokICCsig = 2;

const String SN_setAttr_SecDevSig = 'setAttr-SecDevSig';

const String LN_setAttr_SecDevSig = 'secure device signature';

const int NID_setAttr_SecDevSig = 635;

const int OBJ_setAttr_SecDevSig = 2;

const String SN_set_brand_IATA_ATA = 'set-brand-IATA-ATA';

const int NID_set_brand_IATA_ATA = 636;

const int OBJ_set_brand_IATA_ATA = 2;

const String SN_set_brand_Diners = 'set-brand-Diners';

const int NID_set_brand_Diners = 637;

const int OBJ_set_brand_Diners = 2;

const String SN_set_brand_AmericanExpress = 'set-brand-AmericanExpress';

const int NID_set_brand_AmericanExpress = 638;

const int OBJ_set_brand_AmericanExpress = 2;

const String SN_set_brand_JCB = 'set-brand-JCB';

const int NID_set_brand_JCB = 639;

const int OBJ_set_brand_JCB = 2;

const String SN_set_brand_Visa = 'set-brand-Visa';

const int NID_set_brand_Visa = 640;

const int OBJ_set_brand_Visa = 2;

const String SN_set_brand_MasterCard = 'set-brand-MasterCard';

const int NID_set_brand_MasterCard = 641;

const int OBJ_set_brand_MasterCard = 2;

const String SN_set_brand_Novus = 'set-brand-Novus';

const int NID_set_brand_Novus = 642;

const int OBJ_set_brand_Novus = 2;

const String SN_des_cdmf = 'DES-CDMF';

const String LN_des_cdmf = 'des-cdmf';

const int NID_des_cdmf = 643;

const int OBJ_des_cdmf = 1;

const String SN_rsaOAEPEncryptionSET = 'rsaOAEPEncryptionSET';

const int NID_rsaOAEPEncryptionSET = 644;

const int OBJ_rsaOAEPEncryptionSET = 1;

const String SN_ipsec3 = 'Oakley-EC2N-3';

const String LN_ipsec3 = 'ipsec3';

const int NID_ipsec3 = 749;

const String SN_ipsec4 = 'Oakley-EC2N-4';

const String LN_ipsec4 = 'ipsec4';

const int NID_ipsec4 = 750;

const String SN_whirlpool = 'whirlpool';

const int NID_whirlpool = 804;

const int OBJ_whirlpool = 1;

const String SN_cryptopro = 'cryptopro';

const int NID_cryptopro = 805;

const int OBJ_cryptopro = 1;

const String SN_cryptocom = 'cryptocom';

const int NID_cryptocom = 806;

const int OBJ_cryptocom = 1;

const String SN_id_tc26 = 'id-tc26';

const int NID_id_tc26 = 974;

const int OBJ_id_tc26 = 1;

const String SN_id_GostR3411_94_with_GostR3410_2001 =
    'id-GostR3411-94-with-GostR3410-2001';

const String LN_id_GostR3411_94_with_GostR3410_2001 =
    'GOST R 34.11-94 with GOST R 34.10-2001';

const int NID_id_GostR3411_94_with_GostR3410_2001 = 807;

const int OBJ_id_GostR3411_94_with_GostR3410_2001 = 1;

const String SN_id_GostR3411_94_with_GostR3410_94 =
    'id-GostR3411-94-with-GostR3410-94';

const String LN_id_GostR3411_94_with_GostR3410_94 =
    'GOST R 34.11-94 with GOST R 34.10-94';

const int NID_id_GostR3411_94_with_GostR3410_94 = 808;

const int OBJ_id_GostR3411_94_with_GostR3410_94 = 1;

const String SN_id_GostR3411_94 = 'md_gost94';

const String LN_id_GostR3411_94 = 'GOST R 34.11-94';

const int NID_id_GostR3411_94 = 809;

const int OBJ_id_GostR3411_94 = 1;

const String SN_id_HMACGostR3411_94 = 'id-HMACGostR3411-94';

const String LN_id_HMACGostR3411_94 = 'HMAC GOST 34.11-94';

const int NID_id_HMACGostR3411_94 = 810;

const int OBJ_id_HMACGostR3411_94 = 1;

const String SN_id_GostR3410_2001 = 'gost2001';

const String LN_id_GostR3410_2001 = 'GOST R 34.10-2001';

const int NID_id_GostR3410_2001 = 811;

const int OBJ_id_GostR3410_2001 = 1;

const String SN_id_GostR3410_94 = 'gost94';

const String LN_id_GostR3410_94 = 'GOST R 34.10-94';

const int NID_id_GostR3410_94 = 812;

const int OBJ_id_GostR3410_94 = 1;

const String SN_id_Gost28147_89 = 'gost89';

const String LN_id_Gost28147_89 = 'GOST 28147-89';

const int NID_id_Gost28147_89 = 813;

const int OBJ_id_Gost28147_89 = 1;

const String SN_gost89_cnt = 'gost89-cnt';

const int NID_gost89_cnt = 814;

const String SN_gost89_cnt_12 = 'gost89-cnt-12';

const int NID_gost89_cnt_12 = 975;

const String SN_gost89_cbc = 'gost89-cbc';

const int NID_gost89_cbc = 1009;

const String SN_gost89_ecb = 'gost89-ecb';

const int NID_gost89_ecb = 1010;

const String SN_gost89_ctr = 'gost89-ctr';

const int NID_gost89_ctr = 1011;

const String SN_id_Gost28147_89_MAC = 'gost-mac';

const String LN_id_Gost28147_89_MAC = 'GOST 28147-89 MAC';

const int NID_id_Gost28147_89_MAC = 815;

const int OBJ_id_Gost28147_89_MAC = 1;

const String SN_gost_mac_12 = 'gost-mac-12';

const int NID_gost_mac_12 = 976;

const String SN_id_GostR3411_94_prf = 'prf-gostr3411-94';

const String LN_id_GostR3411_94_prf = 'GOST R 34.11-94 PRF';

const int NID_id_GostR3411_94_prf = 816;

const int OBJ_id_GostR3411_94_prf = 1;

const String SN_id_GostR3410_2001DH = 'id-GostR3410-2001DH';

const String LN_id_GostR3410_2001DH = 'GOST R 34.10-2001 DH';

const int NID_id_GostR3410_2001DH = 817;

const int OBJ_id_GostR3410_2001DH = 1;

const String SN_id_GostR3410_94DH = 'id-GostR3410-94DH';

const String LN_id_GostR3410_94DH = 'GOST R 34.10-94 DH';

const int NID_id_GostR3410_94DH = 818;

const int OBJ_id_GostR3410_94DH = 1;

const String SN_id_Gost28147_89_CryptoPro_KeyMeshing =
    'id-Gost28147-89-CryptoPro-KeyMeshing';

const int NID_id_Gost28147_89_CryptoPro_KeyMeshing = 819;

const int OBJ_id_Gost28147_89_CryptoPro_KeyMeshing = 1;

const String SN_id_Gost28147_89_None_KeyMeshing =
    'id-Gost28147-89-None-KeyMeshing';

const int NID_id_Gost28147_89_None_KeyMeshing = 820;

const int OBJ_id_Gost28147_89_None_KeyMeshing = 1;

const String SN_id_GostR3411_94_TestParamSet = 'id-GostR3411-94-TestParamSet';

const int NID_id_GostR3411_94_TestParamSet = 821;

const int OBJ_id_GostR3411_94_TestParamSet = 1;

const String SN_id_GostR3411_94_CryptoProParamSet =
    'id-GostR3411-94-CryptoProParamSet';

const int NID_id_GostR3411_94_CryptoProParamSet = 822;

const int OBJ_id_GostR3411_94_CryptoProParamSet = 1;

const String SN_id_Gost28147_89_TestParamSet = 'id-Gost28147-89-TestParamSet';

const int NID_id_Gost28147_89_TestParamSet = 823;

const int OBJ_id_Gost28147_89_TestParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_A_ParamSet =
    'id-Gost28147-89-CryptoPro-A-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_A_ParamSet = 824;

const int OBJ_id_Gost28147_89_CryptoPro_A_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_B_ParamSet =
    'id-Gost28147-89-CryptoPro-B-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_B_ParamSet = 825;

const int OBJ_id_Gost28147_89_CryptoPro_B_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_C_ParamSet =
    'id-Gost28147-89-CryptoPro-C-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_C_ParamSet = 826;

const int OBJ_id_Gost28147_89_CryptoPro_C_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_D_ParamSet =
    'id-Gost28147-89-CryptoPro-D-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_D_ParamSet = 827;

const int OBJ_id_Gost28147_89_CryptoPro_D_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet =
    'id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = 828;

const int OBJ_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet =
    'id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = 829;

const int OBJ_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_RIC_1_ParamSet =
    'id-Gost28147-89-CryptoPro-RIC-1-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = 830;

const int OBJ_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = 1;

const String SN_id_GostR3410_94_TestParamSet = 'id-GostR3410-94-TestParamSet';

const int NID_id_GostR3410_94_TestParamSet = 831;

const int OBJ_id_GostR3410_94_TestParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_A_ParamSet =
    'id-GostR3410-94-CryptoPro-A-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_A_ParamSet = 832;

const int OBJ_id_GostR3410_94_CryptoPro_A_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_B_ParamSet =
    'id-GostR3410-94-CryptoPro-B-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_B_ParamSet = 833;

const int OBJ_id_GostR3410_94_CryptoPro_B_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_C_ParamSet =
    'id-GostR3410-94-CryptoPro-C-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_C_ParamSet = 834;

const int OBJ_id_GostR3410_94_CryptoPro_C_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_D_ParamSet =
    'id-GostR3410-94-CryptoPro-D-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_D_ParamSet = 835;

const int OBJ_id_GostR3410_94_CryptoPro_D_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_XchA_ParamSet =
    'id-GostR3410-94-CryptoPro-XchA-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_XchA_ParamSet = 836;

const int OBJ_id_GostR3410_94_CryptoPro_XchA_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_XchB_ParamSet =
    'id-GostR3410-94-CryptoPro-XchB-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_XchB_ParamSet = 837;

const int OBJ_id_GostR3410_94_CryptoPro_XchB_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_XchC_ParamSet =
    'id-GostR3410-94-CryptoPro-XchC-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_XchC_ParamSet = 838;

const int OBJ_id_GostR3410_94_CryptoPro_XchC_ParamSet = 1;

const String SN_id_GostR3410_2001_TestParamSet =
    'id-GostR3410-2001-TestParamSet';

const int NID_id_GostR3410_2001_TestParamSet = 839;

const int OBJ_id_GostR3410_2001_TestParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_A_ParamSet =
    'id-GostR3410-2001-CryptoPro-A-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_A_ParamSet = 840;

const int OBJ_id_GostR3410_2001_CryptoPro_A_ParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_B_ParamSet =
    'id-GostR3410-2001-CryptoPro-B-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_B_ParamSet = 841;

const int OBJ_id_GostR3410_2001_CryptoPro_B_ParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_C_ParamSet =
    'id-GostR3410-2001-CryptoPro-C-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_C_ParamSet = 842;

const int OBJ_id_GostR3410_2001_CryptoPro_C_ParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_XchA_ParamSet =
    'id-GostR3410-2001-CryptoPro-XchA-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet = 843;

const int OBJ_id_GostR3410_2001_CryptoPro_XchA_ParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_XchB_ParamSet =
    'id-GostR3410-2001-CryptoPro-XchB-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet = 844;

const int OBJ_id_GostR3410_2001_CryptoPro_XchB_ParamSet = 1;

const String SN_id_GostR3410_94_a = 'id-GostR3410-94-a';

const int NID_id_GostR3410_94_a = 845;

const int OBJ_id_GostR3410_94_a = 1;

const String SN_id_GostR3410_94_aBis = 'id-GostR3410-94-aBis';

const int NID_id_GostR3410_94_aBis = 846;

const int OBJ_id_GostR3410_94_aBis = 1;

const String SN_id_GostR3410_94_b = 'id-GostR3410-94-b';

const int NID_id_GostR3410_94_b = 847;

const int OBJ_id_GostR3410_94_b = 1;

const String SN_id_GostR3410_94_bBis = 'id-GostR3410-94-bBis';

const int NID_id_GostR3410_94_bBis = 848;

const int OBJ_id_GostR3410_94_bBis = 1;

const String SN_id_Gost28147_89_cc = 'id-Gost28147-89-cc';

const String LN_id_Gost28147_89_cc = 'GOST 28147-89 Cryptocom ParamSet';

const int NID_id_Gost28147_89_cc = 849;

const int OBJ_id_Gost28147_89_cc = 1;

const String SN_id_GostR3410_94_cc = 'gost94cc';

const String LN_id_GostR3410_94_cc = 'GOST 34.10-94 Cryptocom';

const int NID_id_GostR3410_94_cc = 850;

const int OBJ_id_GostR3410_94_cc = 1;

const String SN_id_GostR3410_2001_cc = 'gost2001cc';

const String LN_id_GostR3410_2001_cc = 'GOST 34.10-2001 Cryptocom';

const int NID_id_GostR3410_2001_cc = 851;

const int OBJ_id_GostR3410_2001_cc = 1;

const String SN_id_GostR3411_94_with_GostR3410_94_cc =
    'id-GostR3411-94-with-GostR3410-94-cc';

const String LN_id_GostR3411_94_with_GostR3410_94_cc =
    'GOST R 34.11-94 with GOST R 34.10-94 Cryptocom';

const int NID_id_GostR3411_94_with_GostR3410_94_cc = 852;

const int OBJ_id_GostR3411_94_with_GostR3410_94_cc = 1;

const String SN_id_GostR3411_94_with_GostR3410_2001_cc =
    'id-GostR3411-94-with-GostR3410-2001-cc';

const String LN_id_GostR3411_94_with_GostR3410_2001_cc =
    'GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom';

const int NID_id_GostR3411_94_with_GostR3410_2001_cc = 853;

const int OBJ_id_GostR3411_94_with_GostR3410_2001_cc = 1;

const String SN_id_GostR3410_2001_ParamSet_cc = 'id-GostR3410-2001-ParamSet-cc';

const String LN_id_GostR3410_2001_ParamSet_cc =
    'GOST R 3410-2001 Parameter Set Cryptocom';

const int NID_id_GostR3410_2001_ParamSet_cc = 854;

const int OBJ_id_GostR3410_2001_ParamSet_cc = 1;

const String SN_id_tc26_algorithms = 'id-tc26-algorithms';

const int NID_id_tc26_algorithms = 977;

const int OBJ_id_tc26_algorithms = 1;

const String SN_id_tc26_sign = 'id-tc26-sign';

const int NID_id_tc26_sign = 978;

const int OBJ_id_tc26_sign = 1;

const String SN_id_GostR3410_2012_256 = 'gost2012_256';

const String LN_id_GostR3410_2012_256 =
    'GOST R 34.10-2012 with 256 bit modulus';

const int NID_id_GostR3410_2012_256 = 979;

const int OBJ_id_GostR3410_2012_256 = 1;

const String SN_id_GostR3410_2012_512 = 'gost2012_512';

const String LN_id_GostR3410_2012_512 =
    'GOST R 34.10-2012 with 512 bit modulus';

const int NID_id_GostR3410_2012_512 = 980;

const int OBJ_id_GostR3410_2012_512 = 1;

const String SN_id_tc26_digest = 'id-tc26-digest';

const int NID_id_tc26_digest = 981;

const int OBJ_id_tc26_digest = 1;

const String SN_id_GostR3411_2012_256 = 'md_gost12_256';

const String LN_id_GostR3411_2012_256 = 'GOST R 34.11-2012 with 256 bit hash';

const int NID_id_GostR3411_2012_256 = 982;

const int OBJ_id_GostR3411_2012_256 = 1;

const String SN_id_GostR3411_2012_512 = 'md_gost12_512';

const String LN_id_GostR3411_2012_512 = 'GOST R 34.11-2012 with 512 bit hash';

const int NID_id_GostR3411_2012_512 = 983;

const int OBJ_id_GostR3411_2012_512 = 1;

const String SN_id_tc26_signwithdigest = 'id-tc26-signwithdigest';

const int NID_id_tc26_signwithdigest = 984;

const int OBJ_id_tc26_signwithdigest = 1;

const String SN_id_tc26_signwithdigest_gost3410_2012_256 =
    'id-tc26-signwithdigest-gost3410-2012-256';

const String LN_id_tc26_signwithdigest_gost3410_2012_256 =
    'GOST R 34.10-2012 with GOST R 34.11-2012 (256 bit)';

const int NID_id_tc26_signwithdigest_gost3410_2012_256 = 985;

const int OBJ_id_tc26_signwithdigest_gost3410_2012_256 = 1;

const String SN_id_tc26_signwithdigest_gost3410_2012_512 =
    'id-tc26-signwithdigest-gost3410-2012-512';

const String LN_id_tc26_signwithdigest_gost3410_2012_512 =
    'GOST R 34.10-2012 with GOST R 34.11-2012 (512 bit)';

const int NID_id_tc26_signwithdigest_gost3410_2012_512 = 986;

const int OBJ_id_tc26_signwithdigest_gost3410_2012_512 = 1;

const String SN_id_tc26_mac = 'id-tc26-mac';

const int NID_id_tc26_mac = 987;

const int OBJ_id_tc26_mac = 1;

const String SN_id_tc26_hmac_gost_3411_2012_256 =
    'id-tc26-hmac-gost-3411-2012-256';

const String LN_id_tc26_hmac_gost_3411_2012_256 =
    'HMAC GOST 34.11-2012 256 bit';

const int NID_id_tc26_hmac_gost_3411_2012_256 = 988;

const int OBJ_id_tc26_hmac_gost_3411_2012_256 = 1;

const String SN_id_tc26_hmac_gost_3411_2012_512 =
    'id-tc26-hmac-gost-3411-2012-512';

const String LN_id_tc26_hmac_gost_3411_2012_512 =
    'HMAC GOST 34.11-2012 512 bit';

const int NID_id_tc26_hmac_gost_3411_2012_512 = 989;

const int OBJ_id_tc26_hmac_gost_3411_2012_512 = 1;

const String SN_id_tc26_cipher = 'id-tc26-cipher';

const int NID_id_tc26_cipher = 990;

const int OBJ_id_tc26_cipher = 1;

const String SN_id_tc26_cipher_gostr3412_2015_magma =
    'id-tc26-cipher-gostr3412-2015-magma';

const int NID_id_tc26_cipher_gostr3412_2015_magma = 1173;

const int OBJ_id_tc26_cipher_gostr3412_2015_magma = 1;

const String SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm =
    'id-tc26-cipher-gostr3412-2015-magma-ctracpkm';

const int NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = 1174;

const int OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm = 1;

const String SN_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac =
    'id-tc26-cipher-gostr3412-2015-magma-ctracpkm-omac';

const int NID_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = 1175;

const int OBJ_id_tc26_cipher_gostr3412_2015_magma_ctracpkm_omac = 1;

const String SN_id_tc26_cipher_gostr3412_2015_kuznyechik =
    'id-tc26-cipher-gostr3412-2015-kuznyechik';

const int NID_id_tc26_cipher_gostr3412_2015_kuznyechik = 1176;

const int OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik = 1;

const String SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm =
    'id-tc26-cipher-gostr3412-2015-kuznyechik-ctracpkm';

const int NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = 1177;

const int OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm = 1;

const String SN_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac =
    'id-tc26-cipher-gostr3412-2015-kuznyechik-ctracpkm-omac';

const int NID_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = 1178;

const int OBJ_id_tc26_cipher_gostr3412_2015_kuznyechik_ctracpkm_omac = 1;

const String SN_id_tc26_agreement = 'id-tc26-agreement';

const int NID_id_tc26_agreement = 991;

const int OBJ_id_tc26_agreement = 1;

const String SN_id_tc26_agreement_gost_3410_2012_256 =
    'id-tc26-agreement-gost-3410-2012-256';

const int NID_id_tc26_agreement_gost_3410_2012_256 = 992;

const int OBJ_id_tc26_agreement_gost_3410_2012_256 = 1;

const String SN_id_tc26_agreement_gost_3410_2012_512 =
    'id-tc26-agreement-gost-3410-2012-512';

const int NID_id_tc26_agreement_gost_3410_2012_512 = 993;

const int OBJ_id_tc26_agreement_gost_3410_2012_512 = 1;

const String SN_id_tc26_wrap = 'id-tc26-wrap';

const int NID_id_tc26_wrap = 1179;

const int OBJ_id_tc26_wrap = 1;

const String SN_id_tc26_wrap_gostr3412_2015_magma =
    'id-tc26-wrap-gostr3412-2015-magma';

const int NID_id_tc26_wrap_gostr3412_2015_magma = 1180;

const int OBJ_id_tc26_wrap_gostr3412_2015_magma = 1;

const String SN_id_tc26_wrap_gostr3412_2015_magma_kexp15 =
    'id-tc26-wrap-gostr3412-2015-magma-kexp15';

const int NID_id_tc26_wrap_gostr3412_2015_magma_kexp15 = 1181;

const int OBJ_id_tc26_wrap_gostr3412_2015_magma_kexp15 = 1;

const String SN_id_tc26_wrap_gostr3412_2015_kuznyechik =
    'id-tc26-wrap-gostr3412-2015-kuznyechik';

const int NID_id_tc26_wrap_gostr3412_2015_kuznyechik = 1182;

const int OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik = 1;

const String SN_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 =
    'id-tc26-wrap-gostr3412-2015-kuznyechik-kexp15';

const int NID_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = 1183;

const int OBJ_id_tc26_wrap_gostr3412_2015_kuznyechik_kexp15 = 1;

const String SN_id_tc26_constants = 'id-tc26-constants';

const int NID_id_tc26_constants = 994;

const int OBJ_id_tc26_constants = 1;

const String SN_id_tc26_sign_constants = 'id-tc26-sign-constants';

const int NID_id_tc26_sign_constants = 995;

const int OBJ_id_tc26_sign_constants = 1;

const String SN_id_tc26_gost_3410_2012_256_constants =
    'id-tc26-gost-3410-2012-256-constants';

const int NID_id_tc26_gost_3410_2012_256_constants = 1147;

const int OBJ_id_tc26_gost_3410_2012_256_constants = 1;

const String SN_id_tc26_gost_3410_2012_256_paramSetA =
    'id-tc26-gost-3410-2012-256-paramSetA';

const String LN_id_tc26_gost_3410_2012_256_paramSetA =
    'GOST R 34.10-2012 (256 bit) ParamSet A';

const int NID_id_tc26_gost_3410_2012_256_paramSetA = 1148;

const int OBJ_id_tc26_gost_3410_2012_256_paramSetA = 1;

const String SN_id_tc26_gost_3410_2012_256_paramSetB =
    'id-tc26-gost-3410-2012-256-paramSetB';

const String LN_id_tc26_gost_3410_2012_256_paramSetB =
    'GOST R 34.10-2012 (256 bit) ParamSet B';

const int NID_id_tc26_gost_3410_2012_256_paramSetB = 1184;

const int OBJ_id_tc26_gost_3410_2012_256_paramSetB = 1;

const String SN_id_tc26_gost_3410_2012_256_paramSetC =
    'id-tc26-gost-3410-2012-256-paramSetC';

const String LN_id_tc26_gost_3410_2012_256_paramSetC =
    'GOST R 34.10-2012 (256 bit) ParamSet C';

const int NID_id_tc26_gost_3410_2012_256_paramSetC = 1185;

const int OBJ_id_tc26_gost_3410_2012_256_paramSetC = 1;

const String SN_id_tc26_gost_3410_2012_256_paramSetD =
    'id-tc26-gost-3410-2012-256-paramSetD';

const String LN_id_tc26_gost_3410_2012_256_paramSetD =
    'GOST R 34.10-2012 (256 bit) ParamSet D';

const int NID_id_tc26_gost_3410_2012_256_paramSetD = 1186;

const int OBJ_id_tc26_gost_3410_2012_256_paramSetD = 1;

const String SN_id_tc26_gost_3410_2012_512_constants =
    'id-tc26-gost-3410-2012-512-constants';

const int NID_id_tc26_gost_3410_2012_512_constants = 996;

const int OBJ_id_tc26_gost_3410_2012_512_constants = 1;

const String SN_id_tc26_gost_3410_2012_512_paramSetTest =
    'id-tc26-gost-3410-2012-512-paramSetTest';

const String LN_id_tc26_gost_3410_2012_512_paramSetTest =
    'GOST R 34.10-2012 (512 bit) testing parameter set';

const int NID_id_tc26_gost_3410_2012_512_paramSetTest = 997;

const int OBJ_id_tc26_gost_3410_2012_512_paramSetTest = 1;

const String SN_id_tc26_gost_3410_2012_512_paramSetA =
    'id-tc26-gost-3410-2012-512-paramSetA';

const String LN_id_tc26_gost_3410_2012_512_paramSetA =
    'GOST R 34.10-2012 (512 bit) ParamSet A';

const int NID_id_tc26_gost_3410_2012_512_paramSetA = 998;

const int OBJ_id_tc26_gost_3410_2012_512_paramSetA = 1;

const String SN_id_tc26_gost_3410_2012_512_paramSetB =
    'id-tc26-gost-3410-2012-512-paramSetB';

const String LN_id_tc26_gost_3410_2012_512_paramSetB =
    'GOST R 34.10-2012 (512 bit) ParamSet B';

const int NID_id_tc26_gost_3410_2012_512_paramSetB = 999;

const int OBJ_id_tc26_gost_3410_2012_512_paramSetB = 1;

const String SN_id_tc26_gost_3410_2012_512_paramSetC =
    'id-tc26-gost-3410-2012-512-paramSetC';

const String LN_id_tc26_gost_3410_2012_512_paramSetC =
    'GOST R 34.10-2012 (512 bit) ParamSet C';

const int NID_id_tc26_gost_3410_2012_512_paramSetC = 1149;

const int OBJ_id_tc26_gost_3410_2012_512_paramSetC = 1;

const String SN_id_tc26_digest_constants = 'id-tc26-digest-constants';

const int NID_id_tc26_digest_constants = 1000;

const int OBJ_id_tc26_digest_constants = 1;

const String SN_id_tc26_cipher_constants = 'id-tc26-cipher-constants';

const int NID_id_tc26_cipher_constants = 1001;

const int OBJ_id_tc26_cipher_constants = 1;

const String SN_id_tc26_gost_28147_constants = 'id-tc26-gost-28147-constants';

const int NID_id_tc26_gost_28147_constants = 1002;

const int OBJ_id_tc26_gost_28147_constants = 1;

const String SN_id_tc26_gost_28147_param_Z = 'id-tc26-gost-28147-param-Z';

const String LN_id_tc26_gost_28147_param_Z = 'GOST 28147-89 TC26 parameter set';

const int NID_id_tc26_gost_28147_param_Z = 1003;

const int OBJ_id_tc26_gost_28147_param_Z = 1;

const String SN_INN = 'INN';

const String LN_INN = 'INN';

const int NID_INN = 1004;

const int OBJ_INN = 1;

const String SN_OGRN = 'OGRN';

const String LN_OGRN = 'OGRN';

const int NID_OGRN = 1005;

const int OBJ_OGRN = 1;

const String SN_SNILS = 'SNILS';

const String LN_SNILS = 'SNILS';

const int NID_SNILS = 1006;

const int OBJ_SNILS = 1;

const String SN_subjectSignTool = 'subjectSignTool';

const String LN_subjectSignTool = 'Signing Tool of Subject';

const int NID_subjectSignTool = 1007;

const int OBJ_subjectSignTool = 1;

const String SN_issuerSignTool = 'issuerSignTool';

const String LN_issuerSignTool = 'Signing Tool of Issuer';

const int NID_issuerSignTool = 1008;

const int OBJ_issuerSignTool = 1;

const String SN_grasshopper_ecb = 'grasshopper-ecb';

const int NID_grasshopper_ecb = 1012;

const String SN_grasshopper_ctr = 'grasshopper-ctr';

const int NID_grasshopper_ctr = 1013;

const String SN_grasshopper_ofb = 'grasshopper-ofb';

const int NID_grasshopper_ofb = 1014;

const String SN_grasshopper_cbc = 'grasshopper-cbc';

const int NID_grasshopper_cbc = 1015;

const String SN_grasshopper_cfb = 'grasshopper-cfb';

const int NID_grasshopper_cfb = 1016;

const String SN_grasshopper_mac = 'grasshopper-mac';

const int NID_grasshopper_mac = 1017;

const String SN_magma_ecb = 'magma-ecb';

const int NID_magma_ecb = 1187;

const String SN_magma_ctr = 'magma-ctr';

const int NID_magma_ctr = 1188;

const String SN_magma_ofb = 'magma-ofb';

const int NID_magma_ofb = 1189;

const String SN_magma_cbc = 'magma-cbc';

const int NID_magma_cbc = 1190;

const String SN_magma_cfb = 'magma-cfb';

const int NID_magma_cfb = 1191;

const String SN_magma_mac = 'magma-mac';

const int NID_magma_mac = 1192;

const String SN_camellia_128_cbc = 'CAMELLIA-128-CBC';

const String LN_camellia_128_cbc = 'camellia-128-cbc';

const int NID_camellia_128_cbc = 751;

const int OBJ_camellia_128_cbc = 1;

const String SN_camellia_192_cbc = 'CAMELLIA-192-CBC';

const String LN_camellia_192_cbc = 'camellia-192-cbc';

const int NID_camellia_192_cbc = 752;

const int OBJ_camellia_192_cbc = 1;

const String SN_camellia_256_cbc = 'CAMELLIA-256-CBC';

const String LN_camellia_256_cbc = 'camellia-256-cbc';

const int NID_camellia_256_cbc = 753;

const int OBJ_camellia_256_cbc = 1;

const String SN_id_camellia128_wrap = 'id-camellia128-wrap';

const int NID_id_camellia128_wrap = 907;

const int OBJ_id_camellia128_wrap = 1;

const String SN_id_camellia192_wrap = 'id-camellia192-wrap';

const int NID_id_camellia192_wrap = 908;

const int OBJ_id_camellia192_wrap = 1;

const String SN_id_camellia256_wrap = 'id-camellia256-wrap';

const int NID_id_camellia256_wrap = 909;

const int OBJ_id_camellia256_wrap = 1;

const int OBJ_ntt_ds = 0;

const int OBJ_camellia = 0;

const String SN_camellia_128_ecb = 'CAMELLIA-128-ECB';

const String LN_camellia_128_ecb = 'camellia-128-ecb';

const int NID_camellia_128_ecb = 754;

const int OBJ_camellia_128_ecb = 0;

const String SN_camellia_128_ofb128 = 'CAMELLIA-128-OFB';

const String LN_camellia_128_ofb128 = 'camellia-128-ofb';

const int NID_camellia_128_ofb128 = 766;

const int OBJ_camellia_128_ofb128 = 0;

const String SN_camellia_128_cfb128 = 'CAMELLIA-128-CFB';

const String LN_camellia_128_cfb128 = 'camellia-128-cfb';

const int NID_camellia_128_cfb128 = 757;

const int OBJ_camellia_128_cfb128 = 0;

const String SN_camellia_128_gcm = 'CAMELLIA-128-GCM';

const String LN_camellia_128_gcm = 'camellia-128-gcm';

const int NID_camellia_128_gcm = 961;

const int OBJ_camellia_128_gcm = 0;

const String SN_camellia_128_ccm = 'CAMELLIA-128-CCM';

const String LN_camellia_128_ccm = 'camellia-128-ccm';

const int NID_camellia_128_ccm = 962;

const int OBJ_camellia_128_ccm = 0;

const String SN_camellia_128_ctr = 'CAMELLIA-128-CTR';

const String LN_camellia_128_ctr = 'camellia-128-ctr';

const int NID_camellia_128_ctr = 963;

const int OBJ_camellia_128_ctr = 0;

const String SN_camellia_128_cmac = 'CAMELLIA-128-CMAC';

const String LN_camellia_128_cmac = 'camellia-128-cmac';

const int NID_camellia_128_cmac = 964;

const int OBJ_camellia_128_cmac = 0;

const String SN_camellia_192_ecb = 'CAMELLIA-192-ECB';

const String LN_camellia_192_ecb = 'camellia-192-ecb';

const int NID_camellia_192_ecb = 755;

const int OBJ_camellia_192_ecb = 0;

const String SN_camellia_192_ofb128 = 'CAMELLIA-192-OFB';

const String LN_camellia_192_ofb128 = 'camellia-192-ofb';

const int NID_camellia_192_ofb128 = 767;

const int OBJ_camellia_192_ofb128 = 0;

const String SN_camellia_192_cfb128 = 'CAMELLIA-192-CFB';

const String LN_camellia_192_cfb128 = 'camellia-192-cfb';

const int NID_camellia_192_cfb128 = 758;

const int OBJ_camellia_192_cfb128 = 0;

const String SN_camellia_192_gcm = 'CAMELLIA-192-GCM';

const String LN_camellia_192_gcm = 'camellia-192-gcm';

const int NID_camellia_192_gcm = 965;

const int OBJ_camellia_192_gcm = 0;

const String SN_camellia_192_ccm = 'CAMELLIA-192-CCM';

const String LN_camellia_192_ccm = 'camellia-192-ccm';

const int NID_camellia_192_ccm = 966;

const int OBJ_camellia_192_ccm = 0;

const String SN_camellia_192_ctr = 'CAMELLIA-192-CTR';

const String LN_camellia_192_ctr = 'camellia-192-ctr';

const int NID_camellia_192_ctr = 967;

const int OBJ_camellia_192_ctr = 0;

const String SN_camellia_192_cmac = 'CAMELLIA-192-CMAC';

const String LN_camellia_192_cmac = 'camellia-192-cmac';

const int NID_camellia_192_cmac = 968;

const int OBJ_camellia_192_cmac = 0;

const String SN_camellia_256_ecb = 'CAMELLIA-256-ECB';

const String LN_camellia_256_ecb = 'camellia-256-ecb';

const int NID_camellia_256_ecb = 756;

const int OBJ_camellia_256_ecb = 0;

const String SN_camellia_256_ofb128 = 'CAMELLIA-256-OFB';

const String LN_camellia_256_ofb128 = 'camellia-256-ofb';

const int NID_camellia_256_ofb128 = 768;

const int OBJ_camellia_256_ofb128 = 0;

const String SN_camellia_256_cfb128 = 'CAMELLIA-256-CFB';

const String LN_camellia_256_cfb128 = 'camellia-256-cfb';

const int NID_camellia_256_cfb128 = 759;

const int OBJ_camellia_256_cfb128 = 0;

const String SN_camellia_256_gcm = 'CAMELLIA-256-GCM';

const String LN_camellia_256_gcm = 'camellia-256-gcm';

const int NID_camellia_256_gcm = 969;

const int OBJ_camellia_256_gcm = 0;

const String SN_camellia_256_ccm = 'CAMELLIA-256-CCM';

const String LN_camellia_256_ccm = 'camellia-256-ccm';

const int NID_camellia_256_ccm = 970;

const int OBJ_camellia_256_ccm = 0;

const String SN_camellia_256_ctr = 'CAMELLIA-256-CTR';

const String LN_camellia_256_ctr = 'camellia-256-ctr';

const int NID_camellia_256_ctr = 971;

const int OBJ_camellia_256_ctr = 0;

const String SN_camellia_256_cmac = 'CAMELLIA-256-CMAC';

const String LN_camellia_256_cmac = 'camellia-256-cmac';

const int NID_camellia_256_cmac = 972;

const int OBJ_camellia_256_cmac = 0;

const String SN_camellia_128_cfb1 = 'CAMELLIA-128-CFB1';

const String LN_camellia_128_cfb1 = 'camellia-128-cfb1';

const int NID_camellia_128_cfb1 = 760;

const String SN_camellia_192_cfb1 = 'CAMELLIA-192-CFB1';

const String LN_camellia_192_cfb1 = 'camellia-192-cfb1';

const int NID_camellia_192_cfb1 = 761;

const String SN_camellia_256_cfb1 = 'CAMELLIA-256-CFB1';

const String LN_camellia_256_cfb1 = 'camellia-256-cfb1';

const int NID_camellia_256_cfb1 = 762;

const String SN_camellia_128_cfb8 = 'CAMELLIA-128-CFB8';

const String LN_camellia_128_cfb8 = 'camellia-128-cfb8';

const int NID_camellia_128_cfb8 = 763;

const String SN_camellia_192_cfb8 = 'CAMELLIA-192-CFB8';

const String LN_camellia_192_cfb8 = 'camellia-192-cfb8';

const int NID_camellia_192_cfb8 = 764;

const String SN_camellia_256_cfb8 = 'CAMELLIA-256-CFB8';

const String LN_camellia_256_cfb8 = 'camellia-256-cfb8';

const int NID_camellia_256_cfb8 = 765;

const int OBJ_aria = 1;

const String SN_aria_128_ecb = 'ARIA-128-ECB';

const String LN_aria_128_ecb = 'aria-128-ecb';

const int NID_aria_128_ecb = 1065;

const int OBJ_aria_128_ecb = 1;

const String SN_aria_128_cbc = 'ARIA-128-CBC';

const String LN_aria_128_cbc = 'aria-128-cbc';

const int NID_aria_128_cbc = 1066;

const int OBJ_aria_128_cbc = 1;

const String SN_aria_128_cfb128 = 'ARIA-128-CFB';

const String LN_aria_128_cfb128 = 'aria-128-cfb';

const int NID_aria_128_cfb128 = 1067;

const int OBJ_aria_128_cfb128 = 1;

const String SN_aria_128_ofb128 = 'ARIA-128-OFB';

const String LN_aria_128_ofb128 = 'aria-128-ofb';

const int NID_aria_128_ofb128 = 1068;

const int OBJ_aria_128_ofb128 = 1;

const String SN_aria_128_ctr = 'ARIA-128-CTR';

const String LN_aria_128_ctr = 'aria-128-ctr';

const int NID_aria_128_ctr = 1069;

const int OBJ_aria_128_ctr = 1;

const String SN_aria_192_ecb = 'ARIA-192-ECB';

const String LN_aria_192_ecb = 'aria-192-ecb';

const int NID_aria_192_ecb = 1070;

const int OBJ_aria_192_ecb = 1;

const String SN_aria_192_cbc = 'ARIA-192-CBC';

const String LN_aria_192_cbc = 'aria-192-cbc';

const int NID_aria_192_cbc = 1071;

const int OBJ_aria_192_cbc = 1;

const String SN_aria_192_cfb128 = 'ARIA-192-CFB';

const String LN_aria_192_cfb128 = 'aria-192-cfb';

const int NID_aria_192_cfb128 = 1072;

const int OBJ_aria_192_cfb128 = 1;

const String SN_aria_192_ofb128 = 'ARIA-192-OFB';

const String LN_aria_192_ofb128 = 'aria-192-ofb';

const int NID_aria_192_ofb128 = 1073;

const int OBJ_aria_192_ofb128 = 1;

const String SN_aria_192_ctr = 'ARIA-192-CTR';

const String LN_aria_192_ctr = 'aria-192-ctr';

const int NID_aria_192_ctr = 1074;

const int OBJ_aria_192_ctr = 1;

const String SN_aria_256_ecb = 'ARIA-256-ECB';

const String LN_aria_256_ecb = 'aria-256-ecb';

const int NID_aria_256_ecb = 1075;

const int OBJ_aria_256_ecb = 1;

const String SN_aria_256_cbc = 'ARIA-256-CBC';

const String LN_aria_256_cbc = 'aria-256-cbc';

const int NID_aria_256_cbc = 1076;

const int OBJ_aria_256_cbc = 1;

const String SN_aria_256_cfb128 = 'ARIA-256-CFB';

const String LN_aria_256_cfb128 = 'aria-256-cfb';

const int NID_aria_256_cfb128 = 1077;

const int OBJ_aria_256_cfb128 = 1;

const String SN_aria_256_ofb128 = 'ARIA-256-OFB';

const String LN_aria_256_ofb128 = 'aria-256-ofb';

const int NID_aria_256_ofb128 = 1078;

const int OBJ_aria_256_ofb128 = 1;

const String SN_aria_256_ctr = 'ARIA-256-CTR';

const String LN_aria_256_ctr = 'aria-256-ctr';

const int NID_aria_256_ctr = 1079;

const int OBJ_aria_256_ctr = 1;

const String SN_aria_128_cfb1 = 'ARIA-128-CFB1';

const String LN_aria_128_cfb1 = 'aria-128-cfb1';

const int NID_aria_128_cfb1 = 1080;

const String SN_aria_192_cfb1 = 'ARIA-192-CFB1';

const String LN_aria_192_cfb1 = 'aria-192-cfb1';

const int NID_aria_192_cfb1 = 1081;

const String SN_aria_256_cfb1 = 'ARIA-256-CFB1';

const String LN_aria_256_cfb1 = 'aria-256-cfb1';

const int NID_aria_256_cfb1 = 1082;

const String SN_aria_128_cfb8 = 'ARIA-128-CFB8';

const String LN_aria_128_cfb8 = 'aria-128-cfb8';

const int NID_aria_128_cfb8 = 1083;

const String SN_aria_192_cfb8 = 'ARIA-192-CFB8';

const String LN_aria_192_cfb8 = 'aria-192-cfb8';

const int NID_aria_192_cfb8 = 1084;

const String SN_aria_256_cfb8 = 'ARIA-256-CFB8';

const String LN_aria_256_cfb8 = 'aria-256-cfb8';

const int NID_aria_256_cfb8 = 1085;

const String SN_aria_128_ccm = 'ARIA-128-CCM';

const String LN_aria_128_ccm = 'aria-128-ccm';

const int NID_aria_128_ccm = 1120;

const int OBJ_aria_128_ccm = 1;

const String SN_aria_192_ccm = 'ARIA-192-CCM';

const String LN_aria_192_ccm = 'aria-192-ccm';

const int NID_aria_192_ccm = 1121;

const int OBJ_aria_192_ccm = 1;

const String SN_aria_256_ccm = 'ARIA-256-CCM';

const String LN_aria_256_ccm = 'aria-256-ccm';

const int NID_aria_256_ccm = 1122;

const int OBJ_aria_256_ccm = 1;

const String SN_aria_128_gcm = 'ARIA-128-GCM';

const String LN_aria_128_gcm = 'aria-128-gcm';

const int NID_aria_128_gcm = 1123;

const int OBJ_aria_128_gcm = 1;

const String SN_aria_192_gcm = 'ARIA-192-GCM';

const String LN_aria_192_gcm = 'aria-192-gcm';

const int NID_aria_192_gcm = 1124;

const int OBJ_aria_192_gcm = 1;

const String SN_aria_256_gcm = 'ARIA-256-GCM';

const String LN_aria_256_gcm = 'aria-256-gcm';

const int NID_aria_256_gcm = 1125;

const int OBJ_aria_256_gcm = 1;

const String SN_kisa = 'KISA';

const String LN_kisa = 'kisa';

const int NID_kisa = 773;

const int OBJ_kisa = 1;

const String SN_seed_ecb = 'SEED-ECB';

const String LN_seed_ecb = 'seed-ecb';

const int NID_seed_ecb = 776;

const int OBJ_seed_ecb = 1;

const String SN_seed_cbc = 'SEED-CBC';

const String LN_seed_cbc = 'seed-cbc';

const int NID_seed_cbc = 777;

const int OBJ_seed_cbc = 1;

const String SN_seed_cfb128 = 'SEED-CFB';

const String LN_seed_cfb128 = 'seed-cfb';

const int NID_seed_cfb128 = 779;

const int OBJ_seed_cfb128 = 1;

const String SN_seed_ofb128 = 'SEED-OFB';

const String LN_seed_ofb128 = 'seed-ofb';

const int NID_seed_ofb128 = 778;

const int OBJ_seed_ofb128 = 1;

const String SN_sm4_ecb = 'SM4-ECB';

const String LN_sm4_ecb = 'sm4-ecb';

const int NID_sm4_ecb = 1133;

const int OBJ_sm4_ecb = 1;

const String SN_sm4_cbc = 'SM4-CBC';

const String LN_sm4_cbc = 'sm4-cbc';

const int NID_sm4_cbc = 1134;

const int OBJ_sm4_cbc = 1;

const String SN_sm4_ofb128 = 'SM4-OFB';

const String LN_sm4_ofb128 = 'sm4-ofb';

const int NID_sm4_ofb128 = 1135;

const int OBJ_sm4_ofb128 = 1;

const String SN_sm4_cfb128 = 'SM4-CFB';

const String LN_sm4_cfb128 = 'sm4-cfb';

const int NID_sm4_cfb128 = 1137;

const int OBJ_sm4_cfb128 = 1;

const String SN_sm4_cfb1 = 'SM4-CFB1';

const String LN_sm4_cfb1 = 'sm4-cfb1';

const int NID_sm4_cfb1 = 1136;

const int OBJ_sm4_cfb1 = 1;

const String SN_sm4_cfb8 = 'SM4-CFB8';

const String LN_sm4_cfb8 = 'sm4-cfb8';

const int NID_sm4_cfb8 = 1138;

const int OBJ_sm4_cfb8 = 1;

const String SN_sm4_ctr = 'SM4-CTR';

const String LN_sm4_ctr = 'sm4-ctr';

const int NID_sm4_ctr = 1139;

const int OBJ_sm4_ctr = 1;

const String SN_hmac = 'HMAC';

const String LN_hmac = 'hmac';

const int NID_hmac = 855;

const String SN_cmac = 'CMAC';

const String LN_cmac = 'cmac';

const int NID_cmac = 894;

const String SN_rc4_hmac_md5 = 'RC4-HMAC-MD5';

const String LN_rc4_hmac_md5 = 'rc4-hmac-md5';

const int NID_rc4_hmac_md5 = 915;

const String SN_aes_128_cbc_hmac_sha1 = 'AES-128-CBC-HMAC-SHA1';

const String LN_aes_128_cbc_hmac_sha1 = 'aes-128-cbc-hmac-sha1';

const int NID_aes_128_cbc_hmac_sha1 = 916;

const String SN_aes_192_cbc_hmac_sha1 = 'AES-192-CBC-HMAC-SHA1';

const String LN_aes_192_cbc_hmac_sha1 = 'aes-192-cbc-hmac-sha1';

const int NID_aes_192_cbc_hmac_sha1 = 917;

const String SN_aes_256_cbc_hmac_sha1 = 'AES-256-CBC-HMAC-SHA1';

const String LN_aes_256_cbc_hmac_sha1 = 'aes-256-cbc-hmac-sha1';

const int NID_aes_256_cbc_hmac_sha1 = 918;

const String SN_aes_128_cbc_hmac_sha256 = 'AES-128-CBC-HMAC-SHA256';

const String LN_aes_128_cbc_hmac_sha256 = 'aes-128-cbc-hmac-sha256';

const int NID_aes_128_cbc_hmac_sha256 = 948;

const String SN_aes_192_cbc_hmac_sha256 = 'AES-192-CBC-HMAC-SHA256';

const String LN_aes_192_cbc_hmac_sha256 = 'aes-192-cbc-hmac-sha256';

const int NID_aes_192_cbc_hmac_sha256 = 949;

const String SN_aes_256_cbc_hmac_sha256 = 'AES-256-CBC-HMAC-SHA256';

const String LN_aes_256_cbc_hmac_sha256 = 'aes-256-cbc-hmac-sha256';

const int NID_aes_256_cbc_hmac_sha256 = 950;

const String SN_chacha20_poly1305 = 'ChaCha20-Poly1305';

const String LN_chacha20_poly1305 = 'chacha20-poly1305';

const int NID_chacha20_poly1305 = 1018;

const String SN_chacha20 = 'ChaCha20';

const String LN_chacha20 = 'chacha20';

const int NID_chacha20 = 1019;

const String SN_dhpublicnumber = 'dhpublicnumber';

const String LN_dhpublicnumber = 'X9.42 DH';

const int NID_dhpublicnumber = 920;

const int OBJ_dhpublicnumber = 1;

const String SN_brainpoolP160r1 = 'brainpoolP160r1';

const int NID_brainpoolP160r1 = 921;

const int OBJ_brainpoolP160r1 = 1;

const String SN_brainpoolP160t1 = 'brainpoolP160t1';

const int NID_brainpoolP160t1 = 922;

const int OBJ_brainpoolP160t1 = 1;

const String SN_brainpoolP192r1 = 'brainpoolP192r1';

const int NID_brainpoolP192r1 = 923;

const int OBJ_brainpoolP192r1 = 1;

const String SN_brainpoolP192t1 = 'brainpoolP192t1';

const int NID_brainpoolP192t1 = 924;

const int OBJ_brainpoolP192t1 = 1;

const String SN_brainpoolP224r1 = 'brainpoolP224r1';

const int NID_brainpoolP224r1 = 925;

const int OBJ_brainpoolP224r1 = 1;

const String SN_brainpoolP224t1 = 'brainpoolP224t1';

const int NID_brainpoolP224t1 = 926;

const int OBJ_brainpoolP224t1 = 1;

const String SN_brainpoolP256r1 = 'brainpoolP256r1';

const int NID_brainpoolP256r1 = 927;

const int OBJ_brainpoolP256r1 = 1;

const String SN_brainpoolP256t1 = 'brainpoolP256t1';

const int NID_brainpoolP256t1 = 928;

const int OBJ_brainpoolP256t1 = 1;

const String SN_brainpoolP320r1 = 'brainpoolP320r1';

const int NID_brainpoolP320r1 = 929;

const int OBJ_brainpoolP320r1 = 1;

const String SN_brainpoolP320t1 = 'brainpoolP320t1';

const int NID_brainpoolP320t1 = 930;

const int OBJ_brainpoolP320t1 = 1;

const String SN_brainpoolP384r1 = 'brainpoolP384r1';

const int NID_brainpoolP384r1 = 931;

const int OBJ_brainpoolP384r1 = 1;

const String SN_brainpoolP384t1 = 'brainpoolP384t1';

const int NID_brainpoolP384t1 = 932;

const int OBJ_brainpoolP384t1 = 1;

const String SN_brainpoolP512r1 = 'brainpoolP512r1';

const int NID_brainpoolP512r1 = 933;

const int OBJ_brainpoolP512r1 = 1;

const String SN_brainpoolP512t1 = 'brainpoolP512t1';

const int NID_brainpoolP512t1 = 934;

const int OBJ_brainpoolP512t1 = 1;

const int OBJ_x9_63_scheme = 1;

const int OBJ_secg_scheme = 1;

const String SN_dhSinglePass_stdDH_sha1kdf_scheme =
    'dhSinglePass-stdDH-sha1kdf-scheme';

const int NID_dhSinglePass_stdDH_sha1kdf_scheme = 936;

const int OBJ_dhSinglePass_stdDH_sha1kdf_scheme = 1;

const String SN_dhSinglePass_stdDH_sha224kdf_scheme =
    'dhSinglePass-stdDH-sha224kdf-scheme';

const int NID_dhSinglePass_stdDH_sha224kdf_scheme = 937;

const int OBJ_dhSinglePass_stdDH_sha224kdf_scheme = 1;

const String SN_dhSinglePass_stdDH_sha256kdf_scheme =
    'dhSinglePass-stdDH-sha256kdf-scheme';

const int NID_dhSinglePass_stdDH_sha256kdf_scheme = 938;

const int OBJ_dhSinglePass_stdDH_sha256kdf_scheme = 1;

const String SN_dhSinglePass_stdDH_sha384kdf_scheme =
    'dhSinglePass-stdDH-sha384kdf-scheme';

const int NID_dhSinglePass_stdDH_sha384kdf_scheme = 939;

const int OBJ_dhSinglePass_stdDH_sha384kdf_scheme = 1;

const String SN_dhSinglePass_stdDH_sha512kdf_scheme =
    'dhSinglePass-stdDH-sha512kdf-scheme';

const int NID_dhSinglePass_stdDH_sha512kdf_scheme = 940;

const int OBJ_dhSinglePass_stdDH_sha512kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha1kdf_scheme =
    'dhSinglePass-cofactorDH-sha1kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha1kdf_scheme = 941;

const int OBJ_dhSinglePass_cofactorDH_sha1kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha224kdf_scheme =
    'dhSinglePass-cofactorDH-sha224kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha224kdf_scheme = 942;

const int OBJ_dhSinglePass_cofactorDH_sha224kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha256kdf_scheme =
    'dhSinglePass-cofactorDH-sha256kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha256kdf_scheme = 943;

const int OBJ_dhSinglePass_cofactorDH_sha256kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha384kdf_scheme =
    'dhSinglePass-cofactorDH-sha384kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha384kdf_scheme = 944;

const int OBJ_dhSinglePass_cofactorDH_sha384kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha512kdf_scheme =
    'dhSinglePass-cofactorDH-sha512kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha512kdf_scheme = 945;

const int OBJ_dhSinglePass_cofactorDH_sha512kdf_scheme = 1;

const String SN_dh_std_kdf = 'dh-std-kdf';

const int NID_dh_std_kdf = 946;

const String SN_dh_cofactor_kdf = 'dh-cofactor-kdf';

const int NID_dh_cofactor_kdf = 947;

const String SN_ct_precert_scts = 'ct_precert_scts';

const String LN_ct_precert_scts = 'CT Precertificate SCTs';

const int NID_ct_precert_scts = 951;

const int OBJ_ct_precert_scts = 1;

const String SN_ct_precert_poison = 'ct_precert_poison';

const String LN_ct_precert_poison = 'CT Precertificate Poison';

const int NID_ct_precert_poison = 952;

const int OBJ_ct_precert_poison = 1;

const String SN_ct_precert_signer = 'ct_precert_signer';

const String LN_ct_precert_signer = 'CT Precertificate Signer';

const int NID_ct_precert_signer = 953;

const int OBJ_ct_precert_signer = 1;

const String SN_ct_cert_scts = 'ct_cert_scts';

const String LN_ct_cert_scts = 'CT Certificate SCTs';

const int NID_ct_cert_scts = 954;

const int OBJ_ct_cert_scts = 1;

const String SN_jurisdictionLocalityName = 'jurisdictionL';

const String LN_jurisdictionLocalityName = 'jurisdictionLocalityName';

const int NID_jurisdictionLocalityName = 955;

const int OBJ_jurisdictionLocalityName = 1;

const String SN_jurisdictionStateOrProvinceName = 'jurisdictionST';

const String LN_jurisdictionStateOrProvinceName =
    'jurisdictionStateOrProvinceName';

const int NID_jurisdictionStateOrProvinceName = 956;

const int OBJ_jurisdictionStateOrProvinceName = 1;

const String SN_jurisdictionCountryName = 'jurisdictionC';

const String LN_jurisdictionCountryName = 'jurisdictionCountryName';

const int NID_jurisdictionCountryName = 957;

const int OBJ_jurisdictionCountryName = 1;

const String SN_id_scrypt = 'id-scrypt';

const String LN_id_scrypt = 'scrypt';

const int NID_id_scrypt = 973;

const int OBJ_id_scrypt = 1;

const String SN_tls1_prf = 'TLS1-PRF';

const String LN_tls1_prf = 'tls1-prf';

const int NID_tls1_prf = 1021;

const String SN_hkdf = 'HKDF';

const String LN_hkdf = 'hkdf';

const int NID_hkdf = 1036;

const String SN_id_pkinit = 'id-pkinit';

const int NID_id_pkinit = 1031;

const int OBJ_id_pkinit = 1;

const String SN_pkInitClientAuth = 'pkInitClientAuth';

const String LN_pkInitClientAuth = 'PKINIT Client Auth';

const int NID_pkInitClientAuth = 1032;

const int OBJ_pkInitClientAuth = 1;

const String SN_pkInitKDC = 'pkInitKDC';

const String LN_pkInitKDC = 'Signing KDC Response';

const int NID_pkInitKDC = 1033;

const int OBJ_pkInitKDC = 1;

const String SN_X25519 = 'X25519';

const int NID_X25519 = 1034;

const int OBJ_X25519 = 1;

const String SN_X448 = 'X448';

const int NID_X448 = 1035;

const int OBJ_X448 = 1;

const String SN_ED25519 = 'ED25519';

const int NID_ED25519 = 1087;

const int OBJ_ED25519 = 1;

const String SN_ED448 = 'ED448';

const int NID_ED448 = 1088;

const int OBJ_ED448 = 1;

const String SN_kx_rsa = 'KxRSA';

const String LN_kx_rsa = 'kx-rsa';

const int NID_kx_rsa = 1037;

const String SN_kx_ecdhe = 'KxECDHE';

const String LN_kx_ecdhe = 'kx-ecdhe';

const int NID_kx_ecdhe = 1038;

const String SN_kx_dhe = 'KxDHE';

const String LN_kx_dhe = 'kx-dhe';

const int NID_kx_dhe = 1039;

const String SN_kx_ecdhe_psk = 'KxECDHE-PSK';

const String LN_kx_ecdhe_psk = 'kx-ecdhe-psk';

const int NID_kx_ecdhe_psk = 1040;

const String SN_kx_dhe_psk = 'KxDHE-PSK';

const String LN_kx_dhe_psk = 'kx-dhe-psk';

const int NID_kx_dhe_psk = 1041;

const String SN_kx_rsa_psk = 'KxRSA_PSK';

const String LN_kx_rsa_psk = 'kx-rsa-psk';

const int NID_kx_rsa_psk = 1042;

const String SN_kx_psk = 'KxPSK';

const String LN_kx_psk = 'kx-psk';

const int NID_kx_psk = 1043;

const String SN_kx_srp = 'KxSRP';

const String LN_kx_srp = 'kx-srp';

const int NID_kx_srp = 1044;

const String SN_kx_gost = 'KxGOST';

const String LN_kx_gost = 'kx-gost';

const int NID_kx_gost = 1045;

const String SN_kx_any = 'KxANY';

const String LN_kx_any = 'kx-any';

const int NID_kx_any = 1063;

const String SN_auth_rsa = 'AuthRSA';

const String LN_auth_rsa = 'auth-rsa';

const int NID_auth_rsa = 1046;

const String SN_auth_ecdsa = 'AuthECDSA';

const String LN_auth_ecdsa = 'auth-ecdsa';

const int NID_auth_ecdsa = 1047;

const String SN_auth_psk = 'AuthPSK';

const String LN_auth_psk = 'auth-psk';

const int NID_auth_psk = 1048;

const String SN_auth_dss = 'AuthDSS';

const String LN_auth_dss = 'auth-dss';

const int NID_auth_dss = 1049;

const String SN_auth_gost01 = 'AuthGOST01';

const String LN_auth_gost01 = 'auth-gost01';

const int NID_auth_gost01 = 1050;

const String SN_auth_gost12 = 'AuthGOST12';

const String LN_auth_gost12 = 'auth-gost12';

const int NID_auth_gost12 = 1051;

const String SN_auth_srp = 'AuthSRP';

const String LN_auth_srp = 'auth-srp';

const int NID_auth_srp = 1052;

const String SN_auth_null = 'AuthNULL';

const String LN_auth_null = 'auth-null';

const int NID_auth_null = 1053;

const String SN_auth_any = 'AuthANY';

const String LN_auth_any = 'auth-any';

const int NID_auth_any = 1064;

const String SN_poly1305 = 'Poly1305';

const String LN_poly1305 = 'poly1305';

const int NID_poly1305 = 1061;

const String SN_siphash = 'SipHash';

const String LN_siphash = 'siphash';

const int NID_siphash = 1062;

const String SN_ffdhe2048 = 'ffdhe2048';

const int NID_ffdhe2048 = 1126;

const String SN_ffdhe3072 = 'ffdhe3072';

const int NID_ffdhe3072 = 1127;

const String SN_ffdhe4096 = 'ffdhe4096';

const int NID_ffdhe4096 = 1128;

const String SN_ffdhe6144 = 'ffdhe6144';

const int NID_ffdhe6144 = 1129;

const String SN_ffdhe8192 = 'ffdhe8192';

const int NID_ffdhe8192 = 1130;

const String SN_ISO_UA = 'ISO-UA';

const int NID_ISO_UA = 1150;

const int OBJ_ISO_UA = 1;

const String SN_ua_pki = 'ua-pki';

const int NID_ua_pki = 1151;

const int OBJ_ua_pki = 1;

const String SN_dstu28147 = 'dstu28147';

const String LN_dstu28147 = 'DSTU Gost 28147-2009';

const int NID_dstu28147 = 1152;

const int OBJ_dstu28147 = 1;

const String SN_dstu28147_ofb = 'dstu28147-ofb';

const String LN_dstu28147_ofb = 'DSTU Gost 28147-2009 OFB mode';

const int NID_dstu28147_ofb = 1153;

const int OBJ_dstu28147_ofb = 1;

const String SN_dstu28147_cfb = 'dstu28147-cfb';

const String LN_dstu28147_cfb = 'DSTU Gost 28147-2009 CFB mode';

const int NID_dstu28147_cfb = 1154;

const int OBJ_dstu28147_cfb = 1;

const String SN_dstu28147_wrap = 'dstu28147-wrap';

const String LN_dstu28147_wrap = 'DSTU Gost 28147-2009 key wrap';

const int NID_dstu28147_wrap = 1155;

const int OBJ_dstu28147_wrap = 1;

const String SN_hmacWithDstu34311 = 'hmacWithDstu34311';

const String LN_hmacWithDstu34311 = 'HMAC DSTU Gost 34311-95';

const int NID_hmacWithDstu34311 = 1156;

const int OBJ_hmacWithDstu34311 = 1;

const String SN_dstu34311 = 'dstu34311';

const String LN_dstu34311 = 'DSTU Gost 34311-95';

const int NID_dstu34311 = 1157;

const int OBJ_dstu34311 = 1;

const String SN_dstu4145le = 'dstu4145le';

const String LN_dstu4145le = 'DSTU 4145-2002 little endian';

const int NID_dstu4145le = 1158;

const int OBJ_dstu4145le = 1;

const String SN_dstu4145be = 'dstu4145be';

const String LN_dstu4145be = 'DSTU 4145-2002 big endian';

const int NID_dstu4145be = 1159;

const int OBJ_dstu4145be = 1;

const String SN_uacurve0 = 'uacurve0';

const String LN_uacurve0 = 'DSTU curve 0';

const int NID_uacurve0 = 1160;

const int OBJ_uacurve0 = 1;

const String SN_uacurve1 = 'uacurve1';

const String LN_uacurve1 = 'DSTU curve 1';

const int NID_uacurve1 = 1161;

const int OBJ_uacurve1 = 1;

const String SN_uacurve2 = 'uacurve2';

const String LN_uacurve2 = 'DSTU curve 2';

const int NID_uacurve2 = 1162;

const int OBJ_uacurve2 = 1;

const String SN_uacurve3 = 'uacurve3';

const String LN_uacurve3 = 'DSTU curve 3';

const int NID_uacurve3 = 1163;

const int OBJ_uacurve3 = 1;

const String SN_uacurve4 = 'uacurve4';

const String LN_uacurve4 = 'DSTU curve 4';

const int NID_uacurve4 = 1164;

const int OBJ_uacurve4 = 1;

const String SN_uacurve5 = 'uacurve5';

const String LN_uacurve5 = 'DSTU curve 5';

const int NID_uacurve5 = 1165;

const int OBJ_uacurve5 = 1;

const String SN_uacurve6 = 'uacurve6';

const String LN_uacurve6 = 'DSTU curve 6';

const int NID_uacurve6 = 1166;

const int OBJ_uacurve6 = 1;

const String SN_uacurve7 = 'uacurve7';

const String LN_uacurve7 = 'DSTU curve 7';

const int NID_uacurve7 = 1167;

const int OBJ_uacurve7 = 1;

const String SN_uacurve8 = 'uacurve8';

const String LN_uacurve8 = 'DSTU curve 8';

const int NID_uacurve8 = 1168;

const int OBJ_uacurve8 = 1;

const String SN_uacurve9 = 'uacurve9';

const String LN_uacurve9 = 'DSTU curve 9';

const int NID_uacurve9 = 1169;

const int OBJ_uacurve9 = 1;

const int ASN1_F_A2D_ASN1_OBJECT = 100;

const int ASN1_F_A2I_ASN1_INTEGER = 102;

const int ASN1_F_A2I_ASN1_STRING = 103;

const int ASN1_F_APPEND_EXP = 176;

const int ASN1_F_ASN1_BIO_INIT = 113;

const int ASN1_F_ASN1_BIT_STRING_SET_BIT = 183;

const int ASN1_F_ASN1_CB = 177;

const int ASN1_F_ASN1_CHECK_TLEN = 104;

const int ASN1_F_ASN1_COLLECT = 106;

const int ASN1_F_ASN1_D2I_EX_PRIMITIVE = 108;

const int ASN1_F_ASN1_D2I_FP = 109;

const int ASN1_F_ASN1_D2I_READ_BIO = 107;

const int ASN1_F_ASN1_DIGEST = 184;

const int ASN1_F_ASN1_DO_ADB = 110;

const int ASN1_F_ASN1_DO_LOCK = 233;

const int ASN1_F_ASN1_DUP = 111;

const int ASN1_F_ASN1_ENC_SAVE = 115;

const int ASN1_F_ASN1_EX_C2I = 204;

const int ASN1_F_ASN1_FIND_END = 190;

const int ASN1_F_ASN1_GENERALIZEDTIME_ADJ = 216;

const int ASN1_F_ASN1_GENERATE_V3 = 178;

const int ASN1_F_ASN1_GET_INT64 = 224;

const int ASN1_F_ASN1_GET_OBJECT = 114;

const int ASN1_F_ASN1_GET_UINT64 = 225;

const int ASN1_F_ASN1_I2D_BIO = 116;

const int ASN1_F_ASN1_I2D_FP = 117;

const int ASN1_F_ASN1_ITEM_D2I_FP = 206;

const int ASN1_F_ASN1_ITEM_DUP = 191;

const int ASN1_F_ASN1_ITEM_EMBED_D2I = 120;

const int ASN1_F_ASN1_ITEM_EMBED_NEW = 121;

const int ASN1_F_ASN1_ITEM_EX_I2D = 144;

const int ASN1_F_ASN1_ITEM_FLAGS_I2D = 118;

const int ASN1_F_ASN1_ITEM_I2D_BIO = 192;

const int ASN1_F_ASN1_ITEM_I2D_FP = 193;

const int ASN1_F_ASN1_ITEM_PACK = 198;

const int ASN1_F_ASN1_ITEM_SIGN = 195;

const int ASN1_F_ASN1_ITEM_SIGN_CTX = 220;

const int ASN1_F_ASN1_ITEM_UNPACK = 199;

const int ASN1_F_ASN1_ITEM_VERIFY = 197;

const int ASN1_F_ASN1_MBSTRING_NCOPY = 122;

const int ASN1_F_ASN1_OBJECT_NEW = 123;

const int ASN1_F_ASN1_OUTPUT_DATA = 214;

const int ASN1_F_ASN1_PCTX_NEW = 205;

const int ASN1_F_ASN1_PRIMITIVE_NEW = 119;

const int ASN1_F_ASN1_SCTX_NEW = 221;

const int ASN1_F_ASN1_SIGN = 128;

const int ASN1_F_ASN1_STR2TYPE = 179;

const int ASN1_F_ASN1_STRING_GET_INT64 = 227;

const int ASN1_F_ASN1_STRING_GET_UINT64 = 230;

const int ASN1_F_ASN1_STRING_SET = 186;

const int ASN1_F_ASN1_STRING_TABLE_ADD = 129;

const int ASN1_F_ASN1_STRING_TO_BN = 228;

const int ASN1_F_ASN1_STRING_TYPE_NEW = 130;

const int ASN1_F_ASN1_TEMPLATE_EX_D2I = 132;

const int ASN1_F_ASN1_TEMPLATE_NEW = 133;

const int ASN1_F_ASN1_TEMPLATE_NOEXP_D2I = 131;

const int ASN1_F_ASN1_TIME_ADJ = 217;

const int ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING = 134;

const int ASN1_F_ASN1_TYPE_GET_OCTETSTRING = 135;

const int ASN1_F_ASN1_UTCTIME_ADJ = 218;

const int ASN1_F_ASN1_VERIFY = 137;

const int ASN1_F_B64_READ_ASN1 = 209;

const int ASN1_F_B64_WRITE_ASN1 = 210;

const int ASN1_F_BIO_NEW_NDEF = 208;

const int ASN1_F_BITSTR_CB = 180;

const int ASN1_F_BN_TO_ASN1_STRING = 229;

const int ASN1_F_C2I_ASN1_BIT_STRING = 189;

const int ASN1_F_C2I_ASN1_INTEGER = 194;

const int ASN1_F_C2I_ASN1_OBJECT = 196;

const int ASN1_F_C2I_IBUF = 226;

const int ASN1_F_C2I_UINT64_INT = 101;

const int ASN1_F_COLLECT_DATA = 140;

const int ASN1_F_D2I_ASN1_OBJECT = 147;

const int ASN1_F_D2I_ASN1_UINTEGER = 150;

const int ASN1_F_D2I_AUTOPRIVATEKEY = 207;

const int ASN1_F_D2I_PRIVATEKEY = 154;

const int ASN1_F_D2I_PUBLICKEY = 155;

const int ASN1_F_DO_BUF = 142;

const int ASN1_F_DO_CREATE = 124;

const int ASN1_F_DO_DUMP = 125;

const int ASN1_F_DO_TCREATE = 222;

const int ASN1_F_I2A_ASN1_OBJECT = 126;

const int ASN1_F_I2D_ASN1_BIO_STREAM = 211;

const int ASN1_F_I2D_ASN1_OBJECT = 143;

const int ASN1_F_I2D_DSA_PUBKEY = 161;

const int ASN1_F_I2D_EC_PUBKEY = 181;

const int ASN1_F_I2D_PRIVATEKEY = 163;

const int ASN1_F_I2D_PUBLICKEY = 164;

const int ASN1_F_I2D_RSA_PUBKEY = 165;

const int ASN1_F_LONG_C2I = 166;

const int ASN1_F_NDEF_PREFIX = 127;

const int ASN1_F_NDEF_SUFFIX = 136;

const int ASN1_F_OID_MODULE_INIT = 174;

const int ASN1_F_PARSE_TAGGING = 182;

const int ASN1_F_PKCS5_PBE2_SET_IV = 167;

const int ASN1_F_PKCS5_PBE2_SET_SCRYPT = 231;

const int ASN1_F_PKCS5_PBE_SET = 202;

const int ASN1_F_PKCS5_PBE_SET0_ALGOR = 215;

const int ASN1_F_PKCS5_PBKDF2_SET = 219;

const int ASN1_F_PKCS5_SCRYPT_SET = 232;

const int ASN1_F_SMIME_READ_ASN1 = 212;

const int ASN1_F_SMIME_TEXT = 213;

const int ASN1_F_STABLE_GET = 138;

const int ASN1_F_STBL_MODULE_INIT = 223;

const int ASN1_F_UINT32_C2I = 105;

const int ASN1_F_UINT32_NEW = 139;

const int ASN1_F_UINT64_C2I = 112;

const int ASN1_F_UINT64_NEW = 141;

const int ASN1_F_X509_CRL_ADD0_REVOKED = 169;

const int ASN1_F_X509_INFO_NEW = 170;

const int ASN1_F_X509_NAME_ENCODE = 203;

const int ASN1_F_X509_NAME_EX_D2I = 158;

const int ASN1_F_X509_NAME_EX_NEW = 171;

const int ASN1_F_X509_PKEY_NEW = 173;

const int ASN1_R_ADDING_OBJECT = 171;

const int ASN1_R_ASN1_PARSE_ERROR = 203;

const int ASN1_R_ASN1_SIG_PARSE_ERROR = 204;

const int ASN1_R_AUX_ERROR = 100;

const int ASN1_R_BAD_OBJECT_HEADER = 102;

const int ASN1_R_BAD_TEMPLATE = 230;

const int ASN1_R_BMPSTRING_IS_WRONG_LENGTH = 214;

const int ASN1_R_BN_LIB = 105;

const int ASN1_R_BOOLEAN_IS_WRONG_LENGTH = 106;

const int ASN1_R_BUFFER_TOO_SMALL = 107;

const int ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER = 108;

const int ASN1_R_CONTEXT_NOT_INITIALISED = 217;

const int ASN1_R_DATA_IS_WRONG = 109;

const int ASN1_R_DECODE_ERROR = 110;

const int ASN1_R_DEPTH_EXCEEDED = 174;

const int ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED = 198;

const int ASN1_R_ENCODE_ERROR = 112;

const int ASN1_R_ERROR_GETTING_TIME = 173;

const int ASN1_R_ERROR_LOADING_SECTION = 172;

const int ASN1_R_ERROR_SETTING_CIPHER_PARAMS = 114;

const int ASN1_R_EXPECTING_AN_INTEGER = 115;

const int ASN1_R_EXPECTING_AN_OBJECT = 116;

const int ASN1_R_EXPLICIT_LENGTH_MISMATCH = 119;

const int ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED = 120;

const int ASN1_R_FIELD_MISSING = 121;

const int ASN1_R_FIRST_NUM_TOO_LARGE = 122;

const int ASN1_R_HEADER_TOO_LONG = 123;

const int ASN1_R_ILLEGAL_BITSTRING_FORMAT = 175;

const int ASN1_R_ILLEGAL_BOOLEAN = 176;

const int ASN1_R_ILLEGAL_CHARACTERS = 124;

const int ASN1_R_ILLEGAL_FORMAT = 177;

const int ASN1_R_ILLEGAL_HEX = 178;

const int ASN1_R_ILLEGAL_IMPLICIT_TAG = 179;

const int ASN1_R_ILLEGAL_INTEGER = 180;

const int ASN1_R_ILLEGAL_NEGATIVE_VALUE = 226;

const int ASN1_R_ILLEGAL_NESTED_TAGGING = 181;

const int ASN1_R_ILLEGAL_NULL = 125;

const int ASN1_R_ILLEGAL_NULL_VALUE = 182;

const int ASN1_R_ILLEGAL_OBJECT = 183;

const int ASN1_R_ILLEGAL_OPTIONAL_ANY = 126;

const int ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE = 170;

const int ASN1_R_ILLEGAL_PADDING = 221;

const int ASN1_R_ILLEGAL_TAGGED_ANY = 127;

const int ASN1_R_ILLEGAL_TIME_VALUE = 184;

const int ASN1_R_ILLEGAL_ZERO_CONTENT = 222;

const int ASN1_R_INTEGER_NOT_ASCII_FORMAT = 185;

const int ASN1_R_INTEGER_TOO_LARGE_FOR_LONG = 128;

const int ASN1_R_INVALID_BIT_STRING_BITS_LEFT = 220;

const int ASN1_R_INVALID_BMPSTRING_LENGTH = 129;

const int ASN1_R_INVALID_DIGIT = 130;

const int ASN1_R_INVALID_MIME_TYPE = 205;

const int ASN1_R_INVALID_MODIFIER = 186;

const int ASN1_R_INVALID_NUMBER = 187;

const int ASN1_R_INVALID_OBJECT_ENCODING = 216;

const int ASN1_R_INVALID_SCRYPT_PARAMETERS = 227;

const int ASN1_R_INVALID_SEPARATOR = 131;

const int ASN1_R_INVALID_STRING_TABLE_VALUE = 218;

const int ASN1_R_INVALID_UNIVERSALSTRING_LENGTH = 133;

const int ASN1_R_INVALID_UTF8STRING = 134;

const int ASN1_R_INVALID_VALUE = 219;

const int ASN1_R_LIST_ERROR = 188;

const int ASN1_R_MIME_NO_CONTENT_TYPE = 206;

const int ASN1_R_MIME_PARSE_ERROR = 207;

const int ASN1_R_MIME_SIG_PARSE_ERROR = 208;

const int ASN1_R_MISSING_EOC = 137;

const int ASN1_R_MISSING_SECOND_NUMBER = 138;

const int ASN1_R_MISSING_VALUE = 189;

const int ASN1_R_MSTRING_NOT_UNIVERSAL = 139;

const int ASN1_R_MSTRING_WRONG_TAG = 140;

const int ASN1_R_NESTED_ASN1_STRING = 197;

const int ASN1_R_NESTED_TOO_DEEP = 201;

const int ASN1_R_NON_HEX_CHARACTERS = 141;

const int ASN1_R_NOT_ASCII_FORMAT = 190;

const int ASN1_R_NOT_ENOUGH_DATA = 142;

const int ASN1_R_NO_CONTENT_TYPE = 209;

const int ASN1_R_NO_MATCHING_CHOICE_TYPE = 143;

const int ASN1_R_NO_MULTIPART_BODY_FAILURE = 210;

const int ASN1_R_NO_MULTIPART_BOUNDARY = 211;

const int ASN1_R_NO_SIG_CONTENT_TYPE = 212;

const int ASN1_R_NULL_IS_WRONG_LENGTH = 144;

const int ASN1_R_OBJECT_NOT_ASCII_FORMAT = 191;

const int ASN1_R_ODD_NUMBER_OF_CHARS = 145;

const int ASN1_R_SECOND_NUMBER_TOO_LARGE = 147;

const int ASN1_R_SEQUENCE_LENGTH_MISMATCH = 148;

const int ASN1_R_SEQUENCE_NOT_CONSTRUCTED = 149;

const int ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG = 192;

const int ASN1_R_SHORT_LINE = 150;

const int ASN1_R_SIG_INVALID_MIME_TYPE = 213;

const int ASN1_R_STREAMING_NOT_SUPPORTED = 202;

const int ASN1_R_STRING_TOO_LONG = 151;

const int ASN1_R_STRING_TOO_SHORT = 152;

const int ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD = 154;

const int ASN1_R_TIME_NOT_ASCII_FORMAT = 193;

const int ASN1_R_TOO_LARGE = 223;

const int ASN1_R_TOO_LONG = 155;

const int ASN1_R_TOO_SMALL = 224;

const int ASN1_R_TYPE_NOT_CONSTRUCTED = 156;

const int ASN1_R_TYPE_NOT_PRIMITIVE = 195;

const int ASN1_R_UNEXPECTED_EOC = 159;

const int ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH = 215;

const int ASN1_R_UNKNOWN_FORMAT = 160;

const int ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM = 161;

const int ASN1_R_UNKNOWN_OBJECT_TYPE = 162;

const int ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE = 163;

const int ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM = 199;

const int ASN1_R_UNKNOWN_TAG = 194;

const int ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE = 164;

const int ASN1_R_UNSUPPORTED_CIPHER = 228;

const int ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE = 167;

const int ASN1_R_UNSUPPORTED_TYPE = 196;

const int ASN1_R_WRONG_INTEGER_TYPE = 225;

const int ASN1_R_WRONG_PUBLIC_KEY_TYPE = 200;

const int ASN1_R_WRONG_TAG = 168;

const int BN_F_BNRAND = 127;

const int BN_F_BNRAND_RANGE = 138;

const int BN_F_BN_BLINDING_CONVERT_EX = 100;

const int BN_F_BN_BLINDING_CREATE_PARAM = 128;

const int BN_F_BN_BLINDING_INVERT_EX = 101;

const int BN_F_BN_BLINDING_NEW = 102;

const int BN_F_BN_BLINDING_UPDATE = 103;

const int BN_F_BN_BN2DEC = 104;

const int BN_F_BN_BN2HEX = 105;

const int BN_F_BN_COMPUTE_WNAF = 142;

const int BN_F_BN_CTX_GET = 116;

const int BN_F_BN_CTX_NEW = 106;

const int BN_F_BN_CTX_START = 129;

const int BN_F_BN_DIV = 107;

const int BN_F_BN_DIV_RECP = 130;

const int BN_F_BN_EXP = 123;

const int BN_F_BN_EXPAND_INTERNAL = 120;

const int BN_F_BN_GENCB_NEW = 143;

const int BN_F_BN_GENERATE_DSA_NONCE = 140;

const int BN_F_BN_GENERATE_PRIME_EX = 141;

const int BN_F_BN_GF2M_MOD = 131;

const int BN_F_BN_GF2M_MOD_EXP = 132;

const int BN_F_BN_GF2M_MOD_MUL = 133;

const int BN_F_BN_GF2M_MOD_SOLVE_QUAD = 134;

const int BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR = 135;

const int BN_F_BN_GF2M_MOD_SQR = 136;

const int BN_F_BN_GF2M_MOD_SQRT = 137;

const int BN_F_BN_LSHIFT = 145;

const int BN_F_BN_MOD_EXP2_MONT = 118;

const int BN_F_BN_MOD_EXP_MONT = 109;

const int BN_F_BN_MOD_EXP_MONT_CONSTTIME = 124;

const int BN_F_BN_MOD_EXP_MONT_WORD = 117;

const int BN_F_BN_MOD_EXP_RECP = 125;

const int BN_F_BN_MOD_EXP_SIMPLE = 126;

const int BN_F_BN_MOD_INVERSE = 110;

const int BN_F_BN_MOD_INVERSE_NO_BRANCH = 139;

const int BN_F_BN_MOD_LSHIFT_QUICK = 119;

const int BN_F_BN_MOD_SQRT = 121;

const int BN_F_BN_MONT_CTX_NEW = 149;

const int BN_F_BN_MPI2BN = 112;

const int BN_F_BN_NEW = 113;

const int BN_F_BN_POOL_GET = 147;

const int BN_F_BN_RAND = 114;

const int BN_F_BN_RAND_RANGE = 122;

const int BN_F_BN_RECP_CTX_NEW = 150;

const int BN_F_BN_RSHIFT = 146;

const int BN_F_BN_SET_WORDS = 144;

const int BN_F_BN_STACK_PUSH = 148;

const int BN_F_BN_USUB = 115;

const int BN_R_ARG2_LT_ARG3 = 100;

const int BN_R_BAD_RECIPROCAL = 101;

const int BN_R_BIGNUM_TOO_LONG = 114;

const int BN_R_BITS_TOO_SMALL = 118;

const int BN_R_CALLED_WITH_EVEN_MODULUS = 102;

const int BN_R_DIV_BY_ZERO = 103;

const int BN_R_ENCODING_ERROR = 104;

const int BN_R_EXPAND_ON_STATIC_BIGNUM_DATA = 105;

const int BN_R_INPUT_NOT_REDUCED = 110;

const int BN_R_INVALID_LENGTH = 106;

const int BN_R_INVALID_RANGE = 115;

const int BN_R_INVALID_SHIFT = 119;

const int BN_R_NOT_A_SQUARE = 111;

const int BN_R_NOT_INITIALIZED = 107;

const int BN_R_NO_INVERSE = 108;

const int BN_R_NO_SOLUTION = 116;

const int BN_R_PRIVATE_KEY_TOO_LARGE = 117;

const int BN_R_P_IS_NOT_PRIME = 112;

const int BN_R_TOO_MANY_ITERATIONS = 113;

const int BN_R_TOO_MANY_TEMPORARY_VARIABLES = 109;

const int BN_BYTES = 8;

const int BN_BITS2 = 64;

const int BN_BITS = 128;

const int BN_TBIT = -9223372036854775808;

const int BN_FLG_MALLOCED = 1;

const int BN_FLG_STATIC_DATA = 2;

const int BN_FLG_CONSTTIME = 4;

const int BN_FLG_SECURE = 8;

const int BN_FLG_EXP_CONSTTIME = 4;

const int BN_FLG_FREE = 32768;

const int BN_RAND_TOP_ANY = -1;

const int BN_RAND_TOP_ONE = 0;

const int BN_RAND_TOP_TWO = 1;

const int BN_RAND_BOTTOM_ANY = 0;

const int BN_RAND_BOTTOM_ODD = 1;

const int BN_prime_checks = 0;

const int BN_BLINDING_NO_UPDATE = 1;

const int BN_BLINDING_NO_RECREATE = 2;

const int V_ASN1_UNIVERSAL = 0;

const int V_ASN1_APPLICATION = 64;

const int V_ASN1_CONTEXT_SPECIFIC = 128;

const int V_ASN1_PRIVATE = 192;

const int V_ASN1_CONSTRUCTED = 32;

const int V_ASN1_PRIMITIVE_TAG = 31;

const int V_ASN1_PRIMATIVE_TAG = 31;

const int V_ASN1_APP_CHOOSE = -2;

const int V_ASN1_OTHER = -3;

const int V_ASN1_ANY = -4;

const int V_ASN1_UNDEF = -1;

const int V_ASN1_EOC = 0;

const int V_ASN1_BOOLEAN = 1;

const int V_ASN1_INTEGER = 2;

const int V_ASN1_BIT_STRING = 3;

const int V_ASN1_OCTET_STRING = 4;

const int V_ASN1_NULL = 5;

const int V_ASN1_OBJECT = 6;

const int V_ASN1_OBJECT_DESCRIPTOR = 7;

const int V_ASN1_EXTERNAL = 8;

const int V_ASN1_REAL = 9;

const int V_ASN1_ENUMERATED = 10;

const int V_ASN1_UTF8STRING = 12;

const int V_ASN1_SEQUENCE = 16;

const int V_ASN1_SET = 17;

const int V_ASN1_NUMERICSTRING = 18;

const int V_ASN1_PRINTABLESTRING = 19;

const int V_ASN1_T61STRING = 20;

const int V_ASN1_TELETEXSTRING = 20;

const int V_ASN1_VIDEOTEXSTRING = 21;

const int V_ASN1_IA5STRING = 22;

const int V_ASN1_UTCTIME = 23;

const int V_ASN1_GENERALIZEDTIME = 24;

const int V_ASN1_GRAPHICSTRING = 25;

const int V_ASN1_ISO64STRING = 26;

const int V_ASN1_VISIBLESTRING = 26;

const int V_ASN1_GENERALSTRING = 27;

const int V_ASN1_UNIVERSALSTRING = 28;

const int V_ASN1_BMPSTRING = 30;

const int V_ASN1_NEG = 256;

const int V_ASN1_NEG_INTEGER = 258;

const int V_ASN1_NEG_ENUMERATED = 266;

const int B_ASN1_NUMERICSTRING = 1;

const int B_ASN1_PRINTABLESTRING = 2;

const int B_ASN1_T61STRING = 4;

const int B_ASN1_TELETEXSTRING = 4;

const int B_ASN1_VIDEOTEXSTRING = 8;

const int B_ASN1_IA5STRING = 16;

const int B_ASN1_GRAPHICSTRING = 32;

const int B_ASN1_ISO64STRING = 64;

const int B_ASN1_VISIBLESTRING = 64;

const int B_ASN1_GENERALSTRING = 128;

const int B_ASN1_UNIVERSALSTRING = 256;

const int B_ASN1_OCTET_STRING = 512;

const int B_ASN1_BIT_STRING = 1024;

const int B_ASN1_BMPSTRING = 2048;

const int B_ASN1_UNKNOWN = 4096;

const int B_ASN1_UTF8STRING = 8192;

const int B_ASN1_UTCTIME = 16384;

const int B_ASN1_GENERALIZEDTIME = 32768;

const int B_ASN1_SEQUENCE = 65536;

const int MBSTRING_FLAG = 4096;

const int MBSTRING_UTF8 = 4096;

const int MBSTRING_ASC = 4097;

const int MBSTRING_BMP = 4098;

const int MBSTRING_UNIV = 4100;

const int SMIME_OLDMIME = 1024;

const int SMIME_CRLFEOL = 2048;

const int SMIME_STREAM = 4096;

const int ASN1_STRING_FLAG_BITS_LEFT = 8;

const int ASN1_STRING_FLAG_NDEF = 16;

const int ASN1_STRING_FLAG_CONT = 32;

const int ASN1_STRING_FLAG_MSTRING = 64;

const int ASN1_STRING_FLAG_EMBED = 128;

const int ASN1_STRING_FLAG_X509_TIME = 256;

const int ASN1_LONG_UNDEF = 2147483647;

const int STABLE_FLAGS_MALLOC = 1;

const int STABLE_FLAGS_CLEAR = 1;

const int STABLE_NO_MASK = 2;

const int DIRSTRING_TYPE = 10246;

const int PKCS9STRING_TYPE = 10262;

const int ub_name = 32768;

const int ub_common_name = 64;

const int ub_locality_name = 128;

const int ub_state_name = 128;

const int ub_organization_name = 64;

const int ub_organization_unit_name = 64;

const int ub_title = 64;

const int ub_email_address = 128;

const int ASN1_STRFLGS_ESC_2253 = 1;

const int ASN1_STRFLGS_ESC_CTRL = 2;

const int ASN1_STRFLGS_ESC_MSB = 4;

const int ASN1_STRFLGS_ESC_QUOTE = 8;

const int CHARTYPE_PRINTABLESTRING = 16;

const int CHARTYPE_FIRST_ESC_2253 = 32;

const int CHARTYPE_LAST_ESC_2253 = 64;

const int ASN1_STRFLGS_UTF8_CONVERT = 16;

const int ASN1_STRFLGS_IGNORE_TYPE = 32;

const int ASN1_STRFLGS_SHOW_TYPE = 64;

const int ASN1_STRFLGS_DUMP_ALL = 128;

const int ASN1_STRFLGS_DUMP_UNKNOWN = 256;

const int ASN1_STRFLGS_DUMP_DER = 512;

const int ASN1_STRFLGS_ESC_2254 = 1024;

const int ASN1_STRFLGS_RFC2253 = 791;

const int B_ASN1_TIME = 49152;

const int B_ASN1_PRINTABLE = 81175;

const int B_ASN1_DIRECTORYSTRING = 10502;

const int B_ASN1_DISPLAYTEXT = 10320;

const int ASN1_PCTX_FLAGS_SHOW_ABSENT = 1;

const int ASN1_PCTX_FLAGS_SHOW_SEQUENCE = 2;

const int ASN1_PCTX_FLAGS_SHOW_SSOF = 4;

const int ASN1_PCTX_FLAGS_SHOW_TYPE = 8;

const int ASN1_PCTX_FLAGS_NO_ANY_TYPE = 16;

const int ASN1_PCTX_FLAGS_NO_MSTRING_TYPE = 32;

const int ASN1_PCTX_FLAGS_NO_FIELD_NAME = 64;

const int ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME = 128;

const int ASN1_PCTX_FLAGS_NO_STRUCT_NAME = 256;

const int OBJ_F_OBJ_ADD_OBJECT = 105;

const int OBJ_F_OBJ_ADD_SIGID = 107;

const int OBJ_F_OBJ_CREATE = 100;

const int OBJ_F_OBJ_DUP = 101;

const int OBJ_F_OBJ_NAME_NEW_INDEX = 106;

const int OBJ_F_OBJ_NID2LN = 102;

const int OBJ_F_OBJ_NID2OBJ = 103;

const int OBJ_F_OBJ_NID2SN = 104;

const int OBJ_F_OBJ_TXT2OBJ = 108;

const int OBJ_R_OID_EXISTS = 102;

const int OBJ_R_UNKNOWN_NID = 101;

const int OBJ_NAME_TYPE_UNDEF = 0;

const int OBJ_NAME_TYPE_MD_METH = 1;

const int OBJ_NAME_TYPE_CIPHER_METH = 2;

const int OBJ_NAME_TYPE_PKEY_METH = 3;

const int OBJ_NAME_TYPE_COMP_METH = 4;

const int OBJ_NAME_TYPE_NUM = 5;

const int OBJ_NAME_ALIAS = 32768;

const int OBJ_BSEARCH_VALUE_ON_NOMATCH = 1;

const int OBJ_BSEARCH_FIRST_VALUE_ON_MATCH = 2;

const int EVP_PK_RSA = 1;

const int EVP_PK_DSA = 2;

const int EVP_PK_DH = 4;

const int EVP_PK_EC = 8;

const int EVP_PKT_SIGN = 16;

const int EVP_PKT_ENC = 32;

const int EVP_PKT_EXCH = 64;

const int EVP_PKS_RSA = 256;

const int EVP_PKS_DSA = 512;

const int EVP_PKS_EC = 1024;

const int EVP_PKEY_NONE = 0;

const int EVP_PKEY_RSA = 6;

const int EVP_PKEY_RSA2 = 19;

const int EVP_PKEY_RSA_PSS = 912;

const int EVP_PKEY_DSA = 116;

const int EVP_PKEY_DSA1 = 67;

const int EVP_PKEY_DSA2 = 66;

const int EVP_PKEY_DSA3 = 113;

const int EVP_PKEY_DSA4 = 70;

const int EVP_PKEY_DH = 28;

const int EVP_PKEY_DHX = 920;

const int EVP_PKEY_EC = 408;

const int EVP_PKEY_SM2 = 1172;

const int EVP_PKEY_HMAC = 855;

const int EVP_PKEY_CMAC = 894;

const int EVP_PKEY_SCRYPT = 973;

const int EVP_PKEY_TLS1_PRF = 1021;

const int EVP_PKEY_HKDF = 1036;

const int EVP_PKEY_POLY1305 = 1061;

const int EVP_PKEY_SIPHASH = 1062;

const int EVP_PKEY_X25519 = 1034;

const int EVP_PKEY_ED25519 = 1087;

const int EVP_PKEY_X448 = 1035;

const int EVP_PKEY_ED448 = 1088;

const int EVP_PKEY_MO_SIGN = 1;

const int EVP_PKEY_MO_VERIFY = 2;

const int EVP_PKEY_MO_ENCRYPT = 4;

const int EVP_PKEY_MO_DECRYPT = 8;

const int EVP_MD_FLAG_ONESHOT = 1;

const int EVP_MD_FLAG_XOF = 2;

const int EVP_MD_FLAG_DIGALGID_MASK = 24;

const int EVP_MD_FLAG_DIGALGID_NULL = 0;

const int EVP_MD_FLAG_DIGALGID_ABSENT = 8;

const int EVP_MD_FLAG_DIGALGID_CUSTOM = 24;

const int EVP_MD_FLAG_FIPS = 1024;

const int EVP_MD_CTRL_DIGALGID = 1;

const int EVP_MD_CTRL_MICALG = 2;

const int EVP_MD_CTRL_XOF_LEN = 3;

const int EVP_MD_CTRL_ALG_CTRL = 4096;

const int EVP_MD_CTX_FLAG_ONESHOT = 1;

const int EVP_MD_CTX_FLAG_CLEANED = 2;

const int EVP_MD_CTX_FLAG_REUSE = 4;

const int EVP_MD_CTX_FLAG_NON_FIPS_ALLOW = 8;

const int EVP_MD_CTX_FLAG_PAD_MASK = 240;

const int EVP_MD_CTX_FLAG_PAD_PKCS1 = 0;

const int EVP_MD_CTX_FLAG_PAD_X931 = 16;

const int EVP_MD_CTX_FLAG_PAD_PSS = 32;

const int EVP_MD_CTX_FLAG_NO_INIT = 256;

const int EVP_MD_CTX_FLAG_FINALISE = 512;

const int EVP_CIPH_STREAM_CIPHER = 0;

const int EVP_CIPH_ECB_MODE = 1;

const int EVP_CIPH_CBC_MODE = 2;

const int EVP_CIPH_CFB_MODE = 3;

const int EVP_CIPH_OFB_MODE = 4;

const int EVP_CIPH_CTR_MODE = 5;

const int EVP_CIPH_GCM_MODE = 6;

const int EVP_CIPH_CCM_MODE = 7;

const int EVP_CIPH_XTS_MODE = 65537;

const int EVP_CIPH_WRAP_MODE = 65538;

const int EVP_CIPH_OCB_MODE = 65539;

const int EVP_CIPH_MODE = 983047;

const int EVP_CIPH_VARIABLE_LENGTH = 8;

const int EVP_CIPH_CUSTOM_IV = 16;

const int EVP_CIPH_ALWAYS_CALL_INIT = 32;

const int EVP_CIPH_CTRL_INIT = 64;

const int EVP_CIPH_CUSTOM_KEY_LENGTH = 128;

const int EVP_CIPH_NO_PADDING = 256;

const int EVP_CIPH_RAND_KEY = 512;

const int EVP_CIPH_CUSTOM_COPY = 1024;

const int EVP_CIPH_CUSTOM_IV_LENGTH = 2048;

const int EVP_CIPH_FLAG_DEFAULT_ASN1 = 4096;

const int EVP_CIPH_FLAG_LENGTH_BITS = 8192;

const int EVP_CIPH_FLAG_FIPS = 16384;

const int EVP_CIPH_FLAG_NON_FIPS_ALLOW = 32768;

const int EVP_CIPH_FLAG_CUSTOM_CIPHER = 1048576;

const int EVP_CIPH_FLAG_AEAD_CIPHER = 2097152;

const int EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK = 4194304;

const int EVP_CIPH_FLAG_PIPELINE = 8388608;

const int EVP_CIPHER_CTX_FLAG_WRAP_ALLOW = 1;

const int EVP_CTRL_INIT = 0;

const int EVP_CTRL_SET_KEY_LENGTH = 1;

const int EVP_CTRL_GET_RC2_KEY_BITS = 2;

const int EVP_CTRL_SET_RC2_KEY_BITS = 3;

const int EVP_CTRL_GET_RC5_ROUNDS = 4;

const int EVP_CTRL_SET_RC5_ROUNDS = 5;

const int EVP_CTRL_RAND_KEY = 6;

const int EVP_CTRL_PBE_PRF_NID = 7;

const int EVP_CTRL_COPY = 8;

const int EVP_CTRL_AEAD_SET_IVLEN = 9;

const int EVP_CTRL_AEAD_GET_TAG = 16;

const int EVP_CTRL_AEAD_SET_TAG = 17;

const int EVP_CTRL_AEAD_SET_IV_FIXED = 18;

const int EVP_CTRL_GCM_SET_IVLEN = 9;

const int EVP_CTRL_GCM_GET_TAG = 16;

const int EVP_CTRL_GCM_SET_TAG = 17;

const int EVP_CTRL_GCM_SET_IV_FIXED = 18;

const int EVP_CTRL_GCM_IV_GEN = 19;

const int EVP_CTRL_CCM_SET_IVLEN = 9;

const int EVP_CTRL_CCM_GET_TAG = 16;

const int EVP_CTRL_CCM_SET_TAG = 17;

const int EVP_CTRL_CCM_SET_IV_FIXED = 18;

const int EVP_CTRL_CCM_SET_L = 20;

const int EVP_CTRL_CCM_SET_MSGLEN = 21;

const int EVP_CTRL_AEAD_TLS1_AAD = 22;

const int EVP_CTRL_AEAD_SET_MAC_KEY = 23;

const int EVP_CTRL_GCM_SET_IV_INV = 24;

const int EVP_CTRL_TLS1_1_MULTIBLOCK_AAD = 25;

const int EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT = 26;

const int EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT = 27;

const int EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE = 28;

const int EVP_CTRL_SSL3_MASTER_SECRET = 29;

const int EVP_CTRL_SET_SBOX = 30;

const int EVP_CTRL_SBOX_USED = 31;

const int EVP_CTRL_KEY_MESH = 32;

const int EVP_CTRL_BLOCK_PADDING_MODE = 33;

const int EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS = 34;

const int EVP_CTRL_SET_PIPELINE_INPUT_BUFS = 35;

const int EVP_CTRL_SET_PIPELINE_INPUT_LENS = 36;

const int EVP_CTRL_GET_IVLEN = 37;

const int EVP_PADDING_PKCS7 = 1;

const int EVP_PADDING_ISO7816_4 = 2;

const int EVP_PADDING_ANSI923 = 3;

const int EVP_PADDING_ISO10126 = 4;

const int EVP_PADDING_ZERO = 5;

const int EVP_AEAD_TLS1_AAD_LEN = 13;

const int EVP_GCM_TLS_FIXED_IV_LEN = 4;

const int EVP_GCM_TLS_EXPLICIT_IV_LEN = 8;

const int EVP_GCM_TLS_TAG_LEN = 16;

const int EVP_CCM_TLS_FIXED_IV_LEN = 4;

const int EVP_CCM_TLS_EXPLICIT_IV_LEN = 8;

const int EVP_CCM_TLS_IV_LEN = 12;

const int EVP_CCM_TLS_TAG_LEN = 16;

const int EVP_CCM8_TLS_TAG_LEN = 8;

const int EVP_CHACHAPOLY_TLS_TAG_LEN = 16;

const int EVP_PBE_TYPE_OUTER = 0;

const int EVP_PBE_TYPE_PRF = 1;

const int EVP_PBE_TYPE_KDF = 2;

const int ASN1_PKEY_ALIAS = 1;

const int ASN1_PKEY_DYNAMIC = 2;

const int ASN1_PKEY_SIGPARAM_NULL = 4;

const int ASN1_PKEY_CTRL_PKCS7_SIGN = 1;

const int ASN1_PKEY_CTRL_PKCS7_ENCRYPT = 2;

const int ASN1_PKEY_CTRL_DEFAULT_MD_NID = 3;

const int ASN1_PKEY_CTRL_CMS_SIGN = 5;

const int ASN1_PKEY_CTRL_CMS_ENVELOPE = 7;

const int ASN1_PKEY_CTRL_CMS_RI_TYPE = 8;

const int ASN1_PKEY_CTRL_SET1_TLS_ENCPT = 9;

const int ASN1_PKEY_CTRL_GET1_TLS_ENCPT = 10;

const int EVP_PKEY_OP_UNDEFINED = 0;

const int EVP_PKEY_OP_PARAMGEN = 2;

const int EVP_PKEY_OP_KEYGEN = 4;

const int EVP_PKEY_OP_SIGN = 8;

const int EVP_PKEY_OP_VERIFY = 16;

const int EVP_PKEY_OP_VERIFYRECOVER = 32;

const int EVP_PKEY_OP_SIGNCTX = 64;

const int EVP_PKEY_OP_VERIFYCTX = 128;

const int EVP_PKEY_OP_ENCRYPT = 256;

const int EVP_PKEY_OP_DECRYPT = 512;

const int EVP_PKEY_OP_DERIVE = 1024;

const int EVP_PKEY_OP_TYPE_SIG = 248;

const int EVP_PKEY_OP_TYPE_CRYPT = 768;

const int EVP_PKEY_OP_TYPE_NOGEN = 2040;

const int EVP_PKEY_OP_TYPE_GEN = 6;

const int EVP_PKEY_CTRL_MD = 1;

const int EVP_PKEY_CTRL_PEER_KEY = 2;

const int EVP_PKEY_CTRL_PKCS7_ENCRYPT = 3;

const int EVP_PKEY_CTRL_PKCS7_DECRYPT = 4;

const int EVP_PKEY_CTRL_PKCS7_SIGN = 5;

const int EVP_PKEY_CTRL_SET_MAC_KEY = 6;

const int EVP_PKEY_CTRL_DIGESTINIT = 7;

const int EVP_PKEY_CTRL_SET_IV = 8;

const int EVP_PKEY_CTRL_CMS_ENCRYPT = 9;

const int EVP_PKEY_CTRL_CMS_DECRYPT = 10;

const int EVP_PKEY_CTRL_CMS_SIGN = 11;

const int EVP_PKEY_CTRL_CIPHER = 12;

const int EVP_PKEY_CTRL_GET_MD = 13;

const int EVP_PKEY_CTRL_SET_DIGEST_SIZE = 14;

const int EVP_PKEY_ALG_CTRL = 4096;

const int EVP_PKEY_FLAG_AUTOARGLEN = 2;

const int EVP_PKEY_FLAG_SIGCTX_CUSTOM = 4;

const int HMAC_MAX_MD_CBLOCK = 128;

const int BUF_F_BUF_MEM_GROW = 100;

const int BUF_F_BUF_MEM_GROW_CLEAN = 105;

const int BUF_F_BUF_MEM_NEW = 101;

const int BUF_MEM_FLAG_SECURE = 1;

const int EC_F_BN_TO_FELEM = 224;

const int EC_F_D2I_ECPARAMETERS = 144;

const int EC_F_D2I_ECPKPARAMETERS = 145;

const int EC_F_D2I_ECPRIVATEKEY = 146;

const int EC_F_DO_EC_KEY_PRINT = 221;

const int EC_F_ECDH_CMS_DECRYPT = 238;

const int EC_F_ECDH_CMS_SET_SHARED_INFO = 239;

const int EC_F_ECDH_COMPUTE_KEY = 246;

const int EC_F_ECDH_SIMPLE_COMPUTE_KEY = 257;

const int EC_F_ECDSA_DO_SIGN_EX = 251;

const int EC_F_ECDSA_DO_VERIFY = 252;

const int EC_F_ECDSA_SIGN_EX = 254;

const int EC_F_ECDSA_SIGN_SETUP = 248;

const int EC_F_ECDSA_SIG_NEW = 265;

const int EC_F_ECDSA_VERIFY = 253;

const int EC_F_ECD_ITEM_VERIFY = 270;

const int EC_F_ECKEY_PARAM2TYPE = 223;

const int EC_F_ECKEY_PARAM_DECODE = 212;

const int EC_F_ECKEY_PRIV_DECODE = 213;

const int EC_F_ECKEY_PRIV_ENCODE = 214;

const int EC_F_ECKEY_PUB_DECODE = 215;

const int EC_F_ECKEY_PUB_ENCODE = 216;

const int EC_F_ECKEY_TYPE2PARAM = 220;

const int EC_F_ECPARAMETERS_PRINT = 147;

const int EC_F_ECPARAMETERS_PRINT_FP = 148;

const int EC_F_ECPKPARAMETERS_PRINT = 149;

const int EC_F_ECPKPARAMETERS_PRINT_FP = 150;

const int EC_F_ECP_NISTZ256_GET_AFFINE = 240;

const int EC_F_ECP_NISTZ256_INV_MOD_ORD = 275;

const int EC_F_ECP_NISTZ256_MULT_PRECOMPUTE = 243;

const int EC_F_ECP_NISTZ256_POINTS_MUL = 241;

const int EC_F_ECP_NISTZ256_PRE_COMP_NEW = 244;

const int EC_F_ECP_NISTZ256_WINDOWED_MUL = 242;

const int EC_F_ECX_KEY_OP = 266;

const int EC_F_ECX_PRIV_ENCODE = 267;

const int EC_F_ECX_PUB_ENCODE = 268;

const int EC_F_EC_ASN1_GROUP2CURVE = 153;

const int EC_F_EC_ASN1_GROUP2FIELDID = 154;

const int EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY = 208;

const int EC_F_EC_GF2M_SIMPLE_FIELD_INV = 296;

const int EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT = 159;

const int EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE = 195;

const int EC_F_EC_GF2M_SIMPLE_LADDER_POST = 285;

const int EC_F_EC_GF2M_SIMPLE_LADDER_PRE = 288;

const int EC_F_EC_GF2M_SIMPLE_OCT2POINT = 160;

const int EC_F_EC_GF2M_SIMPLE_POINT2OCT = 161;

const int EC_F_EC_GF2M_SIMPLE_POINTS_MUL = 289;

const int EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES = 162;

const int EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES = 163;

const int EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES = 164;

const int EC_F_EC_GFP_MONT_FIELD_DECODE = 133;

const int EC_F_EC_GFP_MONT_FIELD_ENCODE = 134;

const int EC_F_EC_GFP_MONT_FIELD_INV = 297;

const int EC_F_EC_GFP_MONT_FIELD_MUL = 131;

const int EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE = 209;

const int EC_F_EC_GFP_MONT_FIELD_SQR = 132;

const int EC_F_EC_GFP_MONT_GROUP_SET_CURVE = 189;

const int EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE = 225;

const int EC_F_EC_GFP_NISTP224_POINTS_MUL = 228;

const int EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES = 226;

const int EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE = 230;

const int EC_F_EC_GFP_NISTP256_POINTS_MUL = 231;

const int EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES = 232;

const int EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE = 233;

const int EC_F_EC_GFP_NISTP521_POINTS_MUL = 234;

const int EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES = 235;

const int EC_F_EC_GFP_NIST_FIELD_MUL = 200;

const int EC_F_EC_GFP_NIST_FIELD_SQR = 201;

const int EC_F_EC_GFP_NIST_GROUP_SET_CURVE = 202;

const int EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES = 287;

const int EC_F_EC_GFP_SIMPLE_FIELD_INV = 298;

const int EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT = 165;

const int EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE = 166;

const int EC_F_EC_GFP_SIMPLE_MAKE_AFFINE = 102;

const int EC_F_EC_GFP_SIMPLE_OCT2POINT = 103;

const int EC_F_EC_GFP_SIMPLE_POINT2OCT = 104;

const int EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE = 137;

const int EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES = 167;

const int EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES = 168;

const int EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES = 169;

const int EC_F_EC_GROUP_CHECK = 170;

const int EC_F_EC_GROUP_CHECK_DISCRIMINANT = 171;

const int EC_F_EC_GROUP_COPY = 106;

const int EC_F_EC_GROUP_GET_CURVE = 291;

const int EC_F_EC_GROUP_GET_CURVE_GF2M = 172;

const int EC_F_EC_GROUP_GET_CURVE_GFP = 130;

const int EC_F_EC_GROUP_GET_DEGREE = 173;

const int EC_F_EC_GROUP_GET_ECPARAMETERS = 261;

const int EC_F_EC_GROUP_GET_ECPKPARAMETERS = 262;

const int EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS = 193;

const int EC_F_EC_GROUP_GET_TRINOMIAL_BASIS = 194;

const int EC_F_EC_GROUP_NEW = 108;

const int EC_F_EC_GROUP_NEW_BY_CURVE_NAME = 174;

const int EC_F_EC_GROUP_NEW_FROM_DATA = 175;

const int EC_F_EC_GROUP_NEW_FROM_ECPARAMETERS = 263;

const int EC_F_EC_GROUP_NEW_FROM_ECPKPARAMETERS = 264;

const int EC_F_EC_GROUP_SET_CURVE = 292;

const int EC_F_EC_GROUP_SET_CURVE_GF2M = 176;

const int EC_F_EC_GROUP_SET_CURVE_GFP = 109;

const int EC_F_EC_GROUP_SET_GENERATOR = 111;

const int EC_F_EC_GROUP_SET_SEED = 286;

const int EC_F_EC_KEY_CHECK_KEY = 177;

const int EC_F_EC_KEY_COPY = 178;

const int EC_F_EC_KEY_GENERATE_KEY = 179;

const int EC_F_EC_KEY_NEW = 182;

const int EC_F_EC_KEY_NEW_METHOD = 245;

const int EC_F_EC_KEY_OCT2PRIV = 255;

const int EC_F_EC_KEY_PRINT = 180;

const int EC_F_EC_KEY_PRINT_FP = 181;

const int EC_F_EC_KEY_PRIV2BUF = 279;

const int EC_F_EC_KEY_PRIV2OCT = 256;

const int EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES = 229;

const int EC_F_EC_KEY_SIMPLE_CHECK_KEY = 258;

const int EC_F_EC_KEY_SIMPLE_OCT2PRIV = 259;

const int EC_F_EC_KEY_SIMPLE_PRIV2OCT = 260;

const int EC_F_EC_PKEY_CHECK = 273;

const int EC_F_EC_PKEY_PARAM_CHECK = 274;

const int EC_F_EC_POINTS_MAKE_AFFINE = 136;

const int EC_F_EC_POINTS_MUL = 290;

const int EC_F_EC_POINT_ADD = 112;

const int EC_F_EC_POINT_BN2POINT = 280;

const int EC_F_EC_POINT_CMP = 113;

const int EC_F_EC_POINT_COPY = 114;

const int EC_F_EC_POINT_DBL = 115;

const int EC_F_EC_POINT_GET_AFFINE_COORDINATES = 293;

const int EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M = 183;

const int EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP = 116;

const int EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP = 117;

const int EC_F_EC_POINT_INVERT = 210;

const int EC_F_EC_POINT_IS_AT_INFINITY = 118;

const int EC_F_EC_POINT_IS_ON_CURVE = 119;

const int EC_F_EC_POINT_MAKE_AFFINE = 120;

const int EC_F_EC_POINT_NEW = 121;

const int EC_F_EC_POINT_OCT2POINT = 122;

const int EC_F_EC_POINT_POINT2BUF = 281;

const int EC_F_EC_POINT_POINT2OCT = 123;

const int EC_F_EC_POINT_SET_AFFINE_COORDINATES = 294;

const int EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M = 185;

const int EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP = 124;

const int EC_F_EC_POINT_SET_COMPRESSED_COORDINATES = 295;

const int EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M = 186;

const int EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP = 125;

const int EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP = 126;

const int EC_F_EC_POINT_SET_TO_INFINITY = 127;

const int EC_F_EC_PRE_COMP_NEW = 196;

const int EC_F_EC_SCALAR_MUL_LADDER = 284;

const int EC_F_EC_WNAF_MUL = 187;

const int EC_F_EC_WNAF_PRECOMPUTE_MULT = 188;

const int EC_F_I2D_ECPARAMETERS = 190;

const int EC_F_I2D_ECPKPARAMETERS = 191;

const int EC_F_I2D_ECPRIVATEKEY = 192;

const int EC_F_I2O_ECPUBLICKEY = 151;

const int EC_F_NISTP224_PRE_COMP_NEW = 227;

const int EC_F_NISTP256_PRE_COMP_NEW = 236;

const int EC_F_NISTP521_PRE_COMP_NEW = 237;

const int EC_F_O2I_ECPUBLICKEY = 152;

const int EC_F_OLD_EC_PRIV_DECODE = 222;

const int EC_F_OSSL_ECDH_COMPUTE_KEY = 247;

const int EC_F_OSSL_ECDSA_SIGN_SIG = 249;

const int EC_F_OSSL_ECDSA_VERIFY_SIG = 250;

const int EC_F_PKEY_ECD_CTRL = 271;

const int EC_F_PKEY_ECD_DIGESTSIGN = 272;

const int EC_F_PKEY_ECD_DIGESTSIGN25519 = 276;

const int EC_F_PKEY_ECD_DIGESTSIGN448 = 277;

const int EC_F_PKEY_ECX_DERIVE = 269;

const int EC_F_PKEY_EC_CTRL = 197;

const int EC_F_PKEY_EC_CTRL_STR = 198;

const int EC_F_PKEY_EC_DERIVE = 217;

const int EC_F_PKEY_EC_INIT = 282;

const int EC_F_PKEY_EC_KDF_DERIVE = 283;

const int EC_F_PKEY_EC_KEYGEN = 199;

const int EC_F_PKEY_EC_PARAMGEN = 219;

const int EC_F_PKEY_EC_SIGN = 218;

const int EC_F_VALIDATE_ECX_DERIVE = 278;

const int EC_R_ASN1_ERROR = 115;

const int EC_R_BAD_SIGNATURE = 156;

const int EC_R_BIGNUM_OUT_OF_RANGE = 144;

const int EC_R_BUFFER_TOO_SMALL = 100;

const int EC_R_CANNOT_INVERT = 165;

const int EC_R_COORDINATES_OUT_OF_RANGE = 146;

const int EC_R_CURVE_DOES_NOT_SUPPORT_ECDH = 160;

const int EC_R_CURVE_DOES_NOT_SUPPORT_SIGNING = 159;

const int EC_R_D2I_ECPKPARAMETERS_FAILURE = 117;

const int EC_R_DECODE_ERROR = 142;

const int EC_R_DISCRIMINANT_IS_ZERO = 118;

const int EC_R_EC_GROUP_NEW_BY_NAME_FAILURE = 119;

const int EC_R_FIELD_TOO_LARGE = 143;

const int EC_R_GF2M_NOT_SUPPORTED = 147;

const int EC_R_GROUP2PKPARAMETERS_FAILURE = 120;

const int EC_R_I2D_ECPKPARAMETERS_FAILURE = 121;

const int EC_R_INCOMPATIBLE_OBJECTS = 101;

const int EC_R_INVALID_ARGUMENT = 112;

const int EC_R_INVALID_COMPRESSED_POINT = 110;

const int EC_R_INVALID_COMPRESSION_BIT = 109;

const int EC_R_INVALID_CURVE = 141;

const int EC_R_INVALID_DIGEST = 151;

const int EC_R_INVALID_DIGEST_TYPE = 138;

const int EC_R_INVALID_ENCODING = 102;

const int EC_R_INVALID_FIELD = 103;

const int EC_R_INVALID_FORM = 104;

const int EC_R_INVALID_GROUP_ORDER = 122;

const int EC_R_INVALID_KEY = 116;

const int EC_R_INVALID_OUTPUT_LENGTH = 161;

const int EC_R_INVALID_PEER_KEY = 133;

const int EC_R_INVALID_PENTANOMIAL_BASIS = 132;

const int EC_R_INVALID_PRIVATE_KEY = 123;

const int EC_R_INVALID_TRINOMIAL_BASIS = 137;

const int EC_R_KDF_PARAMETER_ERROR = 148;

const int EC_R_KEYS_NOT_SET = 140;

const int EC_R_LADDER_POST_FAILURE = 136;

const int EC_R_LADDER_PRE_FAILURE = 153;

const int EC_R_LADDER_STEP_FAILURE = 162;

const int EC_R_MISSING_OID = 167;

const int EC_R_MISSING_PARAMETERS = 124;

const int EC_R_MISSING_PRIVATE_KEY = 125;

const int EC_R_NEED_NEW_SETUP_VALUES = 157;

const int EC_R_NOT_A_NIST_PRIME = 135;

const int EC_R_NOT_IMPLEMENTED = 126;

const int EC_R_NOT_INITIALIZED = 111;

const int EC_R_NO_PARAMETERS_SET = 139;

const int EC_R_NO_PRIVATE_VALUE = 154;

const int EC_R_OPERATION_NOT_SUPPORTED = 152;

const int EC_R_PASSED_NULL_PARAMETER = 134;

const int EC_R_PEER_KEY_ERROR = 149;

const int EC_R_PKPARAMETERS2GROUP_FAILURE = 127;

const int EC_R_POINT_ARITHMETIC_FAILURE = 155;

const int EC_R_POINT_AT_INFINITY = 106;

const int EC_R_POINT_COORDINATES_BLIND_FAILURE = 163;

const int EC_R_POINT_IS_NOT_ON_CURVE = 107;

const int EC_R_RANDOM_NUMBER_GENERATION_FAILED = 158;

const int EC_R_SHARED_INFO_ERROR = 150;

const int EC_R_SLOT_FULL = 108;

const int EC_R_UNDEFINED_GENERATOR = 113;

const int EC_R_UNDEFINED_ORDER = 128;

const int EC_R_UNKNOWN_COFACTOR = 164;

const int EC_R_UNKNOWN_GROUP = 129;

const int EC_R_UNKNOWN_ORDER = 114;

const int EC_R_UNSUPPORTED_FIELD = 131;

const int EC_R_WRONG_CURVE_PARAMETERS = 145;

const int EC_R_WRONG_ORDER = 130;

const int OPENSSL_ECC_MAX_FIELD_BITS = 661;

const int OPENSSL_EC_EXPLICIT_CURVE = 0;

const int OPENSSL_EC_NAMED_CURVE = 1;

const int EC_PKEY_NO_PARAMETERS = 1;

const int EC_PKEY_NO_PUBKEY = 2;

const int EC_FLAG_NON_FIPS_ALLOW = 1;

const int EC_FLAG_FIPS_CHECKED = 2;

const int EC_FLAG_COFACTOR_ECDH = 4096;

const int EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID = 4097;

const int EVP_PKEY_CTRL_EC_PARAM_ENC = 4098;

const int EVP_PKEY_CTRL_EC_ECDH_COFACTOR = 4099;

const int EVP_PKEY_CTRL_EC_KDF_TYPE = 4100;

const int EVP_PKEY_CTRL_EC_KDF_MD = 4101;

const int EVP_PKEY_CTRL_GET_EC_KDF_MD = 4102;

const int EVP_PKEY_CTRL_EC_KDF_OUTLEN = 4103;

const int EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN = 4104;

const int EVP_PKEY_CTRL_EC_KDF_UKM = 4105;

const int EVP_PKEY_CTRL_GET_EC_KDF_UKM = 4106;

const int EVP_PKEY_CTRL_SET1_ID = 4107;

const int EVP_PKEY_CTRL_GET1_ID = 4108;

const int EVP_PKEY_CTRL_GET1_ID_LEN = 4109;

const int EVP_PKEY_ECDH_KDF_NONE = 1;

const int EVP_PKEY_ECDH_KDF_X9_63 = 2;

const int EVP_PKEY_ECDH_KDF_X9_62 = 2;

const int RSA_F_CHECK_PADDING_MD = 140;

const int RSA_F_ENCODE_PKCS1 = 146;

const int RSA_F_INT_RSA_VERIFY = 145;

const int RSA_F_OLD_RSA_PRIV_DECODE = 147;

const int RSA_F_PKEY_PSS_INIT = 165;

const int RSA_F_PKEY_RSA_CTRL = 143;

const int RSA_F_PKEY_RSA_CTRL_STR = 144;

const int RSA_F_PKEY_RSA_SIGN = 142;

const int RSA_F_PKEY_RSA_VERIFY = 149;

const int RSA_F_PKEY_RSA_VERIFYRECOVER = 141;

const int RSA_F_RSA_ALGOR_TO_MD = 156;

const int RSA_F_RSA_BUILTIN_KEYGEN = 129;

const int RSA_F_RSA_CHECK_KEY = 123;

const int RSA_F_RSA_CHECK_KEY_EX = 160;

const int RSA_F_RSA_CMS_DECRYPT = 159;

const int RSA_F_RSA_CMS_VERIFY = 158;

const int RSA_F_RSA_ITEM_VERIFY = 148;

const int RSA_F_RSA_METH_DUP = 161;

const int RSA_F_RSA_METH_NEW = 162;

const int RSA_F_RSA_METH_SET1_NAME = 163;

const int RSA_F_RSA_MGF1_TO_MD = 157;

const int RSA_F_RSA_MULTIP_INFO_NEW = 166;

const int RSA_F_RSA_NEW_METHOD = 106;

const int RSA_F_RSA_NULL = 124;

const int RSA_F_RSA_NULL_PRIVATE_DECRYPT = 132;

const int RSA_F_RSA_NULL_PRIVATE_ENCRYPT = 133;

const int RSA_F_RSA_NULL_PUBLIC_DECRYPT = 134;

const int RSA_F_RSA_NULL_PUBLIC_ENCRYPT = 135;

const int RSA_F_RSA_OSSL_PRIVATE_DECRYPT = 101;

const int RSA_F_RSA_OSSL_PRIVATE_ENCRYPT = 102;

const int RSA_F_RSA_OSSL_PUBLIC_DECRYPT = 103;

const int RSA_F_RSA_OSSL_PUBLIC_ENCRYPT = 104;

const int RSA_F_RSA_PADDING_ADD_NONE = 107;

const int RSA_F_RSA_PADDING_ADD_PKCS1_OAEP = 121;

const int RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1 = 154;

const int RSA_F_RSA_PADDING_ADD_PKCS1_PSS = 125;

const int RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1 = 152;

const int RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1 = 108;

const int RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2 = 109;

const int RSA_F_RSA_PADDING_ADD_SSLV23 = 110;

const int RSA_F_RSA_PADDING_ADD_X931 = 127;

const int RSA_F_RSA_PADDING_CHECK_NONE = 111;

const int RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP = 122;

const int RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1 = 153;

const int RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1 = 112;

const int RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2 = 113;

const int RSA_F_RSA_PADDING_CHECK_SSLV23 = 114;

const int RSA_F_RSA_PADDING_CHECK_X931 = 128;

const int RSA_F_RSA_PARAM_DECODE = 164;

const int RSA_F_RSA_PRINT = 115;

const int RSA_F_RSA_PRINT_FP = 116;

const int RSA_F_RSA_PRIV_DECODE = 150;

const int RSA_F_RSA_PRIV_ENCODE = 138;

const int RSA_F_RSA_PSS_GET_PARAM = 151;

const int RSA_F_RSA_PSS_TO_CTX = 155;

const int RSA_F_RSA_PUB_DECODE = 139;

const int RSA_F_RSA_SETUP_BLINDING = 136;

const int RSA_F_RSA_SIGN = 117;

const int RSA_F_RSA_SIGN_ASN1_OCTET_STRING = 118;

const int RSA_F_RSA_VERIFY = 119;

const int RSA_F_RSA_VERIFY_ASN1_OCTET_STRING = 120;

const int RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1 = 126;

const int RSA_F_SETUP_TBUF = 167;

const int RSA_R_ALGORITHM_MISMATCH = 100;

const int RSA_R_BAD_E_VALUE = 101;

const int RSA_R_BAD_FIXED_HEADER_DECRYPT = 102;

const int RSA_R_BAD_PAD_BYTE_COUNT = 103;

const int RSA_R_BAD_SIGNATURE = 104;

const int RSA_R_BLOCK_TYPE_IS_NOT_01 = 106;

const int RSA_R_BLOCK_TYPE_IS_NOT_02 = 107;

const int RSA_R_DATA_GREATER_THAN_MOD_LEN = 108;

const int RSA_R_DATA_TOO_LARGE = 109;

const int RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE = 110;

const int RSA_R_DATA_TOO_LARGE_FOR_MODULUS = 132;

const int RSA_R_DATA_TOO_SMALL = 111;

const int RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE = 122;

const int RSA_R_DIGEST_DOES_NOT_MATCH = 158;

const int RSA_R_DIGEST_NOT_ALLOWED = 145;

const int RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY = 112;

const int RSA_R_DMP1_NOT_CONGRUENT_TO_D = 124;

const int RSA_R_DMQ1_NOT_CONGRUENT_TO_D = 125;

const int RSA_R_D_E_NOT_CONGRUENT_TO_1 = 123;

const int RSA_R_FIRST_OCTET_INVALID = 133;

const int RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE = 144;

const int RSA_R_INVALID_DIGEST = 157;

const int RSA_R_INVALID_DIGEST_LENGTH = 143;

const int RSA_R_INVALID_HEADER = 137;

const int RSA_R_INVALID_LABEL = 160;

const int RSA_R_INVALID_MESSAGE_LENGTH = 131;

const int RSA_R_INVALID_MGF1_MD = 156;

const int RSA_R_INVALID_MULTI_PRIME_KEY = 167;

const int RSA_R_INVALID_OAEP_PARAMETERS = 161;

const int RSA_R_INVALID_PADDING = 138;

const int RSA_R_INVALID_PADDING_MODE = 141;

const int RSA_R_INVALID_PSS_PARAMETERS = 149;

const int RSA_R_INVALID_PSS_SALTLEN = 146;

const int RSA_R_INVALID_SALT_LENGTH = 150;

const int RSA_R_INVALID_TRAILER = 139;

const int RSA_R_INVALID_X931_DIGEST = 142;

const int RSA_R_IQMP_NOT_INVERSE_OF_Q = 126;

const int RSA_R_KEY_PRIME_NUM_INVALID = 165;

const int RSA_R_KEY_SIZE_TOO_SMALL = 120;

const int RSA_R_LAST_OCTET_INVALID = 134;

const int RSA_R_MISSING_PRIVATE_KEY = 179;

const int RSA_R_MGF1_DIGEST_NOT_ALLOWED = 152;

const int RSA_R_MODULUS_TOO_LARGE = 105;

const int RSA_R_MP_COEFFICIENT_NOT_INVERSE_OF_R = 168;

const int RSA_R_MP_EXPONENT_NOT_CONGRUENT_TO_D = 169;

const int RSA_R_MP_R_NOT_PRIME = 170;

const int RSA_R_NO_PUBLIC_EXPONENT = 140;

const int RSA_R_NULL_BEFORE_BLOCK_MISSING = 113;

const int RSA_R_N_DOES_NOT_EQUAL_PRODUCT_OF_PRIMES = 172;

const int RSA_R_N_DOES_NOT_EQUAL_P_Q = 127;

const int RSA_R_OAEP_DECODING_ERROR = 121;

const int RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE = 148;

const int RSA_R_PADDING_CHECK_FAILED = 114;

const int RSA_R_PKCS_DECODING_ERROR = 159;

const int RSA_R_PSS_SALTLEN_TOO_SMALL = 164;

const int RSA_R_P_NOT_PRIME = 128;

const int RSA_R_Q_NOT_PRIME = 129;

const int RSA_R_RSA_OPERATIONS_NOT_SUPPORTED = 130;

const int RSA_R_SLEN_CHECK_FAILED = 136;

const int RSA_R_SLEN_RECOVERY_FAILED = 135;

const int RSA_R_SSLV3_ROLLBACK_ATTACK = 115;

const int RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD = 116;

const int RSA_R_UNKNOWN_ALGORITHM_TYPE = 117;

const int RSA_R_UNKNOWN_DIGEST = 166;

const int RSA_R_UNKNOWN_MASK_DIGEST = 151;

const int RSA_R_UNKNOWN_PADDING_TYPE = 118;

const int RSA_R_UNSUPPORTED_ENCRYPTION_TYPE = 162;

const int RSA_R_UNSUPPORTED_LABEL_SOURCE = 163;

const int RSA_R_UNSUPPORTED_MASK_ALGORITHM = 153;

const int RSA_R_UNSUPPORTED_MASK_PARAMETER = 154;

const int RSA_R_UNSUPPORTED_SIGNATURE_TYPE = 155;

const int RSA_R_VALUE_MISSING = 147;

const int RSA_R_WRONG_SIGNATURE_LENGTH = 119;

const int OPENSSL_RSA_MAX_MODULUS_BITS = 16384;

const int OPENSSL_RSA_FIPS_MIN_MODULUS_BITS = 1024;

const int OPENSSL_RSA_SMALL_MODULUS_BITS = 3072;

const int OPENSSL_RSA_MAX_PUBEXP_BITS = 64;

const int RSA_3 = 3;

const int RSA_F4 = 65537;

const int RSA_ASN1_VERSION_DEFAULT = 0;

const int RSA_ASN1_VERSION_MULTI = 1;

const int RSA_DEFAULT_PRIME_NUM = 2;

const int RSA_METHOD_FLAG_NO_CHECK = 1;

const int RSA_FLAG_CACHE_PUBLIC = 2;

const int RSA_FLAG_CACHE_PRIVATE = 4;

const int RSA_FLAG_BLINDING = 8;

const int RSA_FLAG_THREAD_SAFE = 16;

const int RSA_FLAG_EXT_PKEY = 32;

const int RSA_FLAG_NO_BLINDING = 128;

const int RSA_FLAG_NO_CONSTTIME = 0;

const int RSA_FLAG_NO_EXP_CONSTTIME = 0;

const int RSA_PSS_SALTLEN_DIGEST = -1;

const int RSA_PSS_SALTLEN_AUTO = -2;

const int RSA_PSS_SALTLEN_MAX = -3;

const int RSA_PSS_SALTLEN_MAX_SIGN = -2;

const int EVP_PKEY_CTRL_RSA_PADDING = 4097;

const int EVP_PKEY_CTRL_RSA_PSS_SALTLEN = 4098;

const int EVP_PKEY_CTRL_RSA_KEYGEN_BITS = 4099;

const int EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP = 4100;

const int EVP_PKEY_CTRL_RSA_MGF1_MD = 4101;

const int EVP_PKEY_CTRL_GET_RSA_PADDING = 4102;

const int EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN = 4103;

const int EVP_PKEY_CTRL_GET_RSA_MGF1_MD = 4104;

const int EVP_PKEY_CTRL_RSA_OAEP_MD = 4105;

const int EVP_PKEY_CTRL_RSA_OAEP_LABEL = 4106;

const int EVP_PKEY_CTRL_GET_RSA_OAEP_MD = 4107;

const int EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL = 4108;

const int EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES = 4109;

const int RSA_PKCS1_PADDING = 1;

const int RSA_SSLV23_PADDING = 2;

const int RSA_NO_PADDING = 3;

const int RSA_PKCS1_OAEP_PADDING = 4;

const int RSA_X931_PADDING = 5;

const int RSA_PKCS1_PSS_PADDING = 6;

const int RSA_PKCS1_PADDING_SIZE = 11;

const int RSA_FLAG_FIPS_METHOD = 1024;

const int RSA_FLAG_NON_FIPS_ALLOW = 1024;

const int RSA_FLAG_CHECKED = 2048;

const int DH_F_COMPUTE_KEY = 102;

const int DH_F_DHPARAMS_PRINT_FP = 101;

const int DH_F_DH_BUILTIN_GENPARAMS = 106;

const int DH_F_DH_CHECK_EX = 121;

const int DH_F_DH_CHECK_PARAMS_EX = 122;

const int DH_F_DH_CHECK_PUB_KEY_EX = 123;

const int DH_F_DH_CMS_DECRYPT = 114;

const int DH_F_DH_CMS_SET_PEERKEY = 115;

const int DH_F_DH_CMS_SET_SHARED_INFO = 116;

const int DH_F_DH_METH_DUP = 117;

const int DH_F_DH_METH_NEW = 118;

const int DH_F_DH_METH_SET1_NAME = 119;

const int DH_F_DH_NEW_BY_NID = 104;

const int DH_F_DH_NEW_METHOD = 105;

const int DH_F_DH_PARAM_DECODE = 107;

const int DH_F_DH_PKEY_PUBLIC_CHECK = 124;

const int DH_F_DH_PRIV_DECODE = 110;

const int DH_F_DH_PRIV_ENCODE = 111;

const int DH_F_DH_PUB_DECODE = 108;

const int DH_F_DH_PUB_ENCODE = 109;

const int DH_F_DO_DH_PRINT = 100;

const int DH_F_GENERATE_KEY = 103;

const int DH_F_PKEY_DH_CTRL_STR = 120;

const int DH_F_PKEY_DH_DERIVE = 112;

const int DH_F_PKEY_DH_INIT = 125;

const int DH_F_PKEY_DH_KEYGEN = 113;

const int DH_R_BAD_GENERATOR = 101;

const int DH_R_BN_DECODE_ERROR = 109;

const int DH_R_BN_ERROR = 106;

const int DH_R_CHECK_INVALID_J_VALUE = 115;

const int DH_R_CHECK_INVALID_Q_VALUE = 116;

const int DH_R_CHECK_PUBKEY_INVALID = 122;

const int DH_R_CHECK_PUBKEY_TOO_LARGE = 123;

const int DH_R_CHECK_PUBKEY_TOO_SMALL = 124;

const int DH_R_CHECK_P_NOT_PRIME = 117;

const int DH_R_CHECK_P_NOT_SAFE_PRIME = 118;

const int DH_R_CHECK_Q_NOT_PRIME = 119;

const int DH_R_DECODE_ERROR = 104;

const int DH_R_INVALID_PARAMETER_NAME = 110;

const int DH_R_INVALID_PARAMETER_NID = 114;

const int DH_R_INVALID_PUBKEY = 102;

const int DH_R_KDF_PARAMETER_ERROR = 112;

const int DH_R_KEYS_NOT_SET = 108;

const int DH_R_MISSING_PUBKEY = 125;

const int DH_R_MODULUS_TOO_LARGE = 103;

const int DH_R_NOT_SUITABLE_GENERATOR = 120;

const int DH_R_NO_PARAMETERS_SET = 107;

const int DH_R_NO_PRIVATE_VALUE = 100;

const int DH_R_PARAMETER_ENCODING_ERROR = 105;

const int DH_R_PEER_KEY_ERROR = 111;

const int DH_R_SHARED_INFO_ERROR = 113;

const int DH_R_UNABLE_TO_CHECK_GENERATOR = 121;

const int OPENSSL_DH_MAX_MODULUS_BITS = 10000;

const int OPENSSL_DH_FIPS_MIN_MODULUS_BITS = 1024;

const int DH_FLAG_CACHE_MONT_P = 1;

const int DH_FLAG_NO_EXP_CONSTTIME = 0;

const int DH_FLAG_FIPS_METHOD = 1024;

const int DH_FLAG_NON_FIPS_ALLOW = 1024;

const int DH_GENERATOR_2 = 2;

const int DH_GENERATOR_5 = 5;

const int DH_CHECK_P_NOT_PRIME = 1;

const int DH_CHECK_P_NOT_SAFE_PRIME = 2;

const int DH_UNABLE_TO_CHECK_GENERATOR = 4;

const int DH_NOT_SUITABLE_GENERATOR = 8;

const int DH_CHECK_Q_NOT_PRIME = 16;

const int DH_CHECK_INVALID_Q_VALUE = 32;

const int DH_CHECK_INVALID_J_VALUE = 64;

const int DH_CHECK_PUBKEY_TOO_SMALL = 1;

const int DH_CHECK_PUBKEY_TOO_LARGE = 2;

const int DH_CHECK_PUBKEY_INVALID = 4;

const int DH_CHECK_P_NOT_STRONG_PRIME = 2;

const int EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN = 4097;

const int EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR = 4098;

const int EVP_PKEY_CTRL_DH_RFC5114 = 4099;

const int EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN = 4100;

const int EVP_PKEY_CTRL_DH_PARAMGEN_TYPE = 4101;

const int EVP_PKEY_CTRL_DH_KDF_TYPE = 4102;

const int EVP_PKEY_CTRL_DH_KDF_MD = 4103;

const int EVP_PKEY_CTRL_GET_DH_KDF_MD = 4104;

const int EVP_PKEY_CTRL_DH_KDF_OUTLEN = 4105;

const int EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN = 4106;

const int EVP_PKEY_CTRL_DH_KDF_UKM = 4107;

const int EVP_PKEY_CTRL_GET_DH_KDF_UKM = 4108;

const int EVP_PKEY_CTRL_DH_KDF_OID = 4109;

const int EVP_PKEY_CTRL_GET_DH_KDF_OID = 4110;

const int EVP_PKEY_CTRL_DH_NID = 4111;

const int EVP_PKEY_CTRL_DH_PAD = 4112;

const int EVP_PKEY_DH_KDF_NONE = 1;

const int EVP_PKEY_DH_KDF_X9_42 = 2;

const int DSA_F_DSAPARAMS_PRINT = 100;

const int DSA_F_DSAPARAMS_PRINT_FP = 101;

const int DSA_F_DSA_BUILTIN_PARAMGEN = 125;

const int DSA_F_DSA_BUILTIN_PARAMGEN2 = 126;

const int DSA_F_DSA_DO_SIGN = 112;

const int DSA_F_DSA_DO_VERIFY = 113;

const int DSA_F_DSA_METH_DUP = 127;

const int DSA_F_DSA_METH_NEW = 128;

const int DSA_F_DSA_METH_SET1_NAME = 129;

const int DSA_F_DSA_NEW_METHOD = 103;

const int DSA_F_DSA_PARAM_DECODE = 119;

const int DSA_F_DSA_PRINT_FP = 105;

const int DSA_F_DSA_PRIV_DECODE = 115;

const int DSA_F_DSA_PRIV_ENCODE = 116;

const int DSA_F_DSA_PUB_DECODE = 117;

const int DSA_F_DSA_PUB_ENCODE = 118;

const int DSA_F_DSA_SIGN = 106;

const int DSA_F_DSA_SIGN_SETUP = 107;

const int DSA_F_DSA_SIG_NEW = 102;

const int DSA_F_OLD_DSA_PRIV_DECODE = 122;

const int DSA_F_PKEY_DSA_CTRL = 120;

const int DSA_F_PKEY_DSA_CTRL_STR = 104;

const int DSA_F_PKEY_DSA_KEYGEN = 121;

const int DSA_R_BAD_Q_VALUE = 102;

const int DSA_R_BN_DECODE_ERROR = 108;

const int DSA_R_BN_ERROR = 109;

const int DSA_R_DECODE_ERROR = 104;

const int DSA_R_INVALID_DIGEST_TYPE = 106;

const int DSA_R_INVALID_PARAMETERS = 112;

const int DSA_R_MISSING_PARAMETERS = 101;

const int DSA_R_MISSING_PRIVATE_KEY = 111;

const int DSA_R_MODULUS_TOO_LARGE = 103;

const int DSA_R_NO_PARAMETERS_SET = 107;

const int DSA_R_PARAMETER_ENCODING_ERROR = 105;

const int DSA_R_Q_NOT_PRIME = 113;

const int DSA_R_SEED_LEN_SMALL = 110;

const int OPENSSL_DSA_MAX_MODULUS_BITS = 10000;

const int OPENSSL_DSA_FIPS_MIN_MODULUS_BITS = 1024;

const int DSA_FLAG_CACHE_MONT_P = 1;

const int DSA_FLAG_NO_EXP_CONSTTIME = 0;

const int DSA_FLAG_FIPS_METHOD = 1024;

const int DSA_FLAG_NON_FIPS_ALLOW = 1024;

const int DSA_FLAG_FIPS_CHECKED = 2048;

const int DSS_prime_checks = 64;

const int EVP_PKEY_CTRL_DSA_PARAMGEN_BITS = 4097;

const int EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS = 4098;

const int EVP_PKEY_CTRL_DSA_PARAMGEN_MD = 4099;

const int SHA_LBLOCK = 16;

const int SHA_CBLOCK = 64;

const int SHA_LAST_BLOCK = 56;

const int SHA_DIGEST_LENGTH = 20;

const int SHA256_CBLOCK = 64;

const int SHA224_DIGEST_LENGTH = 28;

const int SHA256_DIGEST_LENGTH = 32;

const int SHA384_DIGEST_LENGTH = 48;

const int SHA512_DIGEST_LENGTH = 64;

const int SHA512_CBLOCK = 128;

const int X509_F_ADD_CERT_DIR = 100;

const int X509_F_BUILD_CHAIN = 106;

const int X509_F_BY_FILE_CTRL = 101;

const int X509_F_CHECK_NAME_CONSTRAINTS = 149;

const int X509_F_CHECK_POLICY = 145;

const int X509_F_DANE_I2D = 107;

const int X509_F_DIR_CTRL = 102;

const int X509_F_GET_CERT_BY_SUBJECT = 103;

const int X509_F_I2D_X509_AUX = 151;

const int X509_F_LOOKUP_CERTS_SK = 152;

const int X509_F_NETSCAPE_SPKI_B64_DECODE = 129;

const int X509_F_NETSCAPE_SPKI_B64_ENCODE = 130;

const int X509_F_NEW_DIR = 153;

const int X509_F_X509AT_ADD1_ATTR = 135;

const int X509_F_X509V3_ADD_EXT = 104;

const int X509_F_X509_ATTRIBUTE_CREATE_BY_NID = 136;

const int X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ = 137;

const int X509_F_X509_ATTRIBUTE_CREATE_BY_TXT = 140;

const int X509_F_X509_ATTRIBUTE_GET0_DATA = 139;

const int X509_F_X509_ATTRIBUTE_SET1_DATA = 138;

const int X509_F_X509_CHECK_PRIVATE_KEY = 128;

const int X509_F_X509_CRL_DIFF = 105;

const int X509_F_X509_CRL_METHOD_NEW = 154;

const int X509_F_X509_CRL_PRINT_FP = 147;

const int X509_F_X509_EXTENSION_CREATE_BY_NID = 108;

const int X509_F_X509_EXTENSION_CREATE_BY_OBJ = 109;

const int X509_F_X509_GET_PUBKEY_PARAMETERS = 110;

const int X509_F_X509_LOAD_CERT_CRL_FILE = 132;

const int X509_F_X509_LOAD_CERT_FILE = 111;

const int X509_F_X509_LOAD_CRL_FILE = 112;

const int X509_F_X509_LOOKUP_METH_NEW = 160;

const int X509_F_X509_LOOKUP_NEW = 155;

const int X509_F_X509_NAME_ADD_ENTRY = 113;

const int X509_F_X509_NAME_CANON = 156;

const int X509_F_X509_NAME_ENTRY_CREATE_BY_NID = 114;

const int X509_F_X509_NAME_ENTRY_CREATE_BY_TXT = 131;

const int X509_F_X509_NAME_ENTRY_SET_OBJECT = 115;

const int X509_F_X509_NAME_ONELINE = 116;

const int X509_F_X509_NAME_PRINT = 117;

const int X509_F_X509_OBJECT_NEW = 150;

const int X509_F_X509_PRINT_EX_FP = 118;

const int X509_F_X509_PUBKEY_DECODE = 148;

const int X509_F_X509_PUBKEY_GET = 161;

const int X509_F_X509_PUBKEY_GET0 = 119;

const int X509_F_X509_PUBKEY_SET = 120;

const int X509_F_X509_REQ_CHECK_PRIVATE_KEY = 144;

const int X509_F_X509_REQ_PRINT_EX = 121;

const int X509_F_X509_REQ_PRINT_FP = 122;

const int X509_F_X509_REQ_TO_X509 = 123;

const int X509_F_X509_STORE_ADD_CERT = 124;

const int X509_F_X509_STORE_ADD_CRL = 125;

const int X509_F_X509_STORE_ADD_LOOKUP = 157;

const int X509_F_X509_STORE_CTX_GET1_ISSUER = 146;

const int X509_F_X509_STORE_CTX_INIT = 143;

const int X509_F_X509_STORE_CTX_NEW = 142;

const int X509_F_X509_STORE_CTX_PURPOSE_INHERIT = 134;

const int X509_F_X509_STORE_NEW = 158;

const int X509_F_X509_TO_X509_REQ = 126;

const int X509_F_X509_TRUST_ADD = 133;

const int X509_F_X509_TRUST_SET = 141;

const int X509_F_X509_VERIFY_CERT = 127;

const int X509_F_X509_VERIFY_PARAM_NEW = 159;

const int X509_R_AKID_MISMATCH = 110;

const int X509_R_BAD_SELECTOR = 133;

const int X509_R_BAD_X509_FILETYPE = 100;

const int X509_R_BASE64_DECODE_ERROR = 118;

const int X509_R_CANT_CHECK_DH_KEY = 114;

const int X509_R_CERT_ALREADY_IN_HASH_TABLE = 101;

const int X509_R_CRL_ALREADY_DELTA = 127;

const int X509_R_CRL_VERIFY_FAILURE = 131;

const int X509_R_IDP_MISMATCH = 128;

const int X509_R_INVALID_ATTRIBUTES = 138;

const int X509_R_INVALID_DIRECTORY = 113;

const int X509_R_INVALID_FIELD_NAME = 119;

const int X509_R_INVALID_TRUST = 123;

const int X509_R_ISSUER_MISMATCH = 129;

const int X509_R_KEY_TYPE_MISMATCH = 115;

const int X509_R_KEY_VALUES_MISMATCH = 116;

const int X509_R_LOADING_CERT_DIR = 103;

const int X509_R_LOADING_DEFAULTS = 104;

const int X509_R_METHOD_NOT_SUPPORTED = 124;

const int X509_R_NAME_TOO_LONG = 134;

const int X509_R_NEWER_CRL_NOT_NEWER = 132;

const int X509_R_NO_CERTIFICATE_FOUND = 135;

const int X509_R_NO_CERTIFICATE_OR_CRL_FOUND = 136;

const int X509_R_NO_CERT_SET_FOR_US_TO_VERIFY = 105;

const int X509_R_NO_CRL_FOUND = 137;

const int X509_R_NO_CRL_NUMBER = 130;

const int X509_R_PUBLIC_KEY_DECODE_ERROR = 125;

const int X509_R_PUBLIC_KEY_ENCODE_ERROR = 126;

const int X509_R_SHOULD_RETRY = 106;

const int X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN = 107;

const int X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY = 108;

const int X509_R_UNKNOWN_KEY_TYPE = 117;

const int X509_R_UNKNOWN_NID = 109;

const int X509_R_UNKNOWN_PURPOSE_ID = 121;

const int X509_R_UNKNOWN_TRUST_ID = 120;

const int X509_R_UNSUPPORTED_ALGORITHM = 111;

const int X509_R_WRONG_LOOKUP_TYPE = 112;

const int X509_R_WRONG_TYPE = 122;

const int X509_SIG_INFO_VALID = 1;

const int X509_SIG_INFO_TLS = 2;

const int X509_FILETYPE_PEM = 1;

const int X509_FILETYPE_ASN1 = 2;

const int X509_FILETYPE_DEFAULT = 3;

const int X509v3_KU_DIGITAL_SIGNATURE = 128;

const int X509v3_KU_NON_REPUDIATION = 64;

const int X509v3_KU_KEY_ENCIPHERMENT = 32;

const int X509v3_KU_DATA_ENCIPHERMENT = 16;

const int X509v3_KU_KEY_AGREEMENT = 8;

const int X509v3_KU_KEY_CERT_SIGN = 4;

const int X509v3_KU_CRL_SIGN = 2;

const int X509v3_KU_ENCIPHER_ONLY = 1;

const int X509v3_KU_DECIPHER_ONLY = 32768;

const int X509v3_KU_UNDEF = 65535;

const int X509_EX_V_NETSCAPE_HACK = 32768;

const int X509_EX_V_INIT = 1;

const int X509_TRUST_DEFAULT = 0;

const int X509_TRUST_COMPAT = 1;

const int X509_TRUST_SSL_CLIENT = 2;

const int X509_TRUST_SSL_SERVER = 3;

const int X509_TRUST_EMAIL = 4;

const int X509_TRUST_OBJECT_SIGN = 5;

const int X509_TRUST_OCSP_SIGN = 6;

const int X509_TRUST_OCSP_REQUEST = 7;

const int X509_TRUST_TSA = 8;

const int X509_TRUST_MIN = 1;

const int X509_TRUST_MAX = 8;

const int X509_TRUST_DYNAMIC = 1;

const int X509_TRUST_DYNAMIC_NAME = 2;

const int X509_TRUST_NO_SS_COMPAT = 4;

const int X509_TRUST_DO_SS_COMPAT = 8;

const int X509_TRUST_OK_ANY_EKU = 16;

const int X509_TRUST_TRUSTED = 1;

const int X509_TRUST_REJECTED = 2;

const int X509_TRUST_UNTRUSTED = 3;

const int X509_FLAG_COMPAT = 0;

const int X509_FLAG_NO_HEADER = 1;

const int X509_FLAG_NO_VERSION = 2;

const int X509_FLAG_NO_SERIAL = 4;

const int X509_FLAG_NO_SIGNAME = 8;

const int X509_FLAG_NO_ISSUER = 16;

const int X509_FLAG_NO_VALIDITY = 32;

const int X509_FLAG_NO_SUBJECT = 64;

const int X509_FLAG_NO_PUBKEY = 128;

const int X509_FLAG_NO_EXTENSIONS = 256;

const int X509_FLAG_NO_SIGDUMP = 512;

const int X509_FLAG_NO_AUX = 1024;

const int X509_FLAG_NO_ATTRIBUTES = 2048;

const int X509_FLAG_NO_IDS = 4096;

const int XN_FLAG_SEP_MASK = 983040;

const int XN_FLAG_COMPAT = 0;

const int XN_FLAG_SEP_COMMA_PLUS = 65536;

const int XN_FLAG_SEP_CPLUS_SPC = 131072;

const int XN_FLAG_SEP_SPLUS_SPC = 196608;

const int XN_FLAG_SEP_MULTILINE = 262144;

const int XN_FLAG_DN_REV = 1048576;

const int XN_FLAG_FN_MASK = 6291456;

const int XN_FLAG_FN_SN = 0;

const int XN_FLAG_FN_LN = 2097152;

const int XN_FLAG_FN_OID = 4194304;

const int XN_FLAG_FN_NONE = 6291456;

const int XN_FLAG_SPC_EQ = 8388608;

const int XN_FLAG_DUMP_UNKNOWN_FIELDS = 16777216;

const int XN_FLAG_FN_ALIGN = 33554432;

const int XN_FLAG_RFC2253 = 17892119;

const int XN_FLAG_ONELINE = 8520479;

const int XN_FLAG_MULTILINE = 44302342;

const int X509_LU_RETRY = -1;

const int X509_LU_FAIL = 0;

const int X509_L_FILE_LOAD = 1;

const int X509_L_ADD_DIR = 2;

const int X509_V_OK = 0;

const int X509_V_ERR_UNSPECIFIED = 1;

const int X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT = 2;

const int X509_V_ERR_UNABLE_TO_GET_CRL = 3;

const int X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE = 4;

const int X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE = 5;

const int X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY = 6;

const int X509_V_ERR_CERT_SIGNATURE_FAILURE = 7;

const int X509_V_ERR_CRL_SIGNATURE_FAILURE = 8;

const int X509_V_ERR_CERT_NOT_YET_VALID = 9;

const int X509_V_ERR_CERT_HAS_EXPIRED = 10;

const int X509_V_ERR_CRL_NOT_YET_VALID = 11;

const int X509_V_ERR_CRL_HAS_EXPIRED = 12;

const int X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD = 13;

const int X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD = 14;

const int X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD = 15;

const int X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD = 16;

const int X509_V_ERR_OUT_OF_MEM = 17;

const int X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT = 18;

const int X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN = 19;

const int X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY = 20;

const int X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE = 21;

const int X509_V_ERR_CERT_CHAIN_TOO_LONG = 22;

const int X509_V_ERR_CERT_REVOKED = 23;

const int X509_V_ERR_INVALID_CA = 24;

const int X509_V_ERR_PATH_LENGTH_EXCEEDED = 25;

const int X509_V_ERR_INVALID_PURPOSE = 26;

const int X509_V_ERR_CERT_UNTRUSTED = 27;

const int X509_V_ERR_CERT_REJECTED = 28;

const int X509_V_ERR_SUBJECT_ISSUER_MISMATCH = 29;

const int X509_V_ERR_AKID_SKID_MISMATCH = 30;

const int X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH = 31;

const int X509_V_ERR_KEYUSAGE_NO_CERTSIGN = 32;

const int X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER = 33;

const int X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION = 34;

const int X509_V_ERR_KEYUSAGE_NO_CRL_SIGN = 35;

const int X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION = 36;

const int X509_V_ERR_INVALID_NON_CA = 37;

const int X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED = 38;

const int X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE = 39;

const int X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED = 40;

const int X509_V_ERR_INVALID_EXTENSION = 41;

const int X509_V_ERR_INVALID_POLICY_EXTENSION = 42;

const int X509_V_ERR_NO_EXPLICIT_POLICY = 43;

const int X509_V_ERR_DIFFERENT_CRL_SCOPE = 44;

const int X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE = 45;

const int X509_V_ERR_UNNESTED_RESOURCE = 46;

const int X509_V_ERR_PERMITTED_VIOLATION = 47;

const int X509_V_ERR_EXCLUDED_VIOLATION = 48;

const int X509_V_ERR_SUBTREE_MINMAX = 49;

const int X509_V_ERR_APPLICATION_VERIFICATION = 50;

const int X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE = 51;

const int X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX = 52;

const int X509_V_ERR_UNSUPPORTED_NAME_SYNTAX = 53;

const int X509_V_ERR_CRL_PATH_VALIDATION_ERROR = 54;

const int X509_V_ERR_PATH_LOOP = 55;

const int X509_V_ERR_SUITE_B_INVALID_VERSION = 56;

const int X509_V_ERR_SUITE_B_INVALID_ALGORITHM = 57;

const int X509_V_ERR_SUITE_B_INVALID_CURVE = 58;

const int X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM = 59;

const int X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED = 60;

const int X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256 = 61;

const int X509_V_ERR_HOSTNAME_MISMATCH = 62;

const int X509_V_ERR_EMAIL_MISMATCH = 63;

const int X509_V_ERR_IP_ADDRESS_MISMATCH = 64;

const int X509_V_ERR_DANE_NO_MATCH = 65;

const int X509_V_ERR_EE_KEY_TOO_SMALL = 66;

const int X509_V_ERR_CA_KEY_TOO_SMALL = 67;

const int X509_V_ERR_CA_MD_TOO_WEAK = 68;

const int X509_V_ERR_INVALID_CALL = 69;

const int X509_V_ERR_STORE_LOOKUP = 70;

const int X509_V_ERR_NO_VALID_SCTS = 71;

const int X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION = 72;

const int X509_V_ERR_OCSP_VERIFY_NEEDED = 73;

const int X509_V_ERR_OCSP_VERIFY_FAILED = 74;

const int X509_V_ERR_OCSP_CERT_UNKNOWN = 75;

const int X509_V_ERR_SIGNATURE_ALGORITHM_MISMATCH = 76;

const int X509_V_ERR_NO_ISSUER_PUBLIC_KEY = 77;

const int X509_V_ERR_UNSUPPORTED_SIGNATURE_ALGORITHM = 78;

const int X509_V_ERR_EC_KEY_EXPLICIT_PARAMS = 79;

const int X509_V_FLAG_CB_ISSUER_CHECK = 0;

const int X509_V_FLAG_USE_CHECK_TIME = 2;

const int X509_V_FLAG_CRL_CHECK = 4;

const int X509_V_FLAG_CRL_CHECK_ALL = 8;

const int X509_V_FLAG_IGNORE_CRITICAL = 16;

const int X509_V_FLAG_X509_STRICT = 32;

const int X509_V_FLAG_ALLOW_PROXY_CERTS = 64;

const int X509_V_FLAG_POLICY_CHECK = 128;

const int X509_V_FLAG_EXPLICIT_POLICY = 256;

const int X509_V_FLAG_INHIBIT_ANY = 512;

const int X509_V_FLAG_INHIBIT_MAP = 1024;

const int X509_V_FLAG_NOTIFY_POLICY = 2048;

const int X509_V_FLAG_EXTENDED_CRL_SUPPORT = 4096;

const int X509_V_FLAG_USE_DELTAS = 8192;

const int X509_V_FLAG_CHECK_SS_SIGNATURE = 16384;

const int X509_V_FLAG_TRUSTED_FIRST = 32768;

const int X509_V_FLAG_SUITEB_128_LOS_ONLY = 65536;

const int X509_V_FLAG_SUITEB_192_LOS = 131072;

const int X509_V_FLAG_SUITEB_128_LOS = 196608;

const int X509_V_FLAG_PARTIAL_CHAIN = 524288;

const int X509_V_FLAG_NO_ALT_CHAINS = 1048576;

const int X509_V_FLAG_NO_CHECK_TIME = 2097152;

const int X509_VP_FLAG_DEFAULT = 1;

const int X509_VP_FLAG_OVERWRITE = 2;

const int X509_VP_FLAG_RESET_FLAGS = 4;

const int X509_VP_FLAG_LOCKED = 8;

const int X509_VP_FLAG_ONCE = 16;

const int X509_V_FLAG_POLICY_MASK = 1920;

const int DANE_FLAG_NO_DANE_EE_NAMECHECKS = 1;

const int X509_PCY_TREE_FAILURE = -2;

const int X509_PCY_TREE_INVALID = -1;

const int X509_PCY_TREE_INTERNAL = 0;

const int X509_PCY_TREE_VALID = 1;

const int X509_PCY_TREE_EMPTY = 2;

const int X509_PCY_TREE_EXPLICIT = 4;

const int PKCS7_F_DO_PKCS7_SIGNED_ATTRIB = 136;

const int PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME = 135;

const int PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP = 118;

const int PKCS7_F_PKCS7_ADD_CERTIFICATE = 100;

const int PKCS7_F_PKCS7_ADD_CRL = 101;

const int PKCS7_F_PKCS7_ADD_RECIPIENT_INFO = 102;

const int PKCS7_F_PKCS7_ADD_SIGNATURE = 131;

const int PKCS7_F_PKCS7_ADD_SIGNER = 103;

const int PKCS7_F_PKCS7_BIO_ADD_DIGEST = 125;

const int PKCS7_F_PKCS7_COPY_EXISTING_DIGEST = 138;

const int PKCS7_F_PKCS7_CTRL = 104;

const int PKCS7_F_PKCS7_DATADECODE = 112;

const int PKCS7_F_PKCS7_DATAFINAL = 128;

const int PKCS7_F_PKCS7_DATAINIT = 105;

const int PKCS7_F_PKCS7_DATAVERIFY = 107;

const int PKCS7_F_PKCS7_DECRYPT = 114;

const int PKCS7_F_PKCS7_DECRYPT_RINFO = 133;

const int PKCS7_F_PKCS7_ENCODE_RINFO = 132;

const int PKCS7_F_PKCS7_ENCRYPT = 115;

const int PKCS7_F_PKCS7_FINAL = 134;

const int PKCS7_F_PKCS7_FIND_DIGEST = 127;

const int PKCS7_F_PKCS7_GET0_SIGNERS = 124;

const int PKCS7_F_PKCS7_RECIP_INFO_SET = 130;

const int PKCS7_F_PKCS7_SET_CIPHER = 108;

const int PKCS7_F_PKCS7_SET_CONTENT = 109;

const int PKCS7_F_PKCS7_SET_DIGEST = 126;

const int PKCS7_F_PKCS7_SET_TYPE = 110;

const int PKCS7_F_PKCS7_SIGN = 116;

const int PKCS7_F_PKCS7_SIGNATUREVERIFY = 113;

const int PKCS7_F_PKCS7_SIGNER_INFO_SET = 129;

const int PKCS7_F_PKCS7_SIGNER_INFO_SIGN = 139;

const int PKCS7_F_PKCS7_SIGN_ADD_SIGNER = 137;

const int PKCS7_F_PKCS7_SIMPLE_SMIMECAP = 119;

const int PKCS7_F_PKCS7_VERIFY = 117;

const int PKCS7_R_CERTIFICATE_VERIFY_ERROR = 117;

const int PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER = 144;

const int PKCS7_R_CIPHER_NOT_INITIALIZED = 116;

const int PKCS7_R_CONTENT_AND_DATA_PRESENT = 118;

const int PKCS7_R_CTRL_ERROR = 152;

const int PKCS7_R_DECRYPT_ERROR = 119;

const int PKCS7_R_DIGEST_FAILURE = 101;

const int PKCS7_R_ENCRYPTION_CTRL_FAILURE = 149;

const int PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE = 150;

const int PKCS7_R_ERROR_ADDING_RECIPIENT = 120;

const int PKCS7_R_ERROR_SETTING_CIPHER = 121;

const int PKCS7_R_INVALID_NULL_POINTER = 143;

const int PKCS7_R_INVALID_SIGNED_DATA_TYPE = 155;

const int PKCS7_R_NO_CONTENT = 122;

const int PKCS7_R_NO_DEFAULT_DIGEST = 151;

const int PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND = 154;

const int PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE = 115;

const int PKCS7_R_NO_SIGNATURES_ON_DATA = 123;

const int PKCS7_R_NO_SIGNERS = 142;

const int PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE = 104;

const int PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR = 124;

const int PKCS7_R_PKCS7_ADD_SIGNER_ERROR = 153;

const int PKCS7_R_PKCS7_DATASIGN = 145;

const int PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE = 127;

const int PKCS7_R_SIGNATURE_FAILURE = 105;

const int PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND = 128;

const int PKCS7_R_SIGNING_CTRL_FAILURE = 147;

const int PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE = 148;

const int PKCS7_R_SMIME_TEXT_ERROR = 129;

const int PKCS7_R_UNABLE_TO_FIND_CERTIFICATE = 106;

const int PKCS7_R_UNABLE_TO_FIND_MEM_BIO = 107;

const int PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST = 108;

const int PKCS7_R_UNKNOWN_DIGEST_TYPE = 109;

const int PKCS7_R_UNKNOWN_OPERATION = 110;

const int PKCS7_R_UNSUPPORTED_CIPHER_TYPE = 111;

const int PKCS7_R_UNSUPPORTED_CONTENT_TYPE = 112;

const int PKCS7_R_WRONG_CONTENT_TYPE = 113;

const int PKCS7_R_WRONG_PKCS7_TYPE = 114;

const int PKCS7_S_HEADER = 0;

const int PKCS7_S_BODY = 1;

const int PKCS7_S_TAIL = 2;

const int PKCS7_OP_SET_DETACHED_SIGNATURE = 1;

const int PKCS7_OP_GET_DETACHED_SIGNATURE = 2;

const int PKCS7_TEXT = 1;

const int PKCS7_NOCERTS = 2;

const int PKCS7_NOSIGS = 4;

const int PKCS7_NOCHAIN = 8;

const int PKCS7_NOINTERN = 16;

const int PKCS7_NOVERIFY = 32;

const int PKCS7_DETACHED = 64;

const int PKCS7_BINARY = 128;

const int PKCS7_NOATTR = 256;

const int PKCS7_NOSMIMECAP = 512;

const int PKCS7_NOOLDMIMETYPE = 1024;

const int PKCS7_CRLFEOL = 2048;

const int PKCS7_STREAM = 4096;

const int PKCS7_NOCRL = 8192;

const int PKCS7_PARTIAL = 16384;

const int PKCS7_REUSE_DIGEST = 32768;

const int PKCS7_NO_DUAL_CONTENT = 65536;

const int SMIME_TEXT = 1;

const int SMIME_NOCERTS = 2;

const int SMIME_NOSIGS = 4;

const int SMIME_NOCHAIN = 8;

const int SMIME_NOINTERN = 16;

const int SMIME_NOVERIFY = 32;

const int SMIME_DETACHED = 64;

const int SMIME_BINARY = 128;

const int SMIME_NOATTR = 256;

const int SMIME_ASCIICRLF = 524288;

const int X509_EXT_PACK_UNKNOWN = 1;

const int X509_EXT_PACK_STRING = 2;

const int PEM_F_B2I_DSS = 127;

const int PEM_F_B2I_PVK_BIO = 128;

const int PEM_F_B2I_RSA = 129;

const int PEM_F_CHECK_BITLEN_DSA = 130;

const int PEM_F_CHECK_BITLEN_RSA = 131;

const int PEM_F_D2I_PKCS8PRIVATEKEY_BIO = 120;

const int PEM_F_D2I_PKCS8PRIVATEKEY_FP = 121;

const int PEM_F_DO_B2I = 132;

const int PEM_F_DO_B2I_BIO = 133;

const int PEM_F_DO_BLOB_HEADER = 134;

const int PEM_F_DO_I2B = 146;

const int PEM_F_DO_PK8PKEY = 126;

const int PEM_F_DO_PK8PKEY_FP = 125;

const int PEM_F_DO_PVK_BODY = 135;

const int PEM_F_DO_PVK_HEADER = 136;

const int PEM_F_GET_HEADER_AND_DATA = 143;

const int PEM_F_GET_NAME = 144;

const int PEM_F_I2B_PVK = 137;

const int PEM_F_I2B_PVK_BIO = 138;

const int PEM_F_LOAD_IV = 101;

const int PEM_F_PEM_ASN1_READ = 102;

const int PEM_F_PEM_ASN1_READ_BIO = 103;

const int PEM_F_PEM_ASN1_WRITE = 104;

const int PEM_F_PEM_ASN1_WRITE_BIO = 105;

const int PEM_F_PEM_DEF_CALLBACK = 100;

const int PEM_F_PEM_DO_HEADER = 106;

const int PEM_F_PEM_GET_EVP_CIPHER_INFO = 107;

const int PEM_F_PEM_READ = 108;

const int PEM_F_PEM_READ_BIO = 109;

const int PEM_F_PEM_READ_BIO_DHPARAMS = 141;

const int PEM_F_PEM_READ_BIO_EX = 145;

const int PEM_F_PEM_READ_BIO_PARAMETERS = 140;

const int PEM_F_PEM_READ_BIO_PRIVATEKEY = 123;

const int PEM_F_PEM_READ_DHPARAMS = 142;

const int PEM_F_PEM_READ_PRIVATEKEY = 124;

const int PEM_F_PEM_SIGNFINAL = 112;

const int PEM_F_PEM_WRITE = 113;

const int PEM_F_PEM_WRITE_BIO = 114;

const int PEM_F_PEM_WRITE_BIO_PRIVATEKEY_TRADITIONAL = 147;

const int PEM_F_PEM_WRITE_PRIVATEKEY = 139;

const int PEM_F_PEM_X509_INFO_READ = 115;

const int PEM_F_PEM_X509_INFO_READ_BIO = 116;

const int PEM_F_PEM_X509_INFO_WRITE_BIO = 117;

const int PEM_R_BAD_BASE64_DECODE = 100;

const int PEM_R_BAD_DECRYPT = 101;

const int PEM_R_BAD_END_LINE = 102;

const int PEM_R_BAD_IV_CHARS = 103;

const int PEM_R_BAD_MAGIC_NUMBER = 116;

const int PEM_R_BAD_PASSWORD_READ = 104;

const int PEM_R_BAD_VERSION_NUMBER = 117;

const int PEM_R_BIO_WRITE_FAILURE = 118;

const int PEM_R_CIPHER_IS_NULL = 127;

const int PEM_R_ERROR_CONVERTING_PRIVATE_KEY = 115;

const int PEM_R_EXPECTING_PRIVATE_KEY_BLOB = 119;

const int PEM_R_EXPECTING_PUBLIC_KEY_BLOB = 120;

const int PEM_R_HEADER_TOO_LONG = 128;

const int PEM_R_INCONSISTENT_HEADER = 121;

const int PEM_R_KEYBLOB_HEADER_PARSE_ERROR = 122;

const int PEM_R_KEYBLOB_TOO_SHORT = 123;

const int PEM_R_MISSING_DEK_IV = 129;

const int PEM_R_NOT_DEK_INFO = 105;

const int PEM_R_NOT_ENCRYPTED = 106;

const int PEM_R_NOT_PROC_TYPE = 107;

const int PEM_R_NO_START_LINE = 108;

const int PEM_R_PROBLEMS_GETTING_PASSWORD = 109;

const int PEM_R_PVK_DATA_TOO_SHORT = 124;

const int PEM_R_PVK_TOO_SHORT = 125;

const int PEM_R_READ_KEY = 111;

const int PEM_R_SHORT_HEADER = 112;

const int PEM_R_UNEXPECTED_DEK_IV = 130;

const int PEM_R_UNSUPPORTED_CIPHER = 113;

const int PEM_R_UNSUPPORTED_ENCRYPTION = 114;

const int PEM_R_UNSUPPORTED_KEY_COMPONENTS = 126;

const int PEM_R_UNSUPPORTED_PUBLIC_KEY_TYPE = 110;

const int PEM_BUFSIZE = 1024;

const String PEM_STRING_X509_OLD = 'X509 CERTIFICATE';

const String PEM_STRING_X509 = 'CERTIFICATE';

const String PEM_STRING_X509_TRUSTED = 'TRUSTED CERTIFICATE';

const String PEM_STRING_X509_REQ_OLD = 'NEW CERTIFICATE REQUEST';

const String PEM_STRING_X509_REQ = 'CERTIFICATE REQUEST';

const String PEM_STRING_X509_CRL = 'X509 CRL';

const String PEM_STRING_EVP_PKEY = 'ANY PRIVATE KEY';

const String PEM_STRING_PUBLIC = 'PUBLIC KEY';

const String PEM_STRING_RSA = 'RSA PRIVATE KEY';

const String PEM_STRING_RSA_PUBLIC = 'RSA PUBLIC KEY';

const String PEM_STRING_DSA = 'DSA PRIVATE KEY';

const String PEM_STRING_DSA_PUBLIC = 'DSA PUBLIC KEY';

const String PEM_STRING_PKCS7 = 'PKCS7';

const String PEM_STRING_PKCS7_SIGNED = 'PKCS #7 SIGNED DATA';

const String PEM_STRING_PKCS8 = 'ENCRYPTED PRIVATE KEY';

const String PEM_STRING_PKCS8INF = 'PRIVATE KEY';

const String PEM_STRING_DHPARAMS = 'DH PARAMETERS';

const String PEM_STRING_DHXPARAMS = 'X9.42 DH PARAMETERS';

const String PEM_STRING_SSL_SESSION = 'SSL SESSION PARAMETERS';

const String PEM_STRING_DSAPARAMS = 'DSA PARAMETERS';

const String PEM_STRING_ECDSA_PUBLIC = 'ECDSA PUBLIC KEY';

const String PEM_STRING_ECPARAMETERS = 'EC PARAMETERS';

const String PEM_STRING_ECPRIVATEKEY = 'EC PRIVATE KEY';

const String PEM_STRING_PARAMETERS = 'PARAMETERS';

const String PEM_STRING_CMS = 'CMS';

const int PEM_TYPE_ENCRYPTED = 10;

const int PEM_TYPE_MIC_ONLY = 20;

const int PEM_TYPE_MIC_CLEAR = 30;

const int PEM_TYPE_CLEAR = 40;

const int PEM_FLAG_SECURE = 1;

const int PEM_FLAG_EAY_COMPATIBLE = 2;

const int PEM_FLAG_ONLY_B64 = 4;

const int UI_F_CLOSE_CONSOLE = 115;

const int UI_F_ECHO_CONSOLE = 116;

const int UI_F_GENERAL_ALLOCATE_BOOLEAN = 108;

const int UI_F_GENERAL_ALLOCATE_PROMPT = 109;

const int UI_F_NOECHO_CONSOLE = 117;

const int UI_F_OPEN_CONSOLE = 114;

const int UI_F_UI_CONSTRUCT_PROMPT = 121;

const int UI_F_UI_CREATE_METHOD = 112;

const int UI_F_UI_CTRL = 111;

const int UI_F_UI_DUP_ERROR_STRING = 101;

const int UI_F_UI_DUP_INFO_STRING = 102;

const int UI_F_UI_DUP_INPUT_BOOLEAN = 110;

const int UI_F_UI_DUP_INPUT_STRING = 103;

const int UI_F_UI_DUP_USER_DATA = 118;

const int UI_F_UI_DUP_VERIFY_STRING = 106;

const int UI_F_UI_GET0_RESULT = 107;

const int UI_F_UI_GET_RESULT_LENGTH = 119;

const int UI_F_UI_NEW_METHOD = 104;

const int UI_F_UI_PROCESS = 113;

const int UI_F_UI_SET_RESULT = 105;

const int UI_F_UI_SET_RESULT_EX = 120;

const int UI_R_COMMON_OK_AND_CANCEL_CHARACTERS = 104;

const int UI_R_INDEX_TOO_LARGE = 102;

const int UI_R_INDEX_TOO_SMALL = 103;

const int UI_R_NO_RESULT_BUFFER = 105;

const int UI_R_PROCESSING_ERROR = 107;

const int UI_R_RESULT_TOO_LARGE = 100;

const int UI_R_RESULT_TOO_SMALL = 101;

const int UI_R_SYSASSIGN_ERROR = 109;

const int UI_R_SYSDASSGN_ERROR = 110;

const int UI_R_SYSQIOW_ERROR = 111;

const int UI_R_UNKNOWN_CONTROL_COMMAND = 106;

const int UI_R_UNKNOWN_TTYGET_ERRNO_VALUE = 108;

const int UI_R_USER_DATA_DUPLICATION_UNSUPPORTED = 112;

const int UI_INPUT_FLAG_ECHO = 1;

const int UI_INPUT_FLAG_DEFAULT_PWD = 2;

const int UI_INPUT_FLAG_USER_BASE = 16;

const int UI_CTRL_PRINT_ERRORS = 1;

const int UI_CTRL_IS_REDOABLE = 2;
